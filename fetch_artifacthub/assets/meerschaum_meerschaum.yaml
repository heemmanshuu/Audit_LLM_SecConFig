---
# Source: meerschaum/templates/mrsm-api-root-persistentvolumeclaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-meerschaum
  labels:
    app.kubernetes.io/name: meerschaum
    helm.sh/chart: meerschaum-0.1.3
    app.kubernetes.io/instance: my-meerschaum
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: meerschaum
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "3Gi"
status: {}
---
# Source: meerschaum/templates/mrsm-api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-meerschaum
  labels:
    helm.sh/chart: meerschaum-0.1.3
    app.kubernetes.io/name: meerschaum
    app.kubernetes.io/instance: my-meerschaum
    app.kubernetes.io/version: "2.1.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: meerschaum
    app.kubernetes.io/instance: my-meerschaum
---
# Source: meerschaum/templates/mrsm-api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-meerschaum
  labels:
    helm.sh/chart: meerschaum-0.1.3
    app.kubernetes.io/name: meerschaum
    app.kubernetes.io/instance: my-meerschaum
    app.kubernetes.io/version: "2.1.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: meerschaum
      app.kubernetes.io/instance: my-meerschaum
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: meerschaum
        app.kubernetes.io/instance: my-meerschaum
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - args:
          - "start"
          - "api"
          - "--production"
          - "--port"
          - "8000"
          env:
            - name: MRSM_CONFIG
              value: "{\"meerschaum\":{\"api_instance\":\"sql:prod\",\"connectors\":{\"sql\":{\"prod\":{\"uri\":\"sqlite:////meerschaum/sqlite/prod.db\"}}},\"instance\":\"sql:prod\"}}"
          image: bmeares/meerschaum:2.1.6
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8000
              httpHeaders:
                - name: Host
                  value: "127.0.0.1"
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8000
              httpHeaders:
                - name: Host
                  value: "127.0.0.1"
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 6
          name: my-meerschaum
          ports:
            - containerPort: 8000
              hostPort: 8000
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /meerschaum
              name: meerschaum-data
          securityContext:
            allowPrivilegeEscalation: false
      restartPolicy: Always
      volumes:
        - name: meerschaum-data
          persistentVolumeClaim:
            claimName: my-meerschaum
status: {}
---
# Source: meerschaum/templates/mrsm-api-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-meerschaum
  labels:
    helm.sh/chart: meerschaum-0.1.3
    app.kubernetes.io/name: meerschaum
    app.kubernetes.io/instance: my-meerschaum
    app.kubernetes.io/version: "2.1.6"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - "localhost"
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-meerschaum
                port:
                  number: 8000
