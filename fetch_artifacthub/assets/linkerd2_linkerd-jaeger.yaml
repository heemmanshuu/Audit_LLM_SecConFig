---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### collector RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: collector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### jaeger RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger
  namespace: default
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: jaeger-injector-k8s-tls
  namespace: default
  labels:
    linkerd.io/extension: jaeger
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lSQU9IRmtpaWtVVzFTM3JpeElvTUV1ell3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXhNYmFtRmxaMlZ5TFdsdWFtVmpkRzl5TG1SbFptRjFiSFF1YzNaak1CNFhEVEkwTURreApOakE0TVRFeU5Gb1hEVEkxTURreE5qQTRNVEV5TkZvd0pqRWtNQ0lHQTFVRUF4TWJhbUZsWjJWeUxXbHVhbVZqCmRHOXlMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKcDFERkcrZGNhYnNGdlo0NHZ4WDZvVkoyZURiazVJbUpBMlJPb05tUDRjQUdzalI1V2ZIcFRsQzRtOUF6VTRmWgo0OXExcTVJcWgrSXI4azVuU3RpL1p2cVdSYzA5eU1HTHJJMVluVFA5OHRGQ2xyOVJOUjg4WXZ2eW13aGNOd0JtCkplZGg4ZUFSK1lPbUtJNlhreTl3NjFaNlo4bGxmZEJsOUs0QUF4WVh0aGFCUEM5UEJDOGlxUDVvVTVwdEtONEYKV3VNS2ZJdU8yK3d0dzd2cG13cEd4MU5QSGVFamt5QWtLM3FtNkp4QWlmSjl5aTNBRHVTZ2Qybnd2QkxwaTByVQo4WXVTVE9YTjdYRzluMHNoc3FHOGJHUERRUHhCUytIa2g5TzFZWW51NTEyMFRkb3dJbTdxdHgwRTg5QzAwWmY1CkdpSS9iTjc1QzdNK0dFSk9IZWtiRHdJREFRQUJvMmN3WlRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0pnWURWUjBSQkI4dwpIWUliYW1GbFoyVnlMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQ1pNeURDYW5xSWtGN2pWM3Z5bjZTOEpabFdRRmpidlZ3c1VwUFRQWDZVRlRPSUxBYWNHaktROVFMeW1LNC8KWXZJd0NJNGhmOG1kempkVTY2KzI0OFRzTWR4SHRCczdrMGpSVWxLWFAzRTZxTXJVVHkwM3ovQ1JIQlFNSWxzMwpybkowV1hrRUU0Uk9OWllSRjlvc0dCcEF3dFFIM1RWNWVyRWQyN3cxcm41T3N0WWxHZkxCQmRuUUFocXd1dEpZCjFIM0pQdUpzWUc1MEZGT29wUXhkU0dGQkUzSjVXUXJLbXdrYnU0RHlHT1dmWFN0dDJZVGlPSDJ0T0t0STRsWW0KU1ZkSEQ5YTdpSG9VQ3lBNmlTeXcrNDFNaitNeUE5ZngwOXMzNk5KblR3M084eWJlTlBHRHZNb3ZjdndxNEdNTwpvNnZvTko3bjBtRXg3Qkg5M0VNc2xxaDMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcDFERkcrZGNhYnNGdlo0NHZ4WDZvVkoyZURiazVJbUpBMlJPb05tUDRjQUdzalI1CldmSHBUbEM0bTlBelU0Zlo0OXExcTVJcWgrSXI4azVuU3RpL1p2cVdSYzA5eU1HTHJJMVluVFA5OHRGQ2xyOVIKTlI4OFl2dnltd2hjTndCbUplZGg4ZUFSK1lPbUtJNlhreTl3NjFaNlo4bGxmZEJsOUs0QUF4WVh0aGFCUEM5UApCQzhpcVA1b1U1cHRLTjRGV3VNS2ZJdU8yK3d0dzd2cG13cEd4MU5QSGVFamt5QWtLM3FtNkp4QWlmSjl5aTNBCkR1U2dkMm53dkJMcGkwclU4WXVTVE9YTjdYRzluMHNoc3FHOGJHUERRUHhCUytIa2g5TzFZWW51NTEyMFRkb3cKSW03cXR4MEU4OUMwMFpmNUdpSS9iTjc1QzdNK0dFSk9IZWtiRHdJREFRQUJBb0lCQVFDQVhLZ01BMURUME9iVApsWnFGaHpBMEtkYTMzYTEzWThqWThGQ2VlS3M1RDZCVGdZeUVJK0xROFg3Z0V6ZjlZcUVZZlFlWmJGYnl6dUxXClQ2NVJMcjZSRzdqRUxuU3pHMEcwRFBDcUVtUkdzS0o4a3FTVHM3WVpYcCsrcndoSUxpY3Y5emNlWU1DSmc2V3IKUWRJcDJtQ3dQRFZHZ0swN2UvRnNhVDJiSUl6cVpWVTVJQnEvUlJzeGxoVjBUam0wcW1mT3NmMnVxcVdjZzRzVwo3RXdHNU0xZUtoS1BoMVQyK0QwRE1CM3p4Nk9oR1FleUpWd3FxREs0c2RCR3YyUW1HcmQ2QUlXQTNuNGViSVgxCnhPeDFIRmNSaHhtRys3S0pPTWtaRVdIWTZhUHRQN1lKTHYxOUJwZTd2ZEdzUllNb0V3NUlMT1A5WjYraWhKSXUKaDZPRklzT0JBb0dCQU1DWVl2eEN3Sm1xblJKcGxZeGZjVnFGbmxlWllOWG4rejMxckVZR1lCY09nUHpwSkJqcwpDMmxiVFF6MjltQzJEc3hDRXJPSFBrYjJvSEl4QnBXOVQ4bkNYemZ0c2V6aVhZYU5ZbnVIdlg5SDFuOHZ3T0lZCmJQazZ3NFRIejlTaEttMktpY3lTQ1FrZWFiVm40Rmt0bWwrUGtXcjNKN2djaWFLOWlDbUN1b3pQQW9HQkFONWwKMk53QjlVNmdFVHE3dG5KNlpHdnZxTG5wRVB6NGVoc3RoQ2U0eFNadllOUzhhMjVkWTY0VkFXME9tSUJ4ZGVlVAo5clFlay9KYVpoeWFoS0hIbnpiRHZhRDFyZk14K2JZaENxVDhjbllXZVFRd0ZLbTR6eE1FSTVsek9NMXo4SnhjCi81ZVlUTG1VZWdpSXBoY0NFUnZpZ0c4bFdNVFNGQXp6eStXbzlwM0JBb0dCQUlLcTRQMmxqR2ExaXJ2alJzTm0KUGRIY3RnRlkzb3BDU2dOUG13SW5jU296ZlBBYWZaTXJFdEw0VHQ1czc5dk5xVnlMdDRSMlRacDMyWU9nSDRlWQpXWG5abGlDcjgvdHoyV0JnckdDRFI5NERMMVE3WWZJRUFHdFhveStESVU1eHlnZG41dllVWG0wQlpWYmVreWZ0CitMNjgrVHhKVTNsbVl6czJ2QnJ0eHdPaEFvR0JBTUJXcHRtSFhBYzJ5Zy9Zbmk2ZGlWSU1BQWxnOXc5Qk9pRmQKR1FsZGRDd01jVnNxNVdLYXBBVy9KdStSaXZTeXE3eXZLOUtWQzNDekc5S3JFLy95YTlEcU1vc05UdmFnQncycgp2OC8yZ0d0K2ZnVFFMRjZvZFhaRnd5QUlGVjBpWXpwbjk2aTh6OFpFRWRKbGsvY2NFMzNoUXlCYzFVdkxRQW4vCm94eXBKemhCQW9HQUl6YnJwTm9wVSthZWNRZUFvNUNUSm5qVUY2bUZCcjhxNDdCclFsSGI5ckViWUdDUEZ0Z3AKN3cvWGY5Yk8xM1hUNnFsUjdaUHlrdzNPNnV0djZvVGljd0R3MGo1Vm1vRWVnKzNvMWdYaFhxY2FnbVBhRVczagpMK2V3MXJyVWJockNkTUpsa3hiR2pwREJsaWZtMmoza1Zod2FISHNFYXcxK2VxUzVKcW5CZGFRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Collector Service
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: collector
data:
  collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      opencensus:
      zipkin:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
          thrift_binary:
    processors:
      batch:
    extensions:
      health_check:
    exporters:
      jaeger:
        endpoint: jaeger.${POD_NAMESPACE}:14250
        tls:
          insecure: true
    service:
      extensions: [health_check]
      pipelines:
        traces:
          receivers: [otlp,opencensus,zipkin,jaeger]
          processors: [batch]
          exporters: [jaeger]
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### Jaeger Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: jaeger-injector
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-jaeger-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
kind: Service
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  ports:
  - name: jaeger-injector
    port: 443
    targetPort: jaeger-injector
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: opencensus
    port: 55678
    protocol: TCP
    targetPort: 55678
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-thrift
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    component: collector
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Jaeger Service
###
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
spec:
  type: ClusterIP
  selector:
    component: jaeger
  ports:
    - name: collection
      port: 14268
    - name: grpc
      port: 14250
    - name: ui
      port: 16686
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
###
### Jaeger Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: jaeger-injector
  name: jaeger-injector
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  template:
    metadata:
      annotations:
        checksum/config: dda1de337a0a7ffd8b674fde60b6a631f94cfbc91615e9d36386380017914669
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -collector-svc-addr=collector.linkerd-jaeger:55678
        - -collector-svc-account=collector
        - -log-level=info
        - -cluster-domain=cluster.local
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/jaeger-webhook:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: jaeger-injector
        ports:
        - containerPort: 8443
          name: jaeger-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        resources:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger-injector
      volumes:
      - name: tls
        secret:
          secretName: jaeger-injector-k8s-tls
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: collector
    app.kubernetes.io/part-of: Linkerd
    component: collector
  name: collector
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      component: collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        prometheus.io/path: /metrics
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: collector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - command:
        - /otelcol
        - --config=/conf/collector-config.yaml
        env:
        - name: GOGC
          value: "80"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: otel/opentelemetry-collector:0.59.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: ot-collector
        ports:
        - containerPort: 13133
        - containerPort: 4317
        - containerPort: 4318
        - containerPort: 55678
        - containerPort: 9411
        - containerPort: 14268
        - containerPort: 14250
        - containerPort: 8888
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /conf
          name: collector-config-val
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: collector
      volumes:
      - configMap:
          items:
          - key: collector-config
            path: collector-config.yaml
          name: collector-config
        name: collector-config-val
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: Linkerd
    component: jaeger
  name: jaeger
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      component: jaeger
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        prometheus.io/path: /metrics
        prometheus.io/port: "14269"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --query.base-path=/jaeger
        image: jaegertracing/all-in-one:1.31
        imagePullPolicy: Always
        name: jaeger
        ports:
        - containerPort: 14269
          name: admin
        - containerPort: 14268
          name: collection
        - containerPort: 14250
          name: grpc
        - containerPort: 16686
          name: ui
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      dnsPolicy: ClusterFirst
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp-http
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-opencensus
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-zipkin
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-thrift
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-grpc
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-grpc
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: collector
      namespace: default
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-admin
  requiredAuthenticationRefs:
    # if not using linkerd-viz' prometheus, replace its SA here
    - kind: ServiceAccount
      name: prometheus
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-ui
  requiredAuthenticationRefs:
    # for the optional dashboard integration
    - kind: ServiceAccount
      name: web
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-jaeger-injector-webhook-config
  labels:
    linkerd.io/extension: jaeger
webhooks:
- name: jaeger-injector.linkerd.io
  clientConfig:
    service:
      name: jaeger-injector
      namespace: default
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lSQU9IRmtpaWtVVzFTM3JpeElvTUV1ell3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXhNYmFtRmxaMlZ5TFdsdWFtVmpkRzl5TG1SbFptRjFiSFF1YzNaak1CNFhEVEkwTURreApOakE0TVRFeU5Gb1hEVEkxTURreE5qQTRNVEV5TkZvd0pqRWtNQ0lHQTFVRUF4TWJhbUZsWjJWeUxXbHVhbVZqCmRHOXlMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKcDFERkcrZGNhYnNGdlo0NHZ4WDZvVkoyZURiazVJbUpBMlJPb05tUDRjQUdzalI1V2ZIcFRsQzRtOUF6VTRmWgo0OXExcTVJcWgrSXI4azVuU3RpL1p2cVdSYzA5eU1HTHJJMVluVFA5OHRGQ2xyOVJOUjg4WXZ2eW13aGNOd0JtCkplZGg4ZUFSK1lPbUtJNlhreTl3NjFaNlo4bGxmZEJsOUs0QUF4WVh0aGFCUEM5UEJDOGlxUDVvVTVwdEtONEYKV3VNS2ZJdU8yK3d0dzd2cG13cEd4MU5QSGVFamt5QWtLM3FtNkp4QWlmSjl5aTNBRHVTZ2Qybnd2QkxwaTByVQo4WXVTVE9YTjdYRzluMHNoc3FHOGJHUERRUHhCUytIa2g5TzFZWW51NTEyMFRkb3dJbTdxdHgwRTg5QzAwWmY1CkdpSS9iTjc1QzdNK0dFSk9IZWtiRHdJREFRQUJvMmN3WlRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0pnWURWUjBSQkI4dwpIWUliYW1GbFoyVnlMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQ1pNeURDYW5xSWtGN2pWM3Z5bjZTOEpabFdRRmpidlZ3c1VwUFRQWDZVRlRPSUxBYWNHaktROVFMeW1LNC8KWXZJd0NJNGhmOG1kempkVTY2KzI0OFRzTWR4SHRCczdrMGpSVWxLWFAzRTZxTXJVVHkwM3ovQ1JIQlFNSWxzMwpybkowV1hrRUU0Uk9OWllSRjlvc0dCcEF3dFFIM1RWNWVyRWQyN3cxcm41T3N0WWxHZkxCQmRuUUFocXd1dEpZCjFIM0pQdUpzWUc1MEZGT29wUXhkU0dGQkUzSjVXUXJLbXdrYnU0RHlHT1dmWFN0dDJZVGlPSDJ0T0t0STRsWW0KU1ZkSEQ5YTdpSG9VQ3lBNmlTeXcrNDFNaitNeUE5ZngwOXMzNk5KblR3M084eWJlTlBHRHZNb3ZjdndxNEdNTwpvNnZvTko3bjBtRXg3Qkg5M0VNc2xxaDMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: default
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs the kube-api
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: jaeger-injector-webhook
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: jaeger-injector
  proxyProtocol: TLS
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4317
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4318
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 55678
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 9411
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14268
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14250
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: collector-admin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 13133
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: grpc
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: admin
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: ui
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "patch"]
  resourceNames: ["default"]
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: linkerd
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: jaeger-namespace-metadata-linkerd-config
roleRef:
  kind: Role
  name: ext-namespace-metadata-linkerd-config
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-jaeger/templates/namespace-metadata.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
  name: namespace-metadata
  namespace: default
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: disabled
      labels:
        linkerd.io/extension: jaeger
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: stable-2.14.10
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: namespace-metadata
      containers:
      - name: namespace-metadata
        image: cr.l5d.io/linkerd/extension-init:v0.1.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        args:
        - --extension
        - jaeger
        - --namespace
        - default
        - --linkerd-namespace
        - linkerd
