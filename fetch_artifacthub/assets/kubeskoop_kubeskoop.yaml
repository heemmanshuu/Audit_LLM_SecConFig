---
# Source: kubeskoop/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeskoop-config
  namespace: default
data:
  config.yaml: |-
    debugmode: 
    port: 9102
    enableController: true
    metrics:
      probes:
      - name: conntrack
      - name: qdisc
      - name: netdev
      - name: io
      - name: sock
      - name: tcpsummary
      - name: tcp
      - name: tcpext
      - name: udp
      - name: packetloss
      - args:
          enablePortInLabel: false
        name: flow
      - name: tcpretrans
    event:
      probes:
      - name: tcpreset
      - args:
          enableStack: false
        name: packetloss
      - name: tcpretrans
      sinks:
      - name: stderr
---
# Source: kubeskoop/templates/controller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: controller-config
  namespace: default
data:
  controller.yaml: |-
    logLevel: debug
    server:
      httpPort: 10264
      agentPort: 10263
    controller:
      namespace: default
      prometheus: "http://prometheus-service"
      loki: "http://loki-service:3100"
      database:
        type: sqlite3
      diagnose: {}
---
# Source: kubeskoop/templates/controller/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeskoop-controller
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - configmaps
  - namespaces
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list"]
- apiGroups: ["projectcalico.org", "crd.projectcalico.org"]
  resources: ["ippools"]
  verbs: ["get", "list"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Source: kubeskoop/templates/controller/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeskoop-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeskoop-controller
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
# Source: kubeskoop/templates/controller/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: controller
  namespace: default
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["kubeskoop-config"]
  verbs: ["get", "update"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["get", "list", "watch", "delete", "create"]
- apiGroups: [""]
  resources: ["pods/exec", "pods/attach", "pods/portforward"]
  verbs: ["create", "get", "list", "update", "delete"]
---
# Source: kubeskoop/templates/controller/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: controller
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: controller
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
# Source: kubeskoop/templates/controller/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: controller
  namespace: default
spec:
  selector:
    app: controller
  ports:
    - name: grpc
      port: 10263
      targetPort: 10263
    - name: http
      port: 10264
      targetPort: 10264
---
# Source: kubeskoop/templates/webconsole/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: webconsole
  namespace: default
  annotations:
    {}
spec:
  type: NodePort
  selector:
    app: webconsole
  ports:
    - name: http
      port: 80
      targetPort: 8080
---
# Source: kubeskoop/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: agent
  namespace: default
  labels:
    app: kubeskoop-agent
spec:
  selector:
    matchLabels:
      app: kubeskoop-agent
  template:
    metadata:
      labels:
        app: kubeskoop-agent
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9102"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
        - name: btfhack
          image: "kubeskoop/agent:v1.0.0-rc.1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: btf-rawdata
              mountPath: /etc/net-exporter/btf
            - mountPath: /boot/
              name: boot
          command:
            - btfhack
            - discover
            - -p
            - /etc/net-exporter/btf/
      containers:
      - name: inspector
        image:  "kubeskoop/agent:v1.0.0-rc.1"
        imagePullPolicy: IfNotPresent
        env:
        - name: INSPECTOR_NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
          - name: config-volume
            mountPath: /etc/config/
          - name: btf-rawdata
            mountPath: /etc/net-exporter/btf
          - name: proc
            mountPath: /proc
          - mountPath: /run/containerd/
            name: containerd
          - mountPath: /var/run/
            name: dockershim
          - mountPath: /sys/fs/bpf
            name: bpf-maps
            mountPropagation: HostToContainer
          - mountPath: /sys/fs/cgroup
            name: cgroup
            mountPropagation: HostToContainer
          - mountPath: /sys/kernel/debug
            name: bpf-events
            mountPropagation: HostToContainer
          - mountPath: /etc/node-hostname
            name: hostname
        command:
          - /bin/inspector
          - server
          - -d
        securityContext:
          privileged: true
        resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 500m
              memory: 1024Mi
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: containerd
          hostPath:
            path: /run/containerd/
        - name: dockershim
          hostPath:
            path: /var/run/
        - hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
          name: bpf-maps
        - name: boot
          hostPath:
            path: /boot
            type: DirectoryOrCreate
        - hostPath:
            path: /sys/fs/cgroup
            type: DirectoryOrCreate
          name: cgroup
        - hostPath:
            path: /sys/kernel/debug
          name: bpf-events
        - name: hostname
          hostPath:
            path: /etc/hostname
            type: FileOrCreate
        - name: config-volume
          configMap:
            name: kubeskoop-config
        - name: btf-rawdata
          emptyDir: {}
---
# Source: kubeskoop/templates/controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: controller
  template:
    metadata:
      name: controller
      labels:
        app: controller
    spec:
      containers:
        - name: controller
          image: "kubeskoop/controller:v1.0.0-rc.1"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/controller"
          volumeMounts:
            - name: lib
              mountPath: /var/lib/kubeskoop
            - name: config
              mountPath: /etc/kubeskoop
          resources:
            
            limits:
              cpu: 500m
              memory: 200Mi
            requests:
              cpu: 50m
              memory: 20Mi
      volumes:
        - name: lib
          emptyDir: { }
        - name: config
          configMap:
            name: controller-config
---
# Source: kubeskoop/templates/webconsole/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webconsole
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webconsole
  template:
    metadata:
      name: webconsole
      labels:
        app: webconsole
    spec:
      containers:
        - name: webconsole
          image: "kubeskoop/controller:v1.0.0-rc.1"
          imagePullPolicy: IfNotPresent
          command: [ "/bin/webconsole" ]
          env:
            - name: CONTROLLER_ENDPOINT
              value: "http://controller:10264"
            - name: GRAFANA_PROXY
              value: "true"
            - name: GRAFANA_ENDPOINT
              value: "http://grafana/grafana"
            - name: GRAFANA_USERNAME
              value: "admin"
            - name: GRAFANA_PASSWORD
              value: "kubeskoop"
            - name: AUTH_USERNAME
              value: "admin"
            - name: AUTH_PASSWORD
              value: "kubeskoop"
          resources:
            limits:
              cpu: 500m
              memory: 200Mi
            requests:
              cpu: 50m
              memory: 20Mi
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
