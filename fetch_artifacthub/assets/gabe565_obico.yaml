---
# Source: obico/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-obico-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
---
# Source: obico/charts/redis/templates/replicas/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-obico-redis-replica
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
---
# Source: obico/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-obico-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
type: Opaque
data:
  redis-password: "MUhvSEk3cW5BQQ=="
---
# Source: obico/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-obico-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: obico/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-obico-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: obico/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-obico-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    HEADLESS_SERVICE="my-obico-redis-headless.default.svc.cluster.local"

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: obico/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-obico-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/name: redis
---
# Source: obico/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-obico-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: obico/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-obico-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
---
# Source: obico/templates/ml-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-obico-ml-api
  labels:
    app.kubernetes.io/service: my-obico-ml-api
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ml-api
    app.kubernetes.io/version: latest
    helm.sh/chart: obico-0.4.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3333
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/name: ml-api
---
# Source: obico/templates/server.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-obico-server
  labels:
    app.kubernetes.io/service: my-obico-server
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: latest
    helm.sh/chart: obico-0.4.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3334
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/name: server
---
# Source: obico/templates/ml-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-obico-ml-api
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ml-api
    app.kubernetes.io/version: latest
    helm.sh/chart: obico-0.4.0
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: ml-api
      app.kubernetes.io/instance: my-obico
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ml-api
        app.kubernetes.io/instance: my-obico
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: my-obico-ml-api
          image: ghcr.io/gabe565/obico/ml-api:latest
          imagePullPolicy: IfNotPresent
          command:
              
            - gunicorn
            - --bind=0.0.0.0:3333
            - --workers=1
            - --access-logfile=-
            - wsgi
          env:
            - name: DEBUG
              value: "True"
            - name: FLASK_APP
              value: server.py
          ports:
            - name: http
              containerPort: 3333
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 3333
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 3333
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 0
            periodSeconds: 5
            tcpSocket:
              port: 3333
            timeoutSeconds: 1
---
# Source: obico/templates/server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-obico-server
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: latest
    helm.sh/chart: obico-0.4.0
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: server
      app.kubernetes.io/instance: my-obico
  template:
    metadata:
      labels:
        app.kubernetes.io/name: server
        app.kubernetes.io/instance: my-obico
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        - command:
          - python
          - manage.py
          - collectstatic
          - --verbosity=2
          - --noinput
          - --link
          env:
          - name: DATABASE_URL
            value: sqlite:////data/db.sqlite3
          - name: DEBUG
            value: "False"
          - name: INTERNAL_MEDIA_HOST
            value: http://my-obico-server:3334
          - name: ML_API_HOST
            value: http://my-obico-ml-api:3333
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: my-obico-redis
          - name: REDIS_URL
            value: redis://:$(REDIS_PASSWORD)@my-obico-redis-master:6379
          - name: SITE_USES_HTTPS
            value: "False"
          - name: WEBPACK_LOADER_ENABLED
            value: "False"
          image: ghcr.io/gabe565/obico/web:latest
          name: collectstatic
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /app/static_build
            name: static
        - command:
          - python
          - manage.py
          - migrate
          env:
          - name: DATABASE_URL
            value: sqlite:////data/db.sqlite3
          - name: DEBUG
            value: "False"
          - name: INTERNAL_MEDIA_HOST
            value: http://my-obico-server:3334
          - name: ML_API_HOST
            value: http://my-obico-ml-api:3333
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: my-obico-redis
          - name: REDIS_URL
            value: redis://:$(REDIS_PASSWORD)@my-obico-redis-master:6379
          - name: SITE_USES_HTTPS
            value: "False"
          - name: WEBPACK_LOADER_ENABLED
            value: "False"
          image: ghcr.io/gabe565/obico/web:latest
          name: migrate
      containers:
        - name: my-obico-server
          image: ghcr.io/gabe565/obico/web:latest
          imagePullPolicy: IfNotPresent
          command:
              
            - python
            - manage.py
            - runserver
            - --noreload
            - 0.0.0.0:3334
          env:
            - name: DATABASE_URL
              value: sqlite:////data/db.sqlite3
            - name: DEBUG
              value: "False"
            - name: INTERNAL_MEDIA_HOST
              value: http://my-obico-server:3334
            - name: ML_API_HOST
              value: http://my-obico-ml-api:3333
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: my-obico-redis
            - name: REDIS_URL
              value: redis://:$(REDIS_PASSWORD)@my-obico-redis-master:6379
            - name: SITE_USES_HTTPS
              value: "False"
            - name: WEBPACK_LOADER_ENABLED
              value: "False"
          ports:
            - name: http
              containerPort: 3334
              protocol: TCP
          volumeMounts:
            - name: static
              mountPath: /app/static_build
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 3334
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 3334
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 0
            periodSeconds: 5
            tcpSocket:
              port: 3334
            timeoutSeconds: 1
        - command:
          - celery
          - --app=config
          - worker
          - --beat
          - --loglevel=info
          - --concurrency=2
          - --queues=realtime,celery
          - --schedule=/tmp/celerybeat-schedule
          env:
          - name: DATABASE_URL
            value: sqlite:////data/db.sqlite3
          - name: DEBUG
            value: "False"
          - name: INTERNAL_MEDIA_HOST
            value: http://my-obico-server:3334
          - name: ML_API_HOST
            value: http://my-obico-ml-api:3333
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: my-obico-redis
          - name: REDIS_URL
            value: redis://:$(REDIS_PASSWORD)@my-obico-redis-master:6379
          - name: SITE_USES_HTTPS
            value: "False"
          - name: WEBPACK_LOADER_ENABLED
            value: "False"
          image: ghcr.io/gabe565/obico/web:latest
          name: tasks
      volumes:
        - name: static
          emptyDir:
            {}
---
# Source: obico/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-obico-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-obico
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: my-obico-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-obico
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-18.6.4
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 34c28ceea97ab19f186aa6467682667f15f27fdca6f245b52f7f267837f6f63a
        checksum/secret: fc850042a717637c135b32bd8172d9f8cf081049d4f50793f4e4eae528263d94
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-obico-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-obico
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-obico-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-obico-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-obico-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-obico-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: obico/charts/redis/templates/replicas/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-obico-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-obico
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.6.4
    app.kubernetes.io/component: replica
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-obico
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  serviceName: my-obico-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-obico
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-18.6.4
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 34c28ceea97ab19f186aa6467682667f15f27fdca6f245b52f7f267837f6f63a
        checksum/secret: afd00b1b687c73ceaa313b347fbc7071f1f9b12a5768c4682c9ecefc7e84e1e1
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-obico-redis-replica
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-obico
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: my-obico-redis-master-0.my-obico-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-obico-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-obico-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: my-obico-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-obico-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-obico-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: my-obico
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
