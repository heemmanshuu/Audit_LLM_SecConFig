---
# Source: quarks/templates/single-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: "kubecf"
  labels:
    quarks.cloudfoundry.org/monitored: cfo
    quarks.cloudfoundry.org/qjob-service-account: qjob-persist-output
    quarks.cloudfoundry.org/coredns-quarks-service-account: coredns-quarks
---
# Source: quarks/charts/quarks-job/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quarks-job
  namespace: default
---
# Source: quarks/charts/quarks-job/templates/single-namespace.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "qjob-persist-output"
  namespace: "kubecf"
---
# Source: quarks/charts/quarks-secret/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quarks-secret
  namespace: default
---
# Source: quarks/charts/quarks-statefulset/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quarks-statefulset
  namespace: default
---
# Source: quarks/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quarks
  namespace: default
---
# Source: quarks/templates/single-namespace.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "coredns-quarks"
  namespace: "kubecf"
imagePullSecrets:
- name: "coredns-quarks"
---
# Source: quarks/charts/quarks-job/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: my-quarks-quarks-job
rules:

- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - update

- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - update
  - watch

- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarksjobs
  verbs:
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarksjobs/status
  verbs:
  - update

- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
---
# Source: quarks/charts/quarks-job/templates/persist-output-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: "qjob-persist-output"
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - "*"
- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarksjobs
  verbs:
  - get
---
# Source: quarks/charts/quarks-secret/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: my-quarks-quarks-secret
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - approve
  - create
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - certificates.k8s.io
  resources:
  - signers
  resourceNames:
  - kubernetes.io/legacy-unknown
  verbs:
  - approve
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - create
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - update

- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarkssecrets
  verbs:
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarkssecrets/status
  verbs:
  - update
---
# Source: quarks/charts/quarks-statefulset/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: my-quarks-quarks-statefulset
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - approve
  - create
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - certificates.k8s.io
  resources:
  - signers
  resourceNames:
  - kubernetes.io/legacy-unknown
  verbs:
  - approve
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - create
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - update

- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - create
  - delete
  - update

# for monitored namespaces

- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update

# for active passive probe
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create

- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - get
  - list
  - update
  - watch

- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarksstatefulsets
  verbs:
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarksstatefulsets/status
  verbs:
  - update
---
# Source: quarks/templates/cluster-role-coredns.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "coredns-quarks"
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
---
# Source: quarks/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: default-quarks-cluster
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - approve
  - create
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - certificates.k8s.io
  resources:
  - signers
  resourceNames:
  - kubernetes.io/legacy-unknown
  verbs:
  - approve

- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - delete
  - list
  - update
  - watch

- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - create
  - update

- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - update

- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - update
  - watch

- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - create
  - delete
  - update

# for monitored namespaces

- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update

- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - update
  - watch

- apiGroups:
  - ""
  resources:
  - services
  - configmaps
  verbs:
  - create
  - get
  - list
  - update
  - watch

- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - watch

- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs:
  - create
  - get
  - list
  - update
  - watch

- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - quarksjobs
  verbs:
  - create
  - get
  - list
  - update
  - watch

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - boshdeployments
  - quarksstatefulsets
  - quarkssecrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch

- apiGroups:
  - quarks.cloudfoundry.org
  resources:
  - boshdeployments/status
  verbs:
  - create
  - patch
  - update
---
# Source: quarks/charts/quarks-job/templates/service-account.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-quarks-quarks-job
roleRef:
  kind: ClusterRole
  name: my-quarks-quarks-job
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: quarks-job
  namespace: "default"
---
# Source: quarks/charts/quarks-secret/templates/service-account.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-quarks-quarks-secret
roleRef:
  kind: ClusterRole
  name: my-quarks-quarks-secret
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: quarks-secret
  namespace: "default"
---
# Source: quarks/templates/single-namespace.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "coredns-quarks"
  namespace: "kubecf"
subjects:
- kind: ServiceAccount
  name: "coredns-quarks"
  namespace: "kubecf"
roleRef:
  kind: ClusterRole
  name: "coredns-quarks"
  apiGroup: rbac.authorization.k8s.io
---
# Source: quarks/charts/quarks-statefulset/templates/role-webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: quarks-statefulset-webhook
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
---
# Source: quarks/templates/role-webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: quarks-webhook
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
---
# Source: quarks/charts/quarks-job/templates/single-namespace.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "qjob-persist-output"
  namespace: "kubecf"
subjects:
- kind: ServiceAccount
  name: "qjob-persist-output"
roleRef:
  kind: ClusterRole
  name: "qjob-persist-output"
  apiGroup: rbac.authorization.k8s.io
---
# Source: quarks/charts/quarks-statefulset/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qsts-webhook
  namespace: default
spec:
  selector:
    name: quarks-statefulset
  ports:
  - port: 443
    targetPort: 2999
---
# Source: quarks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cf-operator-webhook
  namespace: default
spec:
  selector:
    name: cf-operator
  ports:
  - port: 443
    targetPort: 2999
---
# Source: quarks/charts/quarks-job/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quarks-job
  namespace: "default"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: quarks-job
  template:
    metadata:
      labels:
        name: quarks-job
    spec:
      serviceAccountName: quarks-job
      containers:
        - name: quarks-job
          image: "ghcr.io/cloudfoundry-incubator/quarks-job:v1.0.218"
          ports:
          - containerPort: 60000
            name: metrics
          command:
          - quarks-job
          imagePullPolicy: "IfNotPresent"
          env:
            - name: APPLY_CRD
              value: "true"
            - name: LOG_LEVEL
              value: "info"
            - name: MAX_WORKERS
              value: "1"
            - name: CTX_TIMEOUT
              value: "300"
            - name: MELTDOWN_DURATION
              value: "60"
            - name: MELTDOWN_REQUEUE_AFTER
              value: "30"
            - name: MONITORED_ID
              value: cfo
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: "quarks-job"
            - name: DOCKER_IMAGE_ORG
              value: "ghcr.io/cloudfoundry-incubator"
            - name: DOCKER_IMAGE_REPOSITORY
              value: "quarks-job"
            - name: DOCKER_IMAGE_TAG
              value: "v1.0.218"
            - name: DOCKER_IMAGE_PULL_POLICY
              value: "IfNotPresent"
---
# Source: quarks/charts/quarks-secret/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quarks-secret
  namespace: "default"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: quarks-secret
  template:
    metadata:
      labels:
        name: quarks-secret
    spec:
      serviceAccountName: quarks-secret
      containers:
        - name: quarks-secret
          image: "ghcr.io/cloudfoundry-incubator/quarks-secret:v1.0.758"
          ports:
          - containerPort: 60000
            name: metrics
          command:
          - quarks-secret
          imagePullPolicy: "IfNotPresent"
          env:
            - name: APPLY_CRD
              value: "true"
            - name: LOG_LEVEL
              value: "info"
            - name: MAX_WORKERS
              value: "1"
            - name: CTX_TIMEOUT
              value: "300"
            - name: MELTDOWN_DURATION
              value: "60"
            - name: MELTDOWN_REQUEUE_AFTER
              value: "30"
            - name: MONITORED_ID
              value: cfo
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: "quarks-secret"
---
# Source: quarks/charts/quarks-statefulset/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quarks-statefulset
  namespace: "default"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: quarks-statefulset
  template:
    metadata:
      labels:
        name: quarks-statefulset
    spec:
      serviceAccountName: quarks-statefulset
      containers:
        - name: quarks-statefulset
          image: "ghcr.io/cloudfoundry-incubator/quarks-statefulset:v1.0.1319"
          ports:
          - containerPort: 60000
            name: metrics
          - containerPort: 2999
            name: webhook
          command:
          - quarks-statefulset
          imagePullPolicy: "IfNotPresent"
          env:
            - name: APPLY_CRD
              value: "true"
            - name: LOG_LEVEL
              value: "info"
            - name: MAX_WORKERS
              value: "1"
            - name: CTX_TIMEOUT
              value: "300"
            - name: MELTDOWN_DURATION
              value: "60"
            - name: MELTDOWN_REQUEUE_AFTER
              value: "30"
            - name: MONITORED_ID
              value: cfo
            - name: QUARKS_STATEFULSET_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: "quarks-statefulset"
            - name: QUARKS_STS_WEBHOOK_SERVICE_PORT
              value: "2999"
            - name: QUARKS_STS_WEBHOOK_USE_SERVICE_REFERENCE
              value: "true"
          readinessProbe:
            httpGet:
              path: /readyz
              port: 2999
              scheme: "HTTPS"
            initialDelaySeconds: 2
---
# Source: quarks/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quarks
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      name: cf-operator
  template:
    metadata:
      labels:
        name: cf-operator
    spec:
      serviceAccountName: quarks
      containers:
        - name: quarks-operator
          image: "ghcr.io/cloudfoundry-incubator/quarks-operator:v7.2.7-0.g3606ded"
          ports:
          - containerPort: 60000
            name: metrics
          - containerPort: 2999
            name: webhook
          command:
          - quarks-operator
          imagePullPolicy: "IfNotPresent"
          env:
            - name: APPLY_CRD
              value: "true"
            - name: BOSH_DNS_DOCKER_IMAGE
              value: "ghcr.io/cfcontainerizationbot/coredns:0.1.0-1.6.7-bp152.1.19"
            - name: CLUSTER_DOMAIN
              value: "cluster.local"
            - name: LOG_LEVEL
              value: "debug"
            - name: LOGROTATE_INTERVAL
              value: "1440"
            - name: MONITORED_ID
              value: cfo
            - name: CF_OPERATOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CTX_TIMEOUT
              value: "300"
            - name: MELTDOWN_DURATION
              value: "60"
            - name: MELTDOWN_REQUEUE_AFTER
              value: "30"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: "quarks-operator"
            - name: DOCKER_IMAGE_ORG
              value: "ghcr.io/cloudfoundry-incubator"
            - name: DOCKER_IMAGE_REPOSITORY
              value: "quarks-operator"
            - name: DOCKER_IMAGE_TAG
              value: "v7.2.7-0.g3606ded"
            - name: DOCKER_IMAGE_PULL_POLICY
              value: "IfNotPresent"
            - name: CF_OPERATOR_WEBHOOK_SERVICE_PORT
              value: "2999"
            - name: CF_OPERATOR_WEBHOOK_USE_SERVICE_REFERENCE
              value: "true"
          readinessProbe:
            httpGet:
              path: /readyz
              port: 2999
              scheme: "HTTPS"
            initialDelaySeconds: 2
---
# Source: quarks/templates/hooks.yaml
# generate helm hooks from contents in the `hooks` folder
---
# Source: quarks/templates/role-hooks.yml
# generate helm hooks from contents in the `hooks` folder
---
# Source: quarks/templates/service-account-hooks.yml
# generate helm hooks from contents in the `hooks` folder
---
# Source: quarks/charts/quarks-statefulset/templates/service-account.yaml
apiVersion: v1
kind: List
items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: my-quarks-quarks-statefulset
    roleRef:
      kind: ClusterRole
      name: my-quarks-quarks-statefulset
      apiGroup: rbac.authorization.k8s.io
    subjects:
    - kind: ServiceAccount
      name: quarks-statefulset
      namespace: "default"

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: quarks-statefulset-webhook
      namespace: default
    subjects:
    - kind: ServiceAccount
      name: quarks-statefulset
      namespace: default
    roleRef:
      kind: Role
      name: quarks-statefulset-webhook
      apiGroup: rbac.authorization.k8s.io
---
# Source: quarks/templates/service-account.yaml
apiVersion: v1
kind: List
items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: default-quarks-cluster
    subjects:
    - kind: ServiceAccount
      name: quarks
      namespace: default
    roleRef:
      kind: ClusterRole
      name: default-quarks-cluster
      apiGroup: rbac.authorization.k8s.io

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: quarks-webhook
      namespace: default
    subjects:
    - kind: ServiceAccount
      name: quarks
      namespace: default
    roleRef:
      kind: Role
      name: quarks-webhook
      apiGroup: rbac.authorization.k8s.io
---
# Source: quarks/templates/service-account-hooks.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pre-delete-helm-hook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: "my-quarks"
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
---
# Source: quarks/templates/service-account-hooks.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pre-upgrade-helm-hook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: "my-quarks"
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
---
# Source: quarks/templates/hooks.yaml
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "my-quarks"
  annotations:
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation
  name: pre-delete-hook-scripts
data:
  mutatingwebhook.sh: |
    #!/bin/bash
    set -ex
  
    # https://github.com/cloudfoundry-incubator/quarks-operator/blob/1a6f8b0063455a98df395f6c445e23e1c9e186bd/pkg/kube/controllers/controllers.go#L92
    kubectl delete mutatingwebhookconfiguration --ignore-not-found cf-operator-hook-$NAMESPACE
---
# Source: quarks/templates/hooks.yaml
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "my-quarks"
  annotations:
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
  name: pre-upgrade-hook-scripts
data:
  remove-sts-name-label-v7.1.3.sh: |
    #!/bin/bash
  
    # quarks-operator v7.1.3 added a new label `quarks.cloudfoundry.org/statefulset-name`. This is no longer supported and breaks STS updates.
  
    set -ex
  
    if [ -n "$SINGLE_NAMESPACE" ]; then
  
      # delete these
      for sts in $(kubectl get sts -n "$SINGLE_NAMESPACE" -o name -l quarks.cloudfoundry.org/statefulset-name --ignore-not-found)
      do
          sts_name=$(echo "$sts" | sed 's@.*/@@')
          echo 1>&2 "### Recreate sts: $sts_name ..."
  
          if test -z "${sts_name}" ; then
            echo 1>&2 "SKIP STS $sts: error"
            continue
          fi
  
          kubectl get -n "$SINGLE_NAMESPACE" "$sts" -o json | jq --arg N "$sts_name" '
          del(.metadata.namespace,.metadata.resourceVersion,.metadata.uid,.metadata.managedFields)
          | .metadata.creationTimestamp=null
          | del(
            .spec.template.metadata.labels."quarks.cloudfoundry.org/statefulset-name",
            .metadata.labels."quarks.cloudfoundry.org/statefulset-name",
            .spec.selector.matchLabels."quarks.cloudfoundry.org/statefulset-name")
          | .spec.template.metadata.labels."quarks.cloudfoundry.org/quarks-statefulset-name"=$N
          | .spec.selector.matchLabels."quarks.cloudfoundry.org/quarks-statefulset-name"=$N
          ' > "$sts_name".json
  
          kubectl delete -n "$SINGLE_NAMESPACE" "$sts" --cascade=orphan --wait=true
  
          kubectl wait -n "$SINGLE_NAMESPACE" "$sts" --for=delete || true
  
          kubectl create -n "$SINGLE_NAMESPACE" -f "$sts_name".json
      done
  
      # # update labels on pods
      # for pod in $(kubectl get pod -n "$SINGLE_NAMESPACE" -o name -l "quarks.cloudfoundry.org/statefulset-name" --ignore-not-found)
      # do
      #   sts_name=$(kubectl get -n "$SINGLE_NAMESPACE" "$pod" -o jsonpath="{.metadata.labels.quarks\.cloudfoundry\.org/statefulset-name}")
  
      #   echo 1>&2 " ### Update pod labels: $sts"
      #   # delete
      #   kubectl label -n "$SINGLE_NAMESPACE" "$pod" "quarks.cloudfoundry.org/statefulset-name"-
      #   # with az
      #   kubectl label --overwrite -n "$SINGLE_NAMESPACE" "$pod" "quarks.cloudfoundry.org/quarks-statefulset-name=$sts_name"
      # done
  
    fi
  removedm.sh: |
    #!/bin/bash
    set -ex
  
    if [ -n "$SINGLE_NAMESPACE" ]; then
        # https://github.com/cloudfoundry-incubator/quarks-operator/commit/3610c105a75528285ad05303fc7e8963381d3194
        kubectl delete quarksjobs.quarks.cloudfoundry.org --ignore-not-found --namespace $SINGLE_NAMESPACE dm
    fi
---
# Source: quarks/templates/role-hooks.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
  name: cf-operator-pre-delete-helm-hook
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - delete

# hooks only work in singleNamespace mode, this lists all required permissions
# for running the scripts
---
# Source: quarks/templates/role-hooks.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
  name: cf-operator-pre-upgrade-helm-hook
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - delete

# hooks only work in singleNamespace mode, this lists all required permissions
# for running the scripts
---
# Source: quarks/templates/role-hooks.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pre-delete-helm-hook
  namespace: "kubecf"
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups: [quarks.cloudfoundry.org]
  resources: [quarksjobs]
  resourceNames: [dm]
  verbs: [delete]
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - patch
  - list
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
  - list
  - create
  - patch
  - update
  - delete
  - watch
---
# Source: quarks/templates/role-hooks.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pre-upgrade-helm-hook
  namespace: "kubecf"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups: [quarks.cloudfoundry.org]
  resources: [quarksjobs]
  resourceNames: [dm]
  verbs: [delete]
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - patch
  - list
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
  - list
  - create
  - patch
  - update
  - delete
  - watch
---
# Source: quarks/templates/hooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-quarks-pre-delete-hook"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "my-quarks"
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "my-quarks"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "my-quarks"
        helm.sh/chart: quarks-7.2.7_0.g3606ded
    spec:
      restartPolicy: Never
      serviceAccountName: pre-delete-helm-hook
      containers:
      - name: pre-delete-job
        image: "ghcr.io/cfcontainerizationbot/kubecf-kubectl:v1.20.2"
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SINGLE_NAMESPACE
          value: "kubecf"
        command: ["/bin/bash","-cx"]
        args:
        - |
           for f in /hooks/*.sh; do
             bash "$f"
           done
        volumeMounts:
        - name: hooks
          mountPath: "/hooks"
          readOnly: true
      volumes:
      - name: hooks
        configMap:
          name: pre-delete-hook-scripts
---
# Source: quarks/templates/hooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-quarks-pre-upgrade-hook"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "my-quarks"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "my-quarks"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "my-quarks"
        helm.sh/chart: quarks-7.2.7_0.g3606ded
    spec:
      restartPolicy: Never
      serviceAccountName: pre-upgrade-helm-hook
      containers:
      - name: pre-upgrade-job
        image: "ghcr.io/cfcontainerizationbot/kubecf-kubectl:v1.20.2"
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SINGLE_NAMESPACE
          value: "kubecf"
        command: ["/bin/bash","-cx"]
        args:
        - |
           for f in /hooks/*.sh; do
             bash "$f"
           done
        volumeMounts:
        - name: hooks
          mountPath: "/hooks"
          readOnly: true
      volumes:
      - name: hooks
        configMap:
          name: pre-upgrade-hook-scripts
---
# Source: quarks/templates/role-hooks.yml
apiVersion: v1
kind: List
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: pre-delete-helm-hook
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
        "helm.sh/hook": pre-delete
        "helm.sh/hook-weight": "-2"
        "helm.sh/hook-delete-policy": before-hook-creation
    subjects:
    - kind: ServiceAccount
      name: pre-delete-helm-hook
      namespace: default
    roleRef:
      kind: ClusterRole
      name: cf-operator-pre-delete-helm-hook
      apiGroup: rbac.authorization.k8s.io
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: pre-delete-helm-hook
      namespace: "kubecf"
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
        "helm.sh/hook": pre-delete
        "helm.sh/hook-weight": "-2"
        "helm.sh/hook-delete-policy": before-hook-creation
    subjects:
    - kind: ServiceAccount
      name: pre-delete-helm-hook
      namespace: default
    roleRef:
      kind: Role
      name: pre-delete-helm-hook
      apiGroup: rbac.authorization.k8s.io
---
# Source: quarks/templates/role-hooks.yml
apiVersion: v1
kind: List
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: pre-upgrade-helm-hook
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
        "helm.sh/hook": pre-upgrade
        "helm.sh/hook-weight": "-2"
        "helm.sh/hook-delete-policy": before-hook-creation
    subjects:
    - kind: ServiceAccount
      name: pre-upgrade-helm-hook
      namespace: default
    roleRef:
      kind: ClusterRole
      name: cf-operator-pre-upgrade-helm-hook
      apiGroup: rbac.authorization.k8s.io
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: pre-upgrade-helm-hook
      namespace: "kubecf"
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
        "helm.sh/hook": pre-upgrade
        "helm.sh/hook-weight": "-2"
        "helm.sh/hook-delete-policy": before-hook-creation
    subjects:
    - kind: ServiceAccount
      name: pre-upgrade-helm-hook
      namespace: default
    roleRef:
      kind: Role
      name: pre-upgrade-helm-hook
      apiGroup: rbac.authorization.k8s.io
