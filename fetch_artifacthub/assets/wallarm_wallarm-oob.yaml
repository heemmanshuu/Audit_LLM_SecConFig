---
# Source: wallarm-oob/templates/agent-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-wallarm-oob-wallarm-oob-agent
  annotations:
    
    # "helm.sh/hook": "pre-install, pre-upgrade"
    # "helm.sh/hook-weight": "-10"
  labels:
    app.kubernetes.io/version: "0.10.18"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "agent"
---
# Source: wallarm-oob/templates/shared-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-wallarm-oob-wallarm-oob-credentials
  annotations:
    
  labels:
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
type: Opaque
data:
  WALLARM_API_TOKEN: ""
  WALLARM_API_HOST: "YXBpLndhbGxhcm0uY29t"
  WALLARM_API_PORT: "NDQz"
  WALLARM_API_USE_SSL: "dHJ1ZQ=="
---
# Source: wallarm-oob/templates/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-wallarm-oob-wallarm-oob-agent
  annotations:
    
  labels:
    app.kubernetes.io/version: "0.10.18"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "agent"
data:
  config.yaml: |
    mirror_everything: false
    metrics_enabled: false
    metrics_port: 9090
    metrics_path: /metrics
    health_probe_enabled: true
    health_probe_port: 11226
    node_host: my-wallarm-oob-wallarm-oob-processing.default.svc
    node_port: 18443
    node_responses_port: 53170
    node_tls_ca: /etc/wallarm/agent/certs/ca.crt
    ringbuf_pages: 4096
    netchan_size: 4096
    restart_reader_on_error: true
    packet_debug: false
    debug: false
    verbose: false
    console: false
    load_balancer_real_ip_header: X-Real-IP
---
# Source: wallarm-oob/templates/aggregation-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-wallarm-oob-wallarm-oob-aggregation
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "aggregation"
data:
  supervisord.conf: |
    [supervisord]
    nodaemon=true
    loglevel=warn
    logfile=/dev/stdout
    logfile_maxbytes=0
    pidfile=/opt/wallarm/run/supervisor/pid
    # export-attacks
    [program:export-attacks]
    command=/opt/wallarm/usr/share/wallarm-common/export-attacks -r -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # export-counters
    [program:export-counters]
    command=/opt/wallarm/usr/share/wallarm-common/export-counters -l STDOUT -L ERROR
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # export-environment
    [program:export-environment]
    command=/opt/wallarm/usr/share/wallarm-common/export-environment -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # brute-detect
    [program:brute-detect]
    command=/opt/wallarm/usr/share/wallarm-common/brute-detect -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # sync-markers
    [program:sync-markers]
    command=/opt/wallarm/usr/share/wallarm-common/sync-markers -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # weak-jwt-detect
    [program:weak-jwt-detect]
    command=/opt/wallarm/usr/share/wallarm-common/weak-jwt-detect -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # sync-node
    [program:sync-node]
    command=/opt/wallarm/usr/share/wallarm-common/syncnode -f -p -r 120 -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # export-blocked-stats
    [program:export-blocked-stats]
    command=/opt/wallarm/usr/share/wallarm-common/export-blocked-stats -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # detect-cred-stuffing
    [program:detect-cred-stuffing]
    command=/opt/wallarm/usr/share/wallarm-common/detect-cred-stuffing -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
---
# Source: wallarm-oob/templates/processing-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-wallarm-oob-wallarm-oob-processing
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "processing"
data:
  supervisord.conf: |
    [supervisord]
    nodaemon=true
    loglevel=warn
    logfile=/dev/stdout
    logfile_maxbytes=0
    pidfile=/opt/wallarm/run/supervisor/pid
    # export-environment
    [program:export-environment]
    command=/opt/wallarm/usr/share/wallarm-common/export-environment -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # sync-ip-lists
    [program:sync-ip-lists]
    command=/opt/wallarm/usr/share/wallarm-common/sync-ip-lists -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # export-metrics
    [program:export-metrics]
    command=/opt/wallarm/usr/share/wallarm-common/export-metrics -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # sync-ip-lists-source
    [program:sync-ip-lists-source]
    command=/opt/wallarm/usr/share/wallarm-common/sync-ip-lists-source -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
    # sync-node
    [program:sync-node]
    command=/opt/wallarm/usr/share/wallarm-common/syncnode -f -p -r 120 -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

  nginx.conf.tmpl: |-
    worker_processes auto;

    pid /run/nginx/nginx.pid;

    include /etc/nginx/modules/*.conf;

    load_module /usr/lib/nginx/modules/ngx_http_wallarm_module.so;

    events {
        worker_connections 4096;
    }

    http {
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # SSL Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Logging Settings
        log_format main '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $bytes_sent '
                        '"$http_referer" "$http_user_agent"';
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;

        # Gzip Settings
        gzip on;

        # Wallarm node configuration
        wallarm_mode monitoring;
        wallarm_mode_allow_override off;
        wallarm_parse_response off;
        wallarm_parse_websocket off;
        wallarm_process_time_limit 2500;
        wallarm_process_time_limit_block attack;
        wallarm_enable_libdetection on;
        disable_acl on;
        wallarm_enable_apifw off;

        upstream tarantool {
          server my-wallarm-oob-wallarm-oob-aggregation.default.svc:3313 max_fails=0 fail_timeout=0 max_conns=16;
          keepalive 16;
          keepalive_requests 100;
        }

        upstream responder {
            server 127.0.0.1:42069 fail_timeout=120s;
        }

        wallarm_tarantool_upstream tarantool;

        set_real_ip_from 0.0.0.0/0;
        set_real_ip_from ::/0;
        real_ip_header x-wallarm-oob-@AGENT-TOKEN@-real-ip;

        # Wallarm healthcheck endpoint
        server {
            listen 0.0.0.0:18080 default_server;

            server_name _;

            wallarm_mode off;
            disable_acl "on";

            keepalive_timeout 0;
            gzip off;
            access_log off;

            location /healthcheck {
                return 200 'OK';
            }

            location / {
                return 405 '';
            }
        }

        # Wallarm status endpoint. Required for internal monitoring
        server {
          listen 127.0.0.1:10246;

          server_name localhost;

          allow 127.0.0.0/8;
          deny all;

          wallarm_mode off;
          disable_acl "on";
          access_log off;

          location /wallarm-status {
            wallarm_status on;
          }
        }

        # Wallarm primary endpoint which receives traffic to analyze
        server {
            listen 0.0.0.0:18443 ssl http2;
            listen [::]:18443 ssl http2;
            ssl_certificate     /etc/nginx/certs/tls.crt;
            ssl_certificate_key /etc/nginx/certs/tls.key;

            server_name _;

            wallarm_set_tag wallarm_ebpf_token "@AGENT-TOKEN@";

            location / {
                set $domain_in_host_header '';
                access_by_lua_block {
                    ngx.var.domain_in_host_header=string.gmatch(ngx.var.host, "([^:]+)"){0};
                }
                proxy_set_header Host $domain_in_host_header;
                proxy_set_header x-wallarm-oob-@AGENT-TOKEN@-agent-ip $realip_remote_addr;
                proxy_set_header x-wallarm-oob-@AGENT-TOKEN@-server-proto $server_protocol;
                proxy_ignore_client_abort on;

                wallarm_force server_addr $http_x_server_addr;
                wallarm_force server_port $http_x_server_port;

                proxy_pass http://responder;
            }
        }
    }
---
# Source: wallarm-oob/templates/processing-responder-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-wallarm-oob-wallarm-oob-processing-responder
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "processing"
data:
  responder.yaml: |-
    crt_path: "/etc/wallarm/responder/certs/tls.crt"
    key_path: "/etc/wallarm/responder/certs/tls.key"
---
# Source: wallarm-oob/templates/agent-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-wallarm-oob-wallarm-oob-agent
  annotations:
    
  labels:
    app.kubernetes.io/version: "0.10.18"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "agent"
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - pods
      - namespaces
    verbs:
      - get
      - list
      - watch
---
# Source: wallarm-oob/templates/agent-cluster-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-wallarm-oob-wallarm-oob-agent
  annotations:
    
  labels:
    app.kubernetes.io/version: "0.10.18"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "agent"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-wallarm-oob-wallarm-oob-agent
subjects:
  - kind: ServiceAccount
    name: my-wallarm-oob-wallarm-oob-agent
    namespace: "default"
---
# Source: wallarm-oob/templates/aggregation-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-wallarm-oob-wallarm-oob-aggregation
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "aggregation"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/component: "aggregation"
  ports:
  - name: tarantool
    port: 3313
    targetPort: tarantool
    protocol: TCP
---
# Source: wallarm-oob/templates/processing-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-wallarm-oob-wallarm-oob-processing
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "processing"
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/component: "processing"
  ports:
  - name: node
    port: 443
    targetPort: node
    protocol: TCP
  - name: responder
    port: 444
    targetPort: responder
    protocol: TCP
---
# Source: wallarm-oob/templates/agent-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-wallarm-oob-wallarm-oob-agent
  annotations:
    
  labels:
    app.kubernetes.io/version: "0.10.18"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "agent"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: "agent"
  revisionHistoryLimit: 10
  updateStrategy: 
    rollingUpdate:
      maxSurge: 0%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: c00744bc8367fbb0327c929ff8645acfc19428b42b53bd3d28cc3e71d817303e
        
      labels:
        app.kubernetes.io/version: "0.10.18"
        helm.sh/chart: "wallarm-oob"
        helm.sh/version: "0.10.28"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "wallarm-oob"
        app.kubernetes.io/instance: "my-wallarm-oob"
        app.kubernetes.io/component: "agent"
    spec:
      hostPID: true
      serviceAccountName: my-wallarm-oob-wallarm-oob-agent
      terminationGracePeriodSeconds: 30
      nodeSelector: 
        kubernetes.io/os: linux
      containers:
      - name: agent
        image: docker.io/wallarm/ebpf-agent:0.10.18
        imagePullPolicy: IfNotPresent
        args:
          - -config
          - /etc/wallarm/agent/config.yaml
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: AGENT_VERSION
            value: "0.10.18"
          - name: AGENT_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: my-wallarm-oob-wallarm-oob-agent-token
        livenessProbe: 
          failureThreshold: 3
          httpGet:
            path: /live
            port: health
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe: 
          failureThreshold: 3
          httpGet:
            path: /ready
            port: health
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 3
        ports:
          - name: health
            containerPort: 11226
        securityContext:
        
          privileged: true
          runAsUser: 0
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_PTRACE
        volumeMounts:
        - name: config
          mountPath: /etc/wallarm/agent
          readOnly: true
        - name: certs
          mountPath: /etc/wallarm/agent/certs
          readOnly: true
        - name: client-certs
          mountPath: /etc/wallarm/agent/client-certs
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: my-wallarm-oob-wallarm-oob-agent
      - name: certs
        secret:
          secretName: my-wallarm-oob-wallarm-oob-processing-certs
      - name: client-certs
        secret:
          secretName: my-wallarm-oob-wallarm-oob-agent-client-certs
---
# Source: wallarm-oob/templates/aggreagation-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-wallarm-oob-wallarm-oob-aggregation
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "aggregation"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy: 
    rollingUpdate:
      maxSurge: 0%
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/component: "aggregation"
  template:
    metadata:
      annotations:
        checksum/config: 389b591beb9e9ccaadc55dccfa0601318f23c5ae4050b392e1010d4b1ea6db1b
        checksum/credentials: fee161e3c157e9c3d73385b4202a64310b4eaed49654b034fd68d854d7a7f67c
        
      labels:
        app.kubernetes.io/version: "4.10.4"
        helm.sh/chart: "wallarm-oob"
        helm.sh/version: "0.10.28"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "wallarm-oob"
        app.kubernetes.io/instance: "my-wallarm-oob"
        app.kubernetes.io/component: "aggregation"
    spec:
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 30
      nodeSelector: 
        kubernetes.io/os: linux
      initContainers:
      - name: init
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: [ "register" ]
        env:
        - name: WALLARM_API_HOST
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_HOST
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_PORT
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_PORT
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_USE_SSL
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_USE_SSL
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_TOKEN
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_COMPONENT_NAME
          value: wallarm-oob
        - name: WALLARM_COMPONENT_VERSION
          value: "0.10.28"
        - name: WALLARM_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: WALLARM_SYNCNODE_OWNER
          value: www-data
        - name: WALLARM_SYNCNODE_GROUP
          value: www-data
        - name: WALLARM_LABELS
          value: "group=defaultEbpfConnectorGroup"
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
          - mountPath: /opt/wallarm/etc/wallarm
            name: wallarm
          - mountPath: /opt/wallarm/var/lib/wallarm-acl
            name: wallarm-acl
      containers:
      - name: tarantool
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: ["tarantool"]
        env:
        - name: SLAB_ALLOC_ARENA
          value: "2"
        ports:
          - name: tarantool
            containerPort: 3313
            protocol: TCP
        livenessProbe: 
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          tcpSocket:
            port: tarantool
          timeoutSeconds: 3
        readinessProbe: 
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          tcpSocket:
            port: tarantool
          timeoutSeconds: 3
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL

      - name: supervisord
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: ["supervisord"]
        env:
        - name: WALLARM_API_HOST
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_HOST
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_PORT
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_PORT
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_USE_SSL
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_USE_SSL
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_TOKEN
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_COMPONENT_NAME
          value: wallarm-oob
        - name: WALLARM_COMPONENT_VERSION
          value: "0.10.28"
        - name: WALLARM_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: WALLARM_SYNCNODE_OWNER
          value: www-data
        - name: WALLARM_SYNCNODE_GROUP
          value: www-data
        - name: WALLARM_LABELS
          value: "group=defaultEbpfConnectorGroup"
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
          - name: wallarm
            mountPath: /opt/wallarm/etc/wallarm
          - name: wallarm-acl
            mountPath: /opt/wallarm/var/lib/wallarm-acl
          - name: supervisord-config
            mountPath: /opt/supervisord/supervisord.conf
            subPath: supervisord.conf
            readOnly: true

      - name: app-structure
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: ["appstructure"]
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: wallarm
          mountPath: /opt/wallarm/etc/wallarm
      - name: antibot
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: ["antibot"]
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/wallarm/etc/wallarm
          name: wallarm

      volumes:
        - name: wallarm
          emptyDir: {}
        - name: wallarm-acl
          emptyDir: {}
        - name: supervisord-config
          configMap:
            name: my-wallarm-oob-wallarm-oob-aggregation
---
# Source: wallarm-oob/templates/processing-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-wallarm-oob-wallarm-oob-processing
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "processing"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy: 
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/component: "processing"
  template:
    metadata:
      annotations:
        checksum/config: 5559268012936cdf0ca4947a5bb4a64de74bf4d43336f637c0a7726e17433398
        checksum/credentials: fee161e3c157e9c3d73385b4202a64310b4eaed49654b034fd68d854d7a7f67c
        
      labels:
        app.kubernetes.io/version: "4.10.4"
        helm.sh/chart: "wallarm-oob"
        helm.sh/version: "0.10.28"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "wallarm-oob"
        app.kubernetes.io/instance: "my-wallarm-oob"
        app.kubernetes.io/component: "processing"
    spec:
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 30
      nodeSelector: 
        kubernetes.io/os: linux
      initContainers:
      - name: init
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: [ "register"]
        env:
        - name: WALLARM_API_HOST
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_HOST
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_PORT
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_PORT
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_USE_SSL
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_USE_SSL
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_TOKEN
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_COMPONENT_NAME
          value: wallarm-oob
        - name: WALLARM_COMPONENT_VERSION
          value: "0.10.28"
        - name: WALLARM_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: WALLARM_SYNCNODE_OWNER
          value: www-data
        - name: WALLARM_SYNCNODE_GROUP
          value: www-data
        - name: WALLARM_LABELS
          value: "group=defaultEbpfConnectorGroup"
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources: 
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /opt/wallarm/etc/wallarm
          name: wallarm
        - mountPath: /opt/wallarm/var/lib/wallarm-acl
          name: wallarm-acl
      containers:
      - name: node
        image: docker.io/wallarm/node-nginx:4.10.4-1
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - >
          cp /etc/nginx/nginx.conf.tmpl /var/lib/nginx/nginx.conf &&
          sed -i -e 's/@AGENT-TOKEN@/$(AGENT_TOKEN)/' /var/lib/nginx/nginx.conf &&
          exec nginx -c /var/lib/nginx/nginx.conf -g "daemon off;"
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: AGENT_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: my-wallarm-oob-wallarm-oob-agent-token
        ports:
        - name: node
          containerPort: 18443
          protocol: TCP
        - name: health
          containerPort: 18080
          protocol: TCP
        livenessProbe: 
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: health
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe: 
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: health
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 3
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        resources: 
          requests:
            cpu: 500m
            memory: 256Mi
        volumeMounts:
        - name: wallarm-config
          mountPath: /etc/nginx/nginx.conf.tmpl
          subPath: nginx.conf.tmpl
          readOnly: true
        - name: wallarm
          mountPath: /opt/wallarm/etc/wallarm
        - name: wallarm-acl
          mountPath: /opt/wallarm/var/lib/wallarm-acl
        - name: wallarm-cache
          mountPath: /opt/wallarm/var/lib/nginx/wallarm
        - name: certs
          mountPath: /etc/nginx/certs
          readOnly: true
        - name: client-certs
          mountPath: /etc/nginx/client-certs
          readOnly: true
      - name: responder
        image: docker.io/wallarm/responder-agent:0.10.12
        imagePullPolicy: IfNotPresent
        args:
          - -config
          - /etc/wallarm/responder/responder.yaml
        ports:
        - name: responder
          containerPort: 53170
          protocol: TCP
        - name: health
          containerPort: 54321
          protocol: TCP
        env:
          - name: AGENT_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: my-wallarm-oob-wallarm-oob-agent-token
        livenessProbe: 
          failureThreshold: 3
          httpGet:
            path: /live
            port: health
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe: 
          failureThreshold: 3
          httpGet:
            path: /ready
            port: health
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 3
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        resources: 
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: responder-config
          mountPath: /etc/wallarm/responder/responder.yaml
          subPath: responder.yaml
          readOnly: true
        - name: certs
          mountPath: /etc/wallarm/responder/certs
          readOnly: true
        - name: client-certs
          mountPath: /etc/wallarm/responder/client-certs
          readOnly: true
      - name: supervisord
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: ["supervisord"]
        env:
        - name: WALLARM_API_HOST
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_HOST
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_PORT
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_PORT
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_USE_SSL
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_USE_SSL
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: WALLARM_API_TOKEN
              name: my-wallarm-oob-wallarm-oob-credentials
        - name: WALLARM_COMPONENT_NAME
          value: wallarm-oob
        - name: WALLARM_COMPONENT_VERSION
          value: "0.10.28"
        - name: WALLARM_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: WALLARM_SYNCNODE_OWNER
          value: www-data
        - name: WALLARM_SYNCNODE_GROUP
          value: www-data
        - name: WALLARM_LABELS
          value: "group=defaultEbpfConnectorGroup"
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources: 
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: wallarm
          mountPath: /opt/wallarm/etc/wallarm
        - name: wallarm-acl
          mountPath: /opt/wallarm/var/lib/wallarm-acl
        - name: wallarm-config
          mountPath: /opt/supervisord/supervisord.conf
          subPath: supervisord.conf
          readOnly: true
      - name: collectd
        image: docker.io/wallarm/node-helpers:4.10.4-1
        imagePullPolicy: IfNotPresent
        args: ["collectd"]
        securityContext:
        
          privileged: false
          runAsUser: 101
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources: 
          requests:
            cpu: 50m
            memory: 32Mi
        volumeMounts:
        - name: wallarm
          mountPath: /opt/wallarm/etc/wallarm
      volumes:
      - name: wallarm
        emptyDir: {}
      - name: wallarm-acl
        emptyDir: {}
      - name: wallarm-cache
        emptyDir: {}
      - name: wallarm-config
        configMap:
          name: my-wallarm-oob-wallarm-oob-processing
      - name: certs
        secret:
          secretName: my-wallarm-oob-wallarm-oob-processing-certs
      - name: client-certs
        secret:
          secretName: my-wallarm-oob-wallarm-oob-agent-client-certs
      - name: responder-config
        configMap:
          name: my-wallarm-oob-wallarm-oob-processing-responder
---
# Source: wallarm-oob/templates/processing-hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: my-wallarm-oob-wallarm-oob-processing
  annotations:
    
  labels:
    app.kubernetes.io/version: "4.10.4"
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
    app.kubernetes.io/component: "processing"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-wallarm-oob-wallarm-oob-processing
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 95
  - type: Resource
    resource:
      name: memory
      targetAverageUtilization: 90
---
# Source: wallarm-oob/templates/processing-cert.yaml
# Generate a CA Certificate used to sign certificates
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-wallarm-oob-wallarm-oob-processing-root-cert
  namespace: default
spec:
  secretName: my-wallarm-oob-wallarm-oob-processing-root-cert
  duration: "43800h0m0s"
  issuerRef:
    name: my-wallarm-oob-wallarm-oob-processing-self-signed-issuer
  commonName: "ca.wallarm.oob-ebpf"
  isCA: true
  subject:
    organizations:
      - wallarm-oob-ebpf
---
# Source: wallarm-oob/templates/processing-cert.yaml
# Generate a server certificate for the server
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-wallarm-oob-wallarm-oob-processing
  namespace: default
spec:
  secretName: my-wallarm-oob-wallarm-oob-processing-certs
  duration: "8760h0m0s"
  issuerRef:
    name: my-wallarm-oob-wallarm-oob-processing-root-issuer
  dnsNames:
    - my-wallarm-oob-wallarm-oob-processing
    - my-wallarm-oob-wallarm-oob-processing.default
    - my-wallarm-oob-wallarm-oob-processing.default.svc
  subject:
    organizations:
      - wallarm-oob-ebpf
---
# Source: wallarm-oob/templates/processing-cert.yaml
# Generate a client certificate for the agent
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-wallarm-oob-wallarm-oob-agent-client
  namespace: default
spec:
  secretName: my-wallarm-oob-wallarm-oob-agent-client-certs
  duration: "8760h0m0s"
  issuerRef:
    name: my-wallarm-oob-wallarm-oob-processing-root-issuer
  dnsNames:
    - my-wallarm-oob-wallarm-oob-agent
    - my-wallarm-oob-wallarm-oob-agent.default
  subject:
    organizations:
      - wallarm-oob-ebpf
---
# Source: wallarm-oob/templates/processing-cert.yaml
# Create a selfsigned Issuer, in order to create a root CA certificate
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-wallarm-oob-wallarm-oob-processing-self-signed-issuer
  namespace: default
spec:
  selfSigned: {}
---
# Source: wallarm-oob/templates/processing-cert.yaml
# Create an Issuer that uses the above CA to issue certs
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-wallarm-oob-wallarm-oob-processing-root-issuer
  namespace: default
spec:
  ca:
    secretName: my-wallarm-oob-wallarm-oob-processing-root-cert
---
# Source: wallarm-oob/templates/agent-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-wallarm-oob-wallarm-oob-agent-token
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: before-hook-creation
    
  labels:
    helm.sh/chart: "wallarm-oob"
    helm.sh/version: "0.10.28"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "wallarm-oob"
    app.kubernetes.io/instance: "my-wallarm-oob"
type: Opaque
data:
  token: "cWJrZ3FjY3o="
