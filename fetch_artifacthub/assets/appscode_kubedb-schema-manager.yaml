---
# Source: kubedb-schema-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-kubedb-schema-manager
  namespace: default
  labels:
    helm.sh/chart: kubedb-schema-manager-v0.23.0
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
    app.kubernetes.io/version: "v0.23.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kubedb-schema-manager/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-kubedb-schema-manager
  labels:
    helm.sh/chart: kubedb-schema-manager-v0.23.0
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
    app.kubernetes.io/version: "v0.23.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs: ["*"]
- apiGroups:
  - schema.kubedb.com
  resources:
  - mariadbdatabases
  - mongodbdatabases
  - mysqldatabases
  - postgresdatabases
  - redisdatabases
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
- apiGroups:
  - schema.kubedb.com
  resources:
  - mariadbdatabases/finalizers
  - mongodbdatabases/finalizers
  - mysqldatabases/finalizers
  - postgresdatabases/finalizers
  - redisdatabases/finalizers
  verbs: ["update"]
- apiGroups:
  - schema.kubedb.com
  resources:
  - mariadbdatabases/status
  - mongodbdatabases/status
  - mysqldatabases/status
  - postgresdatabases/status
  - redisdatabases/status
  verbs: ["get", "patch", "update"]
- apiGroups:
  - kubedb.com
  resources:
  - mariadbs
  - mongodbs
  - mysqls
  - postgreses
  - redises
  verbs: ["get", "list", "watch"]
- apiGroups:
  - catalog.kubedb.com
  resources:
  - mariadbversions
  - mongodbversions
  - mysqlversions
  - postgresversions
  - redisversions
  verbs: ["get", "list", "watch"]
- apiGroups:
  - engine.kubevault.com
  resources:
  - mariadbroles
  - mongodbroles
  - mysqlroles
  - postgresroles
  - redisroles
  - secretaccessrequests
  - secretengines
  verbs: ["get", "list", "watch", "create", "patch", "delete"]
- apiGroups:
  - engine.kubevault.com
  resources:
  - secretaccessrequests/status
  verbs: ["get", "list", "patch"]
- apiGroups:
  - kubevault.com
  resources:
  - vaultservers
  verbs: ["get", "list", "watch"]
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - appbindings
  verbs: ["get", "list", "watch", "create", "patch", "delete"]
- apiGroups:
  - stash.appscode.com
  resources:
  - restoresessions
  - repositories
  verbs: ["get", "list", "watch", "create", "patch", "delete"]
- apiGroups:
  - batch
  resources:
  - jobs
  verbs: ["get", "list", "watch", "create", "patch", "delete"]
- apiGroups:
  - ""
  resources:
  - pods
  - configmaps
  - secrets
  - serviceaccounts
  verbs: ["get", "list", "watch", "create", "patch", "delete"]
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  verbs: ["get", "list", "watch"]
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["create"]
- apiGroups:
  - ""
  resources:
  - nodes
  verbs: ["get", "list", "watch"]
---
# Source: kubedb-schema-manager/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-kubedb-schema-manager
  labels:
    helm.sh/chart: kubedb-schema-manager-v0.23.0
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
    app.kubernetes.io/version: "v0.23.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-kubedb-schema-manager
subjects:
- kind: ServiceAccount
  name: my-kubedb-schema-manager
  namespace: default
---
# Source: kubedb-schema-manager/templates/license-checker-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-kubedb-schema-manager-license-checker
  labels:
    helm.sh/chart: kubedb-schema-manager-v0.23.0
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
    app.kubernetes.io/version: "v0.23.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-checker
subjects:
- kind: ServiceAccount
  name: my-kubedb-schema-manager
  namespace: default
---
# Source: kubedb-schema-manager/templates/license-reader-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-kubedb-schema-manager-license-reader
  labels:
    helm.sh/chart: kubedb-schema-manager-v0.23.0
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
    app.kubernetes.io/version: "v0.23.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-reader
subjects:
- kind: ServiceAccount
  name: my-kubedb-schema-manager
  namespace: default
---
# Source: kubedb-schema-manager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kubedb-schema-manager
  namespace: default
  labels:
    helm.sh/chart: kubedb-schema-manager-v0.23.0
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
    app.kubernetes.io/version: "v0.23.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: metrics
    port: 8080
    targetPort: metrics
  selector:
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
---
# Source: kubedb-schema-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-kubedb-schema-manager
  namespace: default
  labels:
    helm.sh/chart: kubedb-schema-manager-v0.23.0
    app.kubernetes.io/name: kubedb-schema-manager
    app.kubernetes.io/instance: my-kubedb-schema-manager
    app.kubernetes.io/version: "v0.23.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubedb-schema-manager
      app.kubernetes.io/instance: my-kubedb-schema-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubedb-schema-manager
        app.kubernetes.io/instance: my-kubedb-schema-manager
      annotations:
        reload: VtHLfBSl
    spec:
      
      serviceAccountName: my-kubedb-schema-manager
      containers:
      - name: operator
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        image: ghcr.io/kubedb/kubedb-schema-manager:v0.23.0
        imagePullPolicy: IfNotPresent
        args:
        - operator
        - --v=3
        - --use-kubeapiserver-fqdn-for-aks=true
        - --metrics-bind-address=:8080
        - --health-probe-bind-address=:8081
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: metrics
          containerPort: 8080
        - name: probes
          containerPort: 8081
        volumeMounts:
        - mountPath: /tmp
          name: tmpdir
        readinessProbe:
          httpGet:
            path: /readyz
            port: probes
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: probes
          initialDelaySeconds: 15
          periodSeconds: 20
        resources:
          {}
      volumes:
      - name: tmpdir
        emptyDir: {}
      securityContext:
        {}
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: kubedb-schema-manager/templates/license.yaml
# if license file is provided, then create a secret for license
---
# Source: kubedb-schema-manager/templates/garbage-collector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubedb:garbage-collector:psp
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - policy
  verbs: ["use"]
  resources:
  - podsecuritypolicies
---
# Source: kubedb-schema-manager/templates/license-checker-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-checker
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Get cluster id
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs: ["get"]
- apiGroups:
  - ""
  resources:
  - configmaps
  resourceNames: ["ace-info"]
  verbs: ["get"]
# Issue license
- apiGroups:
  - proxyserver.licenses.appscode.com
  resources:
  - licenserequests
  verbs: ["create"]
# Detect workload/owner of operator pod
- apiGroups:
  - ""
  resources:
  - pods
  verbs: ["get"]
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs: ["get"]
# Write events in case of license verification failure
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["get", "list", "create", "patch"]
---
# Source: kubedb-schema-manager/templates/license-reader-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-reader
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Detect license server endpoint for kubedb addons
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get"]
- nonResourceURLs:
  - /appscode/license
  verbs: ["get"]
---
# Source: kubedb-schema-manager/templates/user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubedb:schema-manager:admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - schema.kubedb.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: kubedb-schema-manager/templates/user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubedb:schema-manager:edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - schema.kubedb.com
  resources:
  - "*"
  verbs: ["create", "get", "list", "watch", "update", "patch"]
---
# Source: kubedb-schema-manager/templates/user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubedb:schema-manager:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - schema.kubedb.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
---
# Source: kubedb-schema-manager/templates/garbage-collector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubedb:garbage-collector:psp
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubedb:garbage-collector:psp
subjects:
- kind: ServiceAccount
  name: generic-garbage-collector
  namespace: kubedb
