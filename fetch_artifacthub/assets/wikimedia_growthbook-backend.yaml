---
# Source: growthbook-backend/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:  
  name: growthbook-backend-my-growthbook-backend
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      app: growthbook-backend
      release: my-growthbook-backend
  policyTypes:
    - Ingress
  ingress:
    - ports:      
      - port: 3100
        protocol: TCP      
      - port: 9081
        protocol: TCP
      - port: 1667
        protocol: TCP
---
# Source: growthbook-backend/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: growthbook-backend-my-growthbook-backend-mongodb
  labels:
    app: mongodb
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      app: mongodb
      release: my-growthbook-backend
  policyTypes:
    - Ingress
  ingress:
    - ports:
      - port: 27017
        protocol: TCP
---
# Source: growthbook-backend/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:  
  name: growthbook-backend-my-growthbook-backend-secret-config
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
type: Opaque
data:
  ENCRYPTION_KEY: "b3ZlcnJpZGVfbWU="
  JWT_SECRET: "b3ZlcnJpZGVfbWU="
  MONGODB_PASSWORD: "b3ZlcnJpZGVfbWU="
---
# Source: growthbook-backend/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: growthbook-backend-config  
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
  namespace: default
data:
  config.yml: |
    datasources: {}
    dimensions: {}
    metrics: {}
    segments: {}
---
# Source: growthbook-backend/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:  
  name: growthbook-backend-my-growthbook-backend-envoy-config-volume
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
data:
  envoy.yaml: |-
    admin:
      access_log:
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          # Don't write this to stdout/stderr to not send all the requests for metrics from prometheus to logstash.
          path: /var/log/envoy/admin-access.log
      address:    
        pipe:
          path: /var/run/envoy/admin.sock
      # Don't apply global connection limits to the admin listener so we can still get metrics when overloaded
      ignore_global_conn_limit: true
    layered_runtime:
      layers:
        # Limit the total number of allowed active connections per envoy instance.
        # Envoys configuration best practice "Configuring Envoy as an edge proxy" uses 50k connections
        # which is still essentially unlimited in our use case.
        - name: static_layer_0
          static_layer:
            overload:
              global_downstream_max_connections: 50000
        # Include an empty admin_layer *after* the static layer, so we can
        # continue to make changes via the admin console and they'll overwrite
        # values from the previous layer.
        - name: admin_layer_0
          admin_layer: {}
    static_resources:
      clusters:  
      - name: LOCAL_default
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            common_http_protocol_options:
              idle_timeout: 4.5s
            # This allows switching on protocol based on what protocol the downstream connection used.
            use_downstream_protocol_config: {}
        connect_timeout: 1.0s
        lb_policy: round_robin
        load_assignment:
          cluster_name: LOCAL_default
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address: {address: 127.0.0.1, port_value: 3100 }
        type: strict_dns  
      - name: admin_interface
        type: static
        connect_timeout: 1.0s
        lb_policy: round_robin
        load_assignment:
          cluster_name: admin_interface
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:            
                  pipe:
                    path: /var/run/envoy/admin.sock
      listeners:  
      - address:
          socket_address:
            address: "::"
            port_value: 1667
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              http_protocol_options: {accept_http_10: true}
              route_config:
                virtual_hosts:
                - domains: ['*']
                  name: admin_interface
                  routes:
                  - match: {prefix: /stats }
                    route:
                      cluster: admin_interface
                      timeout: 5.0s
                  - match: {prefix: /healthz}
                    direct_response:
                      status: 200
                      body: {inline_string: "OK"}
                  - match: {prefix: /}
                    direct_response:
                      status: 403
                      body: {inline_string: "You can't access this url."}
              stat_prefix: admin_interface  
      - address:
          socket_address:
            address: "0.0.0.0"
            port_value: 1667
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              http_protocol_options: {accept_http_10: true}
              route_config:
                virtual_hosts:
                - domains: ['*']
                  name: admin_interface
                  routes:
                  - match: {prefix: /stats }
                    route:
                      cluster: admin_interface
                      timeout: 5.0s
                  - match: {prefix: /healthz}
                    direct_response:
                      status: 200
                      body: {inline_string: "OK"}
                  - match: {prefix: /}
                    direct_response:
                      status: 403
                      body: {inline_string: "You can't access this url."}
              stat_prefix: admin_interface  
      - address:
          socket_address:
            address: "::"
            port_value: 9081
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              access_log:
              - filter:
                  status_code_filter:
                    comparison:
                      op: "GE"
                      value:
                        default_value: 200
                        runtime_key: tls_terminator_min_log_code
                # TODO: use a stream logger once we upgrade from 1.15
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/dev/stdout"
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              http_protocol_options: {accept_http_10: true}
              route_config:
                virtual_hosts:
                - domains: ['*']
                  name: tls_termination
                  routes:
                  - match: {prefix: /}
                    route:
                      cluster: LOCAL_default
                      timeout: 185s        
              stat_prefix: ingress_https_my-growthbook-backend
              server_name: my-growthbook-backend-tls
              server_header_transformation: APPEND_IF_ABSENT
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificate_sds_secret_configs:
                  name: tls_sds
                  sds_config:
                    path_config_source:
                      path: /etc/envoy/tls_certificate_sds_secret.yaml
                    resource_api_version: V3
        listener_filters:
        - name: envoy.filters.listener.tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector  
      - address:
          socket_address:
            address: "0.0.0.0"
            port_value: 9081
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              access_log:
              - filter:
                  status_code_filter:
                    comparison:
                      op: "GE"
                      value:
                        default_value: 200
                        runtime_key: tls_terminator_min_log_code
                # TODO: use a stream logger once we upgrade from 1.15
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/dev/stdout"
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              http_protocol_options: {accept_http_10: true}
              route_config:
                virtual_hosts:
                - domains: ['*']
                  name: tls_termination
                  routes:
                  - match: {prefix: /}
                    route:
                      cluster: LOCAL_default
                      timeout: 185s        
              stat_prefix: ingress_https_my-growthbook-backend
              server_name: my-growthbook-backend-tls
              server_header_transformation: APPEND_IF_ABSENT
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificate_sds_secret_configs:
                  name: tls_sds
                  sds_config:
                    path_config_source:
                      path: /etc/envoy/tls_certificate_sds_secret.yaml
                    resource_api_version: V3
        listener_filters:
        - name: envoy.filters.listener.tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
  tls_certificate_sds_secret.yaml: |-
    resources:
    - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
      name: tls_sds
      tls_certificate:
        certificate_chain:
          filename: /etc/envoy/ssl/tls.crt
        private_key:
          filename: /etc/envoy/ssl/tls.key
---
# Source: growthbook-backend/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config  
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
  namespace: default
data:
  mongod.conf: |
    net:
      bindIpAll: true
      port: 27017
    storage:
      dbPath: /data/db
---
# Source: growthbook-backend/templates/persistentvolumeclaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Gi
  storageClassName: ceph-rbd-ssd
---
# Source: growthbook-backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:  
  name: growthbook-backend-my-growthbook-backend-tls-service
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: growthbook-backend
    routed_via: my-growthbook-backend
  ports:
    - name: growthbook-backend-my-growthbook-backend-https
      protocol: TCP
      port: 9081
---
# Source: growthbook-backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: growthbook-backend-my-growthbook-backend-mongodb
  labels:
    app: mongodb
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: mongodb
    release: my-growthbook-backend
    routed_via: my-growthbook-backend
  ports:
    - name: growthbook-backend-my-growthbook-backend-mongodb
      protocol: TCP
      port: 27017
      targetPort: 27017
---
# Source: growthbook-backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:  
  name: growthbook-backend-my-growthbook-backend
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  selector:    
    matchLabels:
      app: growthbook-backend
      release: my-growthbook-backend
  replicas: 1
  template:
    metadata:
      labels:        
        app: growthbook-backend
        release: my-growthbook-backend
        routed_via: my-growthbook-backend
      annotations:
        checksum/growthbook-backend-config: 13e3c590bcbfc734f57115ab748b623d5b38551c3232049f59ee60f39b706cc6        
        checksum/secrets: 6845de10872058c194758e6bd29660b268820bf7ab21f5022656e53c43118fea        
        checksum/tls-config: 437255f1d843678f1d406813b7c33066598eb5a7c4840dd591616ec524654a97
        envoyproxy.io/scrape: "true"
        envoyproxy.io/port: "1667"
    spec:
      containers:        
        # The main application container
        - name: growthbook-backend-my-growthbook-backend
          image: "docker-registry.wikimedia.org/repos/data-engineering/growthbook:latest"
          imagePullPolicy: IfNotPresent  
          command:
            - /opt/growthbook/node_modules/wsrun/bin/wsrun.js
          args:
            - "-p"
            - "back-end"
            - "--no-prefix"
            - "-c"
            - "start"
          ports:
            - containerPort: 3100
          livenessProbe:
            tcpSocket:
              port: 3100
          readinessProbe:
            httpGet:
              path: /
              port: 3100
          env:
            - name: SERVICE_IDENTIFIER
              value: growthbook-backend-my-growthbook-backend
            - name: API_HOST
              value: "override_me"
            - name: APP_ORIGIN
              value: "override_me"
            - name: MONGODB_DBNAME
              value: "override_me"
            - name: MONGODB_EXTRA_ARGS
              value: "?authSource=admin"
            - name: MONGODB_HOST
              value: "override_me"
            - name: MONGODB_PORT
              value: "27017"
            - name: MONGODB_USERNAME
              value: "override_me"
            - name: NODE_ENV
              value: "production"
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: growthbook-backend-my-growthbook-backend-secret-config
                  key: ENCRYPTION_KEY
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: growthbook-backend-my-growthbook-backend-secret-config
                  key: JWT_SECRET
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: growthbook-backend-my-growthbook-backend-secret-config
                  key: MONGODB_PASSWORD
          
          resources:
            requests:
              cpu: 2
              memory: 4Gi
            limits:
              cpu: 2
              memory: 4Gi
          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
               drop:
               - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /opt/growthbook/config/
              name: growthbook-backend-config-volume        
        - name: growthbook-backend-my-growthbook-backend-tls-proxy
          image: docker-registry.wikimedia.org/envoy:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: SERVICE_NAME
              value: my-growthbook-backend
            - name: SERVICE_ZONE
              value: "default"
            - name: ADMIN_PORT
              value: "1666"
            - name: DRAIN_TIME_S
              value: "600"
            - name: DRAIN_STRATEGY
              value: gradual
          ports:
            - containerPort: 9081
          readinessProbe:
            httpGet:
              path: /healthz
              port: 1667
          volumeMounts:
            - name: envoy-config-volume
              mountPath: /etc/envoy/
              readOnly: true
            - name: tls-certs-volume
              mountPath: /etc/envoy/ssl
              readOnly: true
        
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 200m
              memory: 100Mi  
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
               drop:
               - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
      volumes:        
        - configMap:
            name: growthbook-backend-config
          name: growthbook-backend-config-volume        
        - name: envoy-config-volume
          configMap:
            name: growthbook-backend-my-growthbook-backend-envoy-config-volume
        - name: tls-certs-volume
          secret:
            secretName: growthbook-backend-my-growthbook-backend-tls-proxy-certs
---
# Source: growthbook-backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: growthbook-backend-my-growthbook-backend-mongodb
  labels:
    app: mongodb
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: mongodb
      release: my-growthbook-backend
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongodb
        release: my-growthbook-backend
        routed_via: my-growthbook-backend
      annotations:
        checksum/mongodb-config: 920371b4cbe0c0f281aa2039acf4c82bff2d3236b5302c688eea7eefae169981
    spec:
      containers:
        - name: growthbook-backend-my-growthbook-backend-mongodb
          image: docker-registry.wikimedia.org/repos/data-engineering/growthbook:latest
          imagePullPolicy: IfNotPresent
          command: ['/opt/mongodb/bin/mongod']
          args:
          - --config
          - /etc/mongodb/mongod.conf
          ports:
          - containerPort: 27017
            protocol: TCP
          livenessProbe: 
            tcpSocket:
              port: 27017
          readinessProbe: 
            tcpSocket:
              port: 27017
          resources:
            requests:
              cpu: 1
              memory: 1Gi
            limits:
              cpu: 1
              memory: 1Gi
          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
               drop:
               - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /etc/mongodb/
              name: mongodb-config-volume
            - mountPath: /data/db
              name: mongodb-data
      volumes:
        - configMap:
            name: mongodb-config
          name: mongodb-config-volume
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-pvc
            readOnly: false
---
# Source: growthbook-backend/templates/vendor/mesh/certificate_1.1.0.tpl
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:  
  name: growthbook-backend-my-growthbook-backend-tls-proxy-certs
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  # CommonName is a common name to be used on the Certificate. The CommonName
  # should have a length of 64 characters or fewer to avoid generating invalid
  # CSRs. This value is ignored by TLS clients when any subject alt name is
  # set. This is x509 behavior: https://tools.ietf.org/html/rfc6125#section-6.4.4
  commonName: growthbook-backend-my-growthbook-backend-tls-proxy-certs
  secretName: growthbook-backend-my-growthbook-backend-tls-proxy-certs
  dnsNames:
    - growthbook-backend-my-growthbook-backend-tls-service.default.svc.cluster.local
    
  # revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificat's history.
  # If not set, cert-manager will not clean up old CertificateRequests at all. Setting this to 2 makes to have the CR from the
  # previous Certificate still around after refresh.
  revisionHistoryLimit: 2
  issuerRef:
    # This references the cfssl ClusterIssuer "discovery" defined in admin_ng/cert-manager/cfssl-issuer-values.yaml
    name: discovery
    group: cfssl-issuer.wikimedia.org
    kind: ClusterIssuer
---
# Source: growthbook-backend/templates/ingress.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:  
  name: growthbook-backend-my-growthbook-backend
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  host: growthbook-backend-my-growthbook-backend-tls-service.default.svc.cluster.local
  trafficPolicy:
    tls:
      mode: SIMPLE
      caCertificates: /etc/ssl/certs/wmf-ca-certificates.crt
      subjectAltNames:
      # Discovery certificate (cergen)
      - default.discovery.wmnet
      # Default tls-service certificates (tls.servicefqdn)
      - growthbook-backend-my-growthbook-backend-tls-service.default.svc.cluster.local
      # Gateway hosts
      - default.discovery.wmnet
      - default.svc.codfw.wmnet
      - default.svc.eqiad.wmnet
      
      # Route hosts (in case existing Gateway is used)
      - default.discovery.wmnet
      - default.svc.codfw.wmnet
      - default.svc.eqiad.wmnet
---
# Source: growthbook-backend/templates/ingress.yaml
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:  
  name: growthbook-backend-my-growthbook-backend
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  selector:
    # This is the istio-ingressgateway this gateway will be attached to (provided by SRE)
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      # credentialName is a secret that needs to be created in istio-system namespace.
      # This is done in a generic fashion by helmfile.d/admin_ng/helmfile_namespace_certs.yaml
      credentialName: default-tls-certificate
      mode: SIMPLE
    hosts:
    # TLS hosts can only be registered once. Another gateway using the same host will be ignored.
    - default.discovery.wmnet
    - default.svc.codfw.wmnet
    - default.svc.eqiad.wmnet
---
# Source: growthbook-backend/templates/ingress.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:  
  name: growthbook-backend-my-growthbook-backend
  labels:
    app: growthbook-backend
    chart: growthbook-backend-0.0.6
    release: my-growthbook-backend
    heritage: Helm
spec:
  hosts:
  - default.discovery.wmnet
  - default.svc.codfw.wmnet
  - default.svc.eqiad.wmnet
  
  gateways:
  - growthbook-backend-my-growthbook-backend
  http:
  - name: "default-destination"
    route:
    - destination:
        host: growthbook-backend-my-growthbook-backend-tls-service.default.svc.cluster.local
        port:
          number: 9081
---
# Source: growthbook-backend/templates/tests/test-service-checker.yaml
apiVersion: v1
kind: Pod
metadata:
  name: 'growthbook-backend-my-growthbook-backend-service-checker'
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  containers:
  - name: 'growthbook-backend-my-growthbook-backend-service-checker'
    image: "docker-registry.wikimedia.org/service-checker"
    imagePullPolicy: IfNotPresent
    args: ["-t", "5", '$(GROWTHBOOK_BACKEND_MY_GROWTHBOOK_BACKEND_SERVICE_HOST)', 'http://growthbook-backend-my-growthbook-backend:3100']    
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
         drop:
         - ALL
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
  dnsPolicy: ClusterFirst
  restartPolicy: Never
