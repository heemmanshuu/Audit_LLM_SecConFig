---
# Source: swo-k8s-collector/charts/kube-state-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-5.25.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/version: "2.13.0"
  name: my-swo-k8s-collector-kube-state-metrics
  namespace: default
---
# Source: swo-k8s-collector/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-swo-k8s-collector
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
---
# Source: swo-k8s-collector/templates/common-env-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-swo-k8s-collector-common-env
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
data:
  CLUSTER_NAME: "<CLUSTER_NAME>"
  CLUSTER_UID: "<CLUSTER_UID>"
  OTEL_ENVOY_ADDRESS: "<OTEL_ENVOY_ADDRESS>"
  OTEL_ENVOY_ADDRESS_TLS_INSECURE: "false"
  MANIFEST_VERSION: "4.0.0"
  APP_VERSION: "0.11.4"
---
# Source: swo-k8s-collector/templates/events-collector-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-swo-k8s-collector-events-config
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
data:
  events.config: |
        exporters:
          otlp:
            endpoint: ${OTEL_ENVOY_ADDRESS}
            headers:
              Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            retry_on_failure:
              enabled: true
              initial_interval: 10s
              max_elapsed_time: 300s
              max_interval: 30s
            sending_queue:
              enabled: true
              num_consumers: 10
              queue_size: 1000
            tls:
              insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
        extensions:
          health_check:
            endpoint: 0.0.0.0:13133
        processors:
          batch:
            send_batch_max_size: 512
            send_batch_size: 512
            timeout: 1s
          groupbyattrs/manifest:
            keys:
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.node.name
            - k8s.namespace.name
            - k8s.service.name
            - k8s.persistentvolume.name
            - k8s.persistentvolumeclaim.name
            - k8s.ingress.name
            - sw.k8s.ingress.type
          memory_limiter:
            check_interval: 1s
            limit_mib: 512
            spike_limit_mib: 128
          resource/events:
            attributes:
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              key: sw.k8s.log.type
              value: event
          resource/manifest:
            attributes:
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              key: sw.k8s.log.type
              value: manifest
          swk8sattributes:
            auth_type: serviceAccount
            cronjob:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.cronjob.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: cronjob
                  key_regex: (.*)
                  tag_name: k8s.cronjob.labels.$$1
            daemonset:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.daemonset.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: daemonset
                  key_regex: (.*)
                  tag_name: k8s.daemonset.labels.$$1
            deployment:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.deployment.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: deployment
                  key_regex: (.*)
                  tag_name: k8s.deployment.labels.$$1
            extract:
              labels:
              - from: pod
                key_regex: (.*)
                tag_name: k8s.pod.labels.$$1
              - from: namespace
                key_regex: (.*)
                tag_name: k8s.namespace.labels.$$1
              metadata:
              - k8s.deployment.name
              - k8s.replicaset.name
              - k8s.daemonset.name
              - k8s.job.name
              - k8s.cronjob.name
              - k8s.statefulset.name
              - k8s.node.name
            job:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.job.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: job
                  key_regex: (.*)
                  tag_name: k8s.job.labels.$$1
            node:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.node.name
              extract:
                labels:
                - from: node
                  key_regex: (.*)
                  tag_name: k8s.node.labels.$$1
            passthrough: false
            persistentvolume:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.persistentvolume.name
              extract:
                labels:
                - from: persistentvolume
                  key_regex: (.*)
                  tag_name: k8s.persistentvolume.labels.$$1
            persistentvolumeclaim:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.persistentvolumeclaim.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: persistentvolumeclaim
                  key_regex: (.*)
                  tag_name: k8s.persistentvolumeclaim.labels.$$1
            pod_association:
            - sources:
              - from: resource_attribute
                name: k8s.pod.name
              - from: resource_attribute
                name: k8s.namespace.name
            replicaset:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.replicaset.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: replicaset
                  key_regex: (.*)
                  tag_name: k8s.replicaset.labels.$$1
            service:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.service.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: service
                  key_regex: (.*)
                  tag_name: k8s.service.labels.$$1
            set_object_existence: true
            statefulset:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.statefulset.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                labels:
                - from: statefulset
                  key_regex: (.*)
                  tag_name: k8s.statefulset.labels.$$1
          transform/cleanup_attributes_for_nonexisting_entities:
            log_statements:
            - context: log
              statements:
              - delete_key(resource.attributes, "k8s.pod.name") where resource.attributes["sw.k8s.pod.found"]
                == "false"
              - delete_key(resource.attributes, "k8s.deployment.name") where resource.attributes["sw.k8s.deployment.found"]
                == "false"
              - delete_key(resource.attributes, "k8s.statefulset.name") where resource.attributes["sw.k8s.statefulset.found"]
                == "false"
              - delete_key(resource.attributes, "k8s.replicaset.name") where resource.attributes["sw.k8s.replicaset.found"]
                == "false"
              - delete_key(resource.attributes, "k8s.daemonset.name") where resource.attributes["sw.k8s.daemonset.found"]
                == "false"
              - delete_key(resource.attributes, "k8s.job.name") where resource.attributes["sw.k8s.job.found"]
                == "false"
              - delete_key(resource.attributes, "k8s.cronjob.name") where resource.attributes["sw.k8s.cronjob.found"]
                == "false"
              - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"]
                == "false"
              - delete_key(resource.attributes, "sw.k8s.pod.found")
              - delete_key(resource.attributes, "sw.k8s.deployment.found")
              - delete_key(resource.attributes, "sw.k8s.statefulset.found")
              - delete_key(resource.attributes, "sw.k8s.replicaset.found")
              - delete_key(resource.attributes, "sw.k8s.daemonset.found")
              - delete_key(resource.attributes, "sw.k8s.job.found")
              - delete_key(resource.attributes, "sw.k8s.cronjob.found")
              - delete_key(resource.attributes, "sw.k8s.node.found")
          transform/entity_attributes:
            log_statements:
            - context: log
              statements:
              - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "Pod"
              - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "Deployment"
              - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "StatefulSet"
              - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "ReplicaSet"
              - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "DaemonSet"
              - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "Job"
              - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "CronJob"
              - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
                where resource.attributes["k8s.object.kind"] == "Node"
              - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"])
                where attributes["k8s.namespace.name"] != nil
              - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"]
                != nil
          transform/manifest:
            error_mode: ignore
            log_statements:
            - context: log
              statements:
              - set(attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
              - set(attributes["watch.type"], body["type"]) where IsMap(body) and body["type"]
                != nil
              - set(body, body["object"]) where IsMap(body) and body["object"] != nil
              - set(attributes["k8s.pod.name"], body["metadata"]["name"]) where body["kind"]
                == "Pod"
              - set(attributes["k8s.deployment.name"], body["metadata"]["name"]) where body["kind"]
                == "Deployment"
              - set(attributes["k8s.statefulset.name"], body["metadata"]["name"]) where body["kind"]
                == "StatefulSet"
              - set(attributes["k8s.replicaset.name"], body["metadata"]["name"]) where body["kind"]
                == "ReplicaSet"
              - set(attributes["k8s.daemonset.name"], body["metadata"]["name"]) where body["kind"]
                == "DaemonSet"
              - set(attributes["k8s.job.name"], body["metadata"]["name"]) where body["kind"]
                == "Job"
              - set(attributes["k8s.cronjob.name"], body["metadata"]["name"]) where body["kind"]
                == "CronJob"
              - set(attributes["k8s.node.name"], body["metadata"]["name"]) where body["kind"]
                == "Node"
              - set(attributes["k8s.service.name"], body["metadata"]["name"]) where body["kind"]
                == "Service"
              - set(attributes["k8s.persistentvolume.name"], body["metadata"]["name"]) where
                body["kind"] == "PersistentVolume"
              - set(attributes["k8s.persistentvolumeclaim.name"], body["metadata"]["name"])
                where body["kind"] == "PersistentVolumeClaim"
              - set(attributes["k8s.namespace.name"], body["metadata"]["namespace"])
              - set(attributes["k8s.ingress.name"], body["metadata"]["name"]) where body["kind"]
                == "Ingress" or body["kind"] == "VirtualService"
              - set(attributes["sw.k8s.ingress.type"], body["kind"]) where body["kind"] ==
                "Ingress" or body["kind"] == "VirtualService"
              - set(attributes["k8s.object.kind"], body["kind"]) where body["kind"] != nil
              - delete_key(attributes, "k8s.resource.name")
              - delete_key(attributes, "event.name")
              - delete_key(attributes, "event.domain")
              - set(body, body.string)
          transform/namespace:
            log_statements:
            - context: log
              statements:
              - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
          transform/severity:
            log_statements:
            - context: log
              statements:
              - set(severity_text, "Error") where attributes["k8s.event.reason"] == "Failed"
                or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
                == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
                or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
                == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
                or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
                == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
                or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
                == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
                or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
                == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
                or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
                == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
                "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
                or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
                attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
                == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
                or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
                == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
              - set(severity_number, 17) where attributes["k8s.event.reason"] == "Failed"
                or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
                == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
                or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
                == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
                or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
                == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
                or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
                == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
                or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
                == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
                or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
                == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
                "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
                or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
                attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
                == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
                or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
                == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
              - set(severity_text, "Warning") where attributes["k8s.event.reason"] == "ProbeWarning"
                or attributes["k8s.event.reason"] == "Unhealthy"
              - set(severity_number, 13) where attributes["k8s.event.reason"] == "ProbeWarning"
                or attributes["k8s.event.reason"] == "Unhealthy"
        receivers:
          k8s_events: null
          k8sobjects:
            auth_type: serviceAccount
            objects:
            - interval: 60m
              mode: pull
              name: pods
            - mode: watch
              name: pods
            - interval: 60m
              mode: pull
              name: deployments
            - mode: watch
              name: deployments
            - interval: 60m
              mode: pull
              name: statefulsets
            - mode: watch
              name: statefulsets
            - interval: 60m
              mode: pull
              name: replicasets
            - mode: watch
              name: replicasets
            - interval: 60m
              mode: pull
              name: daemonsets
            - mode: watch
              name: daemonsets
            - interval: 60m
              mode: pull
              name: jobs
            - mode: watch
              name: jobs
            - interval: 60m
              mode: pull
              name: cronjobs
            - mode: watch
              name: cronjobs
            - interval: 60m
              mode: pull
              name: nodes
            - mode: watch
              name: nodes
            - interval: 60m
              mode: pull
              name: services
            - mode: watch
              name: services
            - interval: 60m
              mode: pull
              name: persistentvolumes
            - mode: watch
              name: persistentvolumes
            - interval: 60m
              mode: pull
              name: persistentvolumeclaims
            - mode: watch
              name: persistentvolumeclaims
            - interval: 60m
              mode: pull
              name: ingresses
            - mode: watch
              name: ingresses
        service:
          extensions:
          - health_check
          pipelines:
            logs:
              exporters:
              - otlp
              processors:
              - memory_limiter
              - transform/severity
              - transform/namespace
              - transform/entity_attributes
              - resource/events
              - swk8sattributes
              - transform/cleanup_attributes_for_nonexisting_entities
              - batch
              receivers:
              - k8s_events
            logs/manifests:
              exporters:
              - otlp
              processors:
              - memory_limiter
              - transform/manifest
              - groupbyattrs/manifest
              - resource/manifest
              - swk8sattributes
              - transform/cleanup_attributes_for_nonexisting_entities
              - batch
              receivers:
              - k8sobjects
          telemetry:
            logs:
              level: info
            metrics:
              address: 0.0.0.0:8888
---
# Source: swo-k8s-collector/templates/metrics-collector-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-swo-k8s-collector-metrics-config
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
data:
  metrics.config: |
        connectors:
          forward/metric-exporter: null
          forward/prometheus: null
        exporters:
          otlp:
            endpoint: ${OTEL_ENVOY_ADDRESS}
            headers:
              Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            retry_on_failure:
              enabled: true
              initial_interval: 10s
              max_elapsed_time: 300s
              max_interval: 30s
            sending_queue:
              enabled: true
              num_consumers: 20
              queue_size: 1000
            tls:
              insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
        extensions:
          health_check:
            endpoint: 0.0.0.0:13133
        processors:
          attributes/attributes_namespace_status:
            actions:
            - action: insert
              from_attribute: phase
              key: sw.k8s.namespace.status
            include:
              match_type: regexp
              metric_names:
              - k8s.kube_namespace_status_phase
          attributes/attributes_pod_status:
            actions:
            - action: insert
              from_attribute: phase
              key: sw.k8s.pod.status
            include:
              match_type: regexp
              metric_names:
              - kube_pod_status_phase
          attributes/identify_init_container:
            actions:
            - action: insert
              key: sw.k8s.container.init
              value: "true"
            include:
              match_type: regexp
              metric_names:
              - kube_pod_init_container_.*
          attributes/identify_standard_container:
            actions:
            - action: insert
              key: sw.k8s.container.init
              value: "false"
            include:
              match_type: regexp
              metric_names:
              - kube_pod_container_.*
          attributes/remove_prometheus_attributes:
            actions:
            - action: delete
              key: prometheus
            - action: delete
              key: prometheus_replica
          attributes/remove_prometheus_attributes_endpoint:
            actions:
            - action: delete
              key: endpoint
            exclude:
              match_type: regexp
              metric_names:
              - kube_endpoint_.*
          attributes/remove_temp:
            actions:
            - action: delete
              key: temp
              pattern: (.*_temp$)|(^\$.*)
            include:
              match_type: regexp
              metric_names:
              - .*
          attributes/unify_endpoint_attribute:
            actions:
            - action: insert
              from_attribute: endpoint
              key: k8s.service.name
            include:
              match_type: regexp
              metric_names:
              - kube_endpoint_.*
          attributes/unify_node_attribute:
            actions:
            - action: insert
              from_attribute: node
              key: k8s.node.name
            - action: insert
              from_attribute: kubernetes_io_hostname
              key: k8s.node.name
            include:
              match_type: regexp
              metric_names:
              - container_.*
              - kube_node_.*
              - kube_pod_info
              - kube_pod_container_resource_requests
              - kube_pod_container_resource_limits
              - kube_pod_init_container_resource_requests
              - kube_pod_init_container_resource_limits
              - k8s.node_cpu_hourly_cost
              - k8s.node_gpu_hourly_cost
              - k8s.node_ram_hourly_cost
              - k8s.node_total_hourly_cost
              - k8s.node_gpu_count
              - k8s.kubecost_node_is_spot
          attributes/unify_pod_attribute:
            actions:
            - action: insert
              from_attribute: uid
              key: k8s.pod.uid
            include:
              match_type: regexp
              metric_names:
              - kube_pod_.*
          attributes/unify_service_attribute:
            actions:
            - action: insert
              from_attribute: service
              key: k8s.service.name
            - action: insert
              from_attribute: external_name
              key: sw.k8s.service.external_name
            - action: insert
              from_attribute: type
              key: sw.k8s.service.type
            - action: insert
              from_attribute: cluster_ip
              key: sw.k8s.cluster.ip
            include:
              match_type: regexp
              metric_names:
              - kube_service_.*
          attributes/unify_volume_attribute:
            actions:
            - action: insert
              from_attribute: volumename
              key: persistentvolume
            - action: insert
              from_attribute: name
              key: persistentvolumeclaim
            - action: upsert
              from_attribute: claim_namespace
              key: namespace
            include:
              match_type: regexp
              metric_names:
              - kube_persistentvolumeclaim_.*
              - kube_persistentvolume_claim_ref
          batch:
            send_batch_max_size: 512
            send_batch_size: 512
            timeout: 1s
          cumulativetodelta:
            include:
              match_type: strict
              metrics:
              - k8s.node.cpu.usage.seconds.rate
              - k8s.pod.cpu.usage.seconds.rate
              - k8s.container.fs.iops
              - k8s.container.fs.throughput
              - k8s.container.cpu.usage.seconds.rate
              - k8s.container.network.bytes_received
              - k8s.container.network.bytes_transmitted
              - k8s.pod.fs.iops
              - k8s.pod.fs.throughput
              - k8s.pod.fs.reads.rate
              - k8s.pod.fs.writes.rate
              - k8s.pod.fs.reads.bytes.rate
              - k8s.pod.fs.writes.bytes.rate
              - k8s.pod.network.bytes_received
              - k8s.pod.network.bytes_transmitted
              - k8s.pod.network.packets_received
              - k8s.pod.network.packets_transmitted
              - k8s.pod.network.receive_packets_dropped
              - k8s.pod.network.transmit_packets_dropped
              - k8s.node.fs.iops
              - k8s.node.fs.throughput
              - k8s.node.network.bytes_received
              - k8s.node.network.bytes_transmitted
              - k8s.node.network.packets_received
              - k8s.node.network.packets_transmitted
              - k8s.node.network.receive_packets_dropped
              - k8s.node.network.transmit_packets_dropped
              - apiserver_request_not_failed_temp
              - apiserver_request_total_temp
          deltatorate:
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          experimental_metricsgeneration/cluster:
            rules:
            - metric1: apiserver_request_not_failed_temp
              metric2: apiserver_request_total_temp
              name: k8s.apiserver.request.successrate
              operation: percent
              type: calculate
              unit: Percent
          filter/ebpf:
            metrics:
              metric:
              - IsMatch(name, "^ebpf_net.*$")
          filter/histograms:
            metrics:
              metric:
              - type == METRIC_DATA_TYPE_HISTOGRAM
          filter/kube-state-metrics:
            metrics:
              metric:
              - "not(\nname == \"kube_deployment_created\" or\nname == \"kube_deployment_created\"
                or\nname == \"kube_daemonset_created\" or\nname == \"kube_namespace_created\"
                or\nname == \"kube_node_info\" or\nname == \"kube_node_created\" or\nname
                == \"kube_node_status_capacity\" or\nname == \"kube_node_status_condition\"
                or\nname == \"kube_pod_created\" or\nname == \"kube_pod_info\" or\nname ==
                \"kube_pod_owner\" or\nname == \"kube_pod_completion_time\" or\nname == \"kube_pod_status_phase\"
                or\nname == \"kube_pod_status_ready\" or\nname == \"kube_pod_status_reason\"
                or\nname == \"kube_pod_start_time\" or \nIsMatch(name, \"^kube_pod_container_.*$\")
                or \nIsMatch(name, \"^kube_pod_init_container_.*$\") or \nname == \"kube_namespace_status_phase\"
                or\nname == \"kube_deployment_spec_replicas\" or\nname == \"kube_deployment_spec_paused\"
                or\nname == \"kube_deployment_status_replicas\" or\nname == \"kube_deployment_status_replicas_ready\"
                or\nname == \"kube_deployment_status_replicas_available\" or\nname == \"kube_deployment_status_replicas_updated\"
                or\nname == \"kube_deployment_status_replicas_unavailable\" or\nname == \"kube_deployment_status_condition\"
                or\nname == \"kube_replicaset_owner\" or\nname == \"kube_replicaset_created\"
                or\nname == \"kube_replicaset_spec_replicas\" or\nname == \"kube_replicaset_status_ready_replicas\"
                or\nname == \"kube_replicaset_status_replicas\" or\nname == \"kube_statefulset_replicas\"
                or\nname == \"kube_statefulset_status_replicas_ready\" or\nname == \"kube_statefulset_status_replicas_current\"
                or\nname == \"kube_statefulset_status_replicas_updated\" or\nname == \"kube_statefulset_created\"
                or\nname == \"kube_daemonset_status_current_number_scheduled\" or\nname ==
                \"kube_daemonset_status_desired_number_scheduled\" or\nname == \"kube_daemonset_status_updated_number_scheduled\"
                or\nname == \"kube_daemonset_status_number_available\" or\nname == \"kube_daemonset_status_number_misscheduled\"
                or\nname == \"kube_daemonset_status_number_ready\" or\nname == \"kube_daemonset_status_number_unavailable\"
                or\nname == \"kube_resourcequota\" or\nname == \"kube_node_status_allocatable\"
                or\nname == \"kube_node_spec_unschedulable\" or\nname == \"kube_job_info\"
                or\nname == \"kube_job_owner\" or\nname == \"kube_job_created\" or\nname ==
                \"kube_job_complete\" or\nname == \"kube_job_failed\" or\nname == \"kube_job_status_active\"
                or\nname == \"kube_job_status_succeeded\" or\nname == \"kube_job_status_failed\"
                or\nname == \"kube_job_status_start_time\" or\nname == \"kube_job_status_completion_time\"
                or\nname == \"kube_job_spec_completions\" or\nname == \"kube_job_spec_parallelism\"
                or\nname == \"kube_persistentvolume_capacity_bytes\" or\nname == \"kube_persistentvolume_info\"
                or\nname == \"kube_persistentvolume_status_phase\" or\nname == \"kube_persistentvolume_claim_ref\"
                or\nname == \"kube_persistentvolume_created\" or\nname == \"kube_persistentvolumeclaim_info\"
                or\nname == \"kube_persistentvolumeclaim_access_mode\" or\nname == \"kube_persistentvolumeclaim_status_phase\"
                or\nname == \"kube_persistentvolumeclaim_resource_requests_storage_bytes\"
                or\nname == \"kube_persistentvolumeclaim_created\" or\nname == \"kube_pod_spec_volumes_persistentvolumeclaims_info\"
                or\nname == \"kube_service_info\" or\nname == \"kube_service_created\" or\nname
                == \"kube_service_spec_type\" or\nname == \"kube_service_spec_external_ip\"
                or\nname == \"kube_service_status_load_balancer_ingress\" or\nname == \"kube_endpoint_address_not_ready\"
                or\nname == \"kube_endpoint_address_available\" or\nname == \"kube_endpoint_info\"
                or\nname == \"kube_endpoint_created\" or\nname == \"kube_endpoint_ports\"
                or\nname == \"kube_endpoint_address\"\n)\n"
          filter/preprocessing:
            error_mode: ignore
            metrics:
              datapoint:
              - metric.name == "k8s.kube_node_status_ready" and value_double != 1
              - metric.name == "k8s.deployment.condition.available" and value_double != 1
              - metric.name == "k8s.deployment.condition.progressing" and value_double !=
                1
              - metric.name == "k8s.deployment.condition.replicafailure" and value_double
                != 1
              - metric.name == "k8s.pod.status.reason" and value_double != 1
              - metric.name == "k8s.kube_pod_status_phase" and value_double != 1
              - metric.name == "k8s.kube_pod_start_time" and value_double == 0
              - metric.name == "k8s.kube_pod_completion_time" and value_double == 0
              - metric.name == "k8s.persistentvolume.status.phase" and value_double != 1
              - metric.name == "k8s.persistentvolumeclaim.status.phase" and value_double !=
                1
              - metric.name == "k8s.kube_node_created" and value_double == 0
              - metric.name == "k8s.kube_pod_created" and value_double == 0
              - metric.name == "k8s.kube_deployment_created" and value_double == 0
              - metric.name == "k8s.kube_daemonset_created" and value_double == 0
              - metric.name == "k8s.kube_namespace_status_phase" and value_double != 1
              - metric.name == "k8s.kube_namespace_created" and value_double == 0
              - metric.name == "k8s.kube_statefulset_created" and value_double == 0
              - metric.name == "k8s.kube_job_created" and value_double == 0
              - metric.name == "k8s.kube_job_status_completion_time" and value_double == 0
              - metric.name == "k8s.kube_job_status_start_time" and value_double == 0
              - metric.name == "k8s.container.status" and value_double != 1
          filter/prometheus-node-metrics:
            metrics:
              metric:
              - |
                not(
                name == "container_cpu_usage_seconds_total" or
                name == "container_spec_cpu_quota" or
                name == "container_spec_cpu_period" or
                name == "container_memory_working_set_bytes" or
                name == "container_spec_memory_limit_bytes" or
                name == "container_cpu_cfs_throttled_periods_total" or
                name == "container_cpu_cfs_periods_total" or
                name == "container_fs_reads_total" or
                name == "container_fs_writes_total" or
                name == "container_fs_reads_bytes_total" or
                name == "container_fs_writes_bytes_total" or
                name == "container_fs_usage_bytes" or
                name == "container_network_receive_bytes_total" or
                name == "container_network_transmit_bytes_total" or
                name == "container_network_receive_packets_total" or
                name == "container_network_transmit_packets_total" or
                name == "container_network_receive_packets_dropped_total" or
                name == "container_network_transmit_packets_dropped_total" or
                name == "apiserver_request_total" or
                name == "kubelet_volume_stats_available_percent" or
                name == "kubernetes_build_info"
                )
          filter/receiver:
            metrics:
              metric:
              - name == "scrape_duration_seconds"
              - name == "scrape_samples_post_metric_relabeling"
              - name == "scrape_samples_scraped"
              - name == "scrape_series_added"
              - name == "up"
          filter/remove_internal:
            metrics:
              datapoint:
              - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
                == false
          filter/remove_internal_postprocessing:
            metrics:
              datapoint:
              - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
                == true
          filter/remove_temporary_metrics:
            metrics:
              metric:
              - IsMatch(name , ".*_temp")
              - name == "apiserver_request_total"
          groupbyattrs/all:
            keys:
            - kubelet_version
            - container_runtime_version
            - provider_id
            - os_image
            - namespace
            - uid
            - k8s.pod.uid
            - pod_ip
            - host_ip
            - created_by_kind
            - created_by_name
            - host_network
            - priority_class
            - container_id
            - container
            - image
            - image_id
            - k8s.node.name
            - sw.k8s.pod.status
            - sw.k8s.namespace.status
            - sw.k8s.node.status
            - sw.k8s.container.status
            - sw.k8s.container.init
            - daemonset
            - statefulset
            - deployment
            - replicaset
            - job_name
            - cronjob
            - sw.k8s.cluster.version
            - internal_ip
            - job_condition
            - persistentvolumeclaim
            - persistentvolume
            - sw.k8s.persistentvolumeclaim.status
            - sw.k8s.persistentvolume.status
            - storageclass
            - access_mode
            - k8s.service.name
            - sw.k8s.service.external_name
            - sw.k8s.service.type
            - sw.k8s.cluster.ip
          groupbyattrs/node:
            keys:
            - k8s.node.name
          groupbyattrs/pod:
            keys:
            - namespace
            - pod
          memory_limiter:
            check_interval: 1s
            limit_mib: 2560
            spike_limit_mib: 512
          metricstransform/aggregate_node_level:
            transforms:
            - action: insert
              include: k8s.kube_pod_info
              new_name: k8s.node.pods
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
          metricstransform/aggregate_pod_level:
            transforms:
            - action: insert
              include: k8s.kube_pod_container_info
              new_name: k8s.pod.containers
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
          metricstransform/preprocessing:
            transforms:
            - action: insert
              experimental_match_labels:
                condition: Ready
              include: k8s.kube_node_status_condition
              new_name: k8s.kube_node_status_ready
              operations:
              - action: update_label
                label: status
                value_actions:
                - new_value: Ready
                  value: "true"
                - new_value: NotReady
                  value: "false"
                - new_value: Unknown
                  value: unknown
              - action: update_label
                label: status
                new_label: sw.k8s.node.status
            - action: insert
              experimental_match_labels:
                condition: Available
              include: k8s.kube_deployment_status_condition
              new_name: k8s.deployment.condition.available
              operations:
              - action: update_label
                label: status
                new_label: sw.k8s.deployment.condition.available
            - action: insert
              experimental_match_labels:
                condition: Progressing
              include: k8s.kube_deployment_status_condition
              new_name: k8s.deployment.condition.progressing
              operations:
              - action: update_label
                label: status
                new_label: sw.k8s.deployment.condition.progressing
            - action: insert
              experimental_match_labels:
                condition: ReplicaFailure
              include: k8s.kube_deployment_status_condition
              new_name: k8s.deployment.condition.replicafailure
              operations:
              - action: update_label
                label: status
                new_label: sw.k8s.deployment.condition.replicafailure
            - action: insert
              include: k8s.kube_persistentvolume_status_phase
              new_name: k8s.persistentvolume.status.phase
              operations:
              - action: update_label
                label: phase
                new_label: sw.k8s.persistentvolume.status
            - action: insert
              include: k8s.kube_persistentvolumeclaim_status_phase
              new_name: k8s.persistentvolumeclaim.status.phase
              operations:
              - action: update_label
                label: phase
                new_label: sw.k8s.persistentvolumeclaim.status
            - action: insert
              include: k8s.container_fs_reads_total
              new_name: k8s.container_fs_reads_total_temp
            - action: insert
              include: k8s.container_fs_writes_total
              new_name: k8s.container_fs_writes_total_temp
            - action: combine
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: (k8s.container_fs_reads_total_temp|k8s.container_fs_writes_total_temp)
              match_type: regexp
              new_name: k8s.container.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - container
                - pod
                - namespace
              submatch_case: lower
            - action: insert
              include: k8s.container_fs_reads_bytes_total
              new_name: k8s.container_fs_reads_bytes_total_temp
            - action: insert
              include: k8s.container_fs_writes_bytes_total
              new_name: k8s.container_fs_writes_bytes_total_temp
            - action: combine
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: (k8s.container_fs_reads_bytes_total_temp|k8s.container_fs_writes_bytes_total_temp)
              match_type: regexp
              new_name: k8s.container.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - container
                - pod
                - namespace
              submatch_case: lower
            - action: insert
              include: k8s.container_network_receive_bytes_total
              new_name: k8s.container.network.bytes_received
            - action: insert
              include: k8s.container_network_transmit_bytes_total
              new_name: k8s.container.network.bytes_transmitted
            - action: insert
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_cpu_usage_seconds_total
              match_type: regexp
              new_name: k8s.pod.cpu.usage.seconds.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              include: k8s.container_cpu_usage_seconds_total
              new_name: k8s.container.cpu.usage.seconds.rate
            - action: insert
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_memory_working_set_bytes
              match_type: regexp
              new_name: k8s.pod.memory.working_set
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_bytes_total
              match_type: regexp
              new_name: k8s.pod.network.bytes_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_bytes_total
              match_type: regexp
              new_name: k8s.pod.network.bytes_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_packets_total
              match_type: regexp
              new_name: k8s.pod.network.packets_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_packets_total
              match_type: regexp
              new_name: k8s.pod.network.packets_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_packets_dropped_total
              match_type: regexp
              new_name: k8s.pod.network.receive_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_packets_dropped_total
              match_type: regexp
              new_name: k8s.pod.network.transmit_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_reads_total
              match_type: regexp
              new_name: k8s.pod.fs.reads.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_writes_total
              match_type: regexp
              new_name: k8s.pod.fs.writes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_reads_bytes_total
              match_type: regexp
              new_name: k8s.pod.fs.reads.bytes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_writes_bytes_total
              match_type: regexp
              new_name: k8s.pod.fs.writes.bytes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.rate
              new_name: k8s.pod.fs.reads.rate_temp
            - action: insert
              include: k8s.pod.fs.writes.rate
              new_name: k8s.pod.fs.writes.rate_temp
            - action: combine
              include: (k8s.pod.fs.reads.rate_temp|k8s.pod.fs.writes.rate_temp)
              match_type: regexp
              new_name: k8s.pod.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
              submatch_case: lower
            - action: insert
              include: k8s.pod.fs.reads.bytes.rate
              new_name: k8s.pod.fs.reads.bytes.rate_temp
            - action: insert
              include: k8s.pod.fs.writes.bytes.rate
              new_name: k8s.pod.fs.writes.bytes.rate_temp
            - action: combine
              include: (k8s.pod.fs.reads.bytes.rate_temp|k8s.pod.fs.writes.bytes.rate_temp)
              match_type: regexp
              new_name: k8s.pod.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
              submatch_case: lower
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_usage_bytes
              match_type: regexp
              new_name: k8s.pod.fs.usage.bytes
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
              include: k8s.container_cpu_usage_seconds_total
              new_name: k8s.node.cpu.usage.seconds.rate
            - action: insert
              experimental_match_labels:
                id: /
              include: k8s.container_memory_working_set_bytes
              new_name: k8s.node.memory.working_set
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_bytes_total
              match_type: regexp
              new_name: k8s.node.network.bytes_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_bytes_total
              match_type: regexp
              new_name: k8s.node.network.bytes_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_packets_total
              match_type: regexp
              new_name: k8s.node.network.packets_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_packets_total
              match_type: regexp
              new_name: k8s.node.network.packets_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_packets_dropped_total
              match_type: regexp
              new_name: k8s.node.network.receive_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_packets_dropped_total
              match_type: regexp
              new_name: k8s.node.network.transmit_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.rate
              new_name: k8s.node.fs.reads.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.writes.rate
              new_name: k8s.node.fs.writes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.bytes.rate
              new_name: k8s.node.fs.reads.bytes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.writes.bytes.rate
              new_name: k8s.node.fs.writes.bytes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: combine
              include: (k8s.node.fs.reads.rate_temp|k8s.node.fs.writes.rate_temp)
              match_type: regexp
              new_name: k8s.node.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
              submatch_case: lower
            - action: combine
              include: (k8s.node.fs.reads.bytes.rate_temp|k8s.node.fs.writes.bytes.rate_temp)
              match_type: regexp
              new_name: k8s.node.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
              submatch_case: lower
            - action: insert
              include: k8s.pod.fs.usage.bytes
              new_name: k8s.node.fs.usage
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                resource: cpu
              include: k8s.kube_pod_container_resource_limits
              new_name: k8s.container.spec.cpu.limit_temp
            - action: insert
              experimental_match_labels:
                resource: cpu
              include: k8s.kube_pod_init_container_resource_limits
              new_name: k8s.initcontainer.spec.cpu.limit_temp
            - action: insert
              experimental_match_labels:
                resource: cpu
              include: k8s.kube_pod_container_resource_requests
              new_name: k8s.container.spec.cpu.requests_temp
            - action: insert
              experimental_match_labels:
                resource: cpu
              include: k8s.kube_pod_init_container_resource_requests
              new_name: k8s.initcontainer.spec.cpu.requests_temp
            - action: combine
              include: (k8s.container.spec.cpu.requests_temp|k8s.initcontainer.spec.cpu.requests_temp)
              match_type: regexp
              new_name: k8s.container.spec.cpu.requests
            - action: insert
              experimental_match_labels:
                resource: memory
              include: k8s.kube_pod_container_resource_requests
              new_name: k8s.container.spec.memory.requests_temp
            - action: insert
              experimental_match_labels:
                resource: memory
              include: k8s.kube_pod_init_container_resource_requests
              new_name: k8s.initcontainer.spec.memory.requests_temp
            - action: combine
              include: (k8s.container.spec.memory.requests_temp|k8s.initcontainer.spec.memory.requests_temp)
              match_type: regexp
              new_name: k8s.container.spec.memory.requests
            - action: insert
              experimental_match_labels:
                resource: memory
              include: k8s.kube_pod_container_resource_limits
              match_type: regexp
              new_name: k8s.container.spec.memory.limit_temp
            - action: insert
              experimental_match_labels:
                resource: memory
              include: k8s.kube_pod_init_container_resource_limits
              match_type: regexp
              new_name: k8s.initcontainer.spec.memory.limit_temp
            - action: insert
              include: k8s.kube_pod_container_status_waiting
              new_name: k8s.kube_pod_container_status_waiting_only_temp
            - action: insert
              include: k8s.kube_pod_container_status_running
              new_name: k8s.kube_pod_container_status_running_only_temp
            - action: insert
              include: k8s.kube_pod_container_status_terminated
              new_name: k8s.kube_pod_container_status_terminated_only_temp
            - action: combine
              include: ^k8s.kube_pod_container_status_(?P<status>[^_]*)_only_temp$
              match_type: regexp
              new_name: k8s.container.status_temp
              operations:
              - action: update_label
                label: status
                new_label: sw.k8s.container.status
              submatch_case: lower
            - action: insert
              include: k8s.kube_pod_init_container_status_waiting
              new_name: k8s.kube_pod_init_container_status_waiting_only_temp
            - action: insert
              include: k8s.kube_pod_init_container_status_running
              new_name: k8s.kube_pod_init_container_status_running_only_temp
            - action: insert
              include: k8s.kube_pod_init_container_status_terminated
              new_name: k8s.kube_pod_init_container_status_terminated_only_temp
            - action: combine
              include: ^k8s.kube_pod_init_container_status_(?P<status>[^_]*)_only_temp$
              match_type: regexp
              new_name: k8s.initcontainer.status_temp
              operations:
              - action: update_label
                label: status
                new_label: sw.k8s.container.status
              submatch_case: lower
            - action: combine
              include: (k8s.initcontainer.status_temp|k8s.container.status_temp)
              match_type: regexp
              new_name: k8s.container.status
              submatch_case: lower
            - action: insert
              include: k8s.container.spec.cpu.limit_temp
              new_name: k8s.pod.spec.cpu.limit
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: combine
              include: (k8s.container.spec.cpu.limit_temp|k8s.initcontainer.spec.cpu.limit_temp)
              match_type: regexp
              new_name: k8s.container.spec.cpu.limit
            - action: insert
              include: k8s.container.spec.memory.limit_temp
              new_name: k8s.pod.spec.memory.limit
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: combine
              include: (k8s.container.spec.memory.limit_temp|k8s.initcontainer.spec.memory.limit_temp)
              match_type: regexp
              new_name: k8s.container.spec.memory.limit
            - action: insert
              include: k8s.kube_pod_container_status_running
              new_name: k8s.pod.containers.running
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
            - action: insert
              include: k8s.container.spec.cpu.requests
              new_name: k8s.pod.spec.cpu.requests
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              include: k8s.container.spec.memory.requests
              new_name: k8s.pod.spec.memory.requests
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                owner_is_controller: "true"
                owner_kind: DaemonSet
              include: k8s.kube_pod_owner
              new_name: k8s.kube.pod.owner.daemonset
              operations:
              - action: update_label
                label: owner_name
                new_label: daemonset
            - action: insert
              experimental_match_labels:
                owner_is_controller: "true"
                owner_kind: ReplicaSet
              include: k8s.kube_pod_owner
              new_name: k8s.kube.pod.owner.replicaset
              operations:
              - action: update_label
                label: owner_name
                new_label: replicaset
            - action: insert
              experimental_match_labels:
                owner_is_controller: "true"
                owner_kind: StatefulSet
              include: k8s.kube_pod_owner
              new_name: k8s.kube.pod.owner.statefulset
              operations:
              - action: update_label
                label: owner_name
                new_label: statefulset
            - action: insert
              experimental_match_labels:
                owner_is_controller: "true"
                owner_kind: Job
              include: k8s.kube_pod_owner
              new_name: k8s.kube.pod.owner.job
              operations:
              - action: update_label
                label: owner_name
                new_label: job_name
            - action: insert
              experimental_match_labels:
                owner_is_controller: "true"
                owner_kind: Deployment
              include: k8s.kube_replicaset_owner
              new_name: k8s.kube.replicaset.owner.deployment
              operations:
              - action: update_label
                label: owner_name
                new_label: deployment
            - action: insert
              experimental_match_labels:
                resource: cpu
              include: k8s.kube_node_status_capacity
              new_name: k8s.node.cpu.capacity
            - action: insert
              experimental_match_labels:
                resource: cpu
              include: k8s.kube_node_status_allocatable
              new_name: k8s.node.cpu.allocatable
            - action: insert
              experimental_match_labels:
                resource: memory
              include: k8s.kube_node_status_capacity
              new_name: k8s.node.memory.capacity
            - action: insert
              experimental_match_labels:
                resource: memory
              include: k8s.kube_node_status_allocatable
              new_name: k8s.node.memory.allocatable
            - action: insert
              experimental_match_labels:
                condition: Ready
                status: "true"
              include: k8s.kube_node_status_condition
              new_name: k8s.node.status.condition.ready
            - action: insert
              experimental_match_labels:
                condition: NetworkUnavailable
                status: "true"
              include: k8s.kube_node_status_condition
              new_name: k8s.node.status.condition.networkunavailable
            - action: insert
              experimental_match_labels:
                condition: PIDPressure
                status: "true"
              include: k8s.kube_node_status_condition
              new_name: k8s.node.status.condition.pidpressure
            - action: insert
              experimental_match_labels:
                condition: MemoryPressure
                status: "true"
              include: k8s.kube_node_status_condition
              new_name: k8s.node.status.condition.memorypressure
            - action: insert
              experimental_match_labels:
                condition: DiskPressure
                status: "true"
              include: k8s.kube_node_status_condition
              new_name: k8s.node.status.condition.diskpressure
            - action: insert
              experimental_match_labels:
                phase: Running
              include: k8s.kube_pod_status_phase
              new_name: k8s.pod.status.phase.running_temp
            - action: insert
              include: k8s.kube_pod_info
              new_name: k8s.cluster.pods
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.kube_node_info
              new_name: k8s.cluster.nodes
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.node.status.condition.ready
              new_name: k8s.cluster.nodes.ready
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.node.status.condition.ready
              new_name: k8s.cluster.nodes.ready.avg
              operations:
              - action: aggregate_labels
                aggregation_type: mean
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.container.spec.memory.requests
              new_name: k8s.cluster.spec.memory.requests
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.container.spec.cpu.requests
              new_name: k8s.cluster.spec.cpu.requests
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.pod.status.phase.running_temp
              new_name: k8s.cluster.pods.running
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.node.cpu.capacity
              new_name: k8s.cluster.cpu.capacity
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.node.cpu.allocatable
              new_name: k8s.cluster.cpu.allocatable
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.node.memory.capacity
              new_name: k8s.cluster.memory.capacity
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: k8s.node.memory.allocatable
              new_name: k8s.cluster.memory.allocatable
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              experimental_match_labels:
                scrape_job: .*apiservers.*
              include: k8s.kubernetes_build_info
              match_type: regexp
              new_name: k8s.cluster.version
              operations:
              - action: update_label
                label: git_version
                new_label: sw.k8s.cluster.version
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - sw.k8s.cluster.version
            - action: update
              include: k8s.kubernetes_build_info
              new_name: k8s.kubernetes_build_info_temp
            - action: insert
              experimental_match_labels:
                code: ^(([0-3]|[6-9])\d\d)|(4([0-1]|[3-9])\d)|(42[0-8])$
              include: apiserver_request_total
              match_type: regexp
              new_name: apiserver_request_not_failed_temp
            - action: update
              include: apiserver_request_not_failed_temp
              new_name: apiserver_request_not_failed_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              include: apiserver_request_total
              new_name: apiserver_request_total_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - dummy_label_workaround
            - action: insert
              experimental_match_labels:
                owner_is_controller: "true"
                owner_kind: CronJob
              include: k8s.kube_job_owner
              new_name: k8s.kube.job.owner.cronjob
              operations:
              - action: update_label
                label: owner_name
                new_label: cronjob
          metricstransform/rename:
            transforms:
            - action: update
              include: ^(kube_|container_|kubernetes_|kubelet_)(.*)$$
              match_type: regexp
              new_name: k8s.$${1}$${2}
          metricstransform/rename-otel:
            transforms:
            - action: update
              include: ^(.*)$$
              match_type: regexp
              new_name: k8s.$${1}
          resource/events:
            attributes:
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              key: sw.k8s.log.type
              value: event
          resource/metrics:
            attributes:
            - action: delete
              key: service.name
            - action: delete
              key: service.instance.id
            - action: delete
              key: net.host.name
            - action: delete
              key: net.host.port
            - action: delete
              key: http.scheme
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              from_attribute: kubelet_version
              key: sw.k8s.node.version
            - action: insert
              from_attribute: container_runtime_version
              key: sw.k8s.node.container.runtime.version
            - action: insert
              from_attribute: provider_id
              key: sw.k8s.node.provider.id
            - action: insert
              from_attribute: os_image
              key: sw.k8s.node.os.image
            - action: insert
              from_attribute: internal_ip
              key: sw.k8s.node.ip.internal
            - action: insert
              from_attribute: namespace
              key: k8s.namespace.name
            - action: insert
              from_attribute: pod
              key: k8s.pod.name
            - action: insert
              from_attribute: pod_ip
              key: sw.k8s.pod.ip
            - action: insert
              from_attribute: host_ip
              key: sw.k8s.pod.host.ip
            - action: insert
              from_attribute: created_by_kind
              key: sw.k8s.pod.createdby.kind
            - action: insert
              from_attribute: created_by_name
              key: sw.k8s.pod.createdby.name
            - action: insert
              from_attribute: host_network
              key: sw.k8s.pod.host.network
            - action: insert
              from_attribute: priority_class
              key: sw.k8s.pod.priority_class
            - action: extract
              key: container_id
              pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
            - action: insert
              from_attribute: extracted_container_id
              key: container.id
            - action: insert
              from_attribute: extracted_container_runtime
              key: container.runtime
            - action: insert
              from_attribute: container
              key: k8s.container.name
            - action: insert
              from_attribute: image_id
              key: k8s.container.image.id
            - action: insert
              from_attribute: image
              key: k8s.container.image.name
            - action: insert
              from_attribute: replicaset
              key: k8s.replicaset.name
            - action: insert
              from_attribute: deployment
              key: k8s.deployment.name
            - action: insert
              from_attribute: statefulset
              key: k8s.statefulset.name
            - action: insert
              from_attribute: daemonset
              key: k8s.daemonset.name
            - action: insert
              from_attribute: job_name
              key: k8s.job.name
            - action: insert
              from_attribute: job_condition
              key: k8s.job.condition
            - action: insert
              from_attribute: cronjob
              key: k8s.cronjob.name
            - action: insert
              from_attribute: persistentvolume
              key: k8s.persistentvolume.name
            - action: insert
              from_attribute: persistentvolumeclaim
              key: k8s.persistentvolumeclaim.name
          resource/otlp-metrics:
            attributes:
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
          swk8sattributes:
            auth_type: serviceAccount
            cronjob:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.cronjob.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: cronjob
                  key_regex: (.*)
                  tag_name: k8s.cronjob.annotations.$$1
                labels:
                - from: cronjob
                  key_regex: (.*)
                  tag_name: k8s.cronjob.labels.$$1
            daemonset:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.daemonset.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: daemonset
                  key_regex: (.*)
                  tag_name: k8s.daemonset.annotations.$$1
                labels:
                - from: daemonset
                  key_regex: (.*)
                  tag_name: k8s.daemonset.labels.$$1
            deployment:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.deployment.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: deployment
                  key_regex: (.*)
                  tag_name: k8s.deployment.annotations.$$1
                labels:
                - from: deployment
                  key_regex: (.*)
                  tag_name: k8s.deployment.labels.$$1
            extract:
              annotations:
              - from: pod
                key_regex: (.*)
                tag_name: k8s.pod.annotations.$$1
              - from: namespace
                key_regex: (.*)
                tag_name: k8s.namespace.annotations.$$1
              labels:
              - from: pod
                key_regex: (.*)
                tag_name: k8s.pod.labels.$$1
              - from: namespace
                key_regex: (.*)
                tag_name: k8s.namespace.labels.$$1
              metadata:
              - k8s.deployment.name
              - k8s.replicaset.name
              - k8s.daemonset.name
              - k8s.job.name
              - k8s.cronjob.name
              - k8s.statefulset.name
              - k8s.node.name
            job:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.job.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: job
                  key_regex: (.*)
                  tag_name: k8s.job.annotations.$$1
                labels:
                - from: job
                  key_regex: (.*)
                  tag_name: k8s.job.labels.$$1
            node:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.node.name
              extract:
                annotations:
                - from: node
                  key_regex: (.*)
                  tag_name: k8s.node.annotations.$$1
                labels:
                - from: node
                  key_regex: (.*)
                  tag_name: k8s.node.labels.$$1
            passthrough: false
            persistentvolume:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.persistentvolume.name
              extract:
                annotations:
                - from: persistentvolume
                  key_regex: (.*)
                  tag_name: k8s.persistentvolume.annotations.$$1
                labels:
                - from: persistentvolume
                  key_regex: (.*)
                  tag_name: k8s.persistentvolume.labels.$$1
            persistentvolumeclaim:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.persistentvolumeclaim.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: persistentvolumeclaim
                  key_regex: (.*)
                  tag_name: k8s.persistentvolumeclaim.annotations.$$1
                labels:
                - from: persistentvolumeclaim
                  key_regex: (.*)
                  tag_name: k8s.persistentvolumeclaim.labels.$$1
            pod_association:
            - sources:
              - from: resource_attribute
                name: k8s.pod.name
              - from: resource_attribute
                name: k8s.namespace.name
            replicaset:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.replicaset.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: replicaset
                  key_regex: (.*)
                  tag_name: k8s.replicaset.annotations.$$1
                labels:
                - from: replicaset
                  key_regex: (.*)
                  tag_name: k8s.replicaset.labels.$$1
            service:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.service.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: service
                  key_regex: (.*)
                  tag_name: k8s.service.annotations.$$1
                labels:
                - from: service
                  key_regex: (.*)
                  tag_name: k8s.service.labels.$$1
            set_object_existence: true
            statefulset:
              association:
              - sources:
                - from: resource_attribute
                  name: k8s.statefulset.name
                - from: resource_attribute
                  name: k8s.namespace.name
              extract:
                annotations:
                - from: statefulset
                  key_regex: (.*)
                  tag_name: k8s.statefulset.annotations.$$1
                labels:
                - from: statefulset
                  key_regex: (.*)
                  tag_name: k8s.statefulset.labels.$$1
          transform:
            metric_statements:
            - context: datapoint
              statements:
              - set(attributes["job_condition"], "Active") where IsMatch(metric.name, "^.*kube_job_status_active$")
                == true and value_double > 0
              - set(attributes["job_condition"], "Failed") where IsMatch(metric.name, "^.*kube_job_failed$")
                == true and IsMatch(attributes["condition"], "^true$") == true and value_double
                > 0
              - set(attributes["job_condition"], "Complete") where IsMatch(metric.name, "^.*kube_job_complete$")
                == true and IsMatch(attributes["condition"], "^true$") == true and value_double
                > 0
          transform/cleanup_attributes_for_nonexisting_entities:
            metric_statements:
            - context: metric
              statements:
              - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"]
                == "false"
              - delete_key(resource.attributes, "sw.k8s.pod.found")
              - delete_key(resource.attributes, "sw.k8s.deployment.found")
              - delete_key(resource.attributes, "sw.k8s.statefulset.found")
              - delete_key(resource.attributes, "sw.k8s.replicaset.found")
              - delete_key(resource.attributes, "sw.k8s.daemonset.found")
              - delete_key(resource.attributes, "sw.k8s.job.found")
              - delete_key(resource.attributes, "sw.k8s.cronjob.found")
              - delete_key(resource.attributes, "sw.k8s.node.found")
          transform/unify_node_attribute:
            metric_statements:
            - context: datapoint
              statements:
              - set(attributes["k8s.node.name"], resource.attributes["service.instance.id"])
                where IsMatch(metric.name, "^(container_.*)$") == true and attributes["k8s.node.name"]
                == nil
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
          prometheus/kube-state-metrics:
            config:
              scrape_configs:
              - honor_labels: true
                honor_timestamps: false
                job_name: kube-state-metrics
                metrics_path: /metrics
                scheme: http
                scrape_interval: 60s
                static_configs:
                - targets:
                  - ${KUBE_STATE_METRICS_URL}
          prometheus/node-metrics:
            config:
              scrape_configs:
              - authorization:
                  credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  type: Bearer
                enable_http2: true
                follow_redirects: true
                honor_timestamps: false
                job_name: kubernetes-apiservers
                kubernetes_sd_configs:
                - enable_http2: true
                  follow_redirects: true
                  kubeconfig_file: ""
                  role: endpoints
                metrics_path: /metrics
                relabel_configs:
                - action: keep
                  regex: default;kubernetes;https
                  replacement: $$1
                  separator: ;
                  source_labels:
                  - __meta_kubernetes_namespace
                  - __meta_kubernetes_service_name
                  - __meta_kubernetes_endpoint_port_name
                - replacement: kubernetes-apiservers
                  source_labels:
                  - __address__
                  target_label: scrape_job
                scheme: https
                scrape_interval: 60s
                scrape_timeout: 10s
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
        service:
          extensions:
          - health_check
          pipelines:
            metrics:
              exporters:
              - otlp
              processors:
              - memory_limiter
              - filter/histograms
              - batch
              receivers:
              - forward/metric-exporter
            metrics/kubestatemetrics:
              exporters:
              - forward/prometheus
              processors:
              - memory_limiter
              - filter/kube-state-metrics
              receivers:
              - prometheus/kube-state-metrics
            metrics/otlp:
              exporters:
              - forward/metric-exporter
              processors:
              - memory_limiter
              - metricstransform/rename-otel
              - resource/otlp-metrics
              receivers:
              - otlp
            metrics/prometheus:
              exporters:
              - forward/metric-exporter
              processors:
              - memory_limiter
              - filter/receiver
              - transform
              - filter/remove_internal
              - attributes/remove_prometheus_attributes
              - attributes/remove_prometheus_attributes_endpoint
              - attributes/unify_node_attribute
              - transform/unify_node_attribute
              - attributes/unify_volume_attribute
              - attributes/unify_service_attribute
              - attributes/unify_endpoint_attribute
              - attributes/unify_pod_attribute
              - attributes/identify_init_container
              - attributes/identify_standard_container
              - metricstransform/rename
              - metricstransform/preprocessing
              - filter/preprocessing
              - filter/remove_internal_postprocessing
              - attributes/remove_temp
              - attributes/attributes_pod_status
              - attributes/attributes_namespace_status
              - cumulativetodelta
              - deltatorate
              - experimental_metricsgeneration/cluster
              - groupbyattrs/node
              - metricstransform/aggregate_node_level
              - groupbyattrs/pod
              - metricstransform/aggregate_pod_level
              - groupbyattrs/all
              - resource/metrics
              - swk8sattributes
              - transform/cleanup_attributes_for_nonexisting_entities
              - filter/remove_temporary_metrics
              receivers:
              - forward/prometheus
            metrics/prometheus-node-metrics:
              exporters:
              - forward/prometheus
              processors:
              - memory_limiter
              - filter/prometheus-node-metrics
              receivers:
              - prometheus/node-metrics
          telemetry:
            logs:
              level: info
            metrics:
              address: 0.0.0.0:8888

  logs_service.proto: |
        // Copyright 2020, OpenTelemetry Authors
        //
        // Licensed under the Apache License, Version 2.0 (the "License");
        // you may not use this file except in compliance with the License.
        // You may obtain a copy of the License at
        //
        //     http://www.apache.org/licenses/LICENSE-2.0
        //
        // Unless required by applicable law or agreed to in writing, software
        // distributed under the License is distributed on an "AS IS" BASIS,
        // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        // See the License for the specific language governing permissions and
        // limitations under the License.
        
        syntax = "proto3";
        
        package opentelemetry.proto.collector.logs.v1;
        
        import "opentelemetry/proto/logs/v1/logs.proto";
        
        option csharp_namespace = "OpenTelemetry.Proto.Collector.Logs.V1";
        option java_multiple_files = true;
        option java_package = "io.opentelemetry.proto.collector.logs.v1";
        option java_outer_classname = "LogsServiceProto";
        option go_package = "go.opentelemetry.io/proto/otlp/collector/logs/v1";
        
        // Service that can be used to push logs between one Application instrumented with
        // OpenTelemetry and an collector, or between an collector and a central collector (in this
        // case logs are sent/received to/from multiple Applications).
        service LogsService {
          // For performance reasons, it is recommended to keep this RPC
          // alive for the entire life of the application.
          rpc Export(ExportLogsServiceRequest) returns (ExportLogsServiceResponse) {}
        }
        
        message ExportLogsServiceRequest {
          // An array of ResourceLogs.
          // For data coming from a single resource this array will typically contain one
          // element. Intermediary nodes (such as OpenTelemetry Collector) that receive
          // data from multiple origins typically batch the data before forwarding further and
          // in that case this array will contain multiple elements.
          repeated opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
        }
        
        message ExportLogsServiceResponse {
          // The details of a partially successful export request.
          //
          // If the request is only partially accepted
          // (i.e. when the server accepts only parts of the data and rejects the rest)
          // the server MUST initialize the `partial_success` field and MUST
          // set the `rejected_<signal>` with the number of items it rejected.
          //
          // Servers MAY also make use of the `partial_success` field to convey
          // warnings/suggestions to senders even when the request was fully accepted.
          // In such cases, the `rejected_<signal>` MUST have a value of `0` and
          // the `error_message` MUST be non-empty.
          //
          // A `partial_success` message with an empty value (rejected_<signal> = 0 and
          // `error_message` = "") is equivalent to it not being set/present. Senders
          // SHOULD interpret it the same way as in the full success case.
          ExportLogsPartialSuccess partial_success = 1;
        }
        
        message ExportLogsPartialSuccess {
          // The number of rejected log records.
          //
          // A `rejected_<signal>` field holding a `0` value indicates that the
          // request was fully accepted.
          int64 rejected_log_records = 1;
        
          // A developer-facing human-readable message in English. It should be used
          // either to explain why the server rejected parts of the data during a partial
          // success or to convey warnings/suggestions during a full success. The message
          // should offer guidance on how users can address such issues.
          //
          // error_message is an optional field. An error_message with an empty value
          // is equivalent to it not being set.
          string error_message = 2;
        }
        
  logs.proto: |
        // Copyright 2020, OpenTelemetry Authors
        //
        // Licensed under the Apache License, Version 2.0 (the "License");
        // you may not use this file except in compliance with the License.
        // You may obtain a copy of the License at
        //
        //     http://www.apache.org/licenses/LICENSE-2.0
        //
        // Unless required by applicable law or agreed to in writing, software
        // distributed under the License is distributed on an "AS IS" BASIS,
        // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        // See the License for the specific language governing permissions and
        // limitations under the License.
        
        syntax = "proto3";
        
        package opentelemetry.proto.logs.v1;
        
        import "opentelemetry/proto/common/v1/common.proto";
        import "opentelemetry/proto/resource/v1/resource.proto";
        
        option csharp_namespace = "OpenTelemetry.Proto.Logs.V1";
        option java_multiple_files = true;
        option java_package = "io.opentelemetry.proto.logs.v1";
        option java_outer_classname = "LogsProto";
        option go_package = "go.opentelemetry.io/proto/otlp/logs/v1";
        
        // LogsData represents the logs data that can be stored in a persistent storage,
        // OR can be embedded by other protocols that transfer OTLP logs data but do not
        // implement the OTLP protocol.
        //
        // The main difference between this message and collector protocol is that
        // in this message there will not be any "control" or "metadata" specific to
        // OTLP protocol.
        //
        // When new fields are added into this message, the OTLP request MUST be updated
        // as well.
        message LogsData {
          // An array of ResourceLogs.
          // For data coming from a single resource this array will typically contain
          // one element. Intermediary nodes that receive data from multiple origins
          // typically batch the data before forwarding further and in that case this
          // array will contain multiple elements.
          repeated ResourceLogs resource_logs = 1;
        }
        
        // A collection of ScopeLogs from a Resource.
        message ResourceLogs {
          reserved 1000;
        
          // The resource for the logs in this message.
          // If this field is not set then resource info is unknown.
          opentelemetry.proto.resource.v1.Resource resource = 1;
        
          // A list of ScopeLogs that originate from a resource.
          repeated ScopeLogs scope_logs = 2;
        
          // This schema_url applies to the data in the "resource" field. It does not apply
          // to the data in the "scope_logs" field which have their own schema_url field.
          string schema_url = 3;
        }
        
        // A collection of Logs produced by a Scope.
        message ScopeLogs {
          // The instrumentation scope information for the logs in this message.
          // Semantically when InstrumentationScope isn't set, it is equivalent with
          // an empty instrumentation scope name (unknown).
          opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
        
          // A list of log records.
          repeated LogRecord log_records = 2;
        
          // This schema_url applies to all logs in the "logs" field.
          string schema_url = 3;
        }
        
        // Possible values for LogRecord.SeverityNumber.
        enum SeverityNumber {
          // UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
          SEVERITY_NUMBER_UNSPECIFIED = 0;
          SEVERITY_NUMBER_TRACE  = 1;
          SEVERITY_NUMBER_TRACE2 = 2;
          SEVERITY_NUMBER_TRACE3 = 3;
          SEVERITY_NUMBER_TRACE4 = 4;
          SEVERITY_NUMBER_DEBUG  = 5;
          SEVERITY_NUMBER_DEBUG2 = 6;
          SEVERITY_NUMBER_DEBUG3 = 7;
          SEVERITY_NUMBER_DEBUG4 = 8;
          SEVERITY_NUMBER_INFO   = 9;
          SEVERITY_NUMBER_INFO2  = 10;
          SEVERITY_NUMBER_INFO3  = 11;
          SEVERITY_NUMBER_INFO4  = 12;
          SEVERITY_NUMBER_WARN   = 13;
          SEVERITY_NUMBER_WARN2  = 14;
          SEVERITY_NUMBER_WARN3  = 15;
          SEVERITY_NUMBER_WARN4  = 16;
          SEVERITY_NUMBER_ERROR  = 17;
          SEVERITY_NUMBER_ERROR2 = 18;
          SEVERITY_NUMBER_ERROR3 = 19;
          SEVERITY_NUMBER_ERROR4 = 20;
          SEVERITY_NUMBER_FATAL  = 21;
          SEVERITY_NUMBER_FATAL2 = 22;
          SEVERITY_NUMBER_FATAL3 = 23;
          SEVERITY_NUMBER_FATAL4 = 24;
        }
        
        // Masks for LogRecord.flags field.
        enum LogRecordFlags {
          LOG_RECORD_FLAG_UNSPECIFIED = 0;
          LOG_RECORD_FLAG_TRACE_FLAGS_MASK = 0x000000FF;
        }
        
        // A log record according to OpenTelemetry Log Data Model:
        // https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md
        message LogRecord {
          reserved 4;
        
          // time_unix_nano is the time when the event occurred.
          // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
          // Value of 0 indicates unknown or missing timestamp.
          fixed64 time_unix_nano = 1;
        
          // Time when the event was observed by the collection system.
          // For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)
          // this timestamp is typically set at the generation time and is equal to Timestamp.
          // For events originating externally and collected by OpenTelemetry (e.g. using
          // Collector) this is the time when OpenTelemetry's code observed the event measured
          // by the clock of the OpenTelemetry code. This field MUST be set once the event is
          // observed by OpenTelemetry.
          //
          // For converting OpenTelemetry log data to formats that support only one timestamp or
          // when receiving OpenTelemetry log data by recipients that support only one timestamp
          // internally the following logic is recommended:
          //   - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.
          //
          // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
          // Value of 0 indicates unknown or missing timestamp.
          fixed64 observed_time_unix_nano = 11;
        
          // Numerical value of the severity, normalized to values described in Log Data Model.
          // [Optional].
          SeverityNumber severity_number = 2;
        
          // The severity text (also known as log level). The original string representation as
          // it is known at the source. [Optional].
          string severity_text = 3;
        
          // A value containing the body of the log record. Can be for example a human-readable
          // string message (including multi-line) describing the event in a free form or it can
          // be a structured data composed of arrays and maps of other values. [Optional].
          opentelemetry.proto.common.v1.AnyValue body = 5;
        
          // Additional attributes that describe the specific event occurrence. [Optional].
          // Attribute keys MUST be unique (it is not allowed to have more than one
          // attribute with the same key).
          repeated opentelemetry.proto.common.v1.KeyValue attributes = 6;
          uint32 dropped_attributes_count = 7;
        
          // Flags, a bit field. 8 least significant bits are the trace flags as
          // defined in W3C Trace Context specification. 24 most significant bits are reserved
          // and must be set to 0. Readers must not assume that 24 most significant bits
          // will be zero and must correctly mask the bits when reading 8-bit trace flag (use
          // flags & TRACE_FLAGS_MASK). [Optional].
          fixed32 flags = 8;
        
          // A unique identifier for a trace. All logs from the same trace share
          // the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR
          // of length other than 16 bytes is considered invalid (empty string in OTLP/JSON
          // is zero-length and thus is also invalid).
          //
          // This field is optional.
          //
          // The receivers SHOULD assume that the log record is not associated with a
          // trace if any of the following is true:
          //   - the field is not present,
          //   - the field contains an invalid value.
          bytes trace_id = 9;
        
          // A unique identifier for a span within a trace, assigned when the span
          // is created. The ID is an 8-byte array. An ID with all zeroes OR of length
          // other than 8 bytes is considered invalid (empty string in OTLP/JSON
          // is zero-length and thus is also invalid).
          //
          // This field is optional. If the sender specifies a valid span_id then it SHOULD also
          // specify a valid trace_id.
          //
          // The receivers SHOULD assume that the log record is not associated with a
          // span if any of the following is true:
          //   - the field is not present,
          //   - the field contains an invalid value.
          bytes span_id = 10;
        }
        
  common.proto: |
        // Copyright 2019, OpenTelemetry Authors
        //
        // Licensed under the Apache License, Version 2.0 (the "License");
        // you may not use this file except in compliance with the License.
        // You may obtain a copy of the License at
        //
        //     http://www.apache.org/licenses/LICENSE-2.0
        //
        // Unless required by applicable law or agreed to in writing, software
        // distributed under the License is distributed on an "AS IS" BASIS,
        // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        // See the License for the specific language governing permissions and
        // limitations under the License.
        
        syntax = "proto3";
        
        package opentelemetry.proto.common.v1;
        
        option csharp_namespace = "OpenTelemetry.Proto.Common.V1";
        option java_multiple_files = true;
        option java_package = "io.opentelemetry.proto.common.v1";
        option java_outer_classname = "CommonProto";
        option go_package = "go.opentelemetry.io/proto/otlp/common/v1";
        
        // AnyValue is used to represent any type of attribute value. AnyValue may contain a
        // primitive value such as a string or integer or it may contain an arbitrary nested
        // object containing arrays, key-value lists and primitives.
        message AnyValue {
          // The value is one of the listed fields. It is valid for all values to be unspecified
          // in which case this AnyValue is considered to be "empty".
          oneof value {
            string string_value = 1;
            bool bool_value = 2;
            int64 int_value = 3;
            double double_value = 4;
            ArrayValue array_value = 5;
            KeyValueList kvlist_value = 6;
            bytes bytes_value = 7;
          }
        }
        
        // ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
        // since oneof in AnyValue does not allow repeated fields.
        message ArrayValue {
          // Array of values. The array may be empty (contain 0 elements).
          repeated AnyValue values = 1;
        }
        
        // KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
        // since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
        // a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
        // avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
        // are semantically equivalent.
        message KeyValueList {
          // A collection of key/value pairs of key-value pairs. The list may be empty (may
          // contain 0 elements).
          // The keys MUST be unique (it is not allowed to have more than one
          // value with the same key).
          repeated KeyValue values = 1;
        }
        
        // KeyValue is a key-value pair that is used to store Span attributes, Link
        // attributes, etc.
        message KeyValue {
          string key = 1;
          AnyValue value = 2;
        }
        
        // InstrumentationScope is a message representing the instrumentation scope information
        // such as the fully qualified name and version. 
        message InstrumentationScope {
          // An empty instrumentation scope name means the name is unknown.
          string name = 1;
          string version = 2;
          repeated KeyValue attributes = 3;
          uint32 dropped_attributes_count = 4;
        }
        
  resource.proto: |
        // Copyright 2019, OpenTelemetry Authors
        //
        // Licensed under the Apache License, Version 2.0 (the "License");
        // you may not use this file except in compliance with the License.
        // You may obtain a copy of the License at
        //
        //     http://www.apache.org/licenses/LICENSE-2.0
        //
        // Unless required by applicable law or agreed to in writing, software
        // distributed under the License is distributed on an "AS IS" BASIS,
        // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        // See the License for the specific language governing permissions and
        // limitations under the License.
        
        syntax = "proto3";
        
        package opentelemetry.proto.resource.v1;
        
        import "opentelemetry/proto/common/v1/common.proto";
        
        option csharp_namespace = "OpenTelemetry.Proto.Resource.V1";
        option java_multiple_files = true;
        option java_package = "io.opentelemetry.proto.resource.v1";
        option java_outer_classname = "ResourceProto";
        option go_package = "go.opentelemetry.io/proto/otlp/resource/v1";
        
        // Resource information.
        message Resource {
          // Set of attributes that describe the resource.
          // Attribute keys MUST be unique (it is not allowed to have more than one
          // attribute with the same key).
          repeated opentelemetry.proto.common.v1.KeyValue attributes = 1;
        
          // dropped_attributes_count is the number of dropped attributes. If the value is 0, then
          // no attributes were dropped.
          uint32 dropped_attributes_count = 2;
        }
---
# Source: swo-k8s-collector/templates/metrics-collector-env-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-swo-k8s-collector-metrics-env-config
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
data:
  KUBE_STATE_METRICS_URL: "my-swo-k8s-collector-kube-state-metrics.default.svc.cluster.local:8080"
---
# Source: swo-k8s-collector/templates/node-collector-config-map-windows.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-swo-k8s-collector-node-collector-config-windows
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
data:
  logs.config: |
        connectors:
          forward/logs-exporter: null
          forward/metric-exporter: null
        exporters:
          otlp:
            endpoint: ${OTEL_ENVOY_ADDRESS}
            headers:
              Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            retry_on_failure:
              enabled: true
              initial_interval: 10s
              max_elapsed_time: 300s
              max_interval: 30s
            sending_queue:
              enabled: true
              num_consumers: 20
              queue_size: 1000
            timeout: 15s
            tls:
              insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
        extensions:
          file_storage/checkpoints:
            directory: /var/lib/swo/checkpoints
            timeout: 5s
          health_check:
            endpoint: 0.0.0.0:13133
          k8s_observer:
            auth_type: serviceAccount
            node: ${NODE_NAME}
            observe_nodes: true
            observe_pods: true
        processors:
          attributes/remove_prometheus_attributes:
            actions:
            - action: delete
              key: prometheus
            - action: delete
              key: prometheus_replica
          attributes/remove_temp:
            actions:
            - action: delete
              key: temp
              pattern: (.*_temp$)|(^\$.*)
            include:
              match_type: regexp
              metric_names:
              - .*
          attributes/unify_node_attribute:
            actions:
            - action: insert
              from_attribute: node
              key: k8s.node.name
            - action: insert
              from_attribute: kubernetes_io_hostname
              key: k8s.node.name
            include:
              match_type: regexp
              metric_names:
              - container_.*
          batch/logs:
            send_batch_max_size: 512
            send_batch_size: 512
            timeout: 1s
          batch/metrics:
            send_batch_max_size: 512
            send_batch_size: 512
            timeout: 1s
          cumulativetodelta/cadvisor:
            include:
              match_type: strict
              metrics:
              - k8s.node.cpu.usage.seconds.rate
              - k8s.pod.cpu.usage.seconds.rate
              - k8s.container.fs.iops
              - k8s.container.fs.throughput
              - k8s.container.cpu.usage.seconds.rate
              - k8s.container.network.bytes_received
              - k8s.container.network.bytes_transmitted
              - k8s.pod.fs.iops
              - k8s.pod.fs.throughput
              - k8s.pod.fs.reads.rate
              - k8s.pod.fs.writes.rate
              - k8s.pod.fs.reads.bytes.rate
              - k8s.pod.fs.writes.bytes.rate
              - k8s.pod.network.bytes_received
              - k8s.pod.network.bytes_transmitted
              - k8s.pod.network.packets_received
              - k8s.pod.network.packets_transmitted
              - k8s.pod.network.receive_packets_dropped
              - k8s.pod.network.transmit_packets_dropped
              - k8s.node.fs.iops
              - k8s.node.fs.throughput
              - k8s.node.network.bytes_received
              - k8s.node.network.bytes_transmitted
              - k8s.node.network.packets_received
              - k8s.node.network.packets_transmitted
              - k8s.node.network.receive_packets_dropped
              - k8s.node.network.transmit_packets_dropped
          cumulativetodelta/istio-metrics:
            include:
              match_type: strict
              metrics:
              - k8s.istio_request_bytes.rate
              - k8s.istio_response_bytes.rate
              - k8s.istio_request_duration_milliseconds_sum_temp
              - k8s.istio_request_duration_milliseconds_count_temp
              - k8s.istio_requests.rate
              - k8s.istio_tcp_sent_bytes.rate
              - k8s.istio_tcp_received_bytes.rate
              - k8s.istio_request_bytes.delta
              - k8s.istio_response_bytes.delta
              - k8s.istio_requests.delta
              - k8s.istio_tcp_sent_bytes.delta
              - k8s.istio_tcp_received_bytes.delta
          deltatorate/cadvisor:
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          deltatorate/istio-metrics:
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum_temp
            - k8s.istio_request_duration_milliseconds_count_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
          experimental_metricsgeneration/istio-metrics:
            rules:
            - metric1: k8s.istio_request_duration_milliseconds_sum_temp
              metric2: k8s.istio_request_duration_milliseconds_count_temp
              name: k8s.istio_request_duration_milliseconds.rate
              operation: divide
              type: calculate
          filter/histograms:
            metrics:
              metric:
              - type == METRIC_DATA_TYPE_HISTOGRAM
          filter/receiver:
            metrics:
              metric:
              - name == "scrape_duration_seconds"
              - name == "scrape_samples_post_metric_relabeling"
              - name == "scrape_samples_scraped"
              - name == "scrape_series_added"
              - name == "up"
          filter/remove_internal:
            metrics:
              datapoint:
              - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
                == false
          filter/remove_internal_postprocessing:
            metrics:
              datapoint:
              - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
                == true
          filter/remove_temporary_metrics:
            metrics:
              metric:
              - IsMatch(name , ".*_temp")
              - name == "apiserver_request_total"
          groupbyattrs/all:
            keys:
            - kubelet_version
            - container_runtime_version
            - provider_id
            - os_image
            - namespace
            - uid
            - k8s.pod.uid
            - pod_ip
            - host_ip
            - created_by_kind
            - created_by_name
            - host_network
            - priority_class
            - container_id
            - container
            - image
            - image_id
            - k8s.node.name
            - sw.k8s.pod.status
            - sw.k8s.namespace.status
            - sw.k8s.node.status
            - sw.k8s.container.status
            - sw.k8s.container.init
            - daemonset
            - statefulset
            - deployment
            - replicaset
            - job_name
            - cronjob
            - sw.k8s.cluster.version
            - internal_ip
            - job_condition
            - persistentvolumeclaim
            - persistentvolume
            - sw.k8s.persistentvolumeclaim.status
            - sw.k8s.persistentvolume.status
            - storageclass
            - access_mode
            - k8s.service.name
            - sw.k8s.service.external_name
            - sw.k8s.service.type
            - sw.k8s.cluster.ip
          groupbyattrs/common-all:
            keys:
            - k8s.container.name
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - host.name
            - service.name
          groupbyattrs/node:
            keys:
            - k8s.node.name
          groupbyattrs/pod:
            keys:
            - namespace
            - pod
          memory_limiter:
            check_interval: 1s
            limit_mib: 800
            spike_limit_mib: 300
          metricstransform/istio-metrics:
            transforms:
            - action: insert
              include: k8s.istio_request_bytes.rate
              new_name: k8s.istio_request_bytes.delta
            - action: insert
              include: k8s.istio_response_bytes.rate
              new_name: k8s.istio_response_bytes.delta
            - action: insert
              include: k8s.istio_requests.rate
              new_name: k8s.istio_requests.delta
            - action: insert
              include: k8s.istio_tcp_sent_bytes.rate
              new_name: k8s.istio_tcp_sent_bytes.delta
            - action: insert
              include: k8s.istio_tcp_received_bytes.rate
              new_name: k8s.istio_tcp_received_bytes.delta
          metricstransform/preprocessing:
            transforms:
            - action: insert
              include: k8s.container_fs_reads_total
              new_name: k8s.container_fs_reads_total_temp
            - action: insert
              include: k8s.container_fs_writes_total
              new_name: k8s.container_fs_writes_total_temp
            - action: combine
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: (k8s.container_fs_reads_total_temp|k8s.container_fs_writes_total_temp)
              match_type: regexp
              new_name: k8s.container.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - container
                - pod
                - namespace
              submatch_case: lower
            - action: insert
              include: k8s.container_fs_reads_bytes_total
              new_name: k8s.container_fs_reads_bytes_total_temp
            - action: insert
              include: k8s.container_fs_writes_bytes_total
              new_name: k8s.container_fs_writes_bytes_total_temp
            - action: combine
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: (k8s.container_fs_reads_bytes_total_temp|k8s.container_fs_writes_bytes_total_temp)
              match_type: regexp
              new_name: k8s.container.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - container
                - pod
                - namespace
              submatch_case: lower
            - action: insert
              include: k8s.container_network_receive_bytes_total
              new_name: k8s.container.network.bytes_received
            - action: insert
              include: k8s.container_network_transmit_bytes_total
              new_name: k8s.container.network.bytes_transmitted
            - action: insert
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_cpu_usage_seconds_total
              match_type: regexp
              new_name: k8s.pod.cpu.usage.seconds.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              include: k8s.container_cpu_usage_seconds_total
              new_name: k8s.container.cpu.usage.seconds.rate
            - action: insert
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_memory_working_set_bytes
              match_type: regexp
              new_name: k8s.pod.memory.working_set
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_bytes_total
              match_type: regexp
              new_name: k8s.pod.network.bytes_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_bytes_total
              match_type: regexp
              new_name: k8s.pod.network.bytes_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_packets_total
              match_type: regexp
              new_name: k8s.pod.network.packets_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_packets_total
              match_type: regexp
              new_name: k8s.pod.network.packets_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_packets_dropped_total
              match_type: regexp
              new_name: k8s.pod.network.receive_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_packets_dropped_total
              match_type: regexp
              new_name: k8s.pod.network.transmit_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_reads_total
              match_type: regexp
              new_name: k8s.pod.fs.reads.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_writes_total
              match_type: regexp
              new_name: k8s.pod.fs.writes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_reads_bytes_total
              match_type: regexp
              new_name: k8s.pod.fs.reads.bytes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_writes_bytes_total
              match_type: regexp
              new_name: k8s.pod.fs.writes.bytes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.rate
              new_name: k8s.pod.fs.reads.rate_temp
            - action: insert
              include: k8s.pod.fs.writes.rate
              new_name: k8s.pod.fs.writes.rate_temp
            - action: combine
              include: (k8s.pod.fs.reads.rate_temp|k8s.pod.fs.writes.rate_temp)
              match_type: regexp
              new_name: k8s.pod.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
              submatch_case: lower
            - action: insert
              include: k8s.pod.fs.reads.bytes.rate
              new_name: k8s.pod.fs.reads.bytes.rate_temp
            - action: insert
              include: k8s.pod.fs.writes.bytes.rate
              new_name: k8s.pod.fs.writes.bytes.rate_temp
            - action: combine
              include: (k8s.pod.fs.reads.bytes.rate_temp|k8s.pod.fs.writes.bytes.rate_temp)
              match_type: regexp
              new_name: k8s.pod.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
              submatch_case: lower
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_usage_bytes
              match_type: regexp
              new_name: k8s.pod.fs.usage.bytes
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
              include: k8s.container_cpu_usage_seconds_total
              new_name: k8s.node.cpu.usage.seconds.rate
            - action: insert
              experimental_match_labels:
                id: /
              include: k8s.container_memory_working_set_bytes
              new_name: k8s.node.memory.working_set
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_bytes_total
              match_type: regexp
              new_name: k8s.node.network.bytes_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_bytes_total
              match_type: regexp
              new_name: k8s.node.network.bytes_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_packets_total
              match_type: regexp
              new_name: k8s.node.network.packets_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_packets_total
              match_type: regexp
              new_name: k8s.node.network.packets_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_packets_dropped_total
              match_type: regexp
              new_name: k8s.node.network.receive_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_packets_dropped_total
              match_type: regexp
              new_name: k8s.node.network.transmit_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.rate
              new_name: k8s.node.fs.reads.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.writes.rate
              new_name: k8s.node.fs.writes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.bytes.rate
              new_name: k8s.node.fs.reads.bytes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.writes.bytes.rate
              new_name: k8s.node.fs.writes.bytes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: combine
              include: (k8s.node.fs.reads.rate_temp|k8s.node.fs.writes.rate_temp)
              match_type: regexp
              new_name: k8s.node.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
              submatch_case: lower
            - action: combine
              include: (k8s.node.fs.reads.bytes.rate_temp|k8s.node.fs.writes.bytes.rate_temp)
              match_type: regexp
              new_name: k8s.node.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
              submatch_case: lower
            - action: insert
              include: k8s.pod.fs.usage.bytes
              new_name: k8s.node.fs.usage
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
          metricstransform/rename:
            transforms:
            - action: update
              include: ^(.*)$$
              match_type: regexp
              new_name: k8s.$${1}
          resource/all:
            attributes:
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: upsert
              key: k8s.node.name
              value: ${NODE_NAME}
          resource/container:
            attributes:
            - action: insert
              key: sw.k8s.log.type
              value: container
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              key: k8s.node.name
              value: ${NODE_NAME}
          resource/metrics:
            attributes:
            - action: delete
              key: service.name
            - action: delete
              key: service.instance.id
            - action: delete
              key: net.host.name
            - action: delete
              key: net.host.port
            - action: delete
              key: http.scheme
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              from_attribute: kubelet_version
              key: sw.k8s.node.version
            - action: insert
              from_attribute: container_runtime_version
              key: sw.k8s.node.container.runtime.version
            - action: insert
              from_attribute: provider_id
              key: sw.k8s.node.provider.id
            - action: insert
              from_attribute: os_image
              key: sw.k8s.node.os.image
            - action: insert
              from_attribute: internal_ip
              key: sw.k8s.node.ip.internal
            - action: insert
              from_attribute: namespace
              key: k8s.namespace.name
            - action: insert
              from_attribute: pod
              key: k8s.pod.name
            - action: insert
              from_attribute: pod_ip
              key: sw.k8s.pod.ip
            - action: insert
              from_attribute: host_ip
              key: sw.k8s.pod.host.ip
            - action: insert
              from_attribute: created_by_kind
              key: sw.k8s.pod.createdby.kind
            - action: insert
              from_attribute: created_by_name
              key: sw.k8s.pod.createdby.name
            - action: insert
              from_attribute: host_network
              key: sw.k8s.pod.host.network
            - action: insert
              from_attribute: priority_class
              key: sw.k8s.pod.priority_class
            - action: extract
              key: container_id
              pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
            - action: insert
              from_attribute: extracted_container_id
              key: container.id
            - action: insert
              from_attribute: extracted_container_runtime
              key: container.runtime
            - action: insert
              from_attribute: container
              key: k8s.container.name
            - action: insert
              from_attribute: image_id
              key: k8s.container.image.id
            - action: insert
              from_attribute: image
              key: k8s.container.image.name
            - action: insert
              from_attribute: replicaset
              key: k8s.replicaset.name
            - action: insert
              from_attribute: deployment
              key: k8s.deployment.name
            - action: insert
              from_attribute: statefulset
              key: k8s.statefulset.name
            - action: insert
              from_attribute: daemonset
              key: k8s.daemonset.name
            - action: insert
              from_attribute: job_name
              key: k8s.job.name
            - action: insert
              from_attribute: job_condition
              key: k8s.job.condition
            - action: insert
              from_attribute: cronjob
              key: k8s.cronjob.name
            - action: insert
              from_attribute: persistentvolume
              key: k8s.persistentvolume.name
            - action: insert
              from_attribute: persistentvolumeclaim
              key: k8s.persistentvolumeclaim.name
          resource/swk8sattributes_logs_annotations_filter:
            attributes:
            - action: delete
              pattern: k8s\.\w+\.annotations\..*
          resource/swk8sattributes_logs_labels_filter:
            attributes:
            - action: delete
              pattern: k8s\.\w+\.labels\..*
          swk8sattributes:
            auth_type: serviceAccount
            extract:
              annotations:
              - from: pod
                key_regex: (.*)
                tag_name: k8s.pod.annotations.$$1
              - from: namespace
                key_regex: (.*)
                tag_name: k8s.namespace.annotations.$$1
              labels:
              - from: pod
                key_regex: (.*)
                tag_name: k8s.pod.labels.$$1
              - from: namespace
                key_regex: (.*)
                tag_name: k8s.namespace.labels.$$1
              metadata:
              - k8s.deployment.name
              - k8s.replicaset.name
              - k8s.daemonset.name
              - k8s.job.name
              - k8s.cronjob.name
              - k8s.statefulset.name
            filter:
              node_from_env_var: NODE_NAME
            passthrough: false
            pod_association:
            - sources:
              - from: resource_attribute
                name: k8s.pod.name
              - from: resource_attribute
                name: k8s.namespace.name
          transform/istio-metrics:
            metric_statements:
            - context: metric
              statements:
              - extract_sum_metric(true) where (name == "k8s.istio_request_bytes" or name
                == "k8s.istio_response_bytes" or name == "k8s.istio_request_duration_milliseconds")
              - extract_count_metric(true) where (name == "k8s.istio_request_duration_milliseconds")
              - set(name, "k8s.istio_request_bytes.rate") where name == "k8s.istio_request_bytes_sum"
              - set(name, "k8s.istio_response_bytes.rate") where name == "k8s.istio_response_bytes_sum"
              - set(name, "k8s.istio_requests.rate") where name == "k8s.istio_requests_total"
              - set(name, "k8s.istio_tcp_sent_bytes.rate") where name == "k8s.istio_tcp_sent_bytes_total"
              - set(name, "k8s.istio_tcp_received_bytes.rate") where name == "k8s.istio_tcp_received_bytes_total"
              - set(name, "k8s.istio_request_duration_milliseconds_sum_temp") where name ==
                "k8s.istio_request_duration_milliseconds_sum"
              - set(name, "k8s.istio_request_duration_milliseconds_count_temp") where name
                == "k8s.istio_request_duration_milliseconds_count"
          transform/syslogify:
            error_mode: ignore
            log_statements:
            - context: log
              statements:
              - set( attributes["host.name"], resource.attributes["k8s.pod.name"])
              - set( attributes["service.name"], resource.attributes["k8s.container.name"])
          transform/unify_node_attribute:
            metric_statements:
            - context: datapoint
              statements:
              - set(attributes["k8s.node.name"], resource.attributes["service.instance.id"])
                where IsMatch(metric.name, "^(container_.*)$") == true and attributes["k8s.node.name"]
                == nil
        receivers:
          filelog:
            encoding: utf-8
            exclude:
            - \var\log\pods\${POD_NAMESPACE}_${POD_NAME}*_*\swi-opentelemetry-collector\*.log
            fingerprint_size: 1kb
            include:
            - \var\log\pods\*\*\*.log
            include_file_name: false
            include_file_path: true
            max_concurrent_files: 10
            max_log_size: 1MiB
            operators:
            - field: attributes["log.file.path.windows"]
              type: add
              value: EXPR(replace(attributes["log.file.path"], "\\", "/"))
            - field: attributes["log.file.path"]
              type: remove
            - from: attributes["log.file.path.windows"]
              to: attributes["log.file.path"]
              type: move
            - id: container-parser
              type: container
            - field: resource["k8s.container.restart_count"]
              type: remove
            - field: attributes["log.file.path"]
              type: remove
            poll_interval: 200ms
            start_at: end
            storage: file_storage/checkpoints
          receiver_creator/discovery:
            receivers:
              prometheus/discovery:
                config:
                  config:
                    scrape_configs:
                    - honor_labels: true
                      honor_timestamps: false
                      job_name: pod
                      metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                        : "/metrics"`'
                      scheme: http
                      scrape_interval: 60s
                      static_configs:
                      - targets:
                        - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                          : 9090`'
                rule: type == "pod" && annotations["prometheus.io/scrape"] == "true"
            watch_observers:
            - k8s_observer
          receiver_creator/node:
            receivers:
              prometheus/node:
                config:
                  config:
                    scrape_configs:
                    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      honor_labels: true
                      honor_timestamps: false
                      job_name: kubernetes-nodes-cadvisor
                      metrics_path: /metrics/cadvisor
                      scheme: https
                      scrape_interval: 60s
                      scrape_timeout: 10s
                      static_configs:
                      - targets:
                        - '`endpoint`:`kubelet_endpoint_port`'
                      tls_config:
                        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        insecure_skip_verify: true
                    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      honor_labels: true
                      honor_timestamps: false
                      job_name: kubernetes-nodes
                      metrics_path: /metrics
                      scheme: https
                      scrape_interval: 60s
                      scrape_timeout: 10s
                      static_configs:
                      - targets:
                        - '`endpoint`:`kubelet_endpoint_port`'
                      tls_config:
                        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        insecure_skip_verify: true
                rule: type == "k8s.node"
            watch_observers:
            - k8s_observer
        service:
          extensions:
          - file_storage/checkpoints
          - health_check
          - k8s_observer
          pipelines:
            logs:
              exporters:
              - otlp
              processors:
              - memory_limiter
              - batch/logs
              receivers:
              - forward/logs-exporter
            logs/container:
              exporters:
              - forward/logs-exporter
              processors:
              - memory_limiter
              - transform/syslogify
              - groupbyattrs/common-all
              - resource/container
              - swk8sattributes
              - resource/swk8sattributes_logs_labels_filter
              - resource/swk8sattributes_logs_annotations_filter
              receivers:
              - filelog
            metrics:
              exporters:
              - otlp
              processors:
              - memory_limiter
              - filter/histograms
              - swk8sattributes
              - filter/remove_temporary_metrics
              - batch/metrics
              receivers:
              - forward/metric-exporter
            metrics/discovery:
              exporters:
              - forward/metric-exporter
              processors:
              - memory_limiter
              - metricstransform/rename
              - transform/istio-metrics
              - metricstransform/istio-metrics
              - cumulativetodelta/istio-metrics
              - deltatorate/istio-metrics
              - experimental_metricsgeneration/istio-metrics
              - groupbyattrs/common-all
              - resource/all
              receivers:
              - receiver_creator/discovery
            metrics/node:
              exporters:
              - forward/metric-exporter
              processors:
              - memory_limiter
              - filter/receiver
              - filter/remove_internal
              - attributes/remove_prometheus_attributes
              - attributes/unify_node_attribute
              - transform/unify_node_attribute
              - metricstransform/rename
              - metricstransform/preprocessing
              - filter/remove_internal_postprocessing
              - attributes/remove_temp
              - cumulativetodelta/cadvisor
              - deltatorate/cadvisor
              - groupbyattrs/node
              - groupbyattrs/pod
              - groupbyattrs/all
              - resource/metrics
              - resource/all
              receivers:
              - receiver_creator/node
          telemetry:
            logs:
              level: info
            metrics:
              address: 0.0.0.0:8888

  logs_service.proto: |
        
  logs.proto: |
        
  common.proto: |
        
  resource.proto: |
---
# Source: swo-k8s-collector/templates/node-collector-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-swo-k8s-collector-node-collector-config
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
data:
  logs.config: |
        connectors:
          forward/logs-exporter: null
          forward/metric-exporter: null
        exporters:
          otlp:
            endpoint: ${OTEL_ENVOY_ADDRESS}
            headers:
              Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            retry_on_failure:
              enabled: true
              initial_interval: 10s
              max_elapsed_time: 300s
              max_interval: 30s
            sending_queue:
              enabled: true
              num_consumers: 20
              queue_size: 1000
            timeout: 15s
            tls:
              insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
        extensions:
          file_storage/checkpoints:
            directory: /var/lib/swo/checkpoints
            timeout: 5s
          health_check:
            endpoint: 0.0.0.0:13133
          k8s_observer:
            auth_type: serviceAccount
            node: ${NODE_NAME}
            observe_nodes: true
            observe_pods: true
        processors:
          attributes/remove_prometheus_attributes:
            actions:
            - action: delete
              key: prometheus
            - action: delete
              key: prometheus_replica
          attributes/remove_temp:
            actions:
            - action: delete
              key: temp
              pattern: (.*_temp$)|(^\$.*)
            include:
              match_type: regexp
              metric_names:
              - .*
          attributes/unify_node_attribute:
            actions:
            - action: insert
              from_attribute: node
              key: k8s.node.name
            - action: insert
              from_attribute: kubernetes_io_hostname
              key: k8s.node.name
            include:
              match_type: regexp
              metric_names:
              - container_.*
          batch/logs:
            send_batch_max_size: 512
            send_batch_size: 512
            timeout: 1s
          batch/metrics:
            send_batch_max_size: 512
            send_batch_size: 512
            timeout: 1s
          cumulativetodelta/cadvisor:
            include:
              match_type: strict
              metrics:
              - k8s.node.cpu.usage.seconds.rate
              - k8s.pod.cpu.usage.seconds.rate
              - k8s.container.fs.iops
              - k8s.container.fs.throughput
              - k8s.container.cpu.usage.seconds.rate
              - k8s.container.network.bytes_received
              - k8s.container.network.bytes_transmitted
              - k8s.pod.fs.iops
              - k8s.pod.fs.throughput
              - k8s.pod.fs.reads.rate
              - k8s.pod.fs.writes.rate
              - k8s.pod.fs.reads.bytes.rate
              - k8s.pod.fs.writes.bytes.rate
              - k8s.pod.network.bytes_received
              - k8s.pod.network.bytes_transmitted
              - k8s.pod.network.packets_received
              - k8s.pod.network.packets_transmitted
              - k8s.pod.network.receive_packets_dropped
              - k8s.pod.network.transmit_packets_dropped
              - k8s.node.fs.iops
              - k8s.node.fs.throughput
              - k8s.node.network.bytes_received
              - k8s.node.network.bytes_transmitted
              - k8s.node.network.packets_received
              - k8s.node.network.packets_transmitted
              - k8s.node.network.receive_packets_dropped
              - k8s.node.network.transmit_packets_dropped
          cumulativetodelta/istio-metrics:
            include:
              match_type: strict
              metrics:
              - k8s.istio_request_bytes.rate
              - k8s.istio_response_bytes.rate
              - k8s.istio_request_duration_milliseconds_sum_temp
              - k8s.istio_request_duration_milliseconds_count_temp
              - k8s.istio_requests.rate
              - k8s.istio_tcp_sent_bytes.rate
              - k8s.istio_tcp_received_bytes.rate
              - k8s.istio_request_bytes.delta
              - k8s.istio_response_bytes.delta
              - k8s.istio_requests.delta
              - k8s.istio_tcp_sent_bytes.delta
              - k8s.istio_tcp_received_bytes.delta
          deltatorate/cadvisor:
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          deltatorate/istio-metrics:
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum_temp
            - k8s.istio_request_duration_milliseconds_count_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
          experimental_metricsgeneration/istio-metrics:
            rules:
            - metric1: k8s.istio_request_duration_milliseconds_sum_temp
              metric2: k8s.istio_request_duration_milliseconds_count_temp
              name: k8s.istio_request_duration_milliseconds.rate
              operation: divide
              type: calculate
          filter/histograms:
            metrics:
              metric:
              - type == METRIC_DATA_TYPE_HISTOGRAM
          filter/receiver:
            metrics:
              metric:
              - name == "scrape_duration_seconds"
              - name == "scrape_samples_post_metric_relabeling"
              - name == "scrape_samples_scraped"
              - name == "scrape_series_added"
              - name == "up"
          filter/remove_internal:
            metrics:
              datapoint:
              - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
                == false
          filter/remove_internal_postprocessing:
            metrics:
              datapoint:
              - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
                == true
          filter/remove_temporary_metrics:
            metrics:
              metric:
              - IsMatch(name , ".*_temp")
              - name == "apiserver_request_total"
          groupbyattrs/all:
            keys:
            - kubelet_version
            - container_runtime_version
            - provider_id
            - os_image
            - namespace
            - uid
            - k8s.pod.uid
            - pod_ip
            - host_ip
            - created_by_kind
            - created_by_name
            - host_network
            - priority_class
            - container_id
            - container
            - image
            - image_id
            - k8s.node.name
            - sw.k8s.pod.status
            - sw.k8s.namespace.status
            - sw.k8s.node.status
            - sw.k8s.container.status
            - sw.k8s.container.init
            - daemonset
            - statefulset
            - deployment
            - replicaset
            - job_name
            - cronjob
            - sw.k8s.cluster.version
            - internal_ip
            - job_condition
            - persistentvolumeclaim
            - persistentvolume
            - sw.k8s.persistentvolumeclaim.status
            - sw.k8s.persistentvolume.status
            - storageclass
            - access_mode
            - k8s.service.name
            - sw.k8s.service.external_name
            - sw.k8s.service.type
            - sw.k8s.cluster.ip
          groupbyattrs/common-all:
            keys:
            - k8s.container.name
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - host.name
            - service.name
          groupbyattrs/node:
            keys:
            - k8s.node.name
          groupbyattrs/pod:
            keys:
            - namespace
            - pod
          memory_limiter:
            check_interval: 1s
            limit_mib: 800
            spike_limit_mib: 300
          metricstransform/istio-metrics:
            transforms:
            - action: insert
              include: k8s.istio_request_bytes.rate
              new_name: k8s.istio_request_bytes.delta
            - action: insert
              include: k8s.istio_response_bytes.rate
              new_name: k8s.istio_response_bytes.delta
            - action: insert
              include: k8s.istio_requests.rate
              new_name: k8s.istio_requests.delta
            - action: insert
              include: k8s.istio_tcp_sent_bytes.rate
              new_name: k8s.istio_tcp_sent_bytes.delta
            - action: insert
              include: k8s.istio_tcp_received_bytes.rate
              new_name: k8s.istio_tcp_received_bytes.delta
          metricstransform/preprocessing:
            transforms:
            - action: insert
              include: k8s.container_fs_reads_total
              new_name: k8s.container_fs_reads_total_temp
            - action: insert
              include: k8s.container_fs_writes_total
              new_name: k8s.container_fs_writes_total_temp
            - action: combine
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: (k8s.container_fs_reads_total_temp|k8s.container_fs_writes_total_temp)
              match_type: regexp
              new_name: k8s.container.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - container
                - pod
                - namespace
              submatch_case: lower
            - action: insert
              include: k8s.container_fs_reads_bytes_total
              new_name: k8s.container_fs_reads_bytes_total_temp
            - action: insert
              include: k8s.container_fs_writes_bytes_total
              new_name: k8s.container_fs_writes_bytes_total_temp
            - action: combine
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: (k8s.container_fs_reads_bytes_total_temp|k8s.container_fs_writes_bytes_total_temp)
              match_type: regexp
              new_name: k8s.container.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - container
                - pod
                - namespace
              submatch_case: lower
            - action: insert
              include: k8s.container_network_receive_bytes_total
              new_name: k8s.container.network.bytes_received
            - action: insert
              include: k8s.container_network_transmit_bytes_total
              new_name: k8s.container.network.bytes_transmitted
            - action: insert
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_cpu_usage_seconds_total
              match_type: regexp
              new_name: k8s.pod.cpu.usage.seconds.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              include: k8s.container_cpu_usage_seconds_total
              new_name: k8s.container.cpu.usage.seconds.rate
            - action: insert
              experimental_match_labels:
                container: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_memory_working_set_bytes
              match_type: regexp
              new_name: k8s.pod.memory.working_set
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_bytes_total
              match_type: regexp
              new_name: k8s.pod.network.bytes_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_bytes_total
              match_type: regexp
              new_name: k8s.pod.network.bytes_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_packets_total
              match_type: regexp
              new_name: k8s.pod.network.packets_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_packets_total
              match_type: regexp
              new_name: k8s.pod.network.packets_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_receive_packets_dropped_total
              match_type: regexp
              new_name: k8s.pod.network.receive_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_network_transmit_packets_dropped_total
              match_type: regexp
              new_name: k8s.pod.network.transmit_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_reads_total
              match_type: regexp
              new_name: k8s.pod.fs.reads.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_writes_total
              match_type: regexp
              new_name: k8s.pod.fs.writes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_reads_bytes_total
              match_type: regexp
              new_name: k8s.pod.fs.reads.bytes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_writes_bytes_total
              match_type: regexp
              new_name: k8s.pod.fs.writes.bytes.rate
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.rate
              new_name: k8s.pod.fs.reads.rate_temp
            - action: insert
              include: k8s.pod.fs.writes.rate
              new_name: k8s.pod.fs.writes.rate_temp
            - action: combine
              include: (k8s.pod.fs.reads.rate_temp|k8s.pod.fs.writes.rate_temp)
              match_type: regexp
              new_name: k8s.pod.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
              submatch_case: lower
            - action: insert
              include: k8s.pod.fs.reads.bytes.rate
              new_name: k8s.pod.fs.reads.bytes.rate_temp
            - action: insert
              include: k8s.pod.fs.writes.bytes.rate
              new_name: k8s.pod.fs.writes.bytes.rate_temp
            - action: combine
              include: (k8s.pod.fs.reads.bytes.rate_temp|k8s.pod.fs.writes.bytes.rate_temp)
              match_type: regexp
              new_name: k8s.pod.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
              submatch_case: lower
            - action: insert
              experimental_match_labels:
                k8s.node.name: \S+
                namespace: \S+
                pod: \S+
              include: k8s.container_fs_usage_bytes
              match_type: regexp
              new_name: k8s.pod.fs.usage.bytes
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - pod
                - namespace
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
              include: k8s.container_cpu_usage_seconds_total
              new_name: k8s.node.cpu.usage.seconds.rate
            - action: insert
              experimental_match_labels:
                id: /
              include: k8s.container_memory_working_set_bytes
              new_name: k8s.node.memory.working_set
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_bytes_total
              match_type: regexp
              new_name: k8s.node.network.bytes_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_bytes_total
              match_type: regexp
              new_name: k8s.node.network.bytes_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_packets_total
              match_type: regexp
              new_name: k8s.node.network.packets_received
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_packets_total
              match_type: regexp
              new_name: k8s.node.network.packets_transmitted
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_receive_packets_dropped_total
              match_type: regexp
              new_name: k8s.node.network.receive_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              experimental_match_labels:
                id: /
                k8s.node.name: \S+
              include: k8s.container_network_transmit_packets_dropped_total
              match_type: regexp
              new_name: k8s.node.network.transmit_packets_dropped
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.rate
              new_name: k8s.node.fs.reads.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.writes.rate
              new_name: k8s.node.fs.writes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.reads.bytes.rate
              new_name: k8s.node.fs.reads.bytes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: insert
              include: k8s.pod.fs.writes.bytes.rate
              new_name: k8s.node.fs.writes.bytes.rate_temp
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
            - action: combine
              include: (k8s.node.fs.reads.rate_temp|k8s.node.fs.writes.rate_temp)
              match_type: regexp
              new_name: k8s.node.fs.iops
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
              submatch_case: lower
            - action: combine
              include: (k8s.node.fs.reads.bytes.rate_temp|k8s.node.fs.writes.bytes.rate_temp)
              match_type: regexp
              new_name: k8s.node.fs.throughput
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
              submatch_case: lower
            - action: insert
              include: k8s.pod.fs.usage.bytes
              new_name: k8s.node.fs.usage
              operations:
              - action: aggregate_labels
                aggregation_type: sum
                label_set:
                - k8s.node.name
          metricstransform/rename:
            transforms:
            - action: update
              include: ^(.*)$$
              match_type: regexp
              new_name: k8s.$${1}
          resource/all:
            attributes:
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: upsert
              key: k8s.node.name
              value: ${NODE_NAME}
          resource/container:
            attributes:
            - action: insert
              key: sw.k8s.log.type
              value: container
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              key: k8s.node.name
              value: ${NODE_NAME}
          resource/journal:
            attributes:
            - action: insert
              key: sw.k8s.log.type
              value: journal
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              key: k8s.node.name
              value: ${NODE_NAME}
          resource/metrics:
            attributes:
            - action: delete
              key: service.name
            - action: delete
              key: service.instance.id
            - action: delete
              key: net.host.name
            - action: delete
              key: net.host.port
            - action: delete
              key: http.scheme
            - action: insert
              key: sw.k8s.agent.manifest.version
              value: ${MANIFEST_VERSION}
            - action: insert
              key: sw.k8s.agent.app.version
              value: ${APP_VERSION}
            - action: insert
              key: sw.k8s.cluster.uid
              value: ${CLUSTER_UID}
            - action: insert
              key: k8s.cluster.name
              value: ${CLUSTER_NAME}
            - action: insert
              from_attribute: kubelet_version
              key: sw.k8s.node.version
            - action: insert
              from_attribute: container_runtime_version
              key: sw.k8s.node.container.runtime.version
            - action: insert
              from_attribute: provider_id
              key: sw.k8s.node.provider.id
            - action: insert
              from_attribute: os_image
              key: sw.k8s.node.os.image
            - action: insert
              from_attribute: internal_ip
              key: sw.k8s.node.ip.internal
            - action: insert
              from_attribute: namespace
              key: k8s.namespace.name
            - action: insert
              from_attribute: pod
              key: k8s.pod.name
            - action: insert
              from_attribute: pod_ip
              key: sw.k8s.pod.ip
            - action: insert
              from_attribute: host_ip
              key: sw.k8s.pod.host.ip
            - action: insert
              from_attribute: created_by_kind
              key: sw.k8s.pod.createdby.kind
            - action: insert
              from_attribute: created_by_name
              key: sw.k8s.pod.createdby.name
            - action: insert
              from_attribute: host_network
              key: sw.k8s.pod.host.network
            - action: insert
              from_attribute: priority_class
              key: sw.k8s.pod.priority_class
            - action: extract
              key: container_id
              pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
            - action: insert
              from_attribute: extracted_container_id
              key: container.id
            - action: insert
              from_attribute: extracted_container_runtime
              key: container.runtime
            - action: insert
              from_attribute: container
              key: k8s.container.name
            - action: insert
              from_attribute: image_id
              key: k8s.container.image.id
            - action: insert
              from_attribute: image
              key: k8s.container.image.name
            - action: insert
              from_attribute: replicaset
              key: k8s.replicaset.name
            - action: insert
              from_attribute: deployment
              key: k8s.deployment.name
            - action: insert
              from_attribute: statefulset
              key: k8s.statefulset.name
            - action: insert
              from_attribute: daemonset
              key: k8s.daemonset.name
            - action: insert
              from_attribute: job_name
              key: k8s.job.name
            - action: insert
              from_attribute: job_condition
              key: k8s.job.condition
            - action: insert
              from_attribute: cronjob
              key: k8s.cronjob.name
            - action: insert
              from_attribute: persistentvolume
              key: k8s.persistentvolume.name
            - action: insert
              from_attribute: persistentvolumeclaim
              key: k8s.persistentvolumeclaim.name
          resource/swk8sattributes_logs_annotations_filter:
            attributes:
            - action: delete
              pattern: k8s\.\w+\.annotations\..*
          resource/swk8sattributes_logs_labels_filter:
            attributes:
            - action: delete
              pattern: k8s\.\w+\.labels\..*
          swk8sattributes:
            auth_type: serviceAccount
            extract:
              annotations:
              - from: pod
                key_regex: (.*)
                tag_name: k8s.pod.annotations.$$1
              - from: namespace
                key_regex: (.*)
                tag_name: k8s.namespace.annotations.$$1
              labels:
              - from: pod
                key_regex: (.*)
                tag_name: k8s.pod.labels.$$1
              - from: namespace
                key_regex: (.*)
                tag_name: k8s.namespace.labels.$$1
              metadata:
              - k8s.deployment.name
              - k8s.replicaset.name
              - k8s.daemonset.name
              - k8s.job.name
              - k8s.cronjob.name
              - k8s.statefulset.name
            filter:
              node_from_env_var: NODE_NAME
            passthrough: false
            pod_association:
            - sources:
              - from: resource_attribute
                name: k8s.pod.name
              - from: resource_attribute
                name: k8s.namespace.name
          transform/istio-metrics:
            metric_statements:
            - context: metric
              statements:
              - extract_sum_metric(true) where (name == "k8s.istio_request_bytes" or name
                == "k8s.istio_response_bytes" or name == "k8s.istio_request_duration_milliseconds")
              - extract_count_metric(true) where (name == "k8s.istio_request_duration_milliseconds")
              - set(name, "k8s.istio_request_bytes.rate") where name == "k8s.istio_request_bytes_sum"
              - set(name, "k8s.istio_response_bytes.rate") where name == "k8s.istio_response_bytes_sum"
              - set(name, "k8s.istio_requests.rate") where name == "k8s.istio_requests_total"
              - set(name, "k8s.istio_tcp_sent_bytes.rate") where name == "k8s.istio_tcp_sent_bytes_total"
              - set(name, "k8s.istio_tcp_received_bytes.rate") where name == "k8s.istio_tcp_received_bytes_total"
              - set(name, "k8s.istio_request_duration_milliseconds_sum_temp") where name ==
                "k8s.istio_request_duration_milliseconds_sum"
              - set(name, "k8s.istio_request_duration_milliseconds_count_temp") where name
                == "k8s.istio_request_duration_milliseconds_count"
          transform/syslogify:
            error_mode: ignore
            log_statements:
            - context: log
              statements:
              - set( attributes["host.name"], resource.attributes["k8s.pod.name"])
              - set( attributes["service.name"], resource.attributes["k8s.container.name"])
          transform/unify_node_attribute:
            metric_statements:
            - context: datapoint
              statements:
              - set(attributes["k8s.node.name"], resource.attributes["service.instance.id"])
                where IsMatch(metric.name, "^(container_.*)$") == true and attributes["k8s.node.name"]
                == nil
        receivers:
          filelog:
            encoding: utf-8
            exclude:
            - /var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log
            fingerprint_size: 1kb
            include:
            - /var/log/pods/*/*/*.log
            include_file_name: false
            include_file_path: true
            max_concurrent_files: 10
            max_log_size: 1MiB
            operators:
            - id: container-parser
              type: container
            - field: resource["k8s.container.restart_count"]
              type: remove
            - field: attributes["log.file.path"]
              type: remove
            poll_interval: 200ms
            start_at: end
            storage: file_storage/checkpoints
          journald:
            files:
            - /*/log/journal/**/*
            units:
            - kubelet
            - docker
            - containerd
          receiver_creator/discovery:
            receivers:
              prometheus/discovery:
                config:
                  config:
                    scrape_configs:
                    - honor_labels: true
                      honor_timestamps: false
                      job_name: pod
                      metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                        : "/metrics"`'
                      scheme: http
                      scrape_interval: 60s
                      static_configs:
                      - targets:
                        - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                          : 9090`'
                rule: type == "pod" && annotations["prometheus.io/scrape"] == "true"
            watch_observers:
            - k8s_observer
          receiver_creator/node:
            receivers:
              prometheus/node:
                config:
                  config:
                    scrape_configs:
                    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      honor_labels: true
                      honor_timestamps: false
                      job_name: kubernetes-nodes-cadvisor
                      metrics_path: /metrics/cadvisor
                      scheme: https
                      scrape_interval: 60s
                      scrape_timeout: 10s
                      static_configs:
                      - targets:
                        - '`endpoint`:`kubelet_endpoint_port`'
                      tls_config:
                        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        insecure_skip_verify: true
                    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      honor_labels: true
                      honor_timestamps: false
                      job_name: kubernetes-nodes
                      metrics_path: /metrics
                      scheme: https
                      scrape_interval: 60s
                      scrape_timeout: 10s
                      static_configs:
                      - targets:
                        - '`endpoint`:`kubelet_endpoint_port`'
                      tls_config:
                        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        insecure_skip_verify: true
                rule: type == "k8s.node"
            watch_observers:
            - k8s_observer
        service:
          extensions:
          - file_storage/checkpoints
          - health_check
          - k8s_observer
          pipelines:
            logs:
              exporters:
              - otlp
              processors:
              - memory_limiter
              - batch/logs
              receivers:
              - forward/logs-exporter
            logs/container:
              exporters:
              - forward/logs-exporter
              processors:
              - memory_limiter
              - transform/syslogify
              - groupbyattrs/common-all
              - resource/container
              - swk8sattributes
              - resource/swk8sattributes_logs_labels_filter
              - resource/swk8sattributes_logs_annotations_filter
              receivers:
              - filelog
            logs/journal:
              exporters:
              - forward/logs-exporter
              processors:
              - memory_limiter
              - groupbyattrs/common-all
              - resource/journal
              receivers:
              - journald
            metrics:
              exporters:
              - otlp
              processors:
              - memory_limiter
              - filter/histograms
              - swk8sattributes
              - filter/remove_temporary_metrics
              - batch/metrics
              receivers:
              - forward/metric-exporter
            metrics/discovery:
              exporters:
              - forward/metric-exporter
              processors:
              - memory_limiter
              - metricstransform/rename
              - transform/istio-metrics
              - metricstransform/istio-metrics
              - cumulativetodelta/istio-metrics
              - deltatorate/istio-metrics
              - experimental_metricsgeneration/istio-metrics
              - groupbyattrs/common-all
              - resource/all
              receivers:
              - receiver_creator/discovery
            metrics/node:
              exporters:
              - forward/metric-exporter
              processors:
              - memory_limiter
              - filter/receiver
              - filter/remove_internal
              - attributes/remove_prometheus_attributes
              - attributes/unify_node_attribute
              - transform/unify_node_attribute
              - metricstransform/rename
              - metricstransform/preprocessing
              - filter/remove_internal_postprocessing
              - attributes/remove_temp
              - cumulativetodelta/cadvisor
              - deltatorate/cadvisor
              - groupbyattrs/node
              - groupbyattrs/pod
              - groupbyattrs/all
              - resource/metrics
              - resource/all
              receivers:
              - receiver_creator/node
          telemetry:
            logs:
              level: info
            metrics:
              address: 0.0.0.0:8888

  logs_service.proto: |
        
  logs.proto: |
        
  common.proto: |
        
  resource.proto: |
---
# Source: swo-k8s-collector/charts/kube-state-metrics/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-5.25.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/version: "2.13.0"
  name: my-swo-k8s-collector-kube-state-metrics
rules:

- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - cronjobs
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["list", "watch"]

- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["list", "watch"]

- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - limitranges
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - mutatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "watch"]

- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumeclaims
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumes
  verbs: ["list", "watch"]

- apiGroups: ["policy"]
  resources:
    - poddisruptionbudgets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - replicasets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - replicationcontrollers
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - resourcequotas
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - services
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - storageclasses
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - validatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - volumeattachments
  verbs: ["list", "watch"]
---
# Source: swo-k8s-collector/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-swo-k8s-collector-role
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
rules:
  - apiGroups:
      - ""
    resources:
      - events
      - endpoints
      - namespaces
      - namespaces/status
      - nodes
      - nodes/spec
      - nodes/proxy
      - nodes/metrics
      - pods
      - pods/status
      - replicationcontrollers
      - replicationcontrollers/status
      - resourcequotas
      - services
      - persistentvolumes
      - persistentvolumeclaims
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "networking.istio.io"
    resources:
      - virtualservices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
# Source: swo-k8s-collector/charts/kube-state-metrics/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-5.25.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/version: "2.13.0"
  name: my-swo-k8s-collector-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-swo-k8s-collector-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: my-swo-k8s-collector-kube-state-metrics
  namespace: default
---
# Source: swo-k8s-collector/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-swo-k8s-collector-role-binding
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-swo-k8s-collector-role
subjects:
  - kind: ServiceAccount
    name: my-swo-k8s-collector
    namespace: default
---
# Source: swo-k8s-collector/charts/kube-state-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-swo-k8s-collector-kube-state-metrics
  namespace: default
  labels:    
    helm.sh/chart: kube-state-metrics-5.25.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/version: "2.13.0"
  annotations:
spec:
  type: "ClusterIP"
  ports:
  - name: "http"
    protocol: TCP
    port: 8080
    targetPort: 8080
  
  selector:    
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: my-swo-k8s-collector
---
# Source: swo-k8s-collector/templates/collector-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-swo-k8s-collector-metrics-collector
  namespace: default
  labels:
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
spec:
  type: ClusterIP
  ports:
  - name: otlp
    port: 4317
    targetPort: otlp
    protocol: TCP
  selector:
    app: my-swo-k8s-collector-metrics
---
# Source: swo-k8s-collector/templates/node-collector-daemon-set-windows.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-swo-k8s-collector-node-collector-windows
  namespace: default
  labels:
    app.kubernetes.io/name: swo-k8s-collector
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
spec:
  selector:
    matchLabels:
      app: my-swo-k8s-collector-node-collector-windows
  template:
    metadata:
      labels:
        app.kubernetes.io/name: swo-k8s-collector
        app: my-swo-k8s-collector-node-collector-windows
        app.kubernetes.io/part-of: swo-k8s-collector
        app.kubernetes.io/instance: my-swo-k8s-collector
        app.kubernetes.io/managed-by: my-swo-k8s-collector
        helm.sh/chart: swo-k8s-collector-4.0.0
        app.kubernetes.io/version: "0.11.4"
        
      annotations:
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config_common_env: c57c3ce3815f609c447904a5f7f7d80edd9653d43ba441d15bdcbfea490846f9
        checksum/values: babd543be9608c5de24d6f47b8cbd9193eed36611b23996e65270c6d25785e22
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
    spec:
      terminationGracePeriodSeconds: 600
      serviceAccountName: my-swo-k8s-collector
      tolerations:
        - operator: Exists
          effect: NoSchedule
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: NotIn
                values:
                - fargate
      nodeSelector:
        kubernetes.io/os: windows
        kubernetes.io/arch: amd64
      containers:
        - name: swi-opentelemetry-collector
          image: "solarwinds/swi-opentelemetry-collector:0.11.4-nanoserver"
          imagePullPolicy: IfNotPresent
          command:
            - c:\wrapper.exe
            - c:\swi-otelcol.exe
            - --config=c:\conf\relay.yaml
            - --feature-gates=filelog.container.removeOriginalTimeField
          env:
            - name: CHECKPOINT_DIR
              value: c:/var/lib/swo/checkpoints
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
          envFrom:
            - configMapRef:
                name: my-swo-k8s-collector-common-env
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 50Mi
          volumeMounts:
            - mountPath: c:\var\log\pods
              name: varlogpods
              readOnly: true
            - mountPath: c:\var\log\containers
              name: varlogcontainers
              readOnly: true
            - mountPath: c:\var\lib\docker\containers
              name: varlibdockercontainers
              readOnly: true
            - mountPath: c:\conf
              name: opentelemetry-collector-configmap
              readOnly: true
            - name: logcheckpoints
              mountPath: c:/var/lib/swo/checkpoints
      volumes:
        - name: varlogpods
          hostPath:
            path: c:\var\log\pods
        - name: varlogcontainers
          hostPath:
            path: c:\var\log\containers
        - name: varlibdockercontainers
          hostPath:
            path: c:\var\lib\docker\containers
        - name: logcheckpoints
          hostPath:
            path: c:/var/lib/swo/checkpoints/4d51349fb86079745afe70b8333fd96ee2255b88b63eb2b37417c92aefa73fcb
            type: DirectoryOrCreate
        - name: opentelemetry-collector-configmap
          configMap:
            name: my-swo-k8s-collector-node-collector-config-windows
            items:
              - key: logs.config
                path: relay.yaml
---
# Source: swo-k8s-collector/templates/node-collector-daemon-set.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-swo-k8s-collector-node-collector
  namespace: default
  labels:
    app.kubernetes.io/name: swo-k8s-collector
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
spec:
  selector:
    matchLabels:
      app: my-swo-k8s-collector-node-collector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: swo-k8s-collector
        app: my-swo-k8s-collector-node-collector
        app.kubernetes.io/part-of: swo-k8s-collector
        app.kubernetes.io/instance: my-swo-k8s-collector
        app.kubernetes.io/managed-by: my-swo-k8s-collector
        helm.sh/chart: swo-k8s-collector-4.0.0
        app.kubernetes.io/version: "0.11.4"
        
      annotations:
        checksum/config: 84a36024cbfdd2870fe42f7f94370b1ce608d59d0f669db39adad94c0e789f6b
        checksum/config_common_env: c57c3ce3815f609c447904a5f7f7d80edd9653d43ba441d15bdcbfea490846f9
        checksum/values: babd543be9608c5de24d6f47b8cbd9193eed36611b23996e65270c6d25785e22
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
    spec:
      terminationGracePeriodSeconds: 600
      serviceAccountName: my-swo-k8s-collector
      securityContext:
        fsGroup: 0
        runAsUser: 0
        runAsGroup: 0
      tolerations:
        - operator: Exists
          effect: NoSchedule
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: NotIn
                values:
                - fargate
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
        - name: swi-opentelemetry-collector
          image: "solarwinds/swi-opentelemetry-collector:0.11.4"
          imagePullPolicy: IfNotPresent
          command:
            - /wrapper
            - /swi-otelcol
            - --config=/conf/relay.yaml
            - --feature-gates=filelog.container.removeOriginalTimeField
          env:
            - name: CHECKPOINT_DIR
              value: /var/lib/swo/checkpoints
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
          envFrom:
            - configMapRef:
                name: my-swo-k8s-collector-common-env
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 50Mi
          volumeMounts:
            - mountPath: /var/log/pods
              name: varlogpods
              readOnly: true
            - mountPath: /var/log/containers
              name: varlogcontainers
              readOnly: true
            - mountPath: /var/lib/docker/containers
              name: varlibdockercontainers
              readOnly: true
            - mountPath: /conf
              name: opentelemetry-collector-configmap
              readOnly: true
            - mountPath: /run/log/journal
              name: runlogjournal
              readOnly: true
            - mountPath: /var/log/journal
              name: varlogjournal
              readOnly: true
            - name: logcheckpoints
              mountPath: /var/lib/swo/checkpoints
      volumes:
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlogcontainers
          hostPath:
            path: /var/log/containers
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: runlogjournal
          hostPath:
            path: /run/log/journal
        - name: varlogjournal
          hostPath:
            path: /var/log/journal
        - name: logcheckpoints
          hostPath:
            path: /var/lib/swo/checkpoints/<CLUSTER_UID>
            type: DirectoryOrCreate
        - name: opentelemetry-collector-configmap
          configMap:
            name: my-swo-k8s-collector-node-collector-config
            items:
              - key: logs.config
                path: relay.yaml
---
# Source: swo-k8s-collector/charts/kube-state-metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-swo-k8s-collector-kube-state-metrics
  namespace: default
  labels:    
    helm.sh/chart: kube-state-metrics-5.25.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/version: "2.13.0"
spec:
  selector:
    matchLabels:      
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/instance: my-swo-k8s-collector
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:        
        helm.sh/chart: kube-state-metrics-5.25.1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: kube-state-metrics
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/instance: my-swo-k8s-collector
        app.kubernetes.io/version: "2.13.0"
    spec:
      automountServiceAccountToken: true
      hostNetwork: false
      serviceAccountName: my-swo-k8s-collector-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: kube-state-metrics
        args:
        - --port=8080
        - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
        imagePullPolicy: IfNotPresent
        image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.13.0
        ports:
        - containerPort: 8080
          name: "http"
        livenessProbe:
          failureThreshold: 3
          httpGet:
            httpHeaders:
            path: /livez
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            httpHeaders:
            path: /readyz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: swo-k8s-collector/templates/events-collector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-swo-k8s-collector-events
  namespace: default
  labels:
    app.kubernetes.io/name: swo-k8s-collector
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-swo-k8s-collector-events
  template:
    metadata:
      annotations:
        checksum/config: 9a2588166493b6c74809f62b1298f352fa499a9de5bc92cf518b336f883b600c
        checksum/config_common_env: c57c3ce3815f609c447904a5f7f7d80edd9653d43ba441d15bdcbfea490846f9
        checksum/values: babd543be9608c5de24d6f47b8cbd9193eed36611b23996e65270c6d25785e22
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
      labels:
        app.kubernetes.io/name: swo-k8s-collector
        app.kubernetes.io/part-of: swo-k8s-collector
        app.kubernetes.io/instance: my-swo-k8s-collector
        app.kubernetes.io/managed-by: my-swo-k8s-collector
        helm.sh/chart: swo-k8s-collector-4.0.0
        app.kubernetes.io/version: "0.11.4"
        app: my-swo-k8s-collector-events
        
    spec:
      terminationGracePeriodSeconds: 600
      serviceAccountName: my-swo-k8s-collector
      securityContext: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
        - name: swi-opentelemetry-collector
          command:
            - /swi-otelcol
            - --config=/conf/relay.yaml
          securityContext: {}
          image: "solarwinds/swi-opentelemetry-collector:0.11.4"
          imagePullPolicy: IfNotPresent
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
          envFrom:
            - configMapRef:
                name: my-swo-k8s-collector-common-env
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              memory: 1000Mi
            requests:
              memory: 1000Mi
          volumeMounts:
            - mountPath: /conf
              name: opentelemetry-collector-configmap
              readOnly: true
      volumes:
        - name: opentelemetry-collector-configmap
          configMap:
            name: my-swo-k8s-collector-events-config
            items:
              - key: events.config
                path: relay.yaml
---
# Source: swo-k8s-collector/templates/metrics-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-swo-k8s-collector-metrics
  namespace: default
  labels:
    app.kubernetes.io/name: swo-k8s-collector
    app.kubernetes.io/part-of: swo-k8s-collector
    app.kubernetes.io/instance: my-swo-k8s-collector
    app.kubernetes.io/managed-by: my-swo-k8s-collector
    helm.sh/chart: swo-k8s-collector-4.0.0
    app.kubernetes.io/version: "0.11.4"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-swo-k8s-collector-metrics
  template:
    metadata:
      annotations:
        checksum/config: c38a89bdbe0f27d12ab4ff28c5f51ec2ba13189e2a11344e9842823f1c170187
        checksum/config_common_env: c57c3ce3815f609c447904a5f7f7d80edd9653d43ba441d15bdcbfea490846f9
        checksum/config_env: 864eb107e20b92c22aa9ecb498fd655c14bc505aa5ee31b749176f538edf0911
        checksum/values: babd543be9608c5de24d6f47b8cbd9193eed36611b23996e65270c6d25785e22
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
      labels:
        app.kubernetes.io/name: swo-k8s-collector
        app.kubernetes.io/part-of: swo-k8s-collector
        app.kubernetes.io/instance: my-swo-k8s-collector
        app.kubernetes.io/managed-by: my-swo-k8s-collector
        helm.sh/chart: swo-k8s-collector-4.0.0
        app.kubernetes.io/version: "0.11.4"
        app: my-swo-k8s-collector-metrics
        
    spec:
      terminationGracePeriodSeconds: 600
      serviceAccountName: my-swo-k8s-collector
      securityContext: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      initContainers:
        - name: otel-endpoint-check
          image: "fullstorydev/grpcurl:v1.9.1"
          imagePullPolicy: IfNotPresent
          command: ['/bin/grpcurl', '-expand-headers',
                    '-proto', 'opentelemetry/proto/collector/logs/v1/logs_service.proto',
                    '-H', 'Authorization: Bearer ${SOLARWINDS_API_TOKEN}',
                    '-d', '{"resourceLogs":[{"resource":{"attributes":[{"key":"sw.k8s.cluster.uid","value":{"stringValue": "<CLUSTER_UID>"}}]},"scope_logs":{"log_records":[{"severityText":"INFO","body":{"stringValue":"otel-endpoint-check successful"}}]}}]}',
                    '<OTEL_ENVOY_ADDRESS>', 'opentelemetry.proto.collector.logs.v1.LogsService.Export']
          volumeMounts:
            - mountPath: opentelemetry/proto/collector/logs/v1/logs_service.proto
              name: opentelemetry-collector-configmap
              subPath: logs_service.proto
              readOnly: true
            - mountPath: opentelemetry/proto/logs/v1/logs.proto
              name: opentelemetry-collector-configmap
              subPath: logs.proto
              readOnly: true
            - mountPath: opentelemetry/proto/common/v1/common.proto
              name: opentelemetry-collector-configmap
              subPath: common.proto
              readOnly: true
            - mountPath: opentelemetry/proto/resource/v1/resource.proto
              name: opentelemetry-collector-configmap
              subPath: resource.proto
              readOnly: true
          env:
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
      containers:
        - name: swi-opentelemetry-collector
          command:
            - /swi-otelcol
            - --config=/conf/relay.yaml
          securityContext: {}
          image: "solarwinds/swi-opentelemetry-collector:0.11.4"
          imagePullPolicy: IfNotPresent
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
          ports:
            - name: otlp
              containerPort: 4317
              protocol: TCP
            - name: http
              containerPort: 8888
              protocol: TCP
          envFrom:
            - configMapRef:
                name: my-swo-k8s-collector-common-env
            - configMapRef:
                name: my-swo-k8s-collector-metrics-env-config
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              memory: 3Gi
            requests:
              memory: 3Gi
          volumeMounts:
            - mountPath: /conf
              name: opentelemetry-collector-configmap
              readOnly: true 
      volumes:
        - name: opentelemetry-collector-configmap
          configMap:
            name: my-swo-k8s-collector-metrics-config
            items:
              - key: metrics.config
                path: relay.yaml
              - key: logs_service.proto
                path: logs_service.proto
              - key: logs.proto
                path: logs.proto
              - key: common.proto
                path: common.proto
              - key: resource.proto
                path: resource.proto
