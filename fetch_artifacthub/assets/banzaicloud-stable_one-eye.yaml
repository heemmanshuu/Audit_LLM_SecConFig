---
# Source: one-eye/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-one-eye
  labels:
    helm.sh/chart: one-eye-0.1.8
    app.kubernetes.io/name: one-eye
    app.kubernetes.io/instance: my-one-eye
    app.kubernetes.io/version: "0.3.4"
    app.kubernetes.io/managed-by: Helm
---
# Source: one-eye/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: my-one-eye
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: one-eye/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-one-eye
subjects:
  - kind: ServiceAccount
    name: my-one-eye
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-one-eye
  apiGroup: rbac.authorization.k8s.io
---
# Source: one-eye/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-one-eye
  labels:
    helm.sh/chart: one-eye-0.1.8
    app.kubernetes.io/name: one-eye
    app.kubernetes.io/instance: my-one-eye
    app.kubernetes.io/version: "0.3.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: one-eye
    app.kubernetes.io/instance: my-one-eye
---
# Source: one-eye/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-one-eye
  labels:
    helm.sh/chart: one-eye-0.1.8
    app.kubernetes.io/name: one-eye
    app.kubernetes.io/instance: my-one-eye
    app.kubernetes.io/version: "0.3.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: one-eye
      app.kubernetes.io/instance: my-one-eye
  template:
    metadata:
      labels:
        app.kubernetes.io/name: one-eye
        app.kubernetes.io/instance: my-one-eye
    spec:
      serviceAccountName: my-one-eye
      securityContext:
        {}
      containers:
        - name: one-eye
          securityContext:
            {}
          image: "banzaicloud/one-eye-operator:0.3.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
          resources:
            {}
---
# Source: one-eye/templates/observer.yaml
apiVersion: one-eye.banzaicloud.io/v1alpha1
kind: Observer
metadata:
  name: one-eye
spec:
  controlNamespace: default
  ingress: 
    ingressSpec:
      rules:
      - host: localhost
        http:
          paths:
          - backend:
              serviceName: one-eye-ui
              servicePort: 80
            path: /
          - backend:
              serviceName: one-eye-ui
              servicePort: 80
            path: /api
          - backend:
              serviceName: one-eye-prometheus-operator-grafana
              servicePort: 80
            path: /grafana
          - backend:
              serviceName: one-eye-prometheus-operato-prometheus
              servicePort: 9090
            path: /prometheus
          - backend:
              serviceName: one-eye-ui
              servicePort: 80
            path: /loki/
    nginxIngressChart: {}
    ui:
      lokiURL: http://one-eye-loki:3100
      prometheusURL: http://one-eye-prometheus-operato-prometheus:9090//prometheus
  logging: 
    extensions:
      webhook: true
    operator: {}
  loki: 
    lokiOperatorChart: {}
  prometheus: 
    prometheusOperatorChart: {}
---
# Source: one-eye/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-one-eye-test-connection"
  labels:
    helm.sh/chart: one-eye-0.1.8
    app.kubernetes.io/name: one-eye
    app.kubernetes.io/instance: my-one-eye
    app.kubernetes.io/version: "0.3.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-one-eye:80']
  restartPolicy: Never
