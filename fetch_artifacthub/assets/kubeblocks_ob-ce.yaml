---
# Source: ob-ce/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ob-ce-config
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
data:
  oceanbase.conf: |-
    {{- $phy_memory := getContainerMemory ( index $.podSpec.containers 0 ) }}
    {{- $phy_cpu := getContainerCPU ( index $.podSpec.containers 0 ) }}
    cpu_count={{$phy_cpu}}
    {{- $phy_memory_gb := div $phy_memory 1073741824 | int }}
    memory_limit={{- printf "%dG" $phy_memory_gb }}
    system_memory=1G
    __min_full_resource_pool_memory=1073741824
    {{- $data_disk_size := getComponentPVCSizeByName $.component "data-file" }}
    {{- $log_disk_size := getComponentPVCSizeByName $.component "data-log" }}
    {{- $data_disk_size_gb := div $data_disk_size 1073741824 | int }}
    {{- $log_disk_size_gb := div $log_disk_size 1073741824 | int }}
    {{- $data_disk_size_gb := round ( mulf $data_disk_size_gb 0.85 ) 0 | int }}
    {{- $log_disk_size_gb := round ( mulf $log_disk_size_gb 0.85 ) 0 | int }}
    datafile_size={{- printf "%dG" $data_disk_size_gb }}
    log_disk_size={{- printf "%dG" $log_disk_size_gb }}
    net_thread_count=2
    stack_size=512K
    cache_wash_threshold=1G
    schema_history_expire_time=1d
    enable_separate_sys_clog=false
    enable_merge_by_turn=false
    enable_syslog_recycle=true
    enable_syslog_wf=false
    max_syslog_file_count=4
    {{- $mysql_port_info := getPortByName ( index $.podSpec.containers 0 ) "sql" }}
    {{- $mysql_port := 2881 }}
    {{- if $mysql_port_info }}
    {{- $mysql_port = $mysql_port_info.containerPort }}
    {{- end }}
    mysql_port={{ $mysql_port }}
    {{- $rpc_port_info := getPortByName ( index $.podSpec.containers 0 ) "rpc" }}
    {{- $rpc_port := 2882 }}
    {{- if $rpc_port_info }}
    {{- $rpc_port = $rpc_port_info.containerPort }}
    {{- end }}
    rpc_port={{ $rpc_port }}
---
# Source: ob-ce/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ob-ce-sysvars
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
data:
  oceanbase.sysvars: |-
---
# Source: ob-ce/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ob-ce-inject-env
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
data:
  oceanbase-env: |-
    {{- $component_index := $.component.name | splitList "-" | mustLast | atoi }}
    
    {{- $compInfo := index $.dynamicCompInfos $component_index }}
    {{- $ob_container := getContainerByName $compInfo.containers "observer-container" }}
    {{- $metrics_container := getContainerByName $compInfo.containers "metrics" }}
    
    {{- $ob_port_info := getPortByName $ob_container "sql" }}
    {{- $rpc_port_info := getPortByName $ob_container "rpc" }}
    {{- $metrics_port_info := getPortByName $metrics_container "http" }}
    {{- $manager_port_info := getPortByName $metrics_container "pprof" }}
    {{- $cm_port_info := getPortByName $metrics_container "config-manager" }}
    
    ## for ob port
    {{- $ob_port := 2881 }}
    {{- if $ob_port_info }}
      {{- $ob_port = $ob_port_info.containerPort }}
    {{- end }}
    COMP_MYSQL_PORT = {{ $ob_port }}
    OB_SERVICE_PORT = {{ $ob_port }}
    ## for ob rpc port
    {{- $rpc_port := 2882 }}
    {{- if $rpc_port_info }}
      {{- $rpc_port = $rpc_port_info.containerPort }}
    {{- end }}
    COMP_RPC_PORT = {{ $rpc_port }}
    
    ## for metrics port
    {{- $metrics_port := 8088 }}
    {{- if $metrics_port_info }}
      {{- $metrics_port = $metrics_port_info.containerPort }}
    {{- end }}
    SERVICE_PORT = {{ $metrics_port }}
    
    ## for manager port
    {{- $manager_port := 8089 }}
    {{- if $manager_port_info }}
      {{- $manager_port = $manager_port_info.containerPort }}
    {{- end }}
    MANAGER_PORT = {{ $manager_port }}
    
    ## for config-manager port
    {{- $cm_port := 9901 }}
    {{- if $cm_port_info }}
      {{- $cm_port = $cm_port_info.containerPort }}
    {{- end }}
    CONF_MANAGER_PORT = {{ $cm_port }}
---
# Source: ob-ce/templates/ob-tools-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ob-ce-reload-tools-script
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
data:
  
  update-parameters.sh: |-
    #!/bin/sh
    set -ex
    
    OB_SERVICE_PORT=${COMP_MYSQL_PORT:-2881}
    OB_CLI="/kb_tools/obtools"
    
    paramName="${1:?missing config}"
    paramValue="${2:?missing value}"
    
    #The effective scope of the parameter modification. Valid values:
    #  * MEMORY: specifies to modify only parameters in the memory, and the modification takes effect immediately. The modification becomes invalid after the server is restarted. However, no parameter supports this mode.
    #  * SPFILE: specifies to modify only parameters in the configuration table. The modification takes effect after the server is restarted.
    #  * BOTH: specifies to modify parameters in both the configuration table and the memory. The modification takes effect immediately and remains effective after the server is restarted.
    $OB_CLI --host 127.0.0.1 -uroot -P ${OB_SERVICE_PORT} param-update --set "${paramName}=${paramValue}" --scope BOTH
    
  update-sysvars.sh: |-
    #!/bin/sh
    set -ex
    
    OB_SERVICE_PORT=${COMP_MYSQL_PORT:-2881}
    OB_CLI="/kb_tools/obtools"
    
    paramName="${1:?missing config}"
    paramValue="${2:?missing value}"
    
    $OB_CLI --host 127.0.0.1 -uroot -P ${OB_SERVICE_PORT} var-update --set "${paramName}=${paramValue}"
---
# Source: ob-ce/templates/scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ob-ce-scripts
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
data:
  
  bootstrap.sh: |-
    #!/usr/bin/env bash
    
    #
    # Copyright (c) 2023 OceanBase
    # ob-operator is licensed under Mulan PSL v2.
    # You can use this software according to the terms and conditions of the Mulan PSL v2.
    # You may obtain a copy of Mulan PSL v2 at:
    #          http://license.coscl.org.cn/MulanPSL2
    # THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
    # EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
    # MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
    # See the Mulan PSL v2 for more details.
    #
    
    source /scripts/sql.sh
    
    ZONE_COUNT=${ZONE_COUNT:-3}
    WAIT_SERVER_SLEEP_TIME="${WAIT_SERVER_SLEEP_TIME:-10}"
    WAIT_K8S_DNS_READY_TIME="${WAIT_K8S_DNS_READY_TIME:-10}"
    SVC_NAME="${KB_CLUSTER_COMP_NAME}-headless.${KB_NAMESPACE}.svc"
    HOSTNAME=$(hostname)
    REP_USER=${REP_USER:-rep_user}
    REP_PASSWD=${REP_PASSWD:-rep_user}
    OB_DEBUG=${OB_DEBUG:-true}
    OB_HOME_DIR=${OB_HOME_DIR:-/home/admin/oceanbase}
    OB_CLUSTERS_COUNT=${OB_CLUSTERS_COUNT:-1}
    
    ORDINAL_INDEX=$(echo $KB_POD_NAME | awk -F '-' '{print $(NF)}')
    COMPONENT_INDEX=$(echo $KB_POD_NAME | awk -F '-' '{print $(NF-1)}')
    ZONE_NAME="zone$((${ORDINAL_INDEX}%${ZONE_COUNT}))"
    
    echo "ORDINAL_INDEX: $ORDINAL_INDEX"
    echo "COMPONENT_INDEX: $COMPONENT_INDEX"
    echo "ZONE_NAME: $ZONE_NAME"
    echo "COMP_MYSQL_PORT: $COMP_MYSQL_PORT"
    echo "COMP_RPC_PORT: $COMP_RPC_PORT"
    
    function init_port_list {
      MYSQL_PORTS=()
      RPC_PORTS=()
      for i in $(seq 0 $(($OB_CLUSTERS_COUNT-1))); do
        MYSQL_PORTS+=(2881)
        RPC_PORTS+=(2882)
      done
    
      {{- range $i, $e := $.dynamicCompInfos }}
        {{- $mysql_port_info := getPortByName ( index $e.containers 0 ) "sql" }}
        {{- $rpc_port_info := getPortByName ( index $e.containers 0 ) "rpc" }}
        {{- $mysql_port := 2881 }}
        {{- if $mysql_port_info }}
          {{- $mysql_port = $mysql_port_info.hostPort }}
        {{- end }}
        {{- $rpc_port := 2882 }}
        {{- if $rpc_port_info }}
          {{- $rpc_port = $rpc_port_info.hostPort }}
        {{- end }}
        MYSQL_PORTS[{{ $i }}]={{$mysql_port}}
        RPC_PORTS[{{ $i }}]={{$rpc_port}}
      {{- end }}
    
      COMP_MYSQL_PORT=${MYSQL_PORTS[$COMPONENT_INDEX]}
      COMP_RPC_PORT=${RPC_PORTS[$COMPONENT_INDEX]}
      # persisting the sql port for backup and restore
      echo $COMP_MYSQL_PORT > /home/admin/workdir/sql_port.ob
      echo "sql_port: $COMP_MYSQL_PORT"
      echo "rpc_port: $COMP_RPC_PORT"
    }
    
    function get_pod_ip_list {
      # Get the headless service name
      ZONE_SERVER_LIST=""
      RS_LIST=""
      IP_LIST=()
    
      # wait for up to 10 minutes for the server to be ready
      local wait_time=600
      # Get every replica's IP
      for i in $(seq 0 $(($KB_REPLICA_COUNT-1))); do
        local replica_hostname="${KB_CLUSTER_COMP_NAME}-${i}"
        local replica_ip=""
        if [ $i -ne $ORDINAL_INDEX ]; then
          echo "nslookup $replica_hostname.$SVC_NAME"
          local elapsed_time=0
          while [ $elapsed_time -lt $wait_time ]; do
            replica_ip=$(nslookup $replica_hostname.$SVC_NAME | tail -n 2 | grep -P "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})" --only-matching)
            if [ $? -ne 0 ]; then
              echo "$replica_hostname.$SVC_NAME is not ready yet"
              sleep 10
              elapsed_time=$((elapsed_time + 10))
            else
              echo "$replica_hostname.$SVC_NAME is ready"
              echo "nslookup $replica_hostname.$SVC_NAME success, IP: $replica_ip"
              break
            fi
          done
          if [ $elapsed_time -ge $wait_time ]; then
            echo "Failed to get the IP of $replica_hostname.$SVC_NAME, exit..."
            exit 1
          fi
        else
          replica_ip=$KB_POD_IP
        fi
    
        IP_LIST+=("$replica_ip")
    
        # Construct the ZONE_SERVER_LIST and RS_LIST
        if [ $i -lt $ZONE_COUNT ]; then
          if [ $i -eq 0 ]; then
            ZONE_SERVER_LIST="ZONE 'zone${i}' SERVER '${replica_ip}:$COMP_RPC_PORT'"
            RS_LIST="${replica_ip}:$COMP_RPC_PORT:$COMP_MYSQL_PORT"
          else
            ZONE_SERVER_LIST="${ZONE_SERVER_LIST},ZONE 'zone${i}' SERVER '${replica_ip}:$COMP_RPC_PORT'"
            RS_LIST="${RS_LIST};${replica_ip}:$COMP_RPC_PORT:$COMP_MYSQL_PORT"
          fi
        fi
      done
    
      echo "get_pod_ip_list: ${IP_LIST[*]}"
      echo "rs_list: $RS_LIST"
    }
    
    function prepare_dirs {
      # log dir
      mkdir -p /home/admin/log/log
      ln -sf /home/admin/log/log ${OB_HOME_DIR}/log
    
      mkdir -p  ${OB_HOME_DIR}/store
      # data log dir
      mkdir -p /home/admin/data-log/clog
    
      ln -sf /home/admin/data-log/clog ${OB_HOME_DIR}/store/clog
      mkdir -p /home/admin/data-log/ilog
      ln -sf /home/admin/data-log/ilog ${OB_HOME_DIR}/store/ilog
    
      mkdir -p /home/admin/data-file/slog
      ln -sf /home/admin/data-file/slog ${OB_HOME_DIR}/store/slog
      mkdir -p /home/admin/data-file/etc
      ln -sf /home/admin/data-file/etc ${OB_HOME_DIR}/store/etc
      mkdir -p /home/admin/data-file/sort_dir
      ln -sf /home/admin/data-file/sort_dir ${OB_HOME_DIR}/store/sort_dir
      mkdir -p /home/admin/data-file/sstable
      ln -sf /home/admin/data-file/sstable ${OB_HOME_DIR}/store/sstable
      # chown -R root:root ${OB_HOME_DIR}
    }
    
    function clean_dirs {
      rm -rf ${OB_HOME_DIR}/etc
      rm -rf ${OB_HOME_DIR}/store/*
      rm -rf /home/admin/data-log/*
      rm -rf /home/admin/data-file/*
      rm -rf /home/admin/log/log
    }
    
    function start_observer {
      echo "Start observer process as normal server..."
      # if debug mode is enabled, set log level to debug
      local loglevel="INFO"
      if [ "$OB_DEBUG" = "true" ]; then
        loglevel="DEBUG"
      fi
      # parse the config file
      default_configs='cpu_count=4,memory_limit=8G,system_memory=1G,__min_full_resource_pool_memory=1073741824,datafile_size=40G,log_disk_size=40G,net_thread_count=2,stack_size=512K,cache_wash_threshold=1G,schema_history_expire_time=1d,enable_separate_sys_clog=false,enable_merge_by_turn=false,enable_syslog_recycle=true,enable_syslog_wf=false,max_syslog_file_count=4'
    
      # check if file exists
      if [ -f "/kb-config/oceanbase.conf" ]; then
        echo "observer.conf.bin exists, start observer with existing configs"
        customized_config=$(cat "/kb-config/oceanbase.conf" | sed 's/ \+/ /g' | tr '\n' ',')
        # remove all spaces and the last comma
        customized_config=$(echo "$customized_config"  | sed 's/,$//' | sed 's/^,//')
        echo "customized_config: $customized_config"
        default_configs=$customized_config
      fi
    
      /home/admin/oceanbase/bin/observer --appname ${KB_CLUSTER_COMP_NAME} \
        --cluster_id $((${COMPONENT_INDEX}+1)) --zone $ZONE_NAME \
        -I ${KB_POD_IP} \
        -d ${OB_HOME_DIR}/store/ \
        -l ${loglevel} -o config_additional_dir=${OB_HOME_DIR}/store/etc,${default_configs}
    }
    
    function start_observer_with_exsting_configs {
      # Start observer w/o any flags
      /home/admin/oceanbase/bin/observer
    }
    
    function is_recovering {
      # test whether the config folders and files are empty or not
      # if [ -z "$(ls -A /home/admin/data-file)" ]; then
      #   echo "False"
      # else
      #   echo "True"
      # fi
      if [ ! -d "/home/admin/workdir/etc" ]; then
        echo "False"
      else
        echo "True"
      fi
    }
    
    function others_running {
      local alive_count=0
      for i in $(seq 0 $(($KB_REPLICA_COUNT-1))); do
        if [ $i -eq $ORDINAL_INDEX ]; then
          continue
        fi
        nc -z ${IP_LIST[$i]} $COMP_MYSQL_PORT
        if [ $? -ne 0 ]; then
          continue
        fi
        # If at least one server is up, return True
        conn_remote_w_port ${IP_LIST[$i]} $COMP_MYSQL_PORT "show databases" &> /dev/null
        if [ $? -eq 0 ]; then
          alive_count=$(($alive_count+1))
        fi
      done
      # if more than half of the servers are up, return True
      if [ $(($alive_count*2)) -gt ${KB_REPLICA_COUNT} ]; then
        echo "True"
        return
      fi
      echo "False"
      return
    }
    
    function bootstrap_obcluster {
      for i in $(seq 0 $(($KB_REPLICA_COUNT-1))); do
        local replica_hostname="${KB_CLUSTER_COMP_NAME}-${i}"
        local replica_ip=""
        while true; do
          replica_ip=$(nslookup $replica_hostname.$SVC_NAME | tail -n 2 | grep -P "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})" --only-matching)
          # check if the IP is empty
          if [ -z "$replica_ip" ]; then
            echo "nslookup $replica_hostname.$SVC_NAME failed, wait for a moment..."
            sleep $WAIT_K8S_DNS_READY_TIME
          else
            echo "nslookup $replica_hostname.$SVC_NAME success, IP: $replica_ip"
            break
          fi
        done
        echo "hostname.svc:" $replica_hostname.$SVC_NAME "ip:" $replica_ip
        while true; do
          nc -z $replica_ip $COMP_MYSQL_PORT
          if [ $? -ne 0 ]; then
            echo "Replica $replica_hostname.$SVC_NAME is not up yet"
            sleep $WAIT_SERVER_SLEEP_TIME
          else
            echo "Replica $replica_hostname.$SVC_NAME is up"
            break
          fi
        done
      done
    
      echo "SET SESSION ob_query_timeout=1000000000;"
      conn_local_w_port $COMP_MYSQL_PORT "SET SESSION ob_query_timeout=1000000000;"
      echo "ALTER SYSTEM BOOTSTRAP ${ZONE_SERVER_LIST};"
      conn_local_w_port $COMP_MYSQL_PORT  "ALTER SYSTEM BOOTSTRAP ${ZONE_SERVER_LIST};"
    
      if [ $? -ne 0 ]; then
        # Bootstrap failed, clean the dirs and retry
        echo "Bootstrap failed, please check the store"
        exit 1
      fi
    
      # Wait for the server to be ready
      sleep $WAIT_SERVER_SLEEP_TIME
    
      conn_local_w_port $COMP_MYSQL_PORT "show databases"
    
      conn_local_obdb_w_port $COMP_MYSQL_PORT "SELECT * FROM DBA_OB_SERVERS\G"
    
      create_primary_secondry_tenants
    }
    
    function add_server {
      echo "add server"
      echo "IP_LIST: ${IP_LIST[*]}"
      # Choose a running server and send the add server request
      for i in $(seq 0 $(($KB_REPLICA_COUNT-1))); do
        if [ $i -eq $ORDINAL_INDEX ]; then
          continue
        fi
        until conn_remote_obdb_w_port ${IP_LIST[$i]} $COMP_MYSQL_PORT "SELECT * FROM DBA_OB_SERVERS\G"; do
          echo "the cluster has not been bootstrapped, wait for them..."
          sleep 10
        done
    
        local RETRY_MAX=5
        local retry_times=0
        until conn_remote_w_port ${IP_LIST[$i]} $COMP_MYSQL_PORT "ALTER SYSTEM ADD SERVER '${KB_POD_IP}:${COMP_RPC_PORT}' ZONE '${ZONE_NAME}'"; do
          echo "Failed to add server ${KB_POD_IP}:$COMP_RPC_PORT to the cluster, retry..."
          retry_times=$(($retry_times+1))
          sleep $((3*${retry_times}))
          if [ $retry_times -gt ${RETRY_MAX} ]; then
            echo "Failed to add server ${KB_POD_IP}:$COMP_RPC_PORT to the cluster finally, exit..."
            exit 1
          fi
        done
    
        until [ -n "$(conn_remote_obdb_w_port ${IP_LIST[$i]} $COMP_MYSQL_PORT "SELECT * FROM DBA_OB_SERVERS WHERE SVR_IP = '${KB_POD_IP}' and STATUS = 'ACTIVE' and START_SERVICE_TIME IS NOT NULL")" ]; do
          echo "Wait for the server to be ready..."
          sleep 10
        done
    
        echo "Add the server to zone successfully"
        break
      done
    }
    
    function check_if_ip_changed {
      if [ -z "$(cat /home/admin/data-file/etc/observer.conf.bin | grep ${KB_POD_IP})" ]; then
        echo "Changed"
      else
        echo "Not Changed"
      fi
    }
    
    function delete_inactive_servers {
      echo "delete inactive server"
      echo "IP_LIST: ${IP_LIST[*]}"
      echo "sleep for a while before fetch INACTIVE servers"
      ## default lease time is 10s, so sleep 20s to make sure the server is inactive
      sleep 20
      for i in $(seq 0 $(($KB_REPLICA_COUNT-1))); do
        if [ $i -eq $ORDINAL_INDEX ]; then
          continue
        fi
        inactive_ips=($(conn_remote_batch_w_port ${IP_LIST[$i]} $COMP_MYSQL_PORT  "SELECT SVR_IP FROM DBA_OB_SERVERS WHERE STATUS = 'INACTIVE'" | tail -n +2))
        if [ ${#inactive_ips[@]} -eq 0 ]; then
          echo "No inactive servers"
          continue
        fi
        echo "Inactive IPs: ${inactive_ips[*]}"
        for ip in ${inactive_ips[*]}; do
          svr="$ip:$COMP_RPC_PORT"
          echo "ALTER SYSTEM DELETE SERVER '$svr'"
          conn_remote_w_port ${IP_LIST[$i]} $COMP_MYSQL_PORT "ALTER SYSTEM DELETE SERVER '$svr'" || true
        done
        break
      done
      echo "Finish deleting inactive servers"
    }
    
    
    function create_ready_flag {
      touch /tmp/ready
    }
    
    function create_primary_secondry_tenants {
      # create tenants if env TENANT_NAME is set
      if [ -z "$TENANT_NAME" ]; then
        return
      fi
    
      # get ordinal of current pod, start from 0
      ordinal_index=$(echo $KB_POD_NAME | awk -F '-' '{print $(NF-1)}')
      # if not equal to 0, create secondary tenant
      if [ $ordinal_index -ne 0 ]; then
        return
      fi
    
      create_primary_tenant "$TENANT_NAME"
    }
    
    function create_primary_tenant {
      tenant_name=$1
      echo "create resource unit and pool for tenant ${tenant_name}"
      conn_local_w_port $COMP_MYSQL_PORT "CREATE RESOURCE UNIT IF NOT EXISTS unit_for_${tenant_name} MAX_CPU ${TENANT_CPU}, MEMORY_SIZE = '${TENANT_MEMORY}', LOG_DISK_SIZE = '${TENANT_DISK}';"
      conn_local_w_port $COMP_MYSQL_PORT  "CREATE RESOURCE POOL IF NOT EXISTS pool_for_${tenant_name} UNIT = 'unit_for_${tenant_name}', UNIT_NUM = 1;"
    
      echo "create tenant ${tenant_name}"
      conn_local_w_port $COMP_MYSQL_PORT "SET SESSION ob_query_timeout=1000000000; CREATE TENANT IF NOT EXISTS ${tenant_name} RESOURCE_POOL_LIST=('pool_for_${tenant_name}') SET ob_tcp_invited_nodes='%';"
    
      echo "alter system archive log"
      conn_local_w_port $COMP_MYSQL_PORT "ALTER SYSTEM ARCHIVELOG;"
    
      echo "check tenant ${tenant_name} exists"
      conn_local_w_port $COMP_MYSQL_PORT "SELECT count(*) FROM oceanbase.DBA_OB_TENANTS where tenant_name = '${tenant_name}';"
      conn_local_w_port $COMP_MYSQL_PORT "SELECT TENANT_NAME, TENANT_TYPE, TENANT_ROLE, SWITCHOVER_STATUS FROM oceanbase.DBA_OB_TENANTS\G"
    
      conn_local_w_port $COMP_MYSQL_PORT "SELECT SVR_IP, SVR_PORT FROM oceanbase.DBA_OB_TENANTS as t, oceanbase.DBA_OB_UNITS as u, oceanbase.DBA_OB_UNIT_CONFIGS as uc WHERE t.tenant_name = '${tenant_name}' and t.tenant_id = u.tenant_id and u.unit_id = uc.UNIT_CONFIG_ID and uc.name = 'unit_for_${tenant_name}' limit 1\G" > /tmp/tenant_info
      svr_ip_list=$(cat /tmp/tenant_info | awk '/SVR_IP/{print $NF}')
    
      echo "svr_ip_list: ${svr_ip_list[*]}"
      create_rep_user "$TENANT_NAME" ${svr_ip_list[0]}
    
    
      if [ $OB_CLUSTERS_COUNT -le 1 ]; then
        return
      fi
      create_secondary_tenant "$TENANT_NAME" "${TENANT_NAME}" ${svr_ip_list[0]}
    }
    
    function create_rep_user {
      local tenant_name=$1
      local ip=$2
      local user_name=${REP_USER}
      local user_passwd=${REP_PASSWD}
    
      echo "create user ${user_name} for tenant ${tenant_name}"
      conn_remote_as_tenant_w_port $ip $COMP_MYSQL_PORT $tenant_name "CREATE USER ${user_name} IDENTIFIED BY '${user_passwd}';"
      conn_remote_as_tenant_w_port $ip $COMP_MYSQL_PORT $tenant_name "GRANT SELECT ON oceanbase.* TO ${user_name};"
      conn_remote_as_tenant_w_port $ip $COMP_MYSQL_PORT $tenant_name "SET GLOBAL ob_tcp_invited_nodes='%';"
    }
    
    function create_secondary_tenant {
      echo "create secondary tenant"
      local primry_tenant_name=$1
      local secondary_tenant_name=$2
      local primary_tenant_rep_user=${REP_USER}
      local primary_tenant_rep_passwd=${REP_PASSWD}
      local tenant_ip=$3
      # get access points
      conn_remote_as_tenant_w_port $tenant_ip $COMP_MYSQL_PORT ${primry_tenant_name} "SELECT concat_ws(':', svr_ip, sql_port) as AP from oceanbase.DBA_OB_ACCESS_POINT\G" > /tmp/access_point
      svr_ip_list=$(cat /tmp/access_point | awk '/AP/{print $NF}')
      # echo "svr_ip_list: ${svr_ip_list[*]}"
      OLD_IFS=$IFS
      IFS=$' \t\n'
      svr_ip_array=($svr_ip_list)
      svr_ports_array=($svr_ports_list)
      IFS=$OLD_IFS
    
      echo "svr_ip_array: ${svr_ip_array[*]}"
    
      delim=';'
      printf -v joined_string "%s$delim" "${svr_ip_array[@]}"
      echo "joined_string: $joined_string"
    
        # get ip list of 0-th pod of other components
      local secondary_tenant_ip=()
      local secondary_tenant_port=()
      components_prefix=$(echo "${KB_CLUSTER_COMP_NAME}" | awk -F'-' '{NF--; print}' OFS='-')
      for i in $(seq 1 $(($OB_CLUSTERS_COUNT-1))); do
        next_comp_name="${components_prefix}-${i}"
        local replica_hostname="${next_comp_name}-0.${next_comp_name}-headless.${KB_NAMESPACE}.svc"
        local replica_ip=""
        while true; do
          replica_ip=$(nslookup $replica_hostname | tail -n 2 | grep -P "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})" --only-matching)
          # check if the IP is empty
          if [ -z "$replica_ip" ]; then
            echo "nslookup $replica_hostname failed, wait for a moment..."
            sleep $WAIT_K8S_DNS_READY_TIME
          else
            echo "nslookup $replica_hostname success, IP: $replica_ip"
            break
          fi
        done
        secondary_tenant_ip+=("$replica_ip")
        secondary_tenant_port+=${MYSQL_PORTS[$i]}
      done
      echo "secondary ip list: ${secondary_tenant_ip[*]}"
    
      # for each ip in ip list, create secondary tenant
      for ((i=0; i<${#secondary_tenant_ip[@]}; i++)); do
        echo "create resource unit and pool for tenant ${secondary_tenant_name}"
        echo "remote ip: ${ip}"
        local ip=${secondary_tenant_ip[$i]}
        local port=${secondary_tenant_port[$i]}
        # wait until the server is up
        until conn_remote_w_port $ip $port "SELECT * FROM oceanbase.DBA_OB_SERVERS\G"; do
          echo "the cluster has not been bootstrapped, wait for them..."
          retry_times=$(($retry_times+1))
          sleep 10
        done
    
        echo $ip "CREATE RESOURCE UNIT IF NOT EXISTS unit_for_${secondary_tenant_name}"
        conn_remote_w_port $ip $port "CREATE RESOURCE UNIT IF NOT EXISTS unit_for_${secondary_tenant_name} MAX_CPU ${TENANT_CPU}, MEMORY_SIZE = '${TENANT_MEMORY}', LOG_DISK_SIZE = '${TENANT_DISK}';"
        echo $ip "CREATE RESOURCE POOL IF NOT EXISTS pool_for_${secondary_tenant_name} UNIT = 'unit_for_${secondary_tenant_name}', UNIT_NUM = 1;"
        conn_remote_w_port $ip $port "CREATE RESOURCE POOL IF NOT EXISTS pool_for_${secondary_tenant_name} UNIT = 'unit_for_${secondary_tenant_name}', UNIT_NUM = 1;"
    
        echo "create tenant ${secondary_tenant_name}"
        echo $ip "SET SESSION ob_query_timeout=1000000000; CREATE STANDBY TENANT IF NOT EXISTS ${secondary_tenant_name} LOG_RESTORE_SOURCE ='SERVICE=${joined_string} USER=${primary_tenant_rep_user}@${primry_tenant_name} PASSWORD=${primary_tenant_rep_passwd}' RESOURCE_POOL_LIST=('pool_for_${secondary_tenant_name}');"
    
        local RETRY_MAX=5
        local retry_times=0
        until conn_remote_w_port $ip $port "SET SESSION ob_query_timeout=1000000000; CREATE STANDBY TENANT IF NOT EXISTS ${secondary_tenant_name} LOG_RESTORE_SOURCE ='SERVICE=${joined_string} USER=${primary_tenant_rep_user}@${primry_tenant_name} PASSWORD=${primary_tenant_rep_passwd}' RESOURCE_POOL_LIST=('pool_for_${secondary_tenant_name}');"; do
          conn_remote_w_port $ip $port "DROP TENANT IF EXISTS ${secondary_tenant_name} FORCE;"
          echo "Failed to create standby tenant, retry..."
          retry_times=$(($retry_times+1))
          sleep $((3*${retry_times}))
          if [ $retry_times -gt ${RETRY_MAX} ]; then
            echo "Failed to create standby tenant ${secondary_tenant_name} on ${ip}, exit..."
            break
          fi
        done
    
        echo $ip "ALTER SYSTEM ARCHIVELOG;"
        conn_remote_w_port $ip $port "ALTER SYSTEM ARCHIVELOG;"
    
        echo "check tenant ${secondary_tenant_name} exists"
        conn_remote_w_port $ip $port "SELECT count(*) FROM oceanbase.DBA_OB_TENANTS where tenant_name = '${secondary_tenant_name}';"
        conn_remote_w_port $ip $port "SELECT TENANT_NAME, TENANT_TYPE, TENANT_ROLE, SWITCHOVER_STATUS FROM oceanbase.DBA_OB_TENANTS\G"
      done
    }
    
    function wait_for_observer_start {
      echo "check if the server has been initialized"
      wait_time=30  # wait up to 30 seconds
      elapsed_time=0
      filename=$OB_HOME_DIR/log/observer.log
      while [ $elapsed_time -lt $wait_time ]; do
        if grep -q 'success to start root service monitor' $filename; then
          echo "oceanbase has been initialized successfully"
          break
        else
          echo "oceanbase is not initialized yet, wait for it..."
          sleep 1
          elapsed_time=$((elapsed_time + 1))
        fi
      done
    
      if [ $elapsed_time -ge $wait_time ]; then
        echo "Failed to init server ${KB_POD_IP}:$COMP_RPC_PORT exit..."
        exit 1
      fi
    }
    
  entrypoint.sh: |-
    #!/usr/bin/env bash
    
    #
    # Copyright (c) 2023 OceanBase
    # ob-operator is licensed under Mulan PSL v2.
    # You can use this software according to the terms and conditions of the Mulan PSL v2.
    # You may obtain a copy of Mulan PSL v2 at:
    #          http://license.coscl.org.cn/MulanPSL2
    # THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
    # EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
    # MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
    # See the Mulan PSL v2 for more details.
    #
    
    
    source /scripts/bootstrap.sh
    
    RECOVERING="$(is_recovering)"
    echo "Recovering: $RECOVERING"
    
    init_port_list
    
    function wait_for_observer_ready {
      local RETRY_MAX=20
      local retry_times=0
      echo "Wait for observer on this node to be ready"
      until nc -z 127.0.0.1 $COMP_MYSQL_PORT; do
        echo "observer on this node is not ready, wait for a moment..."
        retry_times=$(($retry_times+1))
        sleep 5
        if [ $retry_times -gt ${RETRY_MAX} ]; then
          echo "Failed to start server ${KB_POD_IP}:$COMP_RPC_PORT exit..."
          exit 1
        fi
      done
    }
    
    ip_changed="false"
    # If the server is recovering from crash
    if [ $RECOVERING = "True" ]; then
      # If the IP of recovering server changed
      if [ "$(check_if_ip_changed)" = "Changed" ]; then
        ip_changed="true"
        echo "IP changed, need to rejoin the cluster"
        clean_dirs
        echo "Prepare config folders"
        prepare_dirs
        echo "Start server"
        start_observer
      else
        ip_changed="false"
        echo "IP not changed, use existing configs to start server"
        start_observer_with_exsting_configs
      fi
    else
      echo "New machine, need to join the cluster"
      echo "Prepare config folders"
      prepare_dirs
      echo "Start server"
      start_observer
    fi
    
    wait_for_observer_ready
    
    echo "ip_changed:" ${ip_changed}
    if [ "${ip_changed}" = "false" ] && [ "$RECOVERING" = "True" ]; then
      echo "IP not changed, start recovering"
      echo "Check DB Status"
          # If at least one server is up, return True
      until conn_local_obdb_w_port $COMP_MYSQL_PORT "SELECT * FROM DBA_OB_SERVERS\G"; do
        echo "the server is not ready yet, wait for it..."
        sleep 10
      done
    
      until [ -n "$(conn_local_obdb_w_port $COMP_MYSQL_PORT "SELECT * FROM DBA_OB_SERVERS WHERE SVR_IP = '${KB_POD_IP}' and STATUS = 'ACTIVE' and START_SERVICE_TIME IS NOT NULL")" ]; do
        echo "Wait for the server to be ready..."
        sleep 10
      done
      create_ready_flag
      sleep infinity
    fi
    
    if [ $RECOVERING = "True" ]; then
      echo "Resolving other servers' IPs"
      get_pod_ip_list
    
      echo "Checking cluster health"
      CLUSTER_HEALTHY="$(others_running)"
      echo "Cluster healthy: $CLUSTER_HEALTHY"
    
      # If the OB Cluster is healthy
      if [ $CLUSTER_HEALTHY = "True" ]; then
        echo "Add this server to cluster"
        add_server
        echo "Delete inactive servers"
        delete_inactive_servers
    
        # Recover from crash or rolling update, create ready flag at last
        echo "Creating readiness flag..."
        create_ready_flag
      else
        echo "Cluster is not healthy, fail to recover and join the cluster"
        exit 1
      fi
    else
    
      wait_for_observer_start
    
      echo "Creating readiness flag..."
      create_ready_flag
    
      echo "Resolving other servers' IPs"
      get_pod_ip_list
    
      echo "Checking cluster health"
      CLUSTER_HEALTHY="$(others_running)"
      echo "Cluster healthy: $CLUSTER_HEALTHY"
    
      # If the OB Cluster is healthy
      if [ $CLUSTER_HEALTHY = "True" ]; then
        echo "Add this server to cluster"
        add_server
        echo "Delete inactive servers"
        delete_inactive_servers
      else
        # If current server is chosen to run RS
        if [ $ORDINAL_INDEX -lt $ZONE_COUNT ]; then
          # Choose the first RS to bootstrap
          if [ $ORDINAL_INDEX -eq 0 ]; then
            echo "Choose the first RS to bootstrap cluster"
            echo "Wait for all Rootservice to be ready"
            bootstrap_obcluster
            if [ $? -eq 0 ]; then
              echo "Bootstrap successfully"
            fi
          else
            echo "Ready to be bootstrapped"
          fi
        else
          echo "Add this server to cluster"
          add_server
        fi
      fi
    fi
    
    sleep infinity
  setupmetrics.sh: |-
    #!/usr/bin/env bash
    
    function retry {
      until "$@" ; do
        echo "Command '$*' failed. Attempt $attempt of $max_attempts. Retrying in 5 seconds..."
        sleep 5
      done
    }
    
    ZONE_COUNT=${ZONE_COUNT:-3}
    MANAGER_PORT=${MANAGER_PORT:-8089}
    SERVICE_PORT=${SERVICE_PORT:-8088}
    COMP_RPC_PORT=${COMP_RPC_PORT:-2882}
    ORDINAL_OB_PORT=${OB_SERVICE_PORT:-2881}
    COMP_MYSQL_PORT=${COMP_MYSQL_PORT:-${ORDINAL_OB_PORT}}
    ORDINAL_INDEX=$(echo $KB_POD_NAME | awk -F '-' '{print $(NF)}')
    ZONE_NAME="zone$((${ORDINAL_INDEX}%${ZONE_COUNT}))"
    
    INITIAL_DELAY=${INITIAL_DELAY:-5}
    
    ## TODO wait ob restarted
    echo "Waiting for observer to be ready..."
    # import mysql client to metrics
    sleep ${INITIAL_DELAY}
    retry /kb_tools/obtools --host 127.0.0.1 -u${MONITOR_USER} -P ${COMP_MYSQL_PORT} --allow-native-passwords ping
    
    echo ""
    echo "==================================================================================="
    echo "update metric config:"
    echo "  ob.logcleaner.enabled=false"
    echo "  agent.http.basic.auth.metricAuthEnabled=false"
    echo "  monagent.log.level=info"
    echo "  monagent.log.maxage.days=3"
    echo "  monagent.log.maxsize.mb=100"
    echo "  monagent.ob.monitor.user=${MONITOR_USER}"
    echo "  monagent.ob.sql.port=${COMP_MYSQL_PORT}"
    echo "  monagent.ob.rpc.port=${COMP_RPC_PORT}"
    echo "  monagent.host.ip=${KB_POD_IP}"
    echo "  monagent.cluster.id=${CLUSTER_ID}"
    echo "  monagent.ob.cluster.name=${CLUSTER_NAME}"
    echo "  monagent.ob.cluster.id=${CLUSTER_ID}"
    echo "  monagent.ob.zone.name=${ZONE_NAME}"
    echo "  monagent.pipeline.ob.status=${OB_MONITOR_STATUS}"
    echo "  monagent.pipeline.node.status=inactive"
    echo "  monagent.pipeline.ob.log.status=inactive"
    echo "  monagent.pipeline.ob.alertmanager.status=inactive"
    echo "  monagent.second.metric.cache.update.interval=5s"
    echo "  ocp.agent.manager.http.port=${MANAGER_PORT}"
    echo "  ocp.agent.monitor.http.port=${SERVICE_PORT}"
    echo "==================================================================================="
    echo ""
    
    /home/admin/obagent/bin/ob_agentctl config -u \
    ob.logcleaner.enabled=false,\
    agent.http.basic.auth.metricAuthEnabled=false,\
    monagent.log.level=info,\
    monagent.log.maxage.days=3,\
    monagent.log.maxsize.mb=100,\
    monagent.ob.monitor.user=${MONITOR_USER},\
    monagent.ob.monitor.password=${MONITOR_PASSWORD},\
    monagent.ob.sql.port=${COMP_MYSQL_PORT},\
    monagent.ob.rpc.port=${COMP_RPC_PORT},\
    monagent.host.ip=${KB_POD_IP},\
    monagent.cluster.id=${CLUSTER_ID},\
    monagent.ob.cluster.name=${CLUSTER_NAME},\
    monagent.ob.cluster.id=${CLUSTER_ID},\
    monagent.ob.zone.name=${ZONE_NAME},\
    monagent.pipeline.ob.status=${OB_MONITOR_STATUS},\
    monagent.pipeline.node.status=inactive,\
    monagent.pipeline.ob.log.status=inactive,\
    monagent.pipeline.ob.alertmanager.status=inactive,\
    monagent.second.metric.cache.update.interval=5s,\
    ocp.agent.manager.http.port=${MANAGER_PORT},\
    ocp.agent.monitor.http.port=${SERVICE_PORT} && \
    /home/admin/obagent/bin/ob_monagent -c /home/admin/obagent/conf/monagent.yaml
  sql.sh: |-
    #!/usr/bin/env bash
    
    #
    # Copyright (c) 2023 OceanBase
    # ob-operator is licensed under Mulan PSL v2.
    # You can use this software according to the terms and conditions of the Mulan PSL v2.
    # You may obtain a copy of Mulan PSL v2 at:
    #          http://license.coscl.org.cn/MulanPSL2
    # THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
    # EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
    # MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
    # See the Mulan PSL v2 for more details.
    #
    
    function conn_local {
      mysql -h127.0.0.1 -uroot -P 2881 -A -e "$1"
    }
    
    function conn_local_as_tenant {
      mysql -h127.0.0.1 -uroot@"$1" -P 2881 -A -Doceanbase -e "$2"
    }
    
    function conn_local_obdb {
      mysql -h127.0.0.1 -uroot -P 2881 -A -Doceanbase -e "$1"
    }
    
    function conn_remote {
      mysql -h$1 -uroot -P 2881 -A -e "$2"
    }
    
    function conn_remote_obdb {
      mysql -h$1 -uroot -P 2881 -A -Doceanbase -e "$2"
    }
    
    function conn_remote_batch {
      # Used for querying results
      mysql -h$1 -uroot -P 2881 -A -Doceanbase -e "$2" -B
    }
    
    function conn_remote_as_tenant {
      mysql -h$1 -uroot@"$2" -P 2881 -A -e "$3"
    }
    
    function conn_local_w_port {
      mysql -h127.0.0.1 -uroot -P $1 -A -e "$2"
    }
    
    function conn_local_as_tenant_w_port {
      mysql -h127.0.0.1 -P $1 -uroot@"$2" -A -Doceanbase -e "$2"
    }
    
    function conn_local_obdb_w_port {
      mysql -h127.0.0.1 -uroot -P $1 -A -Doceanbase -e "$2"
    }
    
    function conn_remote_w_port {
      mysql -h$1 -uroot -P $2 -A -e "$3"
    }
    
    function conn_remote_obdb_w_port {
      mysql -h$1 -uroot -P $2 -A -Doceanbase -e "$3"
    }
    
    function conn_remote_batch_w_port {
      # Used for querying results
      mysql -h$1 -uroot -P $2 -A -Doceanbase -e "$3" -B
    }
    
    function conn_remote_as_tenant_w_port {
      mysql -h$1 -P $2 -uroot@"$3"  -A -e "$4"
    }
---
# Source: ob-ce/templates/actionset.yaml
apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: ActionSet
metadata:
  name: ob-ce-physical-backup
  labels:
    clusterdefinition.kubeblocks.io/name: ob-ce
spec:
  backupType: Full
  env:
    - name: REP_USER
      value: rep_user
    - name: REP_PASSWD
      value: rep_user
      # rebuild standby cluster
    - name: REBUILD_STANDBY
      value: "false"
    - name: DP_TIME_FORMAT
      value: "2006-01-02 15:04:05"
  backup:
    preBackup: []
    postBackup: []
    backupData:
      image: docker.io/apecloud/oceanbase:4.2.0.0-100010032023083021
      runOnTargetPodNode: true
      command:
      - sh
      - -c
      - |
        set -e
        # TODO: support input password
        # TODO: clear backup records in ob database
        export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
        export DATASAFED_BACKEND_BASE_PATH=${DP_BACKUP_BASE_PATH}
        noArchivedTenantsFiles="no_archived_tenants.dp"
        endTimeInfoFile="kb_end_time.info"
        sql_port_file="/home/admin/workdir/sql_port.ob"
        sql_port=2881
        if [[ -f ${sql_port_file} ]];then
          sql_port=$(cat ${sql_port_file})
        fi
        mysql_cmd="mysql -u root -h ${DP_DB_HOST} -P${sql_port} -N -e"
        OlD_IFS=$IFS
        
        provider=
        access_key_id=
        secret_access_key=
        region=
        endpoint=
        bucket=
        
        # get the timeZone offset for location, such as Asia/Shanghai
        function getTimeZoneOffset() {
           local timeZone=${1:?missing time zone}
           if [[ $timeZone == "+"* ]] || [[ $timeZone == "-"* ]] ; then
              echo ${timeZone}
              return
           fi
           local currTime=$(TZ=UTC date)
           local utcHour=$(TZ=UTC date -d "${currTime}" +"%H")
           local zoneHour=$(TZ=${timeZone} date -d "${currTime}" +"%H")
           local offset=$((${zoneHour}-${utcHour}))
           if [ $offset -eq 0 ]; then
              return
           fi
           symbol="+"
           if [ $offset -lt 0 ]; then
             symbol="-" && offset=${offset:1}
           fi
           if [ $offset -lt 10 ];then
              offset="0${offset}"
           fi
           echo "${symbol}${offset}:00"
        }
        
        function saveEndTime() {
            local minRestoreSCN=${1:?missing minRestoreSCN}
            local minRestoreTime=${2:?missing minRestoreTime}
            if [ -f $endTimeInfoFile ]; then
               oldMinRestoreSCN=$(cat ${endTimeInfoFile} | jq -r ".minRestoreSCN" )
               [ $minRestoreSCN -gt ${oldMinRestoreSCN} ] && echo "{\"minRestoreSCN\":\"${SCN}\",\"minRestoreTime\":\"${minRestoreTime}\"}" > ${endTimeInfoFile}
            else
               echo "{\"minRestoreSCN\":\"${SCN}\",\"minRestoreTime\":\"${minRestoreTime}\"}" > ${endTimeInfoFile}
            fi
        }
        
        function getToolConfigValue() {
            local line=${1}
            value=${line#*=}
            echo $(eval echo $value)
        }
        
        function analysisToolConfig() {
          toolConfig=/etc/datasafed/datasafed.conf
          if [ ! -f ${toolConfig} ];then
              echo "ERROR: backupRepo should use Tool accessMode"
              exit 1
          fi
          IFS=$'\n'
          for line in `cat ${toolConfig}`; do
            # remove space
            line=$(eval echo $line)
            IFS=$OlD_IFS
            if [[ $line == "provider"* ]];then
               provider=$(getToolConfigValue "$line")
            elif [[ $line == "access_key_id"* ]];then
               access_key_id=$(getToolConfigValue "$line")
            elif [[ $line == "secret_access_key"* ]];then
               secret_access_key=$(getToolConfigValue "$line")
            elif [[ $line == "region"* ]];then
               region=$(getToolConfigValue "$line")
            elif [[ $line == "endpoint"* ]];then
               endpoint=$(getToolConfigValue "$line")
            elif [[ $line == "root"* ]];then
               bucket=$(getToolConfigValue "$line")
            fi
          done
        }
        
        function buildJsonString() {
            jsonString=${1}
            key=${2}
            value=${3}
            if [ ! -z "$jsonString" ];then
               jsonString="${jsonString},"
            fi
            echo "${jsonString}\"${key}\":\"${value}\""
        }
        # get the storage host by storage provider and endpoint
        function getStorageHost() {
            if [[ ! -z ${endpoint} ]]; then
               echo ${endpoint#*//}
               return
            fi
            # TODO: support cos for 4.2.1 version
            if [[ ${provider} == "Alibaba" ]];then
               echo "oss-${DP_STORAGE_REGION}.aliyuncs.com"
            fi
        }
        
        function getArchiveDestPath() {
            # TODO: support nfs
            path="$(dirname ${DP_BACKUP_BASE_PATH})/archive"
            echo $path
        }
        
        # get the backup dest url
        function getDestURL() {
          destType=${1:?missing destType}
          tenantName=${2:?missing tenantName}
          host=$(getStorageHost)
          if [[ -z $host ]];then
             echo "ERROR: unsupported storage provider \"${provider}\""
             exit 1
          fi
          # TODO: support nfs and cos
          destPath="${DP_BACKUP_BASE_PATH}"
          if [[ $destType == "archive" ]]; then
             destPath=$(getArchiveDestPath)
          fi
          echo "oss://${bucket}${destPath}/${tenantName}?host=${host}&access_id=${access_key_id}&access_key=${secret_access_key}"
        }
        
        function prepareTenantLogArchive() {
          tenant_id=${1:?missing tenant id}
          tenant_name=${2:?missing tenant name}
          log_mode=${3}
          if [[ $log_mode == "NOARCHIVELOG" ]]; then
             echo "${tenant_name}" >> $noArchivedTenantsFiles
          fi
          destUrl=$(getDestURL archive ${tenant_name})
          echo "INFO: prepare log archive dest for tenant ${tenant_name}"
          result=`${mysql_cmd} "ALTER SYSTEM SET LOG_ARCHIVE_DEST=\"LOCATION=${destUrl}\" TENANT=${tenant_name}"`
          if [[ $? -ne 0 ]];then
             echo "ERROR: alert log_archive_dest for tenant ${tenant_name} failed: ${result}"
             exit 1
          fi
          # enable dest
          ${mysql_cmd} "ALTER SYSTEM SET LOG_ARCHIVE_DEST_STATE='ENABLE' TENANT=${tenant_name};"
          # add recovery window to auto-clean backup.
          #deletePolicyCount=`${mysql_cmd} "SELECT count(*) FROM oceanbase.CDB_OB_BACKUP_DELETE_POLICY where TENANT_ID=${tenant_id};" |awk -F '\t' '{print}'`
          #if [ $deletePolicyCount -eq 0 ]; then
          #   echo "INFO: config recovery window '7d' for tenant ${tenant_name}."
          #   ${mysql_cmd} "ALTER SYSTEM ADD DELETE BACKUP POLICY 'default' RECOVERY_WINDOW '7d' TENANT ${tenant_name};"
          #fi
        }
        
        function prepareTenantDataBackup() {
          tenant_name=${1:?missing tenant name}
          destUrl=$(getDestURL data ${tenant_name})
          echo "INFO: prepare data backup dest for tenant ${tenant_name}"
          result=`${mysql_cmd} "ALTER SYSTEM SET DATA_BACKUP_DEST=\"${destUrl}\" TENANT=${tenant_name}"`
          if [[ $? -ne 0 ]];then
             echo "ERROR: alert data_backup_dest for tenant ${tenant_name} failed: ${result}"
             exit 1
          fi
        }
        
        function saveUnitCreateStatement(){
          ${mysql_cmd} "SELECT NAME,MAX_CPU,MIN_CPU,MEMORY_SIZE,LOG_DISK_SIZE,MAX_IOPS,MIN_IOPS,IOPS_WEIGHT FROM oceanbase.DBA_OB_UNIT_CONFIGS;" | while IFS=$'\t' read -a row; do
             IFS=${OlD_IFS}
             echo "create resource unit if not exists ${row[0]} MAX_CPU=${row[1]}, MIN_CPU=${row[2]}, MEMORY_SIZE=${row[3]}, LOG_DISK_SIZE=${row[4]}, MAX_IOPS=${row[5]}, MIN_IOPS=${row[6]}, IOPS_WEIGHT=${row[7]};" >> ${unitSQLFile}
          done
        }
        
        function covertStringToOBArray() {
          local str=${1}
          IFS=';'
          read -ra array <<< "$str"
          IFS=${OlD_IFS}
          val=""
          for e in "${array[@]}"; do
              if [[ ! -z ${val} ]]; then
                val="${val},"
              fi
              val="${val}'${e}'"
          done
          echo "($val)"
        }
        
        # if the script exits with a non-zero exit code, touch a file to indicate that the backup failed,
        # the sync progress container will check this file and exit if it exists
        function handle_exit() {
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "failed with exit code $exit_code"
            touch "${DP_BACKUP_INFO_FILE}.exit"
            exit 1
          fi
        }
        trap handle_exit EXIT
        
        
        # step 1===> prepare for data and archive backup
        # analysisToolConfig first
        analysisToolConfig
        
        ${mysql_cmd} "SELECT tenant_id, tenant_name,log_mode FROM oceanbase.DBA_OB_TENANTS where tenant_type='user' and status='NORMAL';" | while IFS=$'\t' read -a row; do
          IFS=${OlD_IFS}
          tenant_id=${row[0]}
          tenant_name=${row[1]}
          # prepare tenant log archive dest
          status=`${mysql_cmd} "SELECT status FROM oceanbase.CDB_OB_ARCHIVELOG where tenant_id=${tenant_id};" |awk -F '\t' '{print}'`
          if [[ "${status}" == "INTERRUPTED" ]]; then
             DP_log "try to recovery archive from INTERRUPTED..."
             ${mysql_cmd} "ALTER SYSTEM NOARCHIVELOG TENANT=${tenant_name};"
             # wait to stop archive process.
             sleep 30
             ${mysql_cmd} "ALTER SYSTEM ARCHIVELOG TENANT=${tenant_name};"
          elif [[ -z "${status}" ]] || [[ "${status}" == "STOP" ]]; then
              # only prepare the tenant which not doing archive.
              prepareTenantLogArchive ${tenant_id} $tenant_name ${row[2]}
          fi
          # prepare tenant data backup test
          prepareTenantDataBackup $tenant_name
        done
        
        
        # step 2===> start log archive
        sql="ALTER SYSTEM ARCHIVELOG TENANT=ALL;"
        echo "INFO: ${sql}"
        ${mysql_cmd} "${sql}"
        sleep 1
        
        
        # step 3===> wait for archive job state is DOING
        time=0
        tenantCount=`${mysql_cmd} "SELECT count(*) FROM oceanbase.DBA_OB_TENANTS where tenant_type='user' and status='NORMAL';" | awk -F '\t' '{print}'`
        until [ $(${mysql_cmd} "SELECT count(*) FROM oceanbase.CDB_OB_ARCHIVELOG where status='DOING';" | awk -F '\t' '{print}') -eq ${tenantCount} ]; do
            echo "INFO: wait for all tenants to archiving logs..."
            if [[ $time -gt 300 ]];then
               echo 'ERROR: timed out for all tenants to archiving logs, you can show message with sql "SELECT * FROM oceanbase.CDB_OB_ARCHIVELOG"'
               exit 1
            fi
            sleep 3
        done
        
        if [[ $tenantCount -eq 0 ]]; then
           echo "INFO: no normal tenants exists."
           echo "{}" >"${DP_BACKUP_INFO_FILE}"
           exit 0
        fi
        
        # step 4===> do data backup
        START_TIME=$(date -u "+%Y-%m-%dT%H:%M:%SZ")
        sql="ALTER SYSTEM BACKUP DATABASE;"
        echo "INFO: ${sql}"
        ${mysql_cmd} "${sql}"
        sleep 3
        
        
        # step 5===> wait for all backup jobs completed.
        initiator_job_id=$(${mysql_cmd} "SELECT INITIATOR_JOB_ID FROM oceanbase.CDB_OB_BACKUP_JOBS where JOB_LEVEL='CLUSTER' limit 1;" | awk -F '\t' '{print}')
        while true; do
          res=$(${mysql_cmd} "SELECT count(*) FROM oceanbase.CDB_OB_BACKUP_JOBS where JOB_LEVEL='USER_TENANT';" | awk -F '\t' '{print}')
          if [[ res -eq 0 ]];then
            break
          fi
          echo "INFO: wait for backup data completed, uncompleted job count: ${res}"
          sleep 10
        done
        echo "INFO: backup data completed."
        sleep 5
        
        # step 5 ==> close tenant archive if the tenant not open the log archive.
        if [[ -f $noArchivedTenantsFiles ]]; then
           IFS=$'\n'
           for tenant_name in `cat $noArchivedTenantsFiles`; do
             IFS=${OlD_IFS}
             if [[ ! -z $tenant_name ]]; then
               echo "INFO: start to close ${tenant_name} archive"
               ${mysql_cmd} "ALTER SYSTEM NOARCHIVELOG TENANT=${tenant_name}"
             fi
           done
        fi
        
        
        # step 6===> check if backup jobs are successful and collect backup info for restore.
        tenantFile="tenantStatus.dp"
        unitSQLFile="create_unit.sql"
        resourcePoolSQLFile="create_resource_pool.sql"
        # save unit create statement to tmp file
        saveUnitCreateStatement
        echo "INFO: start to save status"
        ${mysql_cmd} "select tenant_id, backup_set_id from oceanbase.CDB_OB_BACKUP_JOB_HISTORY where initiator_job_id=${initiator_job_id} and backup_set_id !=0;" | while IFS=$'\t' read -a row; do
            IFS=${OlD_IFS}
            tenant_id=${row[0]}
            backup_set_id=${row[1]}
            ${mysql_cmd} "select d.tenant_name, t.START_REPLAY_SCN, t.START_REPLAY_SCN_DISPLAY, t.MIN_RESTORE_SCN, t.MIN_RESTORE_SCN_DISPLAY, t.STATUS, t.RESULT, t.COMMENT FROM oceanbase.CDB_OB_BACKUP_SET_FILES t, oceanbase.DBA_OB_TENANTS d where t.tenant_id = d.tenant_id and t.BACKUP_SET_ID=${backup_set_id} and t.tenant_id=${tenant_id};" | while IFS=$'\t' read -a res; do
              echo "INFO: collect backup info for tenant ${res[0]}"
              IFS=${OlD_IFS}
              tenantName=${res[0]}
              tenantJson=""
              tenantJson=$(buildJsonString "$tenantJson" "name" $tenantName)
              tenantJson=$(buildJsonString "$tenantJson" "archivePath" "$(getArchiveDestPath)")
              tenantJson=$(buildJsonString "$tenantJson" "startReplaySCN" ${res[1]})
              tenantJson=$(buildJsonString "$tenantJson" "startReplaySCNTIME" "${res[2]}")
              tenantJson=$(buildJsonString "$tenantJson" "minRestoreSCN" ${res[3]})
              tenantJson=$(buildJsonString "$tenantJson" "minRestoreTime" "${res[4]}")
              status=${res[5]}
              if [[ $status -ne "SUCCESS" ]];then
                  tenantJson=$(buildJsonString "$tenantJson" "failureMessage" "${res[6]}: ${res[7]}")
              fi
              # records the resources pool list
              pool_list=""
              for resourceName in `${mysql_cmd} "SELECT name FROM oceanbase.DBA_OB_RESOURCE_POOLS where TENANT_ID=${tenant_id};" | awk -F '' '{print}'`; do
                if [[ ! -z $pool_list ]];then
                    pool_list="${pool_list},"
                fi
                pool_list="${pool_list}${resourceName}"
              done
              tenantJson=$(buildJsonString "$tenantJson" "poolList" "${pool_list}")
              echo "{${tenantJson}}" >> ${tenantFile}
              saveEndTime "${res[3]}" "${res[4]}"
            done
        
            ${mysql_cmd} "SELECT r.name, u.name as unit_name, r.unit_count, r.zone_list FROM oceanbase.DBA_OB_RESOURCE_POOLS r, oceanbase.DBA_OB_UNIT_CONFIGS u where u.UNIT_CONFIG_ID = r.UNIT_CONFIG_ID and r.TENANT_ID=${tenant_id};" | while IFS=$'\t' read -a pool; do
               IFS=${OlD_IFS}
               echo "create resource pool if not exists ${pool[0]} UNIT=${pool[1]}, UNIT_NUM=${pool[2]}, ZONE_LIST=$(covertStringToOBArray ${pool[3]});" >> ${resourcePoolSQLFile}
            done
        done
        
        
        # step 7===> get extras infos
        extras=""
        while IFS= read -r line; do
          IFS=$OlD_IFS
          if [ ! -z "${extras}" ];then
             extras="${extras},"
          fi
          extras="${extras}${line}"
        done < ${tenantFile}
        
        # get time zone
        timeZone=$(${mysql_cmd} "use oceanbase;select @@time_zone;")
        timeZone=$(getTimeZoneOffset "${timeZone}")
        
        # get stop time
        STOP_TIME=$(date -u "+%Y-%m-%dT%H:%M:%SZ")
        if [ -f ${endTimeInfoFile} ]; then
           stop_time=$(cat ${endTimeInfoFile} | jq -r ".minRestoreTime")
           STOP_TIME=$(date -d "${stop_time}${timeZone}" -u "+%Y-%m-%dT%H:%M:%SZ")
        fi
        
        # step 8===> save tenants info for restore and backup status
        datasafed push ${unitSQLFile} "/${unitSQLFile}"
        datasafed push ${resourcePoolSQLFile} "/${resourcePoolSQLFile}"
        TOTAL_SIZE=$(datasafed stat / | grep TotalSize | awk '{print $2}')
        backupInfo="{\"totalSize\":\"$TOTAL_SIZE\",\"extras\":[${extras}],\"timeRange\":{\"start\":\"${START_TIME}\",\"end\":\"${STOP_TIME}\",\"timeZone\":\"${timeZone}\"}}"
        echo ${backupInfo}
        echo ${backupInfo} >"${DP_BACKUP_INFO_FILE}"
        if [[ $extras == *"failureMessage"* ]];then
           echo "ERROR: backup data failed: $extras"
           exit 1
        fi
      syncProgress:
        enabled: true
        intervalSeconds: 5
  restore:
    postReady:
    - job:
        image: docker.io/apecloud/oceanbase:4.2.0.0-100010032023083021
        runOnTargetPodNode: true
        command:
        - bash
        - -c
        - |
          export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
          export DATASAFED_BACKEND_BASE_PATH=${DP_BACKUP_BASE_PATH}
          sql_port_file=/home/admin/workdir/sql_port.ob
          sql_port=2881
          if [[ -f ${sql_port_file} ]];then
            sql_port=$(cat ${sql_port_file})
          fi
          mysql_cmd="mysql -u root -h ${DP_DB_HOST} -P${sql_port} -N -e"
          OlD_IFS=$IFS
          
          archiveStatusFile="tenantStatus.dp"
          provider=
          access_key_id=
          secret_access_key=
          region=
          endpoint=
          bucket=
          
          function getToolConfigValue() {
              local line=${1}
              value=${line#*=}
              echo $(eval echo $value)
          }
          
          function analysisToolConfig() {
            toolConfig=/etc/datasafed/datasafed.conf
            if [ ! -f ${toolConfig} ];then
                echo "ERROR: backupRepo should use Tool accessMode"
                exit 1
            fi
            IFS=$'\n'
            for line in `cat ${toolConfig}`; do
              # remove space
              line=$(eval echo $line)
              IFS=$OlD_IFS
              if [[ $line == "provider"* ]];then
                 provider=$(getToolConfigValue "$line")
              elif [[ $line == "access_key_id"* ]];then
                 access_key_id=$(getToolConfigValue "$line")
              elif [[ $line == "secret_access_key"* ]];then
                 secret_access_key=$(getToolConfigValue "$line")
              elif [[ $line == "region"* ]];then
                 region=$(getToolConfigValue "$line")
              elif [[ $line == "endpoint"* ]];then
                 endpoint=$(getToolConfigValue "$line")
              elif [[ $line == "root"* ]];then
                 bucket=$(getToolConfigValue "$line")
              fi
            done
          }
          
          function getStorageHost() {
              if [[ ! -z ${endpoint} ]]; then
                 echo ${endpoint#*//}
                 return
              fi
              # TODO: support cos for 4.2.1 version
              if [[ ${provider} == "Alibaba" ]];then
                 echo "oss-${DP_STORAGE_REGION}.aliyun-inc.com"
              fi
          }
          
          
          # get the backup dest url
          function getDestURL() {
            local destPath=${1:?missing destPath}
            local tenantName=${2:?missing tenantName}
            local host=$(getStorageHost)
            if [[ -z $host ]];then
               echo "ERROR: unsupported storage provider \"${provider}\""
               exit 1
            fi
            # TODO: support nfs and cos
            echo "oss://${bucket}${destPath}/${tenantName}?host=${host}&access_id=${access_key_id}&access_key=${secret_access_key}"
          }
          
          
          function execute() {
              local sql=${1:?missing sql}
              while true; do
                 echo "execute '${sql}'"
                 res=`${mysql_cmd} "${sql}" 2>&1`
                 if [[ $res != *"Server is initializing"* ]]; then
                    break
                    exit 1
                 fi
                 echo "$res"
                 sleep 10
              done
          }
          
          function restoreTenant() {
              local tenant_name=${1:?missing tenant_name}
              local sql=${2:?missing restore sql}
              local time=0
              while true; do
                if [[ "$tenant_name" == ${TENANT_NAME} ]]; then
                  echo "INFO: drop init tenant ${tenant_name}"
                  ${mysql_cmd} "SET SESSION ob_query_timeout=1000000000; DROP TENANT IF EXISTS ${TENANT_NAME} FORCE;"
                fi
               `${mysql_cmd} "${sql}"`
                if [[ $? -eq 0 ]]  ; then
                  break
                fi
                if [[ $time -ge 2 ]]; then
                   return 1
                fi
                time=$((time+1))
              done
          }
          
          function executeSQLFile() {
            local sqlFile=${1}
            IFS=$'\n'
            for sql in `cat ${sqlFile}`; do
              IFS=$OlD_IFS
              execute "${sql}"
            done
          }
          
          function waitForPrimaryClusterRestore() {
              local primaryHost=${1}
              local primaryCmd="mysql -u root -P${sql_port} -h ${primaryHost} -N -e"
              while true; do
                echo "INFO: wait primary cluster to restore data completed..."
                historyRes=$(${primaryCmd} "SELECT count(*) FROM oceanbase.CDB_OB_RESTORE_HISTORY;" | awk -F '\t' '{print}')
                if [[ ${historyRes} -lt 1 ]];then
                  sleep 10
                  continue
                fi
                res=$(${primaryCmd} "SELECT count(*) FROM oceanbase.CDB_OB_RESTORE_PROGRESS;" | awk -F '\t' '{print}')
                if [[ $res -eq 0 ]];then
                  break
                fi
                sleep 10
              done
          }
          
          function waitToPromotePrimary() {
              local primaryHost=${1}
              local tenant_name=${2}
              local primaryCmd="mysql -u root -P2881 -h ${primaryHost} -N -e"
              local time=0
              while true; do
                echo "INFO: wait to promote ${tenant_name} to PRIMARY."
                role=$(${primaryCmd} "select tenant_role from oceanbase.DBA_OB_TENANTS where tenant_name='${tenant_name}';" | awk -F '\t' '{print}')
                if [[ $role == "PRIMARY" ]] || [[ $time -gt 60 ]];then
                  break
                fi
                time=$((time+10))
                sleep 10
              done
          }
          
          function pullArchiveStatusFile() {
              export DATASAFED_BACKEND_BASE_PATH=$(dirname ${DP_BACKUP_BASE_PATH})/archive
              if [ "$(datasafed list ${archiveStatusFile})" == "${archiveStatusFile}" ]; then
                 # TODO: using archive path to replace?
                 echo "INFO: pull archive status file ${archiveStatusFile}"
                 datasafed pull ${archiveStatusFile} ${archiveStatusFile}
              fi
              export DATASAFED_BACKEND_BASE_PATH=${DP_BACKUP_BASE_PATH}
          }
          
          function preCheckForRestore() {
              if [[ "${REBUILD_STANDBY}" != "true" ]]; then
                  return 0
              fi
              # check if this cluster is primary when REBUILD_STANDBY=true
              local role=`${mysql_cmd} "SELECT tenant_role FROM oceanbase.DBA_OB_TENANTS where tenant_type='user' limit 1;" | awk -F '\t' '{print}'`
              if [[ ${role} == "PRIMARY" ]]; then
                  return 1
              fi
          }
          
          function checkIsPrimaryCluster() {
            local isPrimary="false"
            # first component is primary if not rebuild a standby cluster.
            if [[ "${REBUILD_STANDBY}" == "false" ]] && [[ $OB_CLUSTERS_COUNT -eq 1 || $global_comp_index -eq 0 ]]; then
               isPrimary="true"
            fi
            echo "${isPrimary}"
          }
          
          function getRestoreFragment() {
              local tenantName=${1:?missing tenant name}
              local scn=${2:?missing restore scn}
              if [ -z "${DP_RESTORE_TIME}" ]; then
                 echo "SCN=${scn}"
                 return
              fi
              if [ -f ${archiveStatusFile} ]; then
                  while IFS= read -r line; do
                    IFS=$OlD_IFS
                    if [ -z "$line" ]; then
                       continue
                    fi
                    tenant=`echo ${line} | jq -r ".name"`
                    if [ "${tenant}" == "${tenantName}" ]; then
                       checkPointTime=`echo ${line} | jq -r ".checkPointTime"`
                       if [ $(date -d "${DP_RESTORE_TIME}" +%s) -gt $(date -d "${checkPointTime}" +%s) ]; then
                          echo "TIME='$(date -d "${checkPointTime}" "+%Y-%m-%d %H:%M:%S")'"
                          return
                       fi
                    fi
                  done < ${archiveStatusFile}
              fi
              echo "TIME='${DP_RESTORE_TIME}'"
          }
          
          # step 1 ===> create unit config and resource pools
          echo "INFO: wait for bootstrap successfully."
          waitTime=0
          while true; do
            tenant_status=`${mysql_cmd} "SELECT * FROM oceanbase.DBA_OB_TENANTS;"`
            if [[ $? -eq 0 ]]; then
               break
            fi
            if [[ $waitTime -gt 300 ]];then
               exit 1
            fi
            sleep 5
            waitTime=$((waitTime+5))
          done
          # check if can be restore.
          preCheckForRestore
          if [[ $? -ne 0 ]]; then
            echo "ERROR: rebuilding standby cluster error: target cluster is PRIMARY."
            exit 1
          fi
          
          unitSQLFile="create_unit.sql"
          resourcePoolSQLFile="create_resource_pool.sql"
          datasafed pull "/${unitSQLFile}" ${unitSQLFile}
          datasafed pull "/${resourcePoolSQLFile}" ${resourcePoolSQLFile}
          executeSQLFile ${unitSQLFile}
          executeSQLFile ${resourcePoolSQLFile}
          
          
          # TODO: restore specified tenants
          # step 2 ===> restore all tenants
          
          analysisToolConfig
          pullArchiveStatusFile
          global_comp_index=$(echo $KB_CLUSTER_COMP_NAME | awk -F '-' '{print $(NF)}')
          extras=$(cat /dp_downward/status_extras)
          length=$(echo "$extras" | jq length)
          index=$((length-1))
          for i in $(seq 0 ${index}); do
             tenant_name=$(echo "$extras" | jq -r ".[${i}].name")
             minRestoreSCN=$(echo "$extras"  | jq -r ".[${i}].minRestoreSCN")
             poolList=$(echo "$extras"  | jq -r ".[${i}].poolList")
             archivePath=$(echo "$extras"  | jq -r ".[${i}].archivePath")
             uri="$(getDestURL "${DP_BACKUP_BASE_PATH}" "${tenant_name}"),$(getDestURL "${archivePath}" "${tenant_name}")"
             echo "INFO: start to restore tenant ${tenant_name}"
             # TODO: check if the sql executed successfully. if restore time is over than actual time, it will failed.
             # ERROR 4018 (HY000) at line 1: No enough log for restore
             restoreTenant "${tenant_name}" "SET SESSION ob_query_timeout=1000000000; ALTER SYSTEM RESTORE ${tenant_name} FROM '${uri}' UNTIL $(getRestoreFragment "${tenant_name}" "${minRestoreSCN}") WITH 'pool_list=${poolList}'"
             if [ $? -eq 1 ]; then
                exit 1
             fi
             echo "INFO: restoring tenant ${tenant_name}"
          done
          sleep 5
          
          
          # step 3 ===> wait for restore complete
          while true; do
            res=$(${mysql_cmd} "SELECT count(*) FROM oceanbase.CDB_OB_RESTORE_PROGRESS;" | awk -F '\t' '{print}')
            if [[ $res -eq 0 ]];then
              break
            fi
            echo "INFO: wait for restore data completed, uncompleted job count: ${res}"
            sleep 10
          done
          echo "INFO: restore data completed"
          sleep 5
          
          
          # step 4 ===> promote the tenants of the first replicas to PRIMARY and record the failed restore jobs.
          restoreFile="restore.dp"
          isPrimaryCluster=$(checkIsPrimaryCluster)
          ${mysql_cmd} "SELECT TENANT_ID,RESTORE_TENANT_NAME,STATUS,COMMENT FROM oceanbase.CDB_OB_RESTORE_HISTORY;" | while IFS=$'\t' read -a row; do
            IFS=$OlD_IFS
            tenant_id=${row[0]}
            tenant_name=${row[1]}
            status="${row[2]}"
            if [[ $tenant_id -ne 1 ]]; then
               if [[ $status == "SUCCESS" ]]  && [[ ${isPrimaryCluster} == "true" ]];then
                  echo "INFO: promote ${tenant_name} to Primary for primary cluster."
                  ${mysql_cmd} "ALTER SYSTEM ACTIVATE STANDBY TENANT ${tenant_name}";
                  if [[ $OB_CLUSTERS_COUNT -gt 1 ]];then
                     sql="ALTER SYSTEM ARCHIVELOG TENANT=${tenant_name};"
                     ${mysql_cmd} "${sql}";
                  fi
              elif [[ $status != "SUCCESS" ]]; then
                echo "ERROR: restore tenant ${tenant_name} failed: ${row[3]}" >> $restoreFile
              fi
            fi
          done
          
          
          # step 5 ===> establish PRIMARY/STANDBY relationship for standby cluster
          if [[ ${isPrimaryCluster} == "false" ]]; then
             repUser=${REP_USER:-rep_user}
             repPasswd=${REP_PASSWD:-rep_user}
             # TODO: update it if support multi standby clusters.
             primaryComponentName="${KB_CLUSTER_COMP_NAME%-*}-0"
             if [[ $global_comp_index -eq 0 ]]; then
                # if first component is standby cluster
                primaryComponentName="${KB_CLUSTER_COMP_NAME%-*}-1"
             fi
             primaryHost="${primaryComponentName}-0.${primaryComponentName}-headless"
             echo "primary cluster host: ${primaryHost}"
             waitForPrimaryClusterRestore "${primaryHost}"
             echo "INFO: establish replication relationship"
             # set -e
             for tenant_name in `${mysql_cmd} "SELECT tenant_name FROM oceanbase.DBA_OB_TENANTS where tenant_type='user' and status='NORMAL';" | awk -F '\t' '{print}'`; do
                primary_tenant_cmd="mysql -u root@${tenant_name} -h ${primaryHost} -P${sql_port} -N -e"
                # get primary tenant svr_list
                arr=$(${primary_tenant_cmd} "select concat(SVR_IP,':',SQL_PORT) from oceanbase.DBA_OB_ACCESS_POINT dp, oceanbase.DBA_OB_TENANTS dt where dp.tenant_id = dt.tenant_id and dt.tenant_name='${tenant_name}';" | awk -F '\t' '{print}')
                IFS=,
                svrList="${arr[*]}"
                IFS=$OlD_IFS
                # wait to promote primary cluster to  Primary
                waitToPromotePrimary "${primaryHost}" "${tenant_name}"
                res=`${primary_tenant_cmd} "SELECT count(*) FROM mysql.user where user='${repUser}'" | awk -F '\t' '{print}'`
                if [[ $res -eq 0 ]]; then
                  echo "INFO: create user ${repUser} for primary tenant ${tenant_name}"
                  ${primary_tenant_cmd} "CREATE USER ${repUser} IDENTIFIED BY '${repPasswd}';"
                else
                  echo "INFO: alter user ${repUser} for primary tenant ${tenant_name}"
                  ${primary_tenant_cmd} "ALTER USER ${repUser} IDENTIFIED BY '${repPasswd}'";
                fi
                ${primary_tenant_cmd} "GRANT SELECT ON oceanbase.* TO ${repUser};"
                ${primary_tenant_cmd} "SET GLOBAL ob_tcp_invited_nodes='%';"
                echo "INFO: set log source for tenant ${tenant_name}, svrList: ${svrList}, user: ${repUser}"
                ${mysql_cmd} "ALTER SYSTEM SET LOG_RESTORE_SOURCE ='SERVICE=${svrList} USER=${repUser}@${tenant_name} PASSWORD=${repPasswd}' TENANT = ${tenant_name};"
                ${mysql_cmd} "ALTER SYSTEM RECOVER STANDBY TENANT = ${tenant_name} UNTIL UNLIMITED;"
                if [[ $OB_CLUSTERS_COUNT -gt 1 ]];then
                   ${mysql_cmd} "ALTER SYSTEM ARCHIVELOG TENANT=${tenant_name};"
                fi
             done
          fi
          
          if [[ -f $restoreFile ]];then
             echo $(cat $restoreFile)
          fi
---
# Source: ob-ce/templates/backuppolicytemplate.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: BackupPolicyTemplate
metadata:
  name: ob-ce-backup-policy-template
  labels:
    clusterdefinition.kubeblocks.io/name: ob-ce
  annotations:
    dataprotection.kubeblocks.io/is-default-policy-template: "true"
spec:
  clusterDefinitionRef: ob-ce
  backupPolicies:
  - componentDefs:
    - ob-ce
    componentDefRef: ob-ce
    backoffLimit: 0
    backupMethods: &backupMethods
      - name: full
        snapshotVolumes: false
        actionSetName: ob-ce-physical-backuptwork
        targetVolumes:
          volumeMounts:
            - name: workdir
              mountPath: /home/admin/workdir
    schedules: &backupschedules
      - backupMethod: full
        enabled: false
        cronExpression: "0 18 * * *"
        retentionPeriod: 7d
  - componentDefs:
    -  ob-ce-hostnetwork
    componentDefRef: ob-ce-hostnetwork
    backoffLimit: 0
    backupMethods: *backupMethods
    schedules: *backupschedules
  - componentDefs:
    - ob-ce-repl
    componentDefRef: oceanbase-repl
    backoffLimit: 0
    backupMethods: *backupMethods
    schedules: *backupschedules
  - componentDefs:
    - ob-ce-repl-host
    componentDefRef:  ob-ce-repl-host
    backoffLimit: 0
    backupMethods: *backupMethods
    schedules: *backupschedules
---
# Source: ob-ce/templates/clusterdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: ob-ce
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
spec:
  connectionCredential:
    username: root
    password: ""
    endpoint: "$(SVC_FQDN):$(SVC_PORT_sql)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_sql)"
  componentDefs:
    - name: ob-ce
      characterType: oceanbase
      workloadType: Stateful
      service: &obsvc
        ports:
          - name: sql
            port: 2881
            targetPort: sql
          - name: rpc
            port: 2882
            targetPort: rpc
      configSpecs: &obconfigs
#        - name: oceanbase-init-config
#          templateRef: oceanbase-init-config
#          volumeName: oceanbase-init-config
#          namespace: default
#          defaultMode: 0555
        - name: ob-ce-sysvars
          templateRef: ob-ce-sysvars
          volumeName: ob-ce-sysvars
          constraintRef: ob-ce-sysvars-cc
          namespace: default
          defaultMode: 0555
        - name: ob-ce-config
          templateRef: ob-ce-config
          volumeName: ob-ce-config
          constraintRef: ob-ce-parameters-cc
          namespace: default
          defaultMode: 0555
      scriptSpecs: &obscripts
        - name: ob-ce-scripts
          templateRef: ob-ce-scripts
          namespace: default
          volumeName: scripts
          defaultMode: 0555
      podSpec: &obpods
        terminationGracePeriodSeconds: 60
#        initContainers:
#          - name: init-tools
#            command: [ "cp", "/bin/ob-tools", "/kb_tools/obtools" ]
#            volumeMounts:
#              - name: kb-tools
#                mountPath: /kb_tools
        containers:
          - name: observer-container
            command:
              - bash
              - -c
              - |
                /scripts/entrypoint.sh
            ports:
              - containerPort: 2881
                name: sql
                protocol: TCP
              - containerPort: 2882
                name: rpc
                protocol: TCP
            readinessProbe:
              failureThreshold: 10
              initialDelaySeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              exec:
                command:
                  - cat
                  - /tmp/ready
            volumeMounts:
              - mountPath: /home/admin/data-file
                name: data-file
              - mountPath: /home/admin/data-log
                name: data-log
              - mountPath: /home/admin/log
                name: log
              - mountPath: /home/admin/workdir
                name: workdir
              - name: scripts
                mountPath: /scripts
              - name: oceanbase-config
                mountPath: /kb-config
              - name: oceanbase-sysvars
                mountPath: /opt/oceanbase/sysvars
            workingDir: /home/admin/workdir
            env:
              - name: LD_LIBRARY_PATH
                value: /home/admin/oceanbase/lib
              - name: CLUSTER_NAME
                value: "$(KB_CLUSTER_COMP_NAME)"
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
              - name: DB_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: OB_HOME_DIR
                value: "/home/admin/workdir"
              - name: CLUSTER_ID
                value: "1"
              - name: OB_SERVICE_PORT
                value: "2881"
          - name: metrics
            command:
              - bash
              - -c
              - |
                /scripts/setupmetrics.sh
            env:
              - name: OB_MONITOR_STATUS
                value: active
              - name: CLUSTER_NAME
                value: "$(KB_CLUSTER_COMP_NAME)"
              - name: CLUSTER_ID
                value: "1"
              - name: MONITOR_USER
                value: "root"
              - name: MONITOR_PASSWORD
                value: ""
              - name: SERVICE_PORT
                value: "8088"
              - name: OB_SERVICE_PORT
                value: "2881"
            ports:
              - containerPort: 8088
                name: http
                protocol: TCP
              - containerPort: 8089
                name: pprof
                protocol: TCP
#            readinessProbe:
#              failureThreshold: 3
#              httpGet:
#                path: /metrics/stat
#                port: 8088
#                scheme: HTTP
#              initialDelaySeconds: 5
#              periodSeconds: 2
#              successThreshold: 1
#              timeoutSeconds: 1
            resources:
              limits:
                cpu: "1"
                memory: 1Gi
              requests:
                cpu: "200m"
                memory: 256Mi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - name: scripts
                mountPath: /scripts
              - name: kb-tools
                mountPath: /kb_tools
              - name: metricslog
                mountPath: /home/admin/obagent/log
            workingDir: /home/admin/obagent
        volumes:
#          - name: kb-tools
#            emptyDir: {}
          - name: metricslog
            emptyDir: {}
    - name: ob-ce-hostnetwork
      characterType: oceanbase
      workloadType: Stateful
      service: *obsvc
      configSpecs: &obhostconfigs
#        - name: oceanbase-init-config
#          templateRef: oceanbase-init-config
#          volumeName: oceanbase-init-config
#          namespace: default
#          defaultMode: 0555
        - name: ob-ce-sysvars
          templateRef: ob-ce-sysvars
          volumeName: ob-ce-sysvars
          constraintRef: ob-ce-sysvars-cc
          namespace: default
          defaultMode: 0555
        - name: ob-ce-config
          templateRef: ob-ce-config
          volumeName: ob-ce-config
          constraintRef: ob-ce-parameters-cc
          namespace: default
          defaultMode: 0555
        - name: ob-ce-inject-env
          templateRef: ob-ce-inject-env
          volumeName: ob-ce-inject-env
          constraintRef: ob-ce-env-cc
          namespace: default
          defaultMode: 0555
          asEnvFrom:
            - observer-container
            - metrics
            - config-manager
      scriptSpecs: *obscripts
      podSpec: &obhostpods
        terminationGracePeriodSeconds: 60
        hostNetwork: true
        dnsPolicy: ClusterFirstWithHostNet
#        initContainers:
#          - name: init-tools
#            command: [ "cp", "/bin/ob-tools", "/kb_tools/obtools" ]
#            volumeMounts:
#              - name: kb-tools
#                mountPath: /kb_tools
        containers:
          - name: observer-container
            command:
              - bash
              - -c
              - |
                /scripts/entrypoint.sh
            ports:
              - containerPort: 88
                name: sql
                protocol: TCP
              - containerPort: 99
                name: rpc
                protocol: TCP
            readinessProbe:
              failureThreshold: 10
              initialDelaySeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              exec:
                command:
                  - cat
                  - /tmp/ready
            volumeMounts:
              - mountPath: /home/admin/data-file
                name: data-file
              - mountPath: /home/admin/data-log
                name: data-log
              - mountPath: /home/admin/log
                name: log
              - mountPath: /home/admin/workdir
                name: workdir
              - name: scripts
                mountPath: /scripts
              - name: oceanbase-config
                mountPath: /kb-config
              - name: oceanbase-sysvars
                mountPath: /opt/oceanbase/sysvars
            workingDir: /home/admin/workdir
            env:
              - name: LD_LIBRARY_PATH
                value: /home/admin/oceanbase/lib
              - name: CLUSTER_NAME
                value: "$(KB_CLUSTER_COMP_NAME)"
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
              - name: DB_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: OB_HOME_DIR
                value: "/home/admin/workdir"
          - name: metrics
            command:
              - bash
              - -c
              - |
                /scripts/setupmetrics.sh
            env:
              - name: OB_MONITOR_STATUS
                value: active
              - name: CLUSTER_NAME
                value: "$(KB_CLUSTER_COMP_NAME)"
              - name: CLUSTER_ID
                value: "1"
              - name: MONITOR_USER
                value: "root"
              - name: MONITOR_PASSWORD
                value: ""
#              - name: SERVICE_PORT
#                value: "8088"
#              - name: OB_SERVICE_PORT
#                value: "2881"
            ports:
              - containerPort: 60
                name: http
                protocol: TCP
              - containerPort: 61
                name: pprof
                protocol: TCP
              - containerPort: 62
                name: config-manager
                protocol: TCP
#            readinessProbe:
#              failureThreshold: 3
#              httpGet:
#                path: /metrics/stat
#                port: http
#                scheme: HTTP
#              initialDelaySeconds: 5
#              periodSeconds: 2
#              successThreshold: 1
#              timeoutSeconds: 1
            resources:
              limits:
                cpu: "1"
                memory: 1Gi
              requests:
                cpu: "200m"
                memory: 256Mi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - name: scripts
                mountPath: /scripts
              - name: kb-tools
                mountPath: /kb_tools
              - name: metricslog
                mountPath: /home/admin/obagent/log
            workingDir: /home/admin/obagent
        volumes:
#          - name: kb-tools
#            emptyDir: {}
          - name: metricslog
            emptyDir: {}
    - name: ob-ce-repl
      characterType: oceanbase
      workloadType: Stateful
      service: *obsvc
      configSpecs: *obconfigs
      scriptSpecs: *obscripts
      probes: &obprobes
        roleProbeTimeoutAfterPodsReady: 300
        roleProbe:
          failureThreshold: 3
          periodSeconds: 2
          timeoutSeconds: 2
      podSpec: *obpods
    - name: ob-ce-repl-host
      characterType: oceanbase
      workloadType: Stateful
      service: *obsvc
      configSpecs: *obhostconfigs
      scriptSpecs: *obscripts
      probes: *obprobes
      podSpec: *obhostpods
---
# Source: ob-ce/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: ob-ce-4.2.0.0-100010032023083021
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: ob-ce
  componentVersions:
  - componentDefRef: ob-ce
    versionsContext:
#      initContainers:
#      - name: init-tools
#        image: docker.io/apecloud/obtools:4.2.1
#        imagePullPolicy: IfNotPresent
      containers:
      - name: observer-container
        image: docker.io/apecloud/oceanbase:4.2.0.0-100010032023083021
        imagePullPolicy: IfNotPresent
      - name: metrics
        image: docker.io/apecloud/obagent:4.2.1-100000092023101717
        imagePullPolicy: IfNotPresent
  - componentDefRef: ob-ce-hostnetwork
    versionsContext:
#      initContainers:
#      - name: init-tools
#        image: docker.io/apecloud/obtools:4.2.1
#        imagePullPolicy: IfNotPresent
      containers:
      - name: observer-container
        image: docker.io/apecloud/oceanbase:4.2.0.0-100010032023083021
        imagePullPolicy: IfNotPresent
      - name: metrics
        image: docker.io/apecloud/obagent:4.2.1-100000092023101717
        imagePullPolicy: IfNotPresent
---
# Source: ob-ce/templates/configconstraint.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ConfigConstraint
metadata:
  name: ob-ce-sysvars-cc
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
spec:
  reloadOptions:
    shellTrigger:
      sync: true
      command:
        - "update-sysvars.sh"

  scriptConfigs:
    - scriptConfigMapRef: ob-ce-reload-tools-script
      namespace: default

  toolsImageSpec:
    mountPoint: /kb_tools
    toolConfigs:
      - name: kb-tools
        command:
          - cp
          - /bin/ob-tools
          - /kb_tools/obtools
        image: docker.io/apecloud/obtools:4.2.1

  # top level mysql configuration type
  cfgSchemaTopLevelName: OBSysVariables

  # ConfigurationSchema that impose restrictions on engine parameter's rule
  configurationSchema:
    # schema: auto generate from mmmcue scripts
    # example: ../../pkg/configuration/testdata/mysql_openapi.json
    cue: |-
      // generated by tools
      // source: https://raw.githubusercontent.com/oceanbase/oceanbase/develop/src/share/system_variable/ob_system_variable_init.json
      #OBSysVariables: {
      
      	//
      	have_ssl: string
      
      	// set runtime filter type, including the bloom_filter/range/in filter
      	runtime_filter_type: string
      
      	// The number of seconds the server waits for activity on an interactive connection before closing it.
      	interactive_timeout: int & >=1 & <=31536000
      
      	// Transaction Isolcation Levels: READ-UNCOMMITTED READ-COMMITTED REPEATABLE-READ SERIALIZABLE
      	tx_isolation: string
      
      	// The max duration of one transaction
      	ob_trx_timeout: int
      
      	// enable distinct aggregate function to partial rollup push down optimization.
      	_px_dist_agg_partial_rollup_pushdown: string & "OFF" | "ADAPTIVE"
      
      	// control audit log trail job in mysql mode
      	_create_audit_purge_job: string
      
      	//
      	timestamp: int & >=0
      
      	//
      	hostname: string
      
      	// memory usage percentage  of plan_cache_limit at which plan cache eviction will be stopped
      	ob_plan_cache_evict_low_percentage: int & >=0 & <=100
      
      	// specifies the language to use for the spelling of day and month names and date abbreviations (a.m., p.m., AD, BC) returned by the TO_DATE and TO_CHAR functions.
      	nls_date_language: string
      
      	// sql throttle priority, query may not be allowed to execute if its priority isnt greater than this value.
      	sql_throttle_priority: int
      
      	// If set true, transaction open the elr optimization.
      	ob_early_lock_release: string & "0" | "1" | "OFF" | "ON"
      
      	// set last archive timestamp in mysql mode, must utc time in usec from 1970
      	_set_last_archive_timestamp: string
      
      	//
      	tmp_table_size: int & >=1024 & <=18446744073709551615
      
      	// specifies the string to use as the local currency symbol for the L number format element. The default value of this parameter is determined by NLS_TERRITORY.
      	nls_currency: string
      
      	// The maximum query result set that can be cached by the query cache(not used yet, only sys var compatible)
      	query_cache_limit: int & >=0 & <=18446744073709551615
      
      	// ip white list for tenant, support % and _ and multi ip(separated by commas), support ip match and wild match
      	ob_tcp_invited_nodes: string
      
      	// specifies the encryption algorithm used in the functions aes_encrypt and aes_decrypt
      	block_encryption_mode: string & "aes-128-ecb" | "aes-192-ecb" | "aes-256-ecb" | "aes-128-cbc" | "aes-192-cbc" | "aes-256-cbc" | "aes-128-cfb1" | "aes-192-cfb1" | "aes-256-cfb1" | "aes-128-cfb8" | "aes-192-cfb8" | "aes-256-cfb8" | "aes-128-cfb128" | "aes-192-cfb128" | "aes-256-cfb128" | "aes-128-ofb" | "aes-192-ofb" | "aes-256-ofb"
      
      	//
      	sql_select_limit: int & >=0 & <=9223372036854775807
      
      	//
      	ssl_cipher: string
      
      	// enable shared hash table hash join optimization.
      	_px_shared_hash_join: string & "0" | "1" | "OFF" | "ON"
      
      	// the routing policy of obproxy/java client and observer internal retry, 1=READONLY_ZONE_FIRST, 2=ONLY_READONLY_ZONE, 3=UNMERGE_ZONE_FIRST, 4=UNMERGE_FOLLOWER_FIRST
      	ob_route_policy: string & "" | "READONLY_ZONE_FIRST" | "ONLY_READONLY_ZONE" | "UNMERGE_ZONE_FIRST" | "UNMERGE_FOLLOWER_FIRST"
      
      	// JIT execution engine mode, default is AUTO
      	ob_enable_jit: string & "OFF" | "AUTO" | "FORCE"
      
      	// number of threads allowed to run parallel statements before statement queuing will be used.
      	parallel_servers_target: int & >=0 & <=9223372036854775807
      
      	// A DML statement can be parallelized only if you have explicitly enabled parallel DML in the session or in the SQL statement.
      	_enable_parallel_dml: string & "0" | "1" | "OFF" | "ON"
      
      	// In the weak read state, the replica status of the current machine is fed back to the proxy.
      	_ob_proxy_weakread_feedback: int
      
      	// The character set which server should translate to before shipping result sets or error message back to the client
      	character_set_results: int
      
      	// whether can select from index table
      	ob_enable_index_direct_select: string & "0" | "1" | "OFF" | "ON"
      
      	// specifies the string to use as the international currency symbol for the C number format element. The default value of this parameter is determined by NLS_TERRITORY
      	nls_iso_currency: string
      
      	// control whether print svr_ip,execute_time,trace_id
      	ob_enable_rich_error_msg: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	warning_count: int
      
      	// specifies which calendar system Oracle uses.
      	nls_calendar: string
      
      	// limit the effect of data import and export operations
      	secure_file_priv: string
      
      	// current priority used for SQL throttling
      	sql_throttle_current_priority: int
      
      	// query may not be allowed to execute if its network usage isnt less than this value.
      	sql_throttle_network: int
      
      	//
      	ssl_crl: string
      
      	//
      	div_precision_increment: int & >=0 & <=30
      
      	//
      	ssl_capath: string
      
      	//
      	validate_password_policy: string & "low" | "medium"
      
      	// control whether lob use partial update
      	log_row_value_options: string
      
      	// enabling a series of optimizer features based on an OceanBase release number
      	optimizer_features_enable: string
      
      	// The collation of the default database
      	collation_database: int
      
      	//
      	lock_wait_timeout: int & >=1 & <=31536000
      
      	// enable aggregation function to be push-downed through exchange nodes
      	ob_enable_aggregation_pushdown: string & "0" | "1" | "OFF" | "ON"
      
      	// this value is true if we have executed set transaction stmt, until a transaction commit(explicit or implicit) successfully
      	_ob_proxy_session_temporary_table_used: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	net_read_timeout: int & >=1 & <=31536000
      
      	// Indicate how many bytes the interm result manager can alloc most for this tenant
      	ob_interm_result_mem_limit: int
      
      	//
      	init_connect: string
      
      	// query may not be allowed to execute if its rt isnt less than this value.
      	sql_throttle_rt: int
      
      	// Enable use sql plan baseline
      	optimizer_use_sql_plan_baselines: string & "0" | "1" | "OFF" | "ON"
      
      	// store all session labels for all label security policy.
      	_ob_ols_policy_session_labels: string
      
      	//
      	datadir: string
      
      	//
      	max_user_connections: int & >=0 & <=4294967295
      
      	//
      	have_openssl: string
      
      	//
      	ssl_ca: string
      
      	// The limited percentage of tenant memory for sql audit
      	ob_sql_audit_percentage: int & >=0 & <=80
      
      	// If set true, sql will update sys variable while schema version changed.
      	ob_check_sys_variable: string & "0" | "1" | "OFF" | "ON"
      
      	// A DDL statement can be parallelized only if you have explicitly enabled parallel DDL in the session or in the SQL statement.
      	_force_parallel_ddl_dop: int
      
      	// specifies the minimum execution time a table scan should have before it's considered for automatic degree of parallelism, variable unit is milliseconds
      	parallel_min_scan_time_threshold: int & >=10 & <=9223372036854775807
      
      	// The character set of the default database
      	character_set_database: int
      
      	// The server character set
      	character_set_server: int
      
      	//
      	protocol_version: int
      
      	// log level in session
      	ob_log_level: string
      
      	// Indicate features that observer supports, readonly after modified by first observer
      	ob_capability_flag: int & >=0 & <=18446744073709551615
      
      	// The character set used by the server for storing identifiers.
      	character_set_system: int
      
      	//
      	connect_timeout: int & >=2 & <=31536000
      
      	// control wether we need to gather optimizer stats on insert into select/create table as select
      	_optimizer_gather_stats_on_load: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	auto_increment_offset: int & >=1 & <=65535
      
      	//
      	ob_last_schema_version: int
      
      	//
      	disabled_storage_engines: string
      
      	// A QUERY statement can be parallelized only if you have explicitly enabled parallel QUERY in the session or in the SQL statement.
      	_enable_parallel_query: string & "0" | "1" | "OFF" | "ON"
      
      	// The name of tracefile.
      	tracefile_identifier: string
      
      	// Transaction access mode
      	transaction_read_only: string & "0" | "1" | "OFF" | "ON"
      
      	// limits the degree of parallelism used by the optimizer when automatic degree of parallelism is enabled
      	parallel_degree_limit: int & >=0 & <=9223372036854775807
      
      	// set max size for single runtime bloom filter, default is 2GB
      	runtime_bloom_filter_max_size: int
      
      	// default lob inrow threshold config
      	ob_default_lob_inrow_threshold: int
      
      	// read consistency level: 3=STRONG, 2=WEAK, 1=FROZEN
      	ob_read_consistency: string & "" | "FROZEN" | "WEAK" | "STRONG"
      
      	// specifies the name of the territory whose conventions are to be followed for day and week numbering, establishes the default date format, the default decimal character and group separator, and the default ISO and local currency symbols.
      	nls_territory: string
      
      	// The national character set which should be translated to response nstring data
      	ncharacter_set_connection: int
      
      	// whether do the checksum of the packet between the client and the server
      	ob_enable_transmission_checksum: string & "0" | "1" | "OFF" | "ON"
      
      	// set default wait time ms for runtime filter, default is 10ms
      	runtime_filter_wait_time_ms: int
      
      	// memory usage percentage of plan_cache_limit at which plan cache eviction will be trigger
      	ob_plan_cache_evict_high_percentage: int & >=0 & <=100
      
      	//
      	net_write_timeout: int & >=1 & <=31536000
      
      	//
      	general_log: string & "0" | "1" | "OFF" | "ON"
      
      	// A DDL statement can be parallelized only if you have explicitly enabled parallel DDL in the session or in the SQL statement.
      	_enable_parallel_ddl: string & "0" | "1" | "OFF" | "ON"
      
      	// The locale indicated by the lc_time_names system variable controls the language used to display day and month names and abbreviations
      	lc_time_names: string
      
      	// set the tq broadcasting fudge factor percentage.
      	_px_broadcast_fudge_factor: int & >=0 & <=100
      
      	// broadcast optimization.
      	_ob_px_bcast_optimization: string & "WORKER" | "SERVER"
      
      	// The variable determines how OceanBase should handle an ambiguous boundary datetime value a case in which it is not clear whether the datetime is in standard or daylight saving time
      	error_on_overlap_time: string & "0" | "1" | "OFF" | "ON"
      
      	// The character set which should be translated to after receiving the statement
      	character_set_connection: int
      
      	// OFF = Do not cache or retrieve results. ON = Cache all results except SELECT SQL_NO_CACHE ... queries. DEMAND = Cache only SELECT SQL_CACHE ... queries(not used yet)
      	query_cache_type: string & "OFF" | "ON" | "DEMAND"
      
      	//
      	version: string
      
      	// enables or disables the reporting of warning messages by the PL/SQL compiler, and specifies which warning messages to show as errors.
      	plsql_warnings: string
      
      	// percentage of tenant memory resources that can be used by tenant meta data
      	ob_reserved_meta_memory_percentage: int & >=1 & <=100
      
      	//
      	validate_password_mixed_case_count: int & >=0 & <=2147483647
      
      	// specifies whether return system variables change info in ok packet
      	session_track_system_variables: string
      
      	// The time limit for regular expression matching operations, default unit is milliseconds
      	regexp_time_limit: int & >=0 & <=2147483647
      
      	// This variable reports only on the status of binary logging(not used yet, only sys var compatible)
      	log_bin: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	sql_notes: string & "0" | "1" | "OFF" | "ON"
      
      	// the server automatically grants the EXECUTE and ALTER ROUTINE privileges to the creator of a stored routine
      	automatic_sp_privileges: int
      
      	// whether use pl cache in session
      	ob_enable_pl_cache: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	sql_mode: int
      
      	// This variable is a synonym for the last_insert_id variable. It exists for compatibility with other database systems.
      	identity: int & >=0 & <=18446744073709551615
      
      	//
      	license: string
      
      	// whether use plan cache in session
      	ob_enable_plan_cache: string & "0" | "1" | "OFF" | "ON"
      
      	// indicate whether the Performance Schema is enabled
      	performance_schema: string & "0" | "1" | "OFF" | "ON"
      
      	// specifies whether null aware anti join plan allow generated
      	_optimizer_null_aware_antijoin: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	read_only: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	sql_auto_is_null: string & "0" | "1" | "OFF" | "ON"
      
      	// percentage threshold to use slave mapping plan
      	_ob_px_slave_mapping_threshold: int & >=0 & <=1000
      
      	// PL/SQL timeout in microsecond(us)
      	ob_pl_block_timeout: int & >=0 & <=9223372036854775807
      
      	// The safe weak read snapshot version in one server
      	ob_safe_weak_read_snapshot: int & >=0 & <=9223372036854775807
      
      	// specifies the default date format to use with the TO_CHAR and TO_TIMESTAMP functions, (YYYY-MM-DD HH24:MI:SS.FF) is Common value
      	nls_timestamp_format: string
      
      	// the dir to place plugin dll
      	plugin_dir: string
      
      	// Abort a recursive common table expression if it does more than this number of iterations.
      	cte_max_recursion_depth: int & >=0 & <=4294967295
      
      	// control whether use show trace
      	ob_enable_show_trace: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	validate_password_length: int & >=0 & <=2147483647
      
      	// The smallest unit of memory allocated by the query cache(not used yet, only sys var compatible)
      	query_cache_min_res_unit: int & >=0 & <=18446744073709551615
      
      	// The default storage engine of OceanBase
      	default_storage_engine: string
      
      	// the trace id of current executing statement
      	ob_statement_trace_id: string
      
      	// ratio used to decide whether push down should be done in distribtued query optimization.
      	_groupby_nopushdown_cut_ratio: int
      
      	// whether turn on mysql privilege check
      	_priv_control: string
      
      	//
      	long_query_time: int & >=0
      
      	//
      	tmpdir: string
      
      	// the max duration of waiting on row lock of one transaction
      	ob_trx_lock_timeout: int
      
      	// Manually control some behaviors of aggregation
      	_aggregation_optimization_settings: int
      
      	// specifies whether return schema change info in ok packet
      	session_track_schema: string & "0" | "1" | "OFF" | "ON"
      
      	// query may not be allowed to execute if its number of logical reads isnt less than this value.
      	sql_throttle_logical_reads: int
      
      	//
      	group_concat_max_len: int & >=4 & <=18446744073709551615
      
      	// Global debug sync facility
      	ob_global_debug_sync: string
      
      	// specifies the default date format to use with the TO_CHAR and TO_DATE functions, (YYYY-MM-DD HH24:MI:SS) is Common value
      	nls_date_format: string
      
      	// clear last archive timestamp in mysql mode
      	_clear_last_archive_timestamp: string
      
      	// can control the behavior of set query, when true, set query will generate a serial plan, which ensure the output order of result set is ordered
      	_force_order_preserve_set: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	last_insert_id: int & >=0 & <=18446744073709551615
      
      	// percentage of tenant memory resources that can be used by plan cache
      	ob_plan_cache_percentage: int & >=0 & <=100
      
      	// Max packet length to send to or receive from the server
      	max_allowed_packet: int & >=1024 & <=1073741824
      
      	// specifies the default language of the database, used for messages, day and month names, the default sorting mechanism, the default values of NLS_DATE_LANGUAGE and NLS_SORT.
      	nls_language: string
      
      	//
      	validate_password_check_user_name: string & "on" | "off"
      
      	//
      	default_password_lifetime: int & >=0 & <=65535
      
      	// When the recycle bin is enabled, dropped tables and their dependent objects are placed in the recycle bin. When the recycle bin is disabled, dropped tables and their dependent objects are not placed in the recycle bin; they are just dropped.
      	recyclebin: string & "0" | "1" | "OFF" | "ON"
      
      	// set to 1 (the default by MySQL), foreign key constraints are checked. If set to 0, foreign key constraints are ignored
      	foreign_key_checks: string & "0" | "1" | "OFF" | "ON"
      
      	// wether use sql audit in session
      	ob_enable_sql_audit: string & "0" | "1" | "OFF" | "ON"
      
      	// specifies the characters to use as the decimal character and group separator, overrides those characters defined implicitly by NLS_TERRITORY.
      	nls_numeric_characters: string
      
      	// A QUERY statement can be parallelized only if you have explicitly enabled parallel QUERY in the session or in the SQL statement.
      	_force_parallel_query_dop: int
      
      	//
      	ssl_key: string
      
      	// set the binary logging format(not used yet, only sys var compatible)
      	binlog_format: string & "MIXED" | "STATEMENT" | "ROW"
      
      	//
      	validate_password_number_count: int & >=0 & <=2147483647
      
      	// enable partial rollup push down optimization.
      	_px_partial_rollup_pushdown: string & "OFF" | "ADAPTIVE"
      
      	//
      	sql_quote_show_create: string & "0" | "1" | "OFF" | "ON"
      
      	// The maximum available memory in bytes for the internal stack used for regular expression matching operations
      	regexp_stack_limit: int & >=0 & <=2147483647
      
      	// control optimizer dynamic sample level
      	optimizer_dynamic_sampling: int & >=0 & <=1
      
      	// This variable specifies the server ID(not used yet, only sys var compatible)
      	server_id: int & >=0 & <=4294967295
      
      	// Indicate whether sql stmt hit right partition, readonly to user, modify by ob
      	ob_proxy_partition_hit: string & "0" | "1" | "OFF" | "ON"
      
      	// Enable the flashback of table truncation.
      	ob_enable_truncate_flashback: string & "0" | "1" | "OFF" | "ON"
      
      	// the percentage limitation of some temp tablespace size in tenant disk.
      	ob_temp_tablespace_size_percentage: int
      
      	// whether use traditional mode for timestamp
      	explicit_defaults_for_timestamp: string & "0" | "1" | "OFF" | "ON"
      
      	// What DBMS is OceanBase compatible with? MYSQL means it behaves like MySQL while ORACLE means it behaves like Oracle.
      	ob_compatibility_mode: string & "MYSQL" | "ORACLE"
      
      	// this value is global variables last modified time when server session create, used for proxy to judge whether global vars has changed between two server session
      	ob_proxy_global_variables_version: int
      
      	// drop audit log trail job in mysql mode
      	_drop_audit_purge_job: string
      
      	// The collation which the server should translate to after receiving the statement
      	collation_connection: int
      
      	// Debug sync facility
      	debug_sync: string
      
      	// A QUERY statement can be parallelized only if you have explicitly enabled parallel QUERY in the session or in the SQL statement.
      	_force_parallel_dml_dop: int
      
      	// specifies tenant resource plan.
      	resource_manager_plan: string
      
      	// enabling a series of privilege features based on an OceanBase release number
      	privilege_features_enable: string
      
      	//
      	autocommit: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	have_profiling: string
      
      	// specifies whether automatic degree of parallelism will be enabled
      	parallel_degree_policy: string & "MANUAL" | "AUTO"
      
      	// when query is with topk hint, is_result_accurate indicates whether the result is acuurate or not
      	is_result_accurate: string & "0" | "1" | "OFF" | "ON"
      
      	// specifies the collation behavior of the database session. value can be BINARY | LINGUISTIC | ANSI
      	nls_comp: string
      
      	// specifies the default length semantics to use for VARCHAR2 and CHAR table columns, user-defined object attributes, and PL/SQL variables in database objects created in the session. SYS user use BYTE intead of NLS_LENGTH_SEMANTICS.
      	nls_length_semantics: string
      
      	// max stale time(us) for weak read query
      	ob_max_read_stale_time: int
      
      	// set max in number for runtime in filter, default is 1024
      	runtime_filter_max_in_num: int & >=0 & <=10240
      
      	//
      	tx_read_only: string & "0" | "1" | "OFF" | "ON"
      
      	// optimizer_capture_sql_plan_baselines enables or disables automitic capture plan baseline.
      	optimizer_capture_sql_plan_baselines: string & "0" | "1" | "OFF" | "ON"
      
      	// Indicate current client session user privilege, readonly after modified by first observer
      	ob_proxy_user_privilege: int & >=0 & <=9223372036854775807
      
      	// The stmt interval timeout of transaction(us)
      	ob_trx_idle_timeout: int
      
      	// enable batching of the RHS IO in NLJ
      	_nlj_batching_enabled: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	validate_password_special_char_count: int & >=0 & <=2147483647
      
      	//
      	default_authentication_plugin: string
      
      	//
      	ssl_crlpath: string
      
      	// enable mysql sql safe updates
      	sql_safe_updates: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	lc_messages: string
      
      	// The memory allocated to store results from old queries(not used yet)
      	query_cache_size: int & >=0 & <=18446744073709551615
      
      	// The number of times that any given stored procedure may be called recursively.
      	max_sp_recursion_depth: int & >=0 & <=255
      
      	// query may not be allowed to execute if its CPU usage isnt less than this value.
      	sql_throttle_cpu: int
      
      	// This system variable affects row-based logging only(not used yet, only sys var compatible)
      	binlog_rows_query_log_events: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	ob_bnl_join_cache_size: int & >=1 & <=9223372036854775807
      
      	// Transaction Isolcation Levels: READ-UNCOMMITTED READ-COMMITTED REPEATABLE-READ SERIALIZABLE
      	transaction_isolation: string
      
      	// Buffer length for TCP/IP and socket communication
      	net_buffer_length: int & >=1024 & <=1048576
      
      	//
      	version_compile_os: string
      
      	//
      	max_connections: int & >=1 & <=2147483647
      
      	// specifies the default characterset of the database, This parameter defines the encoding of the data in the CHAR, VARCHAR2, LONG and CLOB columns of a table.
      	nls_characterset: string
      
      	// TLSv1,TLSv1.1,TLSv1.2
      	tls_version: string
      
      	// this variable causes the source to write a checksum for each event in the binary log(not used yet, only sys var compatible)
      	binlog_checksum: string
      
      	// specifies the default timestamp with time zone format to use with the TO_CHAR and TO_TIMESTAMP_TZ functions, (YYYY-MM-DD HH24:MI:SS.FF TZR TZD) is common value
      	nls_timestamp_tz_format: string
      
      	// whether needs to do parameterization? EXACT - query will not do parameterization; FORCE - query will do parameterization.
      	cursor_sharing: string & "FORCE" | "EXACT"
      
      	// specifies whether check the mysql routine priv
      	_enable_mysql_pl_priv_check: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	character_set_filesystem: int
      
      	//
      	time_format: string
      
      	// specifies the collating sequence for character value comparison in various SQL operators and clauses.
      	nls_sort: string
      
      	// settings for window function optimizations
      	_windowfunc_optimization_settings: int & >=0 & <=9223372036854775807
      
      	// used in the dblink write transaction, the TM side informs the RM side of the necessary information about establishing a reverse dblink by setting system variables
      	_set_reverse_dblink_infos: string
      
      	// Whether to have query cache or not(not used yet, only compatible)
      	have_query_cache: string
      
      	// The percentage limitation of tenant memory for SQL execution.
      	ob_sql_work_area_percentage: int & >=0 & <=100
      
      	// whether use transform in session
      	ob_enable_transformation: string & "0" | "1" | "OFF" | "ON"
      
      	// When the DRC system copies data into the target cluster, it needs to be set to the CLUSTER_ID that should be written into commit log of OceanBase, in order to avoid loop replication of data. Normally, it does not need to be set, and OceanBase will use the default value, which is the CLUSTER_ID of current cluster of OceanBase. 0 indicates it is not set, please do not set it to 0
      	ob_org_cluster_id: int & >=0 & <=4294967295
      
      	// set purge job interval in mysql mode, range in 1-999 days
      	_set_purge_job_interval: string
      
      	//
      	version_compile_machine: string
      
      	// query cache wirte lock for MyISAM engine (not used yet, only sys var compatible)
      	query_cache_wlock_invalidate: string & "0" | "1" | "OFF" | "ON"
      
      	// least number of partitions per slave to start partition-based scan
      	_px_partition_scan_threshold: int & >=0 & <=100
      
      	// Lets you control conditional compilation of each PL/SQL unit independently.
      	plsql_ccflags: string
      
      	// set purge job status in mysql mode, range: true/false
      	_set_purge_job_status: string
      
      	//
      	unique_checks: string & "0" | "1" | "OFF" | "ON"
      
      	// Query timeout in microsecond(us)
      	ob_query_timeout: int
      
      	// specifies whether return session state change info in ok packet
      	session_track_state_change: string & "0" | "1" | "OFF" | "ON"
      
      	// query may not be allowed to execute if its number of IOs isnt less than this value.
      	sql_throttle_io: int
      
      	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
      	wait_timeout: int & >=1 & <=31536000
      
      	// how table database names are stored and compared, 0 means stored using the lettercase in the CREATE_TABLE or CREATE_DATABASE statement. Name comparisons are case sensitive; 1 means that table and database names are stored in lowercase abd name comparisons are not case sensitive.
      	lower_case_table_names: int & >=0 & <=2
      
      	//
      	error_count: int
      
      	// store trace info
      	ob_trace_info: string
      
      	// specifies the default characterset of the database, This parameter defines the encoding of the data in the NCHAR, NVARCHAR2 and NCLOB columns of a table.
      	nls_nchar_characterset: string
      
      	// whether use storage cardinality estimation
      	_enable_storage_cardinality_estimation: string & "0" | "1" | "OFF" | "ON"
      
      	// The server system time zone
      	system_time_zone: string
      
      	//
      	concurrent_insert: string
      
      	// determines whether an error is reported when there is data loss during an implicit or explicit character type conversion between NCHAR/NVARCHAR2 and CHAR/VARCHAR2.
      	nls_nchar_conv_excp: string
      
      	// specifies the dual currency symbol for the territory. The default is the dual currency symbol defined in the territory of your current language environment.
      	nls_dual_currency: string
      
      	// in certain case, warnings would be transformed to errors
      	innodb_strict_mode: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	max_execution_time: int
      
      	// server uuid
      	server_uuid: string
      
      	//
      	sql_warnings: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	local_infile: string & "0" | "1" | "OFF" | "ON"
      
      	// this value is true if we have executed set transaction stmt, until a transaction commit(explicit or implicit) successfully
      	ob_proxy_set_trx_executed: string & "0" | "1" | "OFF" | "ON"
      
      	// minimum number of rowid range granules to generate per slave.
      	_px_min_granules_per_slave: int & >=0 & <=100
      
      	// whether to enable automatic activation of all granted roles when users log in to the server
      	activate_all_roles_on_login: string & "0" | "1" | "OFF" | "ON"
      
      	//
      	auto_increment_increment: int & >=1 & <=65535
      
      	//
      	version_comment: string
      
      	//
      	ssl_cert: string
      
      	// auto_increment service cache size
      	auto_increment_cache_size: int & >=1 & <=100000000
      
      	// When enabled, show create table will show the strict compatible results with the compatibility mode.
      	_show_ddl_in_compat_mode: string & "0" | "1" | "OFF" | "ON"
      
      	// The character set in which statements are sent by the client
      	character_set_client: int
      
      	//
      	time_zone: string
      
      	// The server collation
      	collation_server: int
      
      	// control row cells to logged
      	binlog_row_image: string & "MINIMAL" | "NOBLOB" | "FULL"
      
      	...
      }
      
      configuration: #OBSysVariables & {
      }
      

  ##  require db instance restart
  ## staticParameters
  staticParameters:
    - None
  dynamicParameters:

  ## define immutable parameter list, this feature is not currently supported.
  immutableParameters:

  # configuration file format
  formatterConfig:
    format: properties
---
# Source: ob-ce/templates/configconstraint.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ConfigConstraint
metadata:
  name: ob-ce-parameters-cc
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
spec:
  reloadOptions:
    shellTrigger:
      sync: true
      command:
        - "update-parameters.sh"

  scriptConfigs:
    - scriptConfigMapRef: ob-ce-reload-tools-script
      namespace: default

  toolsImageSpec:
    mountPoint: /kb_tools
    toolConfigs:
      - name: kb-tools
        command:
          - cp
          - /bin/ob-tools
          - /kb_tools/obtools
        image: docker.io/apecloud/obtools:4.2.1

  # top level mysql configuration type
  cfgSchemaTopLevelName: OBParameters

  # ConfigurationSchema that impose restrictions on engine parameter's rule
  configurationSchema:
    # schema: auto generate from mmmcue scripts
    # example: ../../pkg/configuration/testdata/mysql_openapi.json
    cue: |-
      // generated by tools
      // source: https://raw.githubusercontent.com/oceanbase/oceanbase/master/src/share/parameter/ob_parameter_seed.ipp
      #OBParameters: {
      
      	// "the directory for the data file"
      	data_dir: string
      
      	// "EXTERNAL: use extrernal redundancyNORMAL: tolerate one disk failureHIGH: tolerate two disk failure if disk count is enough"
      	redundancy_level: string
      
      	// "size of the data file. Range: [0, +∞)"
      	datafile_size: string
      
      	// "the auto extend step. Range: [0, +∞)"
      	datafile_next: string
      
      	// "the auto extend max size. Range: [0, +∞)"
      	datafile_maxsize: string
      
      	// "the percentage of disk space used by the data files. Range: [0,99] in integer"
      	datafile_disk_percentage: int & >=0 & <=99
      
      	// "the percentage of disk space usage upper bound to trigger datafile extend. Range: [5,99] in integer"
      	"_datafile_usage_upper_bound_percentage": int & >=5 & <=99
      
      	// "the percentage of disk space usage lower bound to trigger datafile shrink. Range: [5,99] in integer"
      	"_datafile_usage_lower_bound_percentage": int & >=5 & <=99
      
      	// "the size of the system memory reserved for emergency internal use. Range: [10M, total size of memory]"
      	memory_reserved: string
      
      	// "the name of the module under memory leak checks"
      	leak_mod_to_check: string
      
      	// "the port number for RPC protocol. Range: (1024, 65536) in integer"
      	rpc_port: int & >=1024 & <=65536
      
      	// "port number for mysql connection. Range: (1024, 65536) in integer"
      	mysql_port: int & >=1024 & <=65536
      
      	// "name of network adapter"
      	devname: string
      
      	// "specifies the zone name"
      	zone: string
      
      	// "specifies the observer startup mode"
      	ob_startup_mode: string
      
      	// "the number of microseconds an internal DML request is permitted to execute before it is terminated. Range: [1000us, 1h]"
      	internal_sql_execute_timeout: string
      
      	// "the number of rpc/mysql I/O threads for Libeasy. Range: [0, 64] in integer, 0 stands for max(6, CPU_NUM/8)"
      	net_thread_count: int & >=0 & <=64
      
      	// "the number of rpc I/O threads for high priority messages, 0 means set off. Range: [0, 64] in integer"
      	high_priority_net_thread_count: int & >=0 & <=64
      
      	// "the size of the task queue for each tenant. Range: [1024,+∞)"
      	tenant_task_queue_size: int & >=1024
      
      	// "the size of the memory reserved for internal use(for testing purpose), 0 means follow memory_limit_percentage. Range: 0, [1G,)."
      	memory_limit: string
      
      	// "the memory reserved for internal use which cannot be allocated to any outer-tenant, and should be determined to guarantee every server functions normally. Range: [0M,)"
      	system_memory: string
      
      	// "the number of CPU\\'s in the system. If this parameter is set to zero, the number will be set according to sysconf; otherwise, this parameter is used. Range: [0,+∞) in integer"
      	cpu_count: int & >=0
      
      	// "the threshold of execution time (in milliseconds) of a query beyond which it is considered to be a \\'slow query\\'. Range: [1ms,+∞)"
      	trace_log_slow_query_watermark: string
      
      	// "specifies whether to always record the trace log. The default value is True."
      	enable_record_trace_log: string
      
      	// "truncate very long string when printing to log file. Range:[0,]"
      	max_string_print_length: int & >=0
      
      	// "specifies whether SQL audit is turned on. The default value is TRUE. Value: TRUE: turned on FALSE: turned off"
      	enable_sql_audit: string
      
      	// "specifies whether record app trace id is turned on."
      	enable_record_trace_id: string
      
      	// "specifies whether add ip:port, time and trace id to user error message. The default value is FALSE."
      	enable_rich_error_msg: string
      
      	// "Enable the debug sync facility and optionally specify a default wait timeout in micro seconds. A zero value keeps the facility disabled, Range: [0, +∞]"
      	debug_sync_timeout: string
      
      	// "specify a tcp_user_timeout for RFC5482. A zero value makes the option disabled, Range: [0, 2h]"
      	dead_socket_detection_timeout: string
      
      	// "specifies whether to enable perf event feature. The default value is True."
      	enable_perf_event: string
      
      	// "specifies whether upgrade mode is turned on. If turned on, daily merger and balancer will be disabled. Value: True: turned on; False: turned off;"
      	enable_upgrade_mode: string
      
      	// "the hour of expire time for schema history, from 1hour to 30days, with default 7days. Range: [1h, 30d]"
      	schema_history_expire_time: string
      
      	// "specify the inspection of schema synchronous status after ddl transaction commitsvalues: BEST_EFFORT, ASYNC"
      	"_publish_schema_mode": string
      
      	// "default compress function name for create new table, values: none, lz4_1.0, snappy_1.0, zlib_1.0, zstd_1.0, zstd_1.3.8"
      	default_compress_func: string
      
      	// "default row format in mysql mode"
      	default_row_format: string
      
      	// "default compress strategy for create new table within oracle mode"
      	default_compress: string
      
      	// "the time interval to refresh cluster weak read version Range: [50ms, +∞)"
      	weak_read_version_refresh_interval: string
      
      	// "Name of the cluster"
      	cluster: string
      
      	// "ID of the cluster"
      	cluster_id: int & >=1 & <=4294901759
      
      	// "URL for OBConfig service"
      	obconfig_url: string
      
      	// "specifies the current level of logging. There are DEBUG, TRACE, WDIAG, EDIAG, INFO, WARN, ERROR, seven different log levels."
      	syslog_level: string
      
      	// "Syslog IO bandwidth limitation, exceeding syslog would be truncated. Use 0 to disable ERROR log."
      	syslog_io_bandwidth_limit: string
      
      	// "DIAG syslog limitation for each error per second, exceeding syslog would be truncated"
      	diag_syslog_per_error_limit: int & >=0
      
      	// "specifies the maximum number of the log files that can co-exist before the log file recycling kicks in. Each log file can occupy at most 256MB disk space. When this value is set to 0, no log file will be removed. Range: [0, +∞) in integer"
      	max_syslog_file_count: int & >=0
      
      	// "specifies whether use async log for observer.log, elec.log and rs.log"
      	enable_async_syslog: string
      
      	// "specifies whether any log message with a log level higher than \\'WARN\\' would be printed into a separate file with a suffix of \\'wf\\'"
      	enable_syslog_wf: string
      
      	// "specifies whether log file recycling is turned on. Value: True：turned on; False: turned off"
      	enable_syslog_recycle: string
      
      	// "the size of the memory reserved for internal use(for testing purpose). Range: [10, 95]"
      	memory_limit_percentage: int & >=10 & <=95
      
      	// "size of remaining memory at which cache eviction will be triggered. Range: [0,+∞)"
      	cache_wash_threshold: string
      
      	// "the maximum size of memory cached by memory chunk cache. Range: [0M,], 0 stands for adaptive"
      	memory_chunk_cache_size: string
      
      	// "the maximum size of large memory cached by memory chunk cache. Range: [0M,], 0 stands for adaptive"
      	"_memory_large_chunk_cache_size": string
      
      	// "auto-increment service cache refresh sync_value in this interval, with default 3600s. Range: [100ms, +∞)"
      	autoinc_cache_refresh_interval: string
      
      	// "specifies whether sql operators (sort/hash join/material/window function/interm result/...) allowed to write to disk"
      	enable_sql_operator_dump: string
      
      	// "the maximum size of memory used by ChunkRowStore, 0 means follow operator's setting. Range: [0, +∞)"
      	"_chunk_row_store_mem_limit": string
      
      	// "compressor used for tableAPI query result. Values: none, lz4_1.0, snappy_1.0, zlib_1.0, zstd_1.0 zstd 1.3.8"
      	tableapi_transport_compress_func: string
      
      	// "size of maximum memory that could be used by SORT. Range: [2M,+∞)"
      	"_sort_area_size": string
      
      	// "size of maximum memory that could be used by HASH JOIN. Range: [4M,+∞)"
      	"_hash_area_size": string
      
      	// "specifies whether allow the partition level retry when the leader changes"
      	"_enable_partition_level_retry": string
      
      	// "specifies whether allow to do some defensive checks when the query is executed, 0 means defensive check is disabled, 1 means normal defensive check is enabled, 2 means more strict defensive check is enabled, such as check partition id validity"
      	"_enable_defensive_check": int
      
      	// "True means that the split + batch optimization for inserting multiple rows of the insert values ​​statement can be done"
      	"_sql_insert_multi_values_split_opt": string
      
      	// "control whether to delete auxiliary tenant after recovering tables failed"
      	"_auto_drop_recovering_auxiliary_tenant": string
      
      	// "the min malloc times between two samples, which is not more than _max_malloc_sample_interval. 10000 means not to sample any malloc, Range: [1, 10000]"
      	"_min_malloc_sample_interval": int & >=1 & <=10000
      
      	// "the max malloc times between two samples, which is not less than _min_malloc_sample_interval. 1 means to sample all malloc, Range: [1, 10000]"
      	"_max_malloc_sample_interval": int & >=1 & <=10000
      
      	// "whether enable values statement folds self params"
      	"_enable_values_table_folding": string
      
      	// "the max data stale time that cluster weak read version behind current timestamp,no smaller than weak_read_version_refresh_interval, range: [5s, +∞)"
      	max_stale_time_for_weak_consistency: string
      
      	// "specifies observer supportting atomicity and monotonic order read"
      	enable_monotonic_weak_read: string
      
      	// "the number of minimal vCPUs allocated to the server tenant(a special internal tenant that exists on every observer). 0 stands for adaptive. Range: [0, 16]"
      	server_cpu_quota_min: float & >=0 & <=16
      
      	// "the number of maximal vCPUs allocated to the server tenant(a special internal tenant that exists on every observer). 0 stands for adaptive. Range: [0, 16]"
      	server_cpu_quota_max: float & >=0 & <=16
      
      	// "the size of the memory reserved for hidden sys tenant, 0M means follow the adjusting value."
      	"_hidden_sys_tenant_memory": string
      
      	// "the number of vCPUs allocated for the requests regarding location info of the core tables. Range: [0,10] in integer"
      	location_cache_cpu_quota: float & >=0 & <=10
      
      	// "the ratio(integer) between the number of system allocated workers vs the maximum number of threads that can be scheduled concurrently. Range: [2, 20]"
      	workers_per_cpu_quota: int & >=2 & <=20
      
      	// "the percentage of the workers reserved to serve large query request. Range: [0, 100] in percentage"
      	large_query_worker_percentage: float & >=0 & <=100
      
      	// "threshold for execution time beyond which a request may be paused and rescheduled as a \\'large request\\'. Range: [1ms, +∞)"
      	large_query_threshold: string
      
      	// "ob max thread number upper limit of observer thread count. Range: [0, 10000), 0 means no limit."
      	"_ob_max_thread_num": int & >=0 & <=10000
      
      	// "max allowed concurrency for 1 CPU quota. Range: [1,20]"
      	cpu_quota_concurrency: float & >=1 & <=20
      
      	// "the ratio(integer) between the number of system allocated px workers vs the maximum number of threads that can be scheduled concurrently. Range: [0, 20]"
      	px_workers_per_cpu_quota: int & >=0 & <=20
      
      	// "the low threshold value of undo retention. The system retains undo for at least the time specified in this config when active txn protection is banned. Range: [0, 4294967295]"
      	undo_retention: int & >=0 & <=4294967295
      
      	// "specifies enable mvcc gc using active txn snapshot"
      	"_mvcc_gc_using_min_txn_snapshot": string
      
      	// "specifies whether vectorized sql execution engine is activated"
      	"_rowsets_enabled": string
      
      	// "the size of the memory reserved for vectorized sql engine. Range: [262144, 8388608]"
      	"_rowsets_target_maxsize": int & >=262144 & <=8388608
      
      	// "the row number processed by vectorized sql engine within one batch. Range: [0, 65535]"
      	"_rowsets_max_rows": int & >=0 & <=65535
      
      	// "specifies tenant ctx memory limit."
      	"_ctx_memory_limit": string
      
      	// "specifies whether convert column type float(M,D), double(M,D) to decimal(M,D) in DDL"
      	"_enable_convert_real_to_decimal": string
      
      	// "specifies wether use decimal_int type as backend for decimal values"
      	"_enable_decimal_int_type": string
      
      	// "specifies whether worker count increases when all workers were in blocking."
      	"_ob_enable_dynamic_worker": string
      
      	// "the maximum optimizer dynamic sampling time limit. Range: [0, 300]"
      	"_optimizer_ads_time_limit": int & >=0 & <=300
      
      	// "enable/disable hash join"
      	"_hash_join_enabled": string
      
      	// "enable/disable merge join"
      	"_optimizer_sortmerge_join_enabled": string
      
      	// "enable/disable nested loop join"
      	"_nested_loop_join_enabled": string
      
      	// "used in calculating the value of MEMSTORE_LIMIT parameter: memstore_limit_percentage = memstore_limit / memory_size,memory_size, where MEMORY_SIZE is determined when the tenant is created. Range: (0, 100)"
      	memstore_limit_percentage: int & >=0 & <=100
      
      	// "the threshold of the size of the mem store when freeze will be triggered. Rang:(0,100)"
      	freeze_trigger_percentage: int & >=0 & <=100
      
      	// "the threshold of the size of the mem store when writing_limit will be triggered. Rang:(0,100]. setting 100 means turn off writing limit"
      	writing_throttling_trigger_percentage: int & >=0 & <=100
      
      	// "maximum duration of writting throttling(in minutes), max value is 3 days"
      	writing_throttling_maximum_duration: string
      
      	// "time interval for periodic plan cache eviction. Range: [0s, +∞)"
      	plan_cache_evict_interval: string
      
      	// "default progressive_merge_num when tenant create tableRange:[0,)"
      	default_progressive_merge_num: int & >=0
      
      	// "DTL message buffer pool reserve the mininum size after extend the size. Range: [16M,8G]"
      	"_parallel_min_message_pool": string
      
      	// "sleep time between get channel data in millisecond. Range: [0, 2000]"
      	"_parallel_server_sleep_time": float & >=0 & <=2000
      
      	// "The maxinum percent of tenant memory that DTL message buffer pool can alloc memory. Range: [0,90]"
      	"_px_max_message_pool_pct": float & >=0 & <=90
      
      	// "Enable DTL send message with compressionValue: True: enable compression False: disable compression"
      	"_px_message_compression": string
      
      	// "the ratio of the dtl buffer manager list. Range: [1, 128]"
      	"_px_chunklist_count_ratio": int & >=1 & <=128
      
      	// "disable hash based distinct aggregation in the second stage of three stage aggregation for gby queriesValue:  True:turned on  False: turned off"
      	"_sqlexec_disable_hash_based_distagg_tiv": string
      
      	// "force hash groupby to dumpValue:  True:turned on  False: turned off"
      	"_force_hash_groupby_dump": string
      
      	// "force hash join to dump after get all build hash table Value:  True:turned on  False: turned off"
      	"_force_hash_join_spill": string
      
      	// "which hash function to choose for hash join 1: murmurhash, 2: crc, 4: xxhash"
      	"_enable_hash_join_hasher": int & >=1 & <=7
      
      	// "which path to process for hash join, default 7 to auto choose 1: nest loop, 2: recursive, 4: in-memory"
      	"_enable_hash_join_processor": int & >=1 & <=7
      
      	// "the level of storage pushdown. Range: [0, 4] 0: disabled, 1:blockscan, 2: blockscan & filter, 3: blockscan & filter & aggregate, 4: blockscan & filter & aggregate & group by"
      	"_pushdown_storage_level": int & >=0 & <=4
      
      	// "policy used to size SQL working areas (MANUAL/AUTO)"
      	workarea_size_policy: string
      
      	// "memory buffer size of temporary file, as a percentage of total tenant memory. Range: [0, 50), percentage"
      	"_temporary_file_io_area_size": int & >=0 & <=50
      
      	// "The memory limit of temporary file meta, and the value is a percentage of the tenant's memory. The default value is 70. For compatibility, 0 is 70% of tenant memory.Range: [0, 100], percentage"
      	"_temporary_file_meta_memory_limit_percentage": int & >=0 & <=100
      
      	// "maximum memory for storage meta, as a percentage of total tenant memory. Range: [0, 50), percentage, 0 means no limit to storage meta memory"
      	"_storage_meta_memory_limit_percentage": int & >=0 & <=50
      
      	// "The maximum number of tablets supported per 1GB of memory by tenant unit. Range: [1000, 50000)"
      	"_max_tablet_cnt_per_gb": int & >=1000 & <=50000
      
      	// "Lease for current heartbeat. If the root server does not received any heartbeat from an observer in lease_time seconds, that observer is considered to be offline. Not recommended for modification. Range: [1s, 5m]"
      	lease_time: string
      
      	// "maximum of threads allowed for executing asynchronous task at rootserver. Range: [1, 10]"
      	rootservice_async_task_thread_count: int & >=1 & <=10
      
      	// "the size of the queue for all asynchronous tasks at rootserver. Range: [8, 131072] in integer"
      	rootservice_async_task_queue_size: int & >=8 & <=131072
      
      	// "specifies whether a \\'system\\' table is allowed be to created manually. Value: True: allowed; False: not allowed"
      	enable_sys_table_ddl: string
      
      	// "the time interval between any two heartbeats beyond which a server is considered to be \\'permanently\\' offline. Range: [20s,+∞)"
      	server_permanent_offline_time: string
      
      	// "the duration in which the observer stays in the \\'block_migrate_in\\' status, which means it is not allowed to migrate into the server. Range: [1s, +∞)"
      	migration_disable_time: string
      
      	// "the time interval between schedules of a task that examines the __all_server table. Range: [1s, +∞)"
      	server_check_interval: string
      
      	// "the interval between the schedule of the rootservice restart task while restart failed Range: [100000us, 1m]"
      	rootservice_ready_check_interval: string
      
      	// "the number of tablet replica info that will be read by each request on the tablet-related system tables during procedures such as load-balancing, daily merge, election and etc. Range:(0,65536]"
      	tablet_meta_table_scan_batch_count: int & >=0 & <=65536
      
      	// "the time interval that observer compares ls meta table with local ls replica info and make adjustments to ensure the correctness of ls meta table. Range: [1ms,+∞)"
      	ls_meta_table_check_interval: string
      
      	// "the time interval that observer compares tablet meta table with local ls replica info and make adjustments to ensure the correctness of tablet meta table. Range: [1m,+∞)"
      	tablet_meta_table_check_interval: string
      
      	// "the min observer version"
      	min_observer_version: string
      
      	// "compatible version for persisted data"
      	compatible: string
      
      	// "specifies whether DDL operation is turned on. Value:  True:turned on;  False: turned off"
      	enable_ddl: string
      
      	// "specifies whether create table parallelly. Value:  True: create table parallelly;  False: create table serially"
      	"_enable_parallel_table_creation": string
      
      	// "specifies whether major_freeze function is turned on. Value:  True:turned on;  False: turned off"
      	enable_major_freeze: string
      
      	// "the time to recycle event history. Range: [1d, 180d]"
      	ob_event_history_recycle_interval: string
      
      	// "the time to purge recyclebin. Range: [0m, +∞)"
      	"_recyclebin_object_purge_frequency": string
      
      	// "recyclebin object expire time, default 0 that means auto purge recyclebin off. Range: [0s, +∞)"
      	recyclebin_object_expire_time: string
      
      	// "the size of disk space used by the log files. Range: [0, +∞)"
      	log_disk_size: string
      
      	// "the percentage of disk space used by the log files. Range: [0,99] in integer;only effective when parameter log_disk_size is 0;when log_disk_percentage is 0: a) if the data and the log are on the same disk, means log_disk_percentage = 30 b) if the data and the log are on the different disks, means log_disk_perecentage = 90"
      	log_disk_percentage: int & >=0 & <=99
      
      	// "If this option is set to true, use compression for log transport. The default is false(no compression)"
      	log_transport_compress_all: string
      
      	// "compressor used for log transport. Values: none, lz4_1.0, zstd_1.0, zstd_1.3.8"
      	log_transport_compress_func: string
      
      	// "log restore concurrency, for both the restore tenant and standby tenant. If the value is default 0, the database will automatically calculate the number of restore worker threads based on the tenant specification, which is tenant max_cpu; otherwise set the the worker count equals to the value.Range: [0, 100] in integer"
      	log_restore_concurrency: int & >=0 & <=100
      
      	// "log archive concurrency, for both archive fetcher and sender. If the value is default 0, the database will automatically calculate the number of archive worker threads based on the tenant specification, which is tenant max_cpu divided by 4; otherwise set the the worker count equals to the value.Range: [0, 100] in integer"
      	log_archive_concurrency: int & >=0 & <=100
      
      	// "maximum of log disk usage percentage before stop submitting or receiving logs, should be bigger than log_disk_utilization_threshold. Range: [80, 100]"
      	log_disk_utilization_limit_threshold: int & >=80 & <=100
      
      	// "log disk utilization threshold before reuse log files, should be smaller than log_disk_utilization_limit_threshold. Range: [10, 100)"
      	log_disk_utilization_threshold: int & >=10 & <=100
      
      	// "the threshold of the size of the log disk when writing_limit will be triggered. Rang:[40,100]. setting 100 means turn off writing limit"
      	log_disk_throttling_percentage: int & >=40 & <=100
      
      	// "maximum duration of log disk throttling, that is the time remaining until the log disk space is exhausted after log disk throttling triggered."
      	log_disk_throttling_maximum_duration: string
      
      	// "time to tolerate log disk io delay, after that, the disk status will be set warning. Range: [1s,300s]"
      	log_storage_warning_tolerance_time: string
      
      	// "The max delay time for ls gc when log archive is off. The default value is 0s. Range: [0s, +∞). The ls delay deletion mechanism will no longer take effect when the tenant is dropped."
      	ls_gc_delay_time: string
      
      	// "The threshold for detecting the RPC timeout for the standby tenant to fetch log from the log restore source tenant. When the rpc timeout, the log transport service switches to another server of the log restore source tenant to fetch logs. Range: [2s, +∞)"
      	standby_db_fetch_log_rpc_timeout: string
      
      	// "The lag target of the log archive. The log archive target affects not only the backup availability, but also the lag of the standby database based on archive. Values larger than 7200s are not reasonable lag. The typical value is 120s. Extremely low values can result in high IOPS, which is not optimal for object storage; such values can also affect the performance of the database. The value 0ms means to archive as soon as possible. Range: [0ms,7200s]"
      	archive_lag_target: string
      
      	// "the number of parallel log writer threads that can be used to write redo log entries to disk. "
      	"_log_writer_parallelism": int & >=1 & <=8
      
      	// "The maximum waiting time for residual read-only transaction before executing log stream garbage collecting。The default value is 24h. Range: [0s,  +∞).Log stream garbage collecting will no longer wait for readonly transaction when the tenant is dropped. "
      	"_ls_gc_wait_readonly_tx_time": string
      
      	// "The preferred upstream log region for Standby db. The Standby db will give priority to the preferred upstream log region to fetch log. For high availability，the Standby db will also switch to the other region when the preferred upstream log region can not fetch log because of exception etc."
      	standby_db_preferred_upstream_log_region: string
      
      	// "system utilization should not be large than resource_hard_limit"
      	resource_hard_limit: int & >=100 & <=10000
      
      	// "specifies whether the auto-replication is turned on. Value:  True:turned on  False: turned off"
      	enable_rereplication: string
      
      	// "specifies whether the tenant load-balancing is turned on. Value:  True:turned on  False: turned off"
      	enable_rebalance: string
      
      	// "controls whether transfers are allowed in the tenant. This config does not take effect when enable_rebalance is disabled. Value:  True:turned on  False:turned off"
      	enable_transfer: string
      
      	// "the time interval between the schedules of the tenant load-balancing task. Range: [10s, +∞)"
      	balancer_idle_time: string
      
      	// "the time interval between generate partition balance task. The value should be no less than balancer_idle_time to enable partition balance. Default value 2h and the value 0s means disable partition balance. Range: [0s, +∞)"
      	partition_balance_schedule_interval: string
      
      	// "specifies the tolerance (in percentage) of the unbalance of the disk space utilization among all units. The average disk space utilization is calculated by dividing the total space by the number of units. For example, say balancer_tolerance_percentage is set to 10 and a tenant has two units in the system, the average disk use for each unit should be about the same, thus 50% of the total value. Therefore, the system will start a rebalancing task when any unit\\'s disk space goes beyond +-10% of the average usage. Range: [1, 100) in percentage"
      	balancer_tolerance_percentage: int & >=1 & <=100
      
      	// "the time to execute the load-balancing task before it is terminated. Range: [1s, +∞)"
      	balancer_task_timeout: string
      
      	// "the time interval between logging the load-balancing task\\'s statistics. Range: [1s, +∞)"
      	balancer_log_interval: string
      
      	// "specifies whether the balance events are turned on or turned off."
      	"__balance_controller": string
      
      	// "the min memory value which is specified for a full resource pool."
      	"__min_full_resource_pool_memory": int & >=1073741824
      
      	// "disk water level to determine server balance strategy"
      	server_balance_critical_disk_waterlevel: int & >=0 & <=100
      
      	// "specifies the tolerance (in percentage) of the unbalance of the disk space utilization among all servers. The average disk space utilization is calculated by dividing the total space by the number of servers. server balancer will start a rebalancing task when the deviation between the average usage and some server load is greater than this tolerance Range: [1, 100] in percentage"
      	server_balance_disk_tolerance_percent: int & >=1 & <=100
      
      	// "specifies the tolerance (in percentage) of the unbalance of the cpu/memory utilization among all servers. The average cpu/memory utilization is calculated by dividing the total cpu/memory by the number of servers. server balancer will start a rebalancing task when the deviation between the average usage and some server load is greater than this tolerance Range: [1, 100] in percentage"
      	server_balance_cpu_mem_tolerance_percent: int & >=1 & <=100
      
      	// "Scan interval for every detector node, smaller interval support larger deadlock scale, but cost more system resource. 0ms means disable deadlock, default value is 30ms. Range:[0ms, 1s]"
      	"_lcl_op_interval": string
      
      	// "specifies whether sys unit standalone deployment is turned on. Value:  True:turned on  False: turned off"
      	enable_sys_unit_standalone: string
      
      	// "the start time of system daily merge procedure. Range: [00:00, 24:00)"
      	major_freeze_duty_time: string
      
      	// "the time interval between the schedules of the task that checks on the progress of MERGE for each zone. Range: [10s, 60m]"
      	merger_check_interval: string
      
      	// "the time interval between the retries in case of failure during a transaction\\'s two-phase commit phase. Range: [1ms,5000ms]"
      	trx_2pc_retry_interval: string
      
      	// "the time given to the commit log synchronization between a leader and its followers before a \\'warning\\' message is printed in the log file.  Range: [1ms,1000ms]"
      	clog_sync_time_warn_threshold: string
      
      	// "maximum update count before trigger row compaction. Range: [1, 6400]"
      	row_compaction_update_limit: int & >=1 & <=6400
      
      	// "specifies whether error raised from the memtable replay checksum validation can be ignored. Value: True:ignored; False: not ignored"
      	ignore_replay_checksum_error: string
      
      	// "Force: always verify; Optional: verify when rpc_checksum non-zero; Disable: ignore verify"
      	"_rpc_checksum": string
      
      	// "transaction rpc timeout(s). Range: [0s, 3600s]"
      	"_ob_trans_rpc_timeout": string
      
      	// "enable early lock release"
      	enable_early_lock_release: string
      
      	// "The tx data can be recycled after at least _tx_result_retention seconds. Range: [0, 36000]"
      	"_tx_result_retention": int & >=0 & <=36000
      
      	// "get gts ahead interval. Range: [0s, 1s]"
      	"_ob_get_gts_ahead_interval": string
      
      	// "the time during which a RPC request is permitted to execute before it is terminated"
      	rpc_timeout: string
      
      	// "the maximum timeout for a tenant worker thread to wait for the next request while processing streaming RPC"
      	"_stream_rpc_max_wait_timeout": string
      
      	// "enable pkt-nio, the new RPC frameworkValue:  True:turned on;  False: turned off"
      	"_enable_pkt_nio": string
      
      	// "maximum memory for rpc in a tenant, as a percentage of total tenant memory, and 0 means no limit to rpc memory"
      	rpc_memory_limit_percentage: int & >=0 & <=100
      
      	// "the max rpc packet size when sending RPC or responding RPC results"
      	"_max_rpc_packet_size": string
      
      	// "the max bandwidth in bytes per second that can be occupied by the sum of the synchronizing log from primary cluster of all servers in the standby cluster"
      	standby_fetch_log_bandwidth_limit: string
      
      	// "the max bandwidth in bytes per second that can be occupied by the synchronizing log from primary cluster of a server in standby cluster"
      	"_server_standby_fetch_log_bandwidth_limit": string
      
      	// "expiration time for virtual table location info in partition location cache. Range: [1s, +∞)"
      	virtual_table_location_cache_expire_time: string
      
      	// "the number of threads for fetching location cache in the background. Range: (1, 64]"
      	location_refresh_thread_count: int & >=1 & <=64
      
      	// "the maximum number of the tasks for fetching location cache concurrently. Range: [1, 1000]"
      	location_fetch_concurrency: int & >=1 & <=1000
      
      	// "the time interval in which no request for location cache renewal will be executed. The default value is 100 milliseconds. [0s, +∞)"
      	location_cache_refresh_min_interval: string
      
      	// "all server addr in cluster"
      	all_server_list: string
      
      	// "The timeout used for refreshing location cache by RPC. Range: [1ms, +∞)"
      	location_cache_refresh_rpc_timeout: string
      
      	// "The timeout used for refreshing location cache by SQL. Range: [1ms, +∞)"
      	location_cache_refresh_sql_timeout: string
      
      	// "Polling period of auto refresh tablet location service. When the value is 0, it means shutting down related service. Range: [0s, +∞)"
      	"_auto_refresh_tablet_location_interval": string
      
      	// "Maximum number of tablets broadcasted per second by a single observer. When the value is 0, it means shutting down related logic."
      	"_auto_broadcast_tablet_location_rate_limit": int & >=0 & <=100000
      
      	// "tablet ls cache priority. Range:[1, )"
      	tablet_ls_cache_priority: int & >=1
      
      	// "tab stat cache priority. Range:[1, )"
      	opt_tab_stat_cache_priority: int & >=1
      
      	// "index cache priority. Range:[1, )"
      	index_block_cache_priority: int & >=1
      
      	// "user block cache priority. Range:[1, )"
      	user_block_cache_priority: int & >=1
      
      	// "user row cache priority. Range:[1, )"
      	user_row_cache_priority: int & >=1
      
      	// "bf cache priority. Range:[1, )"
      	bf_cache_priority: int & >=1
      
      	// "bf cache miss count threshold, 0 means disable bf cache. Range:[0, )"
      	bf_cache_miss_count_threshold: int & >=0
      
      	// "fuse row cache priority. Range:[1, )"
      	fuse_row_cache_priority: int & >=1
      
      	// "storage meta cache priority. Range:[1, )"
      	storage_meta_cache_priority: int & >=1
      
      	// "io timeout for data storage, Range [1s,600s]. The default value is 10s"
      	"_data_storage_io_timeout": string
      
      	// "time to tolerate disk read failure, after that, the disk status will be set warning. Range [1s,300s]. The default value is 5s"
      	data_storage_warning_tolerance_time: string
      
      	// "time to tolerate disk read failure, after that, the disk status will be set error. Range [10s,7200s]. The default value is 300s"
      	data_storage_error_tolerance_time: string
      
      	// "the safe use percentage of data diskRange: [50,100] in integer"
      	data_disk_usage_limit_percentage: int & >=50 & <=100
      
      	// "the net percentage of sys background net. Range: [0, 100] in integer"
      	sys_bkgd_net_percentage: int & >=0 & <=100
      
      	// "The number of io threads on each disk. The default value is 8. Range: [2,32] in even integer"
      	disk_io_thread_count: int
      
      	// "The number of io callback threads. The default value is 0. Range: [0,64] in integer. If not specified, The number of threads is dynamically configured according to the memory size"
      	"_io_callback_thread_count": int & >=0 & <=64
      
      	// "specifies whether enable parallel minor merge. Value: True:turned on;  False: turned off"
      	"_enable_parallel_minor_merge": string
      
      	// "specifies whether allow adaptive compaction schedule and information collection"
      	"_enable_adaptive_compaction": string
      
      	// "the compaction dag count limit. Range: [10000,200000] in integer. default value is 15000"
      	compaction_dag_cnt_limit: int & >=10000 & <=200000
      
      	// "the batch size when scheduling tablet to execute compaction task. Range: [10000,200000] in integer. default value is 50000"
      	compaction_schedule_tablet_batch_cnt: int & >=10000 & <=200000
      
      	// "the current work thread score of low priority compaction. Range: [0,100] in integer. Especially, 0 means default value"
      	compaction_low_thread_score: int & >=0 & <=100
      
      	// "the current work thread score of middle priority compaction. Range: [0,100] in integer. Especially, 0 means default value"
      	compaction_mid_thread_score: int & >=0 & <=100
      
      	// "the current work thread score of high priority compaction. Range: [0,100] in integer. Especially, 0 means default value"
      	compaction_high_thread_score: int & >=0 & <=100
      
      	// "the current work thread score of high availability high thread. Range: [0,100] in integer. Especially, 0 means default value"
      	ha_high_thread_score: int & >=0 & <=100
      
      	// "the current work thread score of high availability mid thread. Range: [0,100] in integer. Especially, 0 means default value"
      	ha_mid_thread_score: int & >=0 & <=100
      
      	// "the current work thread score of high availability low thread. Range: [0,100] in integer. Especially, 0 means default value"
      	ha_low_thread_score: int & >=0 & <=100
      
      	// "the current work thread score of ddl thread. Range: [0,100] in integer. Especially, 0 means default value"
      	ddl_thread_score: int & >=0 & <=100
      
      	// "minor_compact_trigger, Range: [0,16] in integer"
      	minor_compact_trigger: int & >=0 & <=16
      
      	// "enable compaction diagnose functionValue:  True:turned on;  False: turned off"
      	"_enable_compaction_diagnose": string
      
      	// "force the specified partition to major without encoding row store, only for emergency!"
      	"_force_skip_encoding_partition_id": string
      
      	// "[0B,)the trigger remaining data size within transaction for immediate logging, 0B represents not trigger immediate loggingRange: [0B, total size of memory]"
      	"_private_buffer_size": string
      
      	// "trigger max callback count allowed within transaction for durable callback checkpoint, 0 represents not allow durable callbackRange: [0, not limited callback count"
      	"_fast_commit_callback_count": int & >=0
      
      	// "thre L1 compaction write amplification factor, 0 means default 25, Range: [0,100] in integer"
      	"_minor_compaction_amplification_factor": int & >=0 & <=100
      
      	// "specifies how many minor freeze should be triggered between two major freeze, Range: [0,65535] in integer"
      	major_compact_trigger: int & >=0 & <=65535
      
      	// "the time interval to schedule compaction, Range: [3s,5m]Range: [3s, 5m]"
      	ob_compaction_schedule_interval: string
      
      	// "per row update counts threshold to trigger minor freeze for tables with ELR optimization"
      	"_ob_elr_fast_freeze_threshold": int & >=10000
      
      	// "specifies whether the tenant's fast freeze is enabledValue: True:turned on;  False: turned off"
      	"_ob_enable_fast_freeze": string
      
      	// "specifies whether the tenant's adaptive merge scheduling is enabledValue: True:turned on;  False: turned off"
      	"_enable_adaptive_merge_schedule": string
      
      	// "retry num limit during migration. Range: [3, 100] in integer"
      	sys_bkgd_migration_retry_num: int & >=3 & <=100
      
      	// "the timeout for migration change member list retry. The default value is 20s. Range: [0s,24h]"
      	sys_bkgd_migration_change_member_list_timeout: string
      
      	// "default tablet size, has to be a multiple of 2M"
      	tablet_size: string
      
      	// "check cycle of db data. Range: [0, 360] in integer. Unit: day. 0: check nothing. 1-360: check all data every specified days. The default value is 20. The real check cycle maybe longer than the specified value for insuring performance."
      	builtin_db_data_verify_cycle: int & >=0 & <=360
      
      	// "specify what kind of verification should be done when merging micro block. 0 : no verification will be done 1 : verify encoding algorithm, encoded micro block will be read to ensure data is correct 2 : verify encoding and compression algorithm, besides encoding verification, compressed block will be decompressed to ensure data is correct3 : verify encoding, compression algorithm and lost write protect"
      	micro_block_merge_verify_level: int & >=0 & <=3
      
      	// "specify what kind of verification should be done when migrating macro block. 0 : no verification will be done 1 : physical verification2 : logical verification"
      	"_migrate_block_verify_level": int & >=0 & <=2
      
      	// "specify interval of cache background wash"
      	"_cache_wash_interval": string
      
      	// "specify max ls count of one tenant on one observer.WARNING: Modifying this can potentially destabilize the cluster. It is strongly advised to avoid making such changes as they are unlikely to be necessary.0: the cluster will adapt the max ls number according to the memory size of tenant itself"
      	"_max_ls_cnt_per_server": int & >=0 & <=1024
      
      	// "to be removed"
      	dtl_buffer_size: string
      
      	// "to be removed"
      	px_task_size: string
      
      	// "max elr dependent transaction count"
      	"_max_elr_dependent_trx_count": int & >=0
      
      	// "the percentage of memory errsim. Rang:[0,100]"
      	module_test_trx_memory_errsim_percentage: int & >=0 & <=100
      
      	// "Work area memory limitation for tenant"
      	sql_work_area: string
      
      	// "max memory size which can be used by libeasy. The default value is 4G. Range: [256M,)"
      	"__easy_memory_limit": string
      
      	// "the size of routine execution stackRange: [512K, 20M]"
      	stack_size: string
      
      	// "the percentage of easy memory reserved size. The default value is 0. Range: [0,100]"
      	"__easy_memory_reserved_percentage": int & >=0 & <=100
      
      	// "max parallel execution pipeline depth, range: [2,3]"
      	"_px_max_pipeline_depth": int & >=2 & <=3
      
      	// "enable server SSL support. Takes effect after ca/cert/key file is configured correctly. "
      	ssl_client_authentication: string
      
      	// "Whether this server uses ipv6 address"
      	use_ipv6: string
      
      	// "whether trace sys user operations"
      	audit_sys_operations: string
      
      	// "enables or disables database auditing, support NONE;OS;DB;DB,EXTENDED;DB_EXTENDED"
      	audit_trail: string
      
      	// "the config parameter of ddl timeoutRange: [1s, +∞)"
      	"_ob_ddl_timeout": string
      
      	// "backup data file size. Range: [512M, 4G] in integer"
      	backup_data_file_size: string
      
      	// "control backup task keep alive intervalRange: [1s, +∞)"
      	"_backup_task_keep_alive_interval": string
      
      	// "control backup task keep alive timeoutRange: [1s, +∞)"
      	"_backup_task_keep_alive_timeout": string
      
      	// "enable use of batched multi statement"
      	ob_enable_batched_multi_statement: string
      
      	// "the px bloom filter false-positive rate.the default value is 1, range: [0,100]"
      	"_bloom_filter_ratio": int & >=0 & <=100
      
      	// "the time interval between the schedules of physical restore task. Range: [10s, +∞)"
      	"_restore_idle_time": string
      
      	// "the time interval between the schedules of physical backup task. Range: [10s, +∞)"
      	"_backup_idle_time": string
      
      	// "control if enable prepared statement"
      	"_ob_enable_prepared_statement": string
      
      	// "specifies the upgrade stage. NONE: in non upgrade stage, PREUPGRADE: in pre upgrade stage, DBUPGRADE: in db uprade stage, POSTUPGRADE: in post upgrade stage. "
      	"_upgrade_stage": string
      
      	// "OFF: disabled, REPORT: check leaked cache object infos only, AUTO: check and release leaked cache obj."
      	"_ob_plan_cache_gc_strategy": string
      
      	// "wether turn plan cache ref count diagnosis on"
      	"_enable_plan_cache_mem_diagnosis": string
      
      	// "when using the external key management center, this parameter will store some key management information"
      	external_kms_info: string
      
      	// "none : transparent encryption is none, none means cannot use tde, internal : transparent encryption is in the form of internal tables, bkmi : transparent encryption is in the form of external bkmi"
      	tde_method: string
      
      	// "the time interval between the schedules of schema history recyle task. Range: [0s, +∞)"
      	schema_history_recycle_interval: string
      
      	// "whether turn on oracle privilege check "
      	"_enable_oracle_priv_check": string
      
      	// "provides a mechanism that allows PL/SQL programmers to controlconditional compilation of each PL/SQL library unit independently"
      	plsql_ccflags: string
      
      	// "specifies the compilation mode for PL/SQL library units"
      	plsql_code_type: string
      
      	// "specifies whether or not PL/SQL library units will be compiled for debugging"
      	plsql_debug: string
      
      	// "specifies the optimization level that will be used tocompile PL/SQL library units. The higher the setting of this parameter, the more effortthe compiler makes to optimize PL/SQL library units"
      	plsql_optimize_level: int
      
      	// "allows some abnormal behavior that Version 8 disallows, not available"
      	plsql_v2_compatibility: string
      
      	// "enables or disables the reporting of warning messages by thePL/SQL compiler, and specifies which warning messages to show as errors"
      	plsql_warnings: string
      
      	// "enable join bloom filter"
      	"_bloom_filter_enabled": string
      
      	// "used to manage the database's use of large pages, values: false, true, only"
      	use_large_pages: string
      
      	// "when server use ssl, use it to control client identity with ssl subject common name. default NONE"
      	ob_ssl_invited_common_names: string
      
      	// "when using the external key management center for ssl, this parameter will store some key management information"
      	ssl_external_kms_info: string
      
      	// "when rpc need use ssl, we will use it to store invited server ipv4 during grayscale change.when it is finish, it can use ALL instead of all server ipv4"
      	"_ob_ssl_invited_nodes": string
      
      	// "specifies audit mode,NONE: close audit,MYSQL: use mysql auditORACLE: use oracle audit"
      	"_audit_mode": string
      
      	// "the max schema slot number for multi-version schema memory management, Range: [2, 256] in integer"
      	"_max_schema_slot_num": int & >=2 & <=256
      
      	// "the maximun throughput allowed for a tenant per observer instance"
      	"_ob_query_rate_limit": int
      
      	// "specifies the threshold value for a xa record to be considered as obsolete"
      	"_xa_gc_timeout": string
      
      	// "specifies the scan interval of the gc worker"
      	"_xa_gc_interval": string
      
      	// "enable keepalive for each TCP connection."
      	"_enable_easy_keepalive": string
      
      	// "enable ratelimit between regions for RPC connection."
      	enable_ob_ratelimit: string
      
      	// "the time interval to update observer's maximum bandwidth to a certain region. "
      	ob_ratelimit_stat_period: string
      
      	// "specifies the maximum number of open cursors a session can have at once.can use this parameter to prevent a session from opening an excessive number of cursors.Range: [0, 65535] in integer"
      	open_cursors: int & >=0 & <=65535
      
      	// "enable px batch rescan for nlj or subplan filter"
      	"_enable_px_batch_rescan": string
      
      	// "max active parallel sessions allowed for tenant. Range: [0,+∞)"
      	"_parallel_max_active_sessions": int & >=0
      
      	// "enable TCP keepalive for the TCP connection of sql protocol. Take effect for new established connections."
      	enable_tcp_keepalive: string
      
      	// "The time (in seconds) the connection needs to remain idle before TCP starts sending keepalive probe. Take effect for new established connections. Range: [1s, +∞]"
      	tcp_keepidle: string
      
      	// "The time (in seconds) between individual keepalive probes. Take effect for new established connections. Range: [1s, +∞]"
      	tcp_keepintvl: string
      
      	// "The maximum number of keepalive probes TCP should send before dropping the connection. Take effect for new established connections. Range: [1,+∞)"
      	tcp_keepcnt: int & >=1
      
      	// "Set send bloom filter slice sizeRange: [1, +∞)"
      	"_send_bloom_filter_size": int & >=1
      
      	// "enable px task ordered coord"
      	"_enable_px_ordered_coord": string
      
      	// "The number of consecutive failed connection attempts permitted to accountsbefore the server adds a delay for subsequent connection attempts"
      	connection_control_failed_connections_threshold: int & >=0 & <=2147483647
      
      	// "The minimum delay in milliseconds for server response to failed connection attempts, if connection_control_failed_connections_threshold is greater than zero."
      	connection_control_min_connection_delay: int & >=1000 & <=2147483647
      
      	// "The maximum delay in milliseconds for server response to failed connection attempts, if connection_control_failed_connections_threshold is greater than zero"
      	connection_control_max_connection_delay: int & >=1000 & <=2147483647
      
      	// "Proxy route policy for readonly sql: whether regard begining read only stmts as in transaction"
      	ob_proxy_readonly_transaction_routing_policy: string
      
      	// "specifies the maximum number of job slaves per instance that can be created for the execution of DBMS_JOB jobs and Oracle Scheduler (DBMS_SCHEDULER) jobs."
      	job_queue_processes: int & >=0 & <=1000
      
      	// "specify whether resource limit check is turned on"
      	"_enable_resource_limit_spec": string
      
      	// "this parameter encodes some resource limit parameters to json"
      	"_resource_limit_spec": string
      
      	// "the maximum number of sessions that can be created concurrently"
      	"_resource_limit_max_session_num": int & >=0 & <=1000000
      
      	// "specifies the px bloom filter each group size in sending to the other sqcRange: [1, +∞) or auto, the default value is auto"
      	"_px_bloom_filter_group_size": string
      
      	// "specifies whether to allow use some oracle mode features in mysql mode"
      	enable_sql_extension: string
      
      	// "specifies whether to punch whole when free blocks in block_file"
      	"_enable_block_file_punch_hole": string
      
      	// "specifies whether to enable tracing session leak"
      	"_enable_trace_session_leak": string
      
      	// "control if enable fast parser"
      	"_ob_enable_fast_parser": string
      
      	// "The execution interval of the task of maintaining the dependency of the object. Range: [0, 10s]"
      	"_ob_obj_dep_maint_task_interval": string
      
      	// "control if enable encode sort"
      	"_enable_newsort": string
      
      	// "limits the total number of (namespace, attribute) pairs used by all application contexts in the user session."
      	"_session_context_size": int & >=0 & <=2147483647
      
      	// "parallel query sampling for base objects (100000 = 100%)"
      	"_px_object_sampling": int & >=1 & <=100000
      
      	// "the waiting time after the first judgment failure of strong reading on followerRange: [0ms, +∞)"
      	"_follower_snapshot_read_retry_duration": string
      
      	// "specifies default auto-increment mode, default is 'order'"
      	default_auto_increment_mode: string
      
      	// "persistent control information for full-link trace"
      	"_trace_control_info": string
      
      	// "In the full link diagnosis, control the frequency of printing traces to the log (unit is ppm, parts per million)."
      	"_print_sample_ppm": int & >=0 & <=1000000
      
      	// "max time spend on retry caused by leader swith or network disconnectionRange: [0ms, +∞)"
      	ob_query_switch_leader_retry_timeout: string
      
      	// "specifies whether to create table as extended rowid mode or not"
      	default_enable_extended_rowid: string
      
      	// "specifies whether SQL serial network is turned on. Turned on to support mysql_send_long_dataThe default value is FALSE. Value: TRUE: turned on FALSE: turned off"
      	"_enable_new_sql_nio": string
      
      	// "enable use das if the sql statement has variable assignment"
      	"_enable_var_assign_use_das": string
      
      	// "Enable or disable QUERY_RESPONSE_TIME statistics collectingThe default value is False. Value: TRUE: turned on FALSE: turned off"
      	query_response_time_stats: string
      
      	// "Flush QUERY_RESPONSE_TIME table and re-read query_response_time_range_baseThe default value is False. Value: TRUE: trigger flush FALSE: do not trigger"
      	query_response_time_flush: string
      
      	// "Select base of log for QUERY_RESPONSE_TIME ranges. WARNING: variable change takes affect only after flush.The default value is False. Value: TRUE: trigger flush FALSE: do not trigger"
      	query_response_time_range_base: int & >=2 & <=10000
      
      	// "The timeout before automatically degrading when arbitration member exists. Range: [3s,+∞]"
      	arbitration_timeout: string
      
      	// "When the hold of observer tenant is over the system_memory, print ERROR with False, or WARN with True"
      	"_ignore_system_memory_over_limit_error": string
      
      	// "when use ob_asan, user can specifies whether to allow ObAsanAllocator(default is ObAllocator as allocator of MemoryContext"
      	enable_asan_for_memory_context: string
      
      	// "the number of threads for sql login request. Range: [0, 32] in integer, 0 stands for use default thread count defined in TG.the default thread count for login request in TG is normal:6 mini-mode:2"
      	sql_login_thread_count: int & >=0 & <=32
      
      	// "the number of threads for sql login request of each tenant. Range: [0, 32] in integer, 0 stands for unit_min_cpu"
      	tenant_sql_login_thread_count: int & >=0 & <=32
      
      	// "the number of mysql I/O threads for a tenant. Range: [0, 64] in integer, 0 stands for unit_min_cpu"
      	tenant_sql_net_thread_count: int & >=0 & <=64
      
      	// "the number of global mysql I/O threads. Range: [0, 64] in integer, default value is 0, 0 stands for old value GCONF.net_thread_count"
      	sql_net_thread_count: int & >=0 & <=64
      
      	// "Dispatch mysql request to each tenant with True, or disable with False"
      	"_enable_tenant_sql_net_thread": string
      
      	// "This parameter will store the mapping of endpoint and tenant"
      	"_endpoint_tenant_mapping": string
      
      	// "protect unfreed objects while deletes tenant"
      	"_enable_tenant_leak_memory_protection": string
      
      	// "the timeout for backup/migrate advance checkpoint Range: [10s,180m]"
      	"_advance_checkpoint_timeout": string
      
      	// "transfer start status rpc check some status ready timeout, Range [1ms,600s]. The default value is 10s"
      	"_transfer_start_rpc_timeout": string
      
      	// "transfer finish transaction timeout, Range [1s,600s]. The default value is 10s"
      	"_transfer_finish_trans_timeout": string
      
      	// "transfer start transaction timeout, Range [1ms,600s]. The default value is 1s"
      	"_transfer_start_trans_timeout": string
      
      	// "the number of transfer start retry. Range: [0, 64] in integer"
      	"_transfer_start_retry_count": int & >=0 & <=64
      
      	// "transfer service wakeup interval in errsim modeRange: [1s, 5m]"
      	"_transfer_service_wakeup_interval": string
      
      	// "transaction timeout for locking and unlocking transfer taskRange: [30s, +∞)"
      	"_transfer_process_lock_tx_timeout": string
      
      	// "Threshold for the count of tablets that can be processed by a transfer taskRange: (0, 100]"
      	"_transfer_task_tablet_count_threshold": int & >=0 & <=100
      
      	// "Specifies whether support transfer active tx"
      	"_enable_transfer_active_tx": string
      
      	// "data dictionary dump to log(SYS LS) intervalRange: (0s,+∞)"
      	dump_data_dictionary_to_log_interval: string
      
      	// "when set to false, cgroup will not init; when set to true but cgroup root dir is not ready, print ERROR"
      	enable_cgroup: string
      
      	// "specify whether the user defined rewrite rules are enabled. Value: True: enable  False: disable"
      	enable_user_defined_rewrite_rules: string
      
      	// "time interval for auto periodic flush plan cache. Range: [0s, +∞)"
      	"_ob_plan_cache_auto_flush_interval": string
      
      	// "Enable or disable direct path load"
      	"_ob_enable_direct_load": string
      
      	// "enables skew handling for parallel joins. The  default value is True."
      	"_px_join_skew_handling": string
      
      	// "sets minimum frequency(%) for skewed value for parallel joins. Range: [1, 100] in integer"
      	"_px_join_skew_minfreq": int & >=1 & <=100
      
      	// "enables protocol layer diagnosis. The default value is False."
      	"_enable_protocol_diagnose": string
      
      	// "enable SQLs of transaction routed to any servers in the cluster on demand"
      	"_enable_transaction_internal_routing": string
      
      	// "load the engine that meet the security classification requirement to encrypt data.  default NONE"
      	"_load_tde_encrypt_engine": string
      
      	// "the IP address of the machine on which the ObServer will be installed"
      	local_ip: string
      
      	// "the unique id that been assigned by rootservice for each observer in cluster, default: 0 (invalid id), Range: [1, 18446744073709551615]"
      	observer_id: int & >=1 & <=18446744073709551615
      
      	// "pipeline table function result set memory size limit. default 524288000 (500M), Range: [1024,18446744073709551615]"
      	"_pipelined_table_function_memory_limit": int & >=1024 & <=18446744073709551615
      
      	// "Specifies whether balance should actively kill transaction"
      	"_enable_balance_kill_transaction": string
      
      	// "the time given to the transaction to execute when do balancebefore it will be killed. Range: [1ms, 60s]"
      	"_balance_kill_transaction_threshold": string
      
      	// "the threshold for waiting time after killing transactions until they end.Range: [10ms, 60s]"
      	"_balance_wait_killing_transaction_end_threshold": string
      
      	// "Enable the fast reclaim function through PX tasks deteting for survival by detect manager. The default value is True."
      	"_enable_px_fast_reclaim": string
      
      	// "specifies whether to forbid non-reserved user to modify reserved users"
      	"_enable_reserved_user_dcl_restriction": string
      
      	// "specifies rpc client authentication method. NONE: without authentication. SSL_NO_ENCRYPT: authentication by SSL handshake but not encrypt the communication channel. SSL_IO: authentication by SSL handshake and encrypt the communication channel"
      	rpc_client_authentication_method: string
      
      	// "specifies rpc server authentication method. ALL: support all authentication methods. NONE: without authentication. SSL_NO_ENCRYPT: authentication by SSL handshake but not encrypt the communication channel. SSL_IO: authentication by SSL handshake and encrypt the communication channel"
      	rpc_server_authentication_method: string
      
      	// "Decide whether to let the backtrace function take effect"
      	"_enable_backtrace_function": string
      
      	// "WITH subquery transformation,0: optimizer,1: materialize,2: inline"
      	"_with_subquery": int & >=0 & <=2
      
      	// "OLAP API generates WITH clause"
      	"_xsolapi_generate_with_clause": string
      
      	// "enable group by placement transform rule"
      	"_optimizer_group_by_placement": string
      
      	// "time interval for waiting other servers to refresh schema after parallel ddl is done"
      	"_wait_interval_after_parallel_ddl": string
      
      	// "size of clog files that a replica lag behind leader to trigger rebuild, 0 means never trigger rebuild on purpose. Range: [0, +∞)"
      	"_rebuild_replica_log_lag_threshold": string
      
      	// "Enable extract query range optimization for in predicate"
      	"_enable_in_range_optimization": string
      
      	// "Force 500 memory for explicit allocation"
      	"_force_explict_500_malloc": string
      
      	// "to limit the memory consumption for the query range optimizer. Range: [16M,1G]"
      	range_optimizer_max_mem_size: string
      
      	// "the time interval between the schedules of schema memory recycle task. 0 means only turn off gc current allocator, and other schema memory recycle task's interval will be 15mins. Range [0s,)"
      	"_schema_memory_recycle_interval": string
      
      	// "specifies whether allowed to limit the memory of tenant 500"
      	"_enable_system_tenant_memory_limit": string
      
      	// "specifies the limit mode for the memory hold of system tenant, 0: not limit the memory hold of system tenant, 1: only limit the DEFAULT_CTX_ID memory of system tenant, 2: besides limit the DEFAULT_CTX_ID memory, the total hold of system tenant is also limited."
      	"_system_tenant_limit_mode": int & >=0 & <=2
      
      	// "force malloc even if tenant does not exist in observer"
      	"_force_malloc_for_absent_tenant": string
      
      	// "threshold of dynamic worker works"
      	"_stall_threshold_for_dynamic_worker": string
      
      	// "enable improved costing of index access using in-list(s)"
      	"_optimizer_better_inlist_costing": string
      
      	// "enable/disable index skip scan"
      	"_optimizer_skip_scan_enabled": string
      
      	// "the wait timeout in ls complete migration phase"
      	"_ls_migration_wait_completing_timeout": string
      
      	// "enable the column store format in storage engine"
      	"_enable_column_store": string
      
      	// "enable the skip index in storage engine"
      	"_enable_skip_index": string
      
      	// "enable limiting memory in prefetch for single query"
      	"_enable_prefetch_limiting": string
      
      	// "set leak check mod in storage"
      	"_storage_leak_check_mod": string
      
      	// "the number of tablet replica info sent by on rpc for ha. Range: [0, +∞) in integer"
      	"_ha_tablet_info_batch_count": int & >=0
      
      	// "the rpc timeout for storage high availability. Range:[0, 120s]"
      	"_ha_rpc_timeout": string
      
      	// "enable t3m tablet leak checker. The default value is False"
      	"_enable_trace_tablet_leak": string
      
      	// "ttl background task working time durationbegin_time or end_time in Range, e.g., [23:00:00, 24:00:00]"
      	kv_ttl_duty_duration: string
      
      	// "the time to recycle ttl history. Range: [1d, 180d]"
      	kv_ttl_history_recycle_interval: string
      
      	// "specifies whether ttl task is enbled"
      	enable_kv_ttl: string
      
      	// "the current work thread score of ttl thread. Range: [0,100] in integer. Especially, 0 means default value"
      	ttl_thread_score: int & >=0 & <=100
      
      	// "SQL SSL control options, used to specify the minimum SSL/TLS version number. values: none, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3"
      	sql_protocol_min_tls_version: string
      
      	// "_obkv_feature_mode is a option list to control specified OBKV features on/off."
      	"_obkv_feature_mode": string
      
      	// "Enable extract query range for not in predicate"
      	"_enable_range_extraction_for_not_in": string
      
      	// "adjust costing of index scan"
      	optimizer_index_cost_adj: int & >=0 & <=100
      
      	...
      }
      
      configuration: #OBParameters & {
      
      }
      

  ##  require db instance restart
  ## staticParameters
  staticParameters:
      - None
  dynamicParameters:

  ## define immutable parameter list, this feature is not currently supported.
  immutableParameters:

  # configuration file format
  formatterConfig:
    format: properties
---
# Source: ob-ce/templates/configconstraint.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ConfigConstraint
metadata:
  name: ob-ce-env-cc
  labels:
    helm.sh/chart: ob-ce-0.8.1
    app.kubernetes.io/name: ob-ce
    app.kubernetes.io/instance: my-ob-ce
    app.kubernetes.io/version: "4.2.0.0-100010032023083021"
    app.kubernetes.io/managed-by: Helm
spec:
  cfgSchemaTopLevelName: OBPortEnvParameters
  configurationSchema:
    cue: |-
      #OBPortEnvParameters: {
      	COMP_MYSQL_PORT:   int & >=1
      	COMP_RPC_PORT:     int & >=1
      	SERVICE_PORT:      int & >=1
      	MANAGER_PORT:      int & >=1
      	CONF_MANAGER_PORT: int & >=1
      	OB_SERVICE_PORT:   int & >=1
      }
      
      configuration: #OBPortEnvParameters & {
      }
      
  immutableParameters:
      - COMP_MYSQL_PORT
      - COMP_RPC_PORT
      - SERVICE_PORT
      - MANAGER_PORT
      - CONF_MANAGER_PORT
      - OB_SERVICE_PORT

  # mysql configuration file format
  formatterConfig:
    format: props-plus
---
# Source: ob-ce/templates/grafana/configmap-dashboards.yaml
apiVersion: v1
kind: ConfigMapList
items:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: my-ob-ce-grafana-oceanbase
    labels:
      grafana_dashboard: "1"
      app: ob-ce-grafana
      helm.sh/chart: ob-ce-0.8.1
      app.kubernetes.io/name: ob-ce
      app.kubernetes.io/instance: my-ob-ce
      app.kubernetes.io/version: "4.2.0.0-100010032023083021"
      app.kubernetes.io/managed-by: Helm
  data:
    oceanbase.json: "{\n  \"annotations\": {\n    \"list\": [\n      {\n        \"builtIn\": 1,\n        \"datasource\": {\n          \"type\": \"datasource\",\n          \"uid\": \"grafana\"\n        },\n        \"enable\": true,\n        \"hide\": true,\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n        \"name\": \"Annotations \u0026 Alerts\",\n        \"target\": {\n          \"limit\": 100,\n          \"matchAny\": false,\n          \"tags\": [],\n          \"type\": \"dashboard\"\n        },\n        \"type\": \"dashboard\"\n      }\n    ]\n  },\n  \"description\": \"oceanbase metrics collected from oceanbase using obagent\",\n  \"editable\": true,\n  \"fiscalYearStartMonth\": 0,\n  \"gnetId\": 15215,\n  \"graphTooltip\": 0,\n  \"id\": 33,\n  \"links\": [],\n  \"liveNow\": false,\n  \"panels\": [\n    {\n      \"collapsed\": false,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"id\": 2,\n      \"panels\": [],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"SQL and Session\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"reqps\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 1\n      },\n      \"id\": 4,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"40002\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40004\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40006\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40008\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"qps {{$group}}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"QPS\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"µs\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 1\n      },\n      \"id\": 6,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"(sum(rate(ob_sysstat{stat_id=\\\"40003\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40005\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40007\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40009\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group))\\n/\\n(sum(rate(ob_sysstat{stat_id=\\\"40002\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40004\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40006\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40008\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"40000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group))\",\n          \"interval\": \"\",\n          \"legendFormat\": \"sql latency {{$group}}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Sql Latency\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"reqps\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 9\n      },\n      \"id\": 10,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"40012\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"distributed {{ $group }}\",\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"40010\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"legendFormat\": \"local {{ $group }}\",\n          \"refId\": \"B\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"40011\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"legendFormat\": \"remote {{$group}}\",\n          \"refId\": \"C\"\n        }\n      ],\n      \"title\": \"SQL plan\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 9\n      },\n      \"id\": 8,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(ob_active_session_num{ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"sessions {{ $group }}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Sessions\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"collapsed\": true,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 17\n      },\n      \"id\": 28,\n      \"panels\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"reqps\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 2\n          },\n          \"id\": 59,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"30005\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"tps {{$group}}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"TPS\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"µs\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 2\n          },\n          \"id\": 60,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"30006\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_sysstat{stat_id=\\\"30005\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"trans rt {{$group}}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Transaction Latency\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"reqps\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 10\n          },\n          \"id\": 62,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"30002\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"trans log {{$group}}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Transaction Log\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"Bps\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 10\n          },\n          \"id\": 64,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"80057\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"trans log {{$group}}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Trans Log Throughput\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"µs\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 18\n          },\n          \"id\": 66,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"30000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_sysstat{stat_id=\\\"30001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"sync latency {{ $group }}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Transaction Log Sync Latency\",\n          \"type\": \"timeseries\"\n        }\n      ],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Transaction\",\n      \"type\": \"row\"\n    },\n    {\n      \"collapsed\": false,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 18\n      },\n      \"id\": 24,\n      \"panels\": [],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Resource\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"percentunit\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 19\n      },\n      \"id\": 38,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(ob_sysstat{stat_id=\\\"140006\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group) / sum(ob_sysstat{stat_id=\\\"140005\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"cpu util {{$group}}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Cpu Utilization\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"percentunit\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 19\n      },\n      \"id\": 40,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(ob_sysstat{stat_id=\\\"130001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group) / sum(ob_sysstat{stat_id=\\\"130004\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"memstore percent {{$group}}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Memstore Percent\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"decbytes\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 27\n      },\n      \"id\": 42,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(ob_sysstat{stat_id=\\\"130004\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"limit {{$group}}\",\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(ob_sysstat{stat_id=\\\"130001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"legendFormat\": \"total {{$group}}\",\n          \"refId\": \"B\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(ob_sysstat{stat_id=\\\"130000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"legendFormat\": \"active {{$group}}\",\n          \"refId\": \"C\"\n        }\n      ],\n      \"title\": \"Memstore Size\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"cps\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 27\n      },\n      \"id\": 44,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"read {{$group}}\",\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60003\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"legendFormat\": \"write {{$group}}\",\n          \"refId\": \"B\"\n        }\n      ],\n      \"title\": \"IOPS\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"binBps\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 35\n      },\n      \"id\": 46,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60002\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"read {{$group}}\",\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60005\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"legendFormat\": \"write {{$group}}\",\n          \"refId\": \"B\"\n        }\n      ],\n      \"title\": \"IO Throughput\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"graph\": false,\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"smooth\",\n            \"lineWidth\": 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"µs\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 35\n      },\n      \"id\": 48,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_sysstat{stat_id=\\\"60000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"read {{$group}}\",\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60004\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_sysstat{stat_id=\\\"60003\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"legendFormat\": \"write {{$group}}\",\n          \"refId\": \"B\"\n        }\n      ],\n      \"title\": \"IO Latency\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"collapsed\": true,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 43\n      },\n      \"id\": 32,\n      \"panels\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"decbytes\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 4\n          },\n          \"id\": 51,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(ob_cache_size_bytes{cache_name=\\\"user_row_cache\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"row_cache {{$group}}\",\n              \"refId\": \"A\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(ob_cache_size_bytes{cache_name=\\\"user_block_cache\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n              \"hide\": false,\n              \"interval\": \"\",\n              \"legendFormat\": \"block_cache {{$group}}\",\n              \"refId\": \"B\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(ob_plan_cache_memory_bytes{ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}) by ($group)\",\n              \"hide\": false,\n              \"interval\": \"\",\n              \"legendFormat\": \"plan_cache {{$group}}\",\n              \"refId\": \"C\"\n            }\n          ],\n          \"title\": \"Cache Size\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"percentunit\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 4\n          },\n          \"id\": 52,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"1 / (1 + sum(rate(ob_sysstat{stat_id=\\\"50001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_sysstat{stat_id=\\\"50000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group))\",\n              \"interval\": \"\",\n              \"legendFormat\": \"row_cache {{$group}}\",\n              \"refId\": \"A\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \" 1 / (1 + sum(rate(ob_sysstat{stat_id=\\\"50009\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_sysstat{stat_id=\\\"50008\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group))\",\n              \"hide\": false,\n              \"interval\": \"\",\n              \"legendFormat\": \"block_cache {{$group}}\",\n              \"refId\": \"B\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_plan_cache_hit_total{ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_plan_cache_access_total{ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"hide\": false,\n              \"interval\": \"\",\n              \"legendFormat\": \"plan_cache {{$group}}\",\n              \"refId\": \"C\"\n            }\n          ],\n          \"title\": \"Cache Hit Ratio\",\n          \"type\": \"timeseries\"\n        }\n      ],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Cache\",\n      \"type\": \"row\"\n    },\n    {\n      \"collapsed\": true,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 44\n      },\n      \"id\": 18,\n      \"panels\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"description\": \"request dequeue count\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"reqps\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 5\n          },\n          \"id\": 20,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"20001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"queue {{ $group }}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Queue\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"description\": \"request queue time\",\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"µs\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 5\n          },\n          \"id\": 22,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"20002\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_sysstat{stat_id=\\\"20001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"queue time {{ $group }}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Queue Time\",\n          \"type\": \"timeseries\"\n        }\n      ],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Queue\",\n      \"type\": \"row\"\n    },\n    {\n      \"collapsed\": true,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 45\n      },\n      \"id\": 30,\n      \"panels\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"cps\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 6\n          },\n          \"id\": 55,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60021\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"succ {{$group}}\",\n              \"refId\": \"A\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60022\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"hide\": false,\n              \"interval\": \"\",\n              \"legendFormat\": \"fail {{$group}}\",\n              \"refId\": \"B\"\n            }\n          ],\n          \"title\": \"Lock Wait\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"µs\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 6\n          },\n          \"id\": 56,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"60023\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / (sum(rate(ob_sysstat{stat_id=\\\"60021\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"60022\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group))\",\n              \"interval\": \"\",\n              \"legendFormat\": \"wait_time {{$group}}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Lock Wait Time\",\n          \"type\": \"timeseries\"\n        }\n      ],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Lock\",\n      \"type\": \"row\"\n    },\n    {\n      \"collapsed\": true,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 46\n      },\n      \"id\": 26,\n      \"panels\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"pps\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 7\n          },\n          \"id\": 34,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"10001\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"rpc in {{$group}}\",\n              \"refId\": \"A\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_sysstat{stat_id=\\\"10003\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"hide\": false,\n              \"interval\": \"\",\n              \"legendFormat\": \"rpc_out {{$group}}\",\n              \"refId\": \"B\"\n            }\n          ],\n          \"title\": \"Rpc\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"s\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 7\n          },\n          \"id\": 36,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"(sum(rate(ob_sysstat{stat_id=\\\"10005\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"10006\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)) / sum(rate(ob_sysstat{stat_id=\\\"10000\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"rpc in Latency {{$group}}\",\n              \"refId\": \"A\"\n            },\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"(sum(rate(ob_sysstat{stat_id=\\\"10005\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) + sum(rate(ob_sysstat{stat_id=\\\"10006\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)) / sum(rate(ob_sysstat{stat_id=\\\"10002\\\",ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"hide\": false,\n              \"interval\": \"\",\n              \"legendFormat\": \"rpc out latency {{$group}}\",\n              \"refId\": \"B\"\n            }\n          ],\n          \"title\": \"Rpc Latency\",\n          \"type\": \"timeseries\"\n        }\n      ],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Rpc\",\n      \"type\": \"row\"\n    },\n    {\n      \"collapsed\": true,\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 47\n      },\n      \"id\": 16,\n      \"panels\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"cps\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 8\n          },\n          \"id\": 12,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_waitevent_wait_total{ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"wait event {{$group}}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Wait Event\",\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"graph\": false,\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineInterpolation\": \"smooth\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"s\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 8,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 8\n          },\n          \"id\": 14,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"type\": \"prometheus\",\n                \"uid\": \"prometheus\"\n              },\n              \"exemplar\": true,\n              \"expr\": \"sum(rate(ob_waitevent_wait_seconds_total{ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group) / sum(rate(ob_waitevent_wait_total{ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\",tenant_name=~\\\"$tenant_name\\\"}[$__rate_interval])) by ($group)\",\n              \"interval\": \"\",\n              \"legendFormat\": \"wait time {{$group}}\",\n              \"refId\": \"A\"\n            }\n          ],\n          \"title\": \"Wait Time\",\n          \"type\": \"timeseries\"\n        }\n      ],\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Wait Event\",\n      \"type\": \"row\"\n    }\n  ],\n  \"refresh\": \"5s\",\n  \"schemaVersion\": 37,\n  \"style\": \"dark\",\n  \"tags\": [\n    \"apps\",\n    \"oceanbase\",\n    \"db\"\n  ],\n  \"templating\": {\n    \"list\": [\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"default\",\n          \"value\": \"default\"\n        },\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"multi\": false,\n        \"name\": \"datasource\",\n        \"options\": [],\n        \"query\": \"prometheus\",\n        \"queryValue\": \"\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"type\": \"datasource\"\n      },\n      {\n        \"allValue\": \"\",\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"myob12xx-ob-bundle-0\",\n          \"value\": \"myob12xx-ob-bundle-0\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"prometheus\"\n        },\n        \"definition\": \"label_values(ob_cluster_name)\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"multi\": false,\n        \"name\": \"obcluster\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(ob_cluster_name)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"All\",\n          \"value\": \"$__all\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"prometheus\"\n        },\n        \"definition\": \"label_values({ob_cluster_name=~\\\"$obcluster\\\"}, obzone)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"multi\": false,\n        \"name\": \"obzone\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values({ob_cluster_name=~\\\"$obcluster\\\"}, obzone)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"All\",\n          \"value\": \"$__all\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"prometheus\"\n        },\n        \"definition\": \"label_values({ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\"}, svr_ip)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"multi\": false,\n        \"name\": \"observer\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values({ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\"}, svr_ip)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"All\",\n          \"value\": \"$__all\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"prometheus\"\n        },\n        \"definition\": \"label_values({ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\"}, tenant_name)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"multi\": false,\n        \"name\": \"tenant_name\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values({ob_cluster_name=~\\\"$obcluster\\\",obzone=~\\\"$obzone\\\",svr_ip=~\\\"$observer\\\"}, tenant_name)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"current\": {\n          \"selected\": true,\n          \"text\": \"tenant_name\",\n          \"value\": \"tenant_name\"\n        },\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"multi\": false,\n        \"name\": \"group\",\n        \"options\": [\n          {\n            \"selected\": false,\n            \"text\": \"ob_cluster_name\",\n            \"value\": \"ob_cluster_name\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"obzone\",\n            \"value\": \"obzone\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"svr_ip\",\n            \"value\": \"svr_ip\"\n          },\n          {\n            \"selected\": true,\n            \"text\": \"tenant_name\",\n            \"value\": \"tenant_name\"\n          }\n        ],\n        \"query\": \"ob_cluster_name, obzone, svr_ip, tenant_name\",\n        \"queryValue\": \"\",\n        \"skipUrlSync\": false,\n        \"type\": \"custom\"\n      }\n    ]\n  },\n  \"time\": {\n    \"from\": \"now-5m\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {},\n  \"timezone\": \"\",\n  \"title\": \"APPS / OceanBase Metrics\",\n  \"uid\": \"oceanbase\",\n  \"version\": 1,\n  \"weekStart\": \"\"\n}"
---
# Source: ob-ce/templates/componentdefinition.yaml
apiVersion: v1
kind: List
metadata:
items:
- apiVersion: apps.kubeblocks.io/v1alpha1
  kind: ComponentDefinition
  metadata:
    name: ob-ce
    labels:
      helm.sh/chart: ob-ce-0.8.1
      app.kubernetes.io/name: ob-ce
      app.kubernetes.io/instance: my-ob-ce
      app.kubernetes.io/version: "4.2.0.0-100010032023083021"
      app.kubernetes.io/managed-by: Helm
  spec:
    provider: &obprovider community
    serviceKind: &obsvckind oceanbase
    serviceVersion: &obver 4.2.0
    description: &obdesc "Unlimited scalable distributed database for data-intensive transactional and real-time operational analytics workloads, with ultra-fast performance that has once achieved world records in the TPC-C benchmark test."
    services: &observices
      - name: oceanbase
        serviceName: oceanbase
        spec:
          ports:
            - name: sql
              port: 2881
              targetPort: sql
            - name: rpc
              port: 2882
              targetPort: rpc
    updateStrategy: Serial
    configs: &obconfigs
  #    - name: oceanbase-init-config
  #      templateRef: oceanbase-init-config
  #      volumeName: oceanbase-init-config
  #      namespace: default
  #      defaultMode: 0555
      - name: ob-ce-sysvars
        templateRef: ob-ce-sysvars
        volumeName: ob-ce-sysvars
        constraintRef: ob-ce-sysvars-cc
        namespace: default
        defaultMode: 0555
      - name: ob-ce-config
        templateRef: ob-ce-config
        volumeName: ob-ce-config
        constraintRef: ob-ce-parameters-cc
        namespace: default
        defaultMode: 0555
    scripts: &obscripts
      - name: ob-ce-scripts
        templateRef: ob-ce-scripts
        namespace: default
        volumeName: scripts
        defaultMode: 0555
    runtime: &obruntime
      terminationGracePeriodSeconds: 60
      containers:
        - name: observer-container
          command:
            - bash
            - -c
            - |
              /scripts/entrypoint.sh
          image: docker.io/apecloud/oceanbase:4.2.0.0-100010032023083021
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2881
              name: sql
              protocol: TCP
            - containerPort: 2882
              name: rpc
              protocol: TCP
          readinessProbe:
            failureThreshold: 10
            initialDelaySeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - cat
                - /tmp/ready
          volumeMounts:
            - mountPath: /home/admin/data-file
              name: data-file
            - mountPath: /home/admin/data-log
              name: data-log
            - mountPath: /home/admin/log
              name: log
            - mountPath: /home/admin/workdir
              name: workdir
            - name: scripts
              mountPath: /scripts
            - name: oceanbase-config
              mountPath: /kb-config
            - name: oceanbase-sysvars
              mountPath: /opt/oceanbase/sysvars
          workingDir: /home/admin/workdir
          env:
            - name: LD_LIBRARY_PATH
              value: /home/admin/oceanbase/lib
            - name: CLUSTER_NAME
              value: "$(KB_CLUSTER_COMP_NAME)"
            - name: OB_HOME_DIR
              value: "/home/admin/workdir"
            - name: OB_SERVICE_PORT
              value: "2881"
            - name: AUDITLOG_USER
              value: "root"
        - name: metrics
          image: docker.io/apecloud/obagent:4.2.1-100000092023101717
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -c
            - |
              /scripts/setupmetrics.sh
          env:
            - name: OB_MONITOR_STATUS
              value: active
            - name: CLUSTER_NAME
              value: "$(KB_CLUSTER_COMP_NAME)"
            - name: CLUSTER_ID
              value: "1"
            - name: MONITOR_USER
              value: "root"
            - name: MONITOR_PASSWORD
              value: ""
            - name: SERVICE_PORT
              value: "8088"
            - name: OB_SERVICE_PORT
              value: "2881"
          ports:
            - containerPort: 8088
              name: http
              protocol: TCP
            - containerPort: 8089
              name: pprof
              protocol: TCP
  #        readinessProbe:
  #          failureThreshold: 3
  #          httpGet:
  #            path: /metrics/stat
  #            port: 8088
  #            scheme: HTTP
  #          initialDelaySeconds: 5
  #          periodSeconds: 2
  #          successThreshold: 1
  #          timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: "200m"
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: kb-tools
              mountPath: /kb_tools
            - name: metricslog
              mountPath: /home/admin/obagent/log
          workingDir: /home/admin/obagento
      volumes:
        - name: metricslog
          emptyDir: {}
- apiVersion: apps.kubeblocks.io/v1alpha1
  kind: ComponentDefinition
  metadata:
    name: ob-ce-hostnetwork
    labels:
      helm.sh/chart: ob-ce-0.8.1
      app.kubernetes.io/name: ob-ce-hostnetwork
      app.kubernetes.io/instance: my-ob-ce
      app.kubernetes.io/version: "4.2.0.0-100010032023083021"
      app.kubernetes.io/managed-by: Helm
  spec:
    provider: *obprovider
    serviceKind: *obsvckind
    serviceVersion: *obver
    description: *obdesc
    services: *observices
    updateStrategy: Serial
    configs: &obhostconfigs
  #    - name: oceanbase-init-config
  #      templateRef: oceanbase-init-config
  #      volumeName: oceanbase-init-config
  #      namespace: default
  #      defaultMode: 0555
      - name: ob-ce-sysvars
        templateRef: ob-ce-sysvars
        volumeName: ob-ce-sysvars
        constraintRef: ob-ce-sysvars-cc
        namespace: default
        defaultMode: 0555
      - name: ob-ce-config
        templateRef: ob-ce-config
        volumeName: ob-ce-config
        constraintRef: ob-ce-parameters-cc
        namespace: default
        defaultMode: 0555
      - name: ob-ce-inject-env
        templateRef: ob-ce-inject-env
        volumeName: ob-ce-inject-env
        constraintRef: ob-ce-env-cc
        namespace: default
        defaultMode: 0555
        asEnvFrom:
          - observer-container
          - metrics
          - config-manager
    scripts: *obscripts
    runtime: &obhostruntime
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: 60
      containers:
        - name: observer-container
          command:
            - bash
            - -c
            - |
              /scripts/entrypoint.sh
          image: docker.io/apecloud/oceanbase:4.2.0.0-100010032023083021
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 88
              name: sql
              protocol: TCP
            - containerPort: 99
              name: rpc
              protocol: TCP
          readinessProbe:
            failureThreshold: 10
            initialDelaySeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - cat
                - /tmp/ready
          volumeMounts:
            - mountPath: /home/admin/data-file
              name: data-file
            - mountPath: /home/admin/data-log
              name: data-log
            - mountPath: /home/admin/log
              name: log
            - mountPath: /home/admin/workdir
              name: workdir
            - name: scripts
              mountPath: /scripts
            - name: oceanbase-config
              mountPath: /kb-config
            - name: oceanbase-sysvars
              mountPath: /opt/oceanbase/sysvars
          workingDir: /home/admin/workdir
          env:
            - name: LD_LIBRARY_PATH
              value: /home/admin/oceanbase/lib
            - name: CLUSTER_NAME
              value: "$(KB_CLUSTER_COMP_NAME)"
            - name: OB_HOME_DIR
              value: "/home/admin/workdir"
            - name: AUDITLOG_USER
              value: "root"
        - name: metrics
          image: docker.io/apecloud/obagent:4.2.1-100000092023101717
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -c
            - |
              /scripts/setupmetrics.sh
          env:
            - name: OB_MONITOR_STATUS
              value: active
            - name: CLUSTER_NAME
              value: "$(KB_CLUSTER_COMP_NAME)"
            - name: CLUSTER_ID
              value: "1"
            - name: MONITOR_USER
              value: "root"
            - name: MONITOR_PASSWORD
              value: ""
  #          - name: SERVICE_PORT
  #            value: "8088"
  #          - name: OB_SERVICE_PORT
  #            value: "2881"
          ports:
            - containerPort: 60
              name: http
              protocol: TCP
            - containerPort: 61
              name: pprof
              protocol: TCP
            - containerPort: 62
              name: config-manager
              protocol: TCP
  #        readinessProbe:
  #          failureThreshold: 3
  #          httpGet:
  #            path: /metrics/stat
  #            port: http
  #            scheme: HTTP
  #          initialDelaySeconds: 5
  #          periodSeconds: 2
  #          successThreshold: 1
  #          timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: "200m"
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: kb-tools
              mountPath: /kb_tools
            - name: metricslog
              mountPath: /home/admin/obagent/log
          workingDir: /home/admin/obagento
      volumes:
        - name: metricslog
          emptyDir: {}
- apiVersion: apps.kubeblocks.io/v1alpha1
  kind: ComponentDefinition
  metadata:
    name: ob-ce-repl
    labels:
      helm.sh/chart: ob-ce-0.8.1
      app.kubernetes.io/name: ob-ce
      app.kubernetes.io/instance: my-ob-ce
      app.kubernetes.io/version: "4.2.0.0-100010032023083021"
      app.kubernetes.io/managed-by: Helm
  spec:
    provider: *obprovider
    serviceKind: *obsvckind
    serviceVersion: *obver
    description: *obdesc
    services: *observices
    updateStrategy: Serial
    configs: *obconfigs
    scripts: *obscripts
    roles: &obroles
      - name: primary
        serviceable: true
        writable: true
        votable: true
      - name: standby
        serviceable: true
        writable: false
        votable: true
    lifecycleActions: &oblifecycle
      roleProbe:
        builtinHandler: oceanbase
        failureThreshold: 3
        periodSeconds: 2
        timeoutSeconds: 2
    labels: &oblabels
      kubeblocks.io/ready-without-primary: "true"
    runtime: *obruntime
- apiVersion: apps.kubeblocks.io/v1alpha1
  kind: ComponentDefinition
  metadata:
    name: ob-ce-repl-host
    labels:
      helm.sh/chart: ob-ce-0.8.1
      app.kubernetes.io/name: ob-ce-hostnetwork
      app.kubernetes.io/instance: my-ob-ce
      app.kubernetes.io/version: "4.2.0.0-100010032023083021"
      app.kubernetes.io/managed-by: Helm
  spec:
    provider: *obprovider
    serviceKind: *obsvckind
    serviceVersion: *obver
    description: *obdesc
    services: *observices
    updateStrategy: Serial
    configs: *obhostconfigs
    scripts: *obscripts
    roles: *obroles
    lifecycleActions: *oblifecycle
    labels: *oblabels
    runtime: *obhostruntime
