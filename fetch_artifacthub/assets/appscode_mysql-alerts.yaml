---
# Source: mysql-alerts/templates/alert.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: my-mysql-alerts
  namespace: default
  labels:
    helm.sh/chart: mysql-alerts-v2023.05.09
    app.kubernetes.io/name: mysql-alerts
    app.kubernetes.io/instance: my-mysql-alerts
    app.kubernetes.io/version: "v0.2.0"
    app.kubernetes.io/managed-by: Helm
    release: kube-prometheus-stack
spec:
  groups:
  - name: mysql.database.default.my-mysql-alerts.rules
    rules:
    - alert: MySQLInstanceDown
      expr: mysql_up{job="my-mysql-alerts-stats",namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL instance down (instance {{ $labels.pod }})
        description: "MySQL instance is down on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLServiceDown
      expr: sum by (service) (mysql_up{job="my-mysql-alerts-stats",namespace="default"}) == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL service down (instance {{ $labels.pod }})
        description: "MySQL service is down on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLTooManyConnections
      expr: max_over_time(mysql_global_status_threads_connected{job="my-mysql-alerts-stats",namespace="default"}[1m]) / mysql_global_variables_max_connections{job="my-mysql-alerts-stats",namespace="default"} * 100 > 80
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL too many connections (> 80%) (instance {{ $labels.pod }})
        description: "More than 80% of MySQL connections are in use on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLHighThreadsRunning
      expr: max_over_time(mysql_global_status_threads_running{job="my-mysql-alerts-stats",namespace="default"}[1m]) / mysql_global_variables_max_connections{job="my-mysql-alerts-stats",namespace="default"} * 100 > 60
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL high threads running (> 60%) (instance {{ $labels.pod }})
        description: "More than 60% of MySQL threads are in use on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLSlowQueries
      expr: increase(mysql_global_status_slow_queries{job="my-mysql-alerts-stats",namespace="default"}[1m]) > 0
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL slow queries on (instance {{ $labels.pod }})
        description: "MySQL server mysql has some new slow query.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLInnoDBLogWaits
      expr: rate(mysql_global_status_innodb_log_waits{job="my-mysql-alerts-stats",namespace="default"}[15m]) > 10
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL InnoDB log waits (> 10) (instance {{ $labels.pod }})
        description: "MySQL innodb log writes stalling\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLRestarted
      expr: mysql_global_status_uptime{job="my-mysql-alerts-stats",namespace="default"} < 60
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL restarted (60 second ago) (instance {{ $labels.pod }})
        description: "MySQL restarted\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLHighQPS
      expr: rate(mysql_global_status_queries{job="my-mysql-alerts-stats",namespace="default"}[1m]) > 1000
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL has high queries per second (> 1000) (instance {{ $labels.pod }})
        description: "MySQL has high QPS on (instance {{ $labels.pod }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLHighIncomingBytes
      expr: rate(mysql_global_status_bytes_received{job="my-mysql-alerts-stats",namespace="default"}[1m]) > 1.048576e+06
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL has high incoming bytes second (> 1.048576e+06) (instance {{ $labels.pod }})
        description: "MySQL has high incoming bytes per second on (instance {{ $labels.pod }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLHighOutgoingBytes
      expr: rate(mysql_global_status_bytes_sent{job="my-mysql-alerts-stats",namespace="default"}[1m]) > 1.048576e+06
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL has high outgoing bytes second (> 1.048576e+06) (instance {{ $labels.pod }})
        description: "MySQL has high outgoing bytes per second on (instance {{ $labels.pod }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLTooManyOpenFiles
      expr: max_over_time(mysql_global_status_open_files{job="my-mysql-alerts-stats",namespace="default"}[1m]) / mysql_global_variables_open_files_limit{job="my-mysql-alerts-stats",namespace="default"} * 100 > 80
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL too many opened files (> 80%) (instance {{ $labels.pod }})
        description: "MySQL too many opened files on (instance {{ $labels.pod }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mysql.group.default.my-mysql-alerts.rules
    rules:
    - alert: MySQLHighReplicationDelay
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_apply_time_seconds{job="my-mysql-alerts-stats",namespace="default"}) > 0.5
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Group Replication delay too high ( > 0.5 second) (instance {{ $labels.pod }})
        description: "MySQL Group Replication delay too high {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLHighReplicationTransportTime
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_transport_time_seconds{job="my-mysql-alerts-stats",namespace="default"}) > 0.5
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Group Replication transport time too high ( > 0.5 second) (instance {{ $labels.pod }})
        description: "MySQL Group Replication transport time too high {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLHighReplicationApplyTime
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_apply_time_seconds{job="my-mysql-alerts-stats",namespace="default"}) > 0.5
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Group Replication apply time too high ( > 0.5 second) (instance {{ $labels.pod }})
        description: "MySQL Group Replication apply time too high {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLReplicationHighTransactionTime
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_time_RL_seconds{job="my-mysql-alerts-stats",namespace="default"}) > 0.5
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Group Replication, Transaction time on local queue is too long ( > 0.5 second) (instance {{ $labels.pod }})
        description: "MySQL Group Replication, Transaction time on local queue is too long {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mysql.provisioner.default.my-mysql-alerts.rules
    rules:
    - alert: KubeDBMySQLPhaseNotReady
      expr: kubedb_com_mysql_status_phase{phase="NotReady",app="my-mysql-alerts",namespace="default"} == 1
      for: 1m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: KubeDB MySQL Phase NotReady (mysql {{ $labels.mysql }})
        description: "KubeDB MySQL Phase not ready on {{ $labels.mysql }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMySQLPhaseCritical
      expr: kubedb_com_mysql_status_phase{phase="Critical",app="my-mysql-alerts",namespace="default"} == 1
      for: 15m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: KubeDB MySQL Phase Critical (mysql {{ $labels.mysql }})
        description: "KubeDB MySQL Phase Critical {{ $labels.mysql }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mysql.opsManager.default.my-mysql-alerts.rules
    rules:
    - alert: KubeDBMySQLOpsRequestStatusProgressingToLong
      expr: ops_kubedb_com_mysqlopsrequest_status_phase{phase="Progressing",app="my-mysql-alerts",namespace="default"} == 1
      for: 30m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQLOpsRequest is in progressing status for too long (mysqlopsrequest {{ $labels.mysqlopsrequest }})
        description: "MySQLOpsRequest {{ $labels.mysqlopsrequest }} is in progressing status for too long\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMySQLOpsRequestFailed
      expr: ops_kubedb_com_mysqlopsrequest_status_phase{phase="Failed",app="my-mysql-alerts",namespace="default"} == 1
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQLOpsRequest failed (mysqlopsrequest {{ $labels.mysqlopsrequest }})
        description: "MySQLOpsRequest {{ $labels.mysqlopsrequest }} failed \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mysql.stash.default.my-mysql-alerts.rules
    rules:
    - alert: MySQLStashBackupSessionFailed
      expr: stash_backup_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-mysql-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Stash backup session failed (invoker_name {{ $labels.invoker_name }})
        description: "MySQL Stash backupsession failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLStashRestoreSessionFailed
      expr: stash_restore_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_restoresession_info{target_name="my-mysql-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Stash restore session failed (invoker_name {{ $labels.invoker_name }})
        description: "MySQL Stash restore session failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLStashNoBackupSessionForTooLong
      expr: time() - stash_backup_last_success_time_seconds + on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-mysql-alerts", target_kind="AppBinding", namespace="default"} - 1 > 18000
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Stash no backup for last 18000 second (invoker_name {{ $labels.invoker_name }})
        description: "MySQL Stash no backup for too long {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLStashRepositoryCorrupted
      expr: stash_repository_integrity * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-mysql-alerts", target_kind="AppBinding", namespace="default"}
      for: 5m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Stash repository corrupted (invoker_name {{ $labels.invoker_name }})
        description: "MySQL Stash repository corrupted {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLStashRepositoryStorageRunningLow
      expr: stash_repository_size_bytes * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-mysql-alerts", target_kind="AppBinding", namespace="default"} > 1.073741824e+10
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: MySQL Stash Repository storage more than 1.073741824e+10 byte. (invoker_name {{ $labels.invoker_name }})
        description: "MySQL Stash Repository storage running low {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLStashBackupSessionPeriodTooLong
      expr: stash_backup_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-mysql-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary:  MySQL Stash backup session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "MySQL Stash backup session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MySQLStashRestoreSessionPeriodTooLong
      expr: stash_restore_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_restoresession_info{target_name="my-mysql-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary:  MySQL Stash restore session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "MySQL Stash restore session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mysql.schemaManager.default.my-mysql-alerts.rules
    rules:
    - alert: KubeDBMySQLSchemaPendingForTooLong
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Pending",app="my-mysql-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema pending for too long for (mysqldatabase {{ $labels.mysqldatabase }})
        description: "KubeDB schema pending for too long.\n {{ $labels.mysqldatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMySQLSchemaInProgressForTooLong
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="InProgress",app="my-mysql-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema is in progress for too long for (mysqldatabase {{ $labels.mysqldatabase }})
        description: "KubeDB schema is in progress for too long.\n {{ $labels.mysqldatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMySQLSchemaTerminatingForTooLong
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Terminating",app="my-mysql-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema terminating for too long for (mysqldatabase {{ $labels.mysqldatabase }})
        description: "KubeDB schema terminating for too long.\n {{ $labels.mysqldatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMySQLSchemaFailed
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Failed",app="my-mysql-alerts",app_namespace="default"} == 1
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema failed for (mysqldatabase {{ $labels.mysqldatabase }})
        description: "KubeDB schema failed.\n {{ $labels.mysqldatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMySQLSchemaExpired
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Expired",app="my-mysql-alerts",app_namespace="default"} == 1
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MySQL
        k8s_resource: mysqls
        app: my-mysql-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema expired for (mysqldatabase {{ $labels.mysqldatabase }})
        description: "KubeDB schema expired.\n {{ $labels.mysqldatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
