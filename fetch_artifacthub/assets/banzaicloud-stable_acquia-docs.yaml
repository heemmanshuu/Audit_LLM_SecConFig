---
# Source: acquia-docs/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: SET_IN_DEPLOYMENT_REPO
---
# Source: acquia-docs/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-acquia-docs
  namespace: SET_IN_DEPLOYMENT_REPO
  labels:
    tier: backend
    app.kubernetes.io/name: my-acquia-docs
spec:
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
  selector:
    app: my-acquia-docs
---
# Source: acquia-docs/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-acquia-docs
  namespace: SET_IN_DEPLOYMENT_REPO
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-acquia-docs
  template:
    metadata:
      labels:
        app: my-acquia-docs
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
      - name: my-acquia-docs
        image: "626007623524.dkr.ecr.us-east-2.amazonaws.com/SET_IN_DEPLOYMENT_REPO:SET_IN_DEPLOYMENT_REPO"
        ports:
        - containerPort: 80
---
# Source: acquia-docs/templates/ingress.yaml
apiVersion: 
kind: Ingress
metadata:
    name: my-acquia-docs
    namespace: SET_IN_DEPLOYMENT_REPO
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-staging"
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
    ingressClassName: nginx-internal
    tls:
    - hosts:
      - acquia-docs.SET_IN_DEPLOYMENT_REPO
      - acquia-docs-.SET_IN_DEPLOYMENT_REPO
      - acquia-docs--SET_IN_SRE_CLUSTER_CONFIG_REPO.SET_IN_DEPLOYMENT_REPO
      secretName: "my-acquia-docs-tls"
    rules:
    - host: acquia-docs-.SET_IN_DEPLOYMENT_REPO
      http:
        paths:
        
        - backend:
            serviceName: my-acquia-docs
            servicePort: 80
          path: /
        
    - host: acquia-docs--SET_IN_SRE_CLUSTER_CONFIG_REPO.SET_IN_DEPLOYMENT_REPO
      http:
        paths:
        
        - backend:
            serviceName: my-acquia-docs
            servicePort: 80
          path: /
        
    - host: acquia-docs.SET_IN_DEPLOYMENT_REPO
      http:
        paths:
        
        - backend:
            serviceName: my-acquia-docs
            servicePort: 80
          path: /
---
# Source: acquia-docs/templates/es-secrets.yaml
apiVersion: external-secrets.io/v1alpha1
kind: ExternalSecret
metadata:
  name: my-acquia-docs-secrets
  namespace: SET_IN_DEPLOYMENT_REPO
spec:

  # SecretStoreRef defines which SecretStore to use when fetching the secret data
  secretStoreRef:
    name: SET_IN_DEPLOYMENT_REPO
    kind: SET_IN_DEPLOYMENT_REPO  # or SecretStore

  # RefreshInterval is the amount of time before the values reading again from the SecretStore provider
  # Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h" (from time.ParseDuration)
  # May be set to zero to fetch and create it once
  refreshInterval: "1h0m0s"

  # the target describes the secret that shall be created
  # there can only be one target per ExternalSecret
  target:

    # The secret name of the resource
    # Defaults to .metadata.name of the ExternalSecret
    # It is immutable
    name: acquia-docs-basic-auth

    # Enum with values: 'Owner', 'Merge', or 'None'
    # Default value of 'Owner'
    # Owner creates the secret and sets .metadata.ownerReferences of the resource
    # Merge does not create the secret, but merges in the data fields to the secret
    # None does not create a secret (future use with injector)
    # creationPolicy: 'Merge'

  # Data defines the connection between the Kubernetes Secret keys and the Provider data
  data:
    - 
      remoteRef:
        key: SET_IN_DEPLOYMENT_REPO
        property: SET_IN_DEPLOYMENT_REPO
        version: SET_IN_DEPLOYMENT_REPO
      secretKey: SET_IN_DEPLOYMENT_REPO
