---
# Source: k8soauth2-proxy-controller/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
   - ALL
  volumes:
    - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true
---
# Source: k8soauth2-proxy-controller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
---
# Source: k8soauth2-proxy-controller/templates/clusterrole-edit.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-k8soauth2-proxy-controller-edit
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  annotations:
    {}
rules:
- apiGroups:
  - "oauth2.infra.doodle.com"
  resources:
  - oauth2proxies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - "oauth2.infra.doodle.com"
  resources:
  - oauth2proxies/status
  verbs:
  - get
---
# Source: k8soauth2-proxy-controller/templates/clusterrole-view.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-k8soauth2-proxy-controller-view
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    {}
rules:
- apiGroups:
  - "oauth2.infra.doodle.com"
  resources:
  - oauth2proxies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "oauth2.infra.doodle.com"
  resources:
  - oauth2proxies/status
  verbs:
  - get
---
# Source: k8soauth2-proxy-controller/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
rules:
- apiGroups:
  - ""
  resources:
    - services
  verbs:
    - get
    - list
    - watch
- apiGroups:
  - "oauth2.infra.doodle.com"
  resources:
  - oauth2proxies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - "oauth2.infra.doodle.com"
  resources:
  - oauth2proxies/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: k8soauth2-proxy-controller/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-k8soauth2-proxy-controller
subjects:
- kind: ServiceAccount
  name: my-k8soauth2-proxy-controller
  namespace: default
---
# Source: k8soauth2-proxy-controller/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
rules:
  - apiGroups: ['extensions']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames:
    - my-k8soauth2-proxy-controller
  # leader election
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - delete
      - update
      - get
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - get
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs:
      - create
      - delete
      - update
      - get
---
# Source: k8soauth2-proxy-controller/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-k8soauth2-proxy-controller
subjects:
- kind: ServiceAccount
  name: my-k8soauth2-proxy-controller
  namespace: default
---
# Source: k8soauth2-proxy-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
spec:
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 9556
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
  type: ClusterIP
---
# Source: k8soauth2-proxy-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-k8soauth2-proxy-controller
  labels:
    app.kubernetes.io/name: k8soauth2-proxy-controller
    app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: k8soauth2-proxy-controller-0.1.5
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8soauth2-proxy-controller
      app.kubernetes.io/instance: my-k8soauth2-proxy-controller
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: k8soauth2-proxy-controller
        app.kubernetes.io/instance: my-k8soauth2-proxy-controller
    spec:
      serviceAccountName: my-k8soauth2-proxy-controller
      containers:
      - name: k8soauth2-proxy-controller
        env:
        image: "ghcr.io/doodlescheduling/k8soauth2-proxy-controller:v0.1.2"
        imagePullPolicy: IfNotPresent
        args:
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9556
          protocol: TCP
        - name: probes
          containerPort: 9557
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: probes
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: probes
          initialDelaySeconds: 10
        resources:
          {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsGroup: 10000
          runAsNonRoot: true
          runAsUser: 10000
        volumeMounts:
      volumes:
      affinity:
        {}
      imagePullSecrets:
        []
      nodeSelector:
        {}
      terminationGracePeriodSeconds: 30
      tolerations:
        []
