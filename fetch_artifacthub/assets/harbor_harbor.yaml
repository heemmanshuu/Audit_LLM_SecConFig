---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-harbor-core
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "MmxtUGNSaGlzWUo1SnRnZw=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeFF5VnpnZXVCblZmQzM4R2gyQi8vRDFhR0FMcWVsK2tESWRIb0IyYXVKRm5CdkNuClZNZWRwN2VRTHRyU3l3M0lRZW52dWdiM2dZQThxZTRJakdJYlZLV0pReVJtV3Z6UndaQWs0ZFBjb3lKRi9yby8KeDEzaEtXMzZxa1RPbU9MbVYrZzNyWm44RG5HZkJzYVNCWG1iK2QyNHNyL0pqQVQydmliVzI0V0NvcjlmL3FkQwpaZWJHY0dXeXNPYkpESTRpY3hYa3FSUW41cFBRendLdG9qWDU3NmFOZjk3bkt2R1Z0OXRmMFVCMUJRbnpOSjVkCnBLZi9IaThFcVZqSDVlWERGczR0d21lakx2SlNvd0c1QWFob3N1QXovcWFqMFdydkNFbVdsd29Idm5XSHg1NTYKRGY3N2hIdUxRZnQrMkk5U1hiUzRwdmllTEcvRTdLclRSRi8wRndJREFRQUJBb0lCQUhYMGpheHlubk1SU1o3NQpJREJqek5seTVINmhLRG12RE9YUENVcEl6bmlUMmNlbXdaUVhsa0Z5dWVYQ2FoTFJJa0tLeGsxbXBEeXFSaVkyCjdua1N0V2ViWENxTUhKVjA2QjlscVI1aUU1NjRBb3gwYzM5bHJFWi9wbURNcFp1Um4rK1plOUw0N1pDNzVVVksKRXRraUxnT0ovV2xMTTF3VkVKdE5acXFzSmtKREhRVDB5SUpTb1FhVndMMjhqUFNYa3VscERLN1NHbC82dDZvVgpKRTRzbmJnanhsS1Y5YUxicTZjUnVRK2ZsR3VCTmk4emhLR3lkMHo1aExXTVNjOUwwdnBXcy81UVR1UkF0NEd1ClRGQkZyQXVacDkvb1V2ZURpaUNyNWFpNEQ1bGFJei8yOVozUWhOVXhmZHcyV1RzcXB3ZE1DK29mdUNSNHhCSGoKWkJnYi9Za0NnWUVBeTZnNTM3YnRlTXM0UUFod3RmWFlKaklveGtXcEpuS1kzN1hQSG5pNUxJc3EvTlk2dS9YcApybHVKUDZoaCtqT2wvR0tQY3p2a2FiQ2hSQmRCOUdqT3AzaHhPSDlvc2dneHNJQmtLdzFlVGtyWXVvOUdQcGpECnkxdnQ1bGVYMXdOZEZvdTNQZnE0elZDN3krQndYUGFNKy8reXFFYnRBL0FtQzNNS08yUVJmbjBDZ1lFQTk3R1YKSmdkYWlXcStXWldGd0M2U0xVcmd1RUM1TzBTY2c2bFJPSzJkaU9CNTRPV3pINmlGMlNGY1k2bkdjanlGYjJvcgpJZitIQTdTSVFOcWxTMEp0eUo3TmFsKzJZS3laTy9hditDaW1XRWtURENMMy90bmZ1VkJGVklKT3d2aFZBRWpHCnovdVBUT3RZMVpiTmlFODduMytQdXVxdi9Xdk9rcGxGMHdoZG5TTUNnWUFzMkRNK05zcWR3YW4yTjZXUis3dUgKMVoyeTR4MzNFRjduUytKNnBEeXFPVTdTODkxbERDWlR0V1pJZFN4MTZxK1BIcWpWeUFkbzJuTDRTbUxFamR1TApkdkwvYk5iQjlSbno4cUdiOVVxaDFNdGFjVGdYaW8zNmxwaVJFeEtsVHVGTm1LQlY3b0tJKzFFTytMSGxWb2orCjZIUVBwK2FDNm51R0krUEo1aVFRQlFLQmdRQ2RNZDV1SEF5aFdWVWtsWGdrMTJsOXhSK0l6OHEraW5TcU9qS0oKdmVWVWtPSElrUDUxQVFheEhqTDhMU3I4Sk55cU1MN2UvTVE2M2IvN0tNZnVVMkpKQ0Q5bFd3anJvWjQrSi9qVgpqVGJFb051dHdDT1RZY0pTWVZjZW92UkpXRURaeFZZbmVJY2hVZHMyOGxYT1JEcWFwdUlZeGdpYTFHaHRNVWpXCi9XQXI4UUtCZ1FDaUxLekQ4N3NsT0JZd3FSQ0lvc0wxa2JGclhacnA2LzFvYmR6NnpPZ1dCb09lZ3ZhMHozT2kKa3hwUmltVUtwaFNXWndndGVTa1JYbTY2Z1A0bDNnUVJkRU14NW1nZFFtaGFxTWx3dFB0dFNwTXdReVN3Z0x3TwpPYVVZOTQ1c3JZVzVscUd0azc1dVU5UGJRZ0tFbjAwMEcvTkJxeW1aODFWV3M2MUJ3ZUhxSlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRV1hIemdWemw5QVFicENZWFM1MkFFakFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qUXdPVEUyTURneE1EVTVXaGNOTWpVdwpPVEUyTURneE1EVTVXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURGREpYT0I2NEdkVjhMZndhSFlILzhQVm9ZQXVwNlg2UU0KaDBlZ0hacTRrV2NHOEtkVXg1Mm50NUF1MnRMTERjaEI2ZSs2QnZlQmdEeXA3Z2lNWWh0VXBZbERKR1phL05IQgprQ1RoMDl5aklrWCt1ai9IWGVFcGJmcXFSTTZZNHVaWDZEZXRtZndPY1o4R3hwSUZlWnY1M2JpeXY4bU1CUGErCkp0YmJoWUtpdjEvK3AwSmw1c1p3WmJLdzVza01qaUp6RmVTcEZDZm1rOURQQXEyaU5mbnZwbzEvM3VjcThaVzMKMjEvUlFIVUZDZk0wbmwya3AvOGVMd1NwV01mbDVjTVd6aTNDWjZNdThsS2pBYmtCcUdpeTREUCtwcVBSYXU4SQpTWmFYQ2dlK2RZZkhubm9OL3Z1RWU0dEIrMzdZajFKZHRMaW0rSjRzYjhUc3F0TkVYL1FYQWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVQU5rUG82YzFEbFIxVWNSQ1VBRWJsODhNN29zdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQnl5c2lhY2FvWTlZTTFZYWVJTm5wQWxpcEdZT2VyTGNmbGQyQVlqCjJiaWkzMUZVZlVVK1N5Mk1VNTJwT0xQL253YlVlNlVCa1RYM2kvNmJVdEJnbVg0bFJkT0NoV0I5OTVLQUF4RUMKVzZpL2t6OVdKdDBwRTBNQmUvK0NleXVvSGJDTUVVb3Zmc2hJSjhPdjkvTDhvUUNDakN2S0hsU2QzejlsVklEbwpTMUJKS1RUQU5adHdSMXJxWCtMdDZUeGlINmt4OXJsVEtGT0NidlBIdEpXNGFqMXVSN1BxU0VxZzJ1MWJLRG9rClFiWDRKZENBRm1oVW9MTGR0RG15dGNQbUFWOXU0dEtscmFONFZWeVR6c0REKzNZZi9VQU5hUmo1eHpRQjVieXcKMDhUK25CTkYreFNUT3dLR3hBYzl5K3FXQmcxcmVSNnl2VXBoYWRpUHZ4Rm9KajQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "eUJUZG9JZnFKeWJIa0ZJT3psMFA1Y3ZOeHBwNElXb3k="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-harbor-database"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-harbor-ingress"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRWUFFUlBWZjQ3K1k2TUtwZDh6S0ZaekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3T1RFMk1EZ3hNRFU1V2hjTk1qVXdPVEUyTURneApNRFU1V2pBZE1Sc3dHUVlEVlFRREV4SmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFNVU0JjcitoaGd2YXJ4V0QrYVFQNlV5eGdEZFQ0cyt3WXBBcjQKa0o2Z1NsNjY1MkMrT1NiWnBPZHVEcGlnaDUzMFlvcjRxZGhZSTJZbkpFVUNWL2QzQXFXdUFXbk1SUGFSMGZLbwpta05haWtKUElrTWhGTFl6Z0hTemV0T1BaQTdmd1BPczZ4Z0JWVlg2RnFkZkNRcTRQOGw4TEY3RWJqWjA3cDg3ClVqWFcxRUV2ZFBDTmJoN3I4T1VhRURRcXNJUHlOa3R3ZTlCV0luQS9VWkhoZHJaaW9aNFl1S0hwZmgzbThqRDkKZjVTSmx6S204MXV4VkNBdGlodXcvdS9QRHJRNHBXd3E2QlF2NTdTem1ZZkJEVXRVRHIvbHZsc0NTc3hGSGxnWApWSWdUMWNQSzdRTmd1ejhMekswUHduUHhlM0U1V0VqbStSdjhTNVVraUtiUmM0QzlBZ01CQUFHamZ6QjlNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU2FTc1VObXZZZTYzL0MrVHRpL2k4S1ZmOGR4akFkQmdOVgpIUkVFRmpBVWdoSmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmVmCm42dDVZbVJYdzBIK25LdEtML3hGT1lnRGcvc0g3dURqVmdnMEZzK0hHZ0g3ckJJL0hzQU1QYkpHa2J1SU1NbTAKbGN0d0U0cWN2UWFCcFd2aHo5bEdPd3h5c094Q3REcUdrRTY5VUdnRzc1THB2bDlUSll4YnlMYVdsOTVxL21FWgoxbnR6MjNpTFlLck9kZWxPZm1VbVZPNjVJdmJsc0FiMTZ3akMzQUkyQ2R4TmhQSmllK09PTW5GMWNEYTJvc0thCkpvSDFLQXpmZzRpUzRLS2t3V2cyNnhiTklERjhJVWI1eUphWDlmTGN4RmU4RlVIaEdQaFlMTUNzcStiWVc2V2QKaGZPbitwRUtQKzlvYndKN05NN3RKUGJYL1ZOci8yMG9GRlNvQnRlaC83NzBlL0RSNEloc29wWm10azZsZ2R0KwpSaWJlYzh2c1p1K0M4MUc5ejZRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMGxFZ1hLL29ZWUwycThWZy9ta0QrbE1zWUEzVStMUHNHS1FLK0pDZW9FcGV1dWRnCnZqa20yYVRuYmc2WW9JZWQ5R0tLK0tuWVdDTm1KeVJGQWxmM2R3S2xyZ0ZwekVUMmtkSHlxSnBEV29wQ1R5SkQKSVJTMk00QjBzM3JUajJRTzM4RHpyT3NZQVZWVitoYW5Yd2tLdUQvSmZDeGV4RzQyZE82Zk8xSTExdFJCTDNUdwpqVzRlNi9EbEdoQTBLckNEOGpaTGNIdlFWaUp3UDFHUjRYYTJZcUdlR0xpaDZYNGQ1dkl3L1grVWlaY3lwdk5iCnNWUWdMWW9ic1A3dnp3NjBPS1ZzS3VnVUwrZTBzNW1Id1ExTFZBNi81YjViQWtyTVJSNVlGMVNJRTlYRHl1MEQKWUxzL0M4eXREOEp6OFh0eE9WaEk1dmtiL0V1VkpJaW0wWE9BdlFJREFRQUJBb0lCQVFDUjk2WTdUZ2M5YmpTZgpRTzB4aFZjeWJIbDI3UUtyM2N2MXloeW5LVkErdFg4THZ6eUFxWS9TTEVaSE56QXM4aExwbzE4S2VHN2p0U1hYCjhxOUdraUQ1WTBmei9aMGRIWnYzMXJ2UTBzZitWY2p4dlRqVUE5ajA0Nm1iUzVyN2dSbGxxRGczQWk5MTlYRW4Ka29OMVRRUTRubVRMbnN2akR3OFNsdTdDc0NzWHZwUVFvbUdPNjQ4N2hoSkR3eWRkWFJIazRNUytIejZhYStNdgpNQjN2OTJhaVZxaFRkNWhoanVaNmFwcnFuU1RYQU1NT3NrYzlkOE1CUXl4a2c3OVN5NzV0VWlDMUR1QXIzekFsCjlQTVNNYUg2cGxmVFZ3dXFMbEN0a3JkMTZ1Qjg4RHlEUERQMm1RWmhoblF4V21oeDIvUTVPTk9Kc3lQd1pEUXkKYzZWS21RL3RBb0dCQVBiQk5IZ2JrNWdUc3VrQi9oMGMzK0F2RlRSUThZVzlOOE9DMDNtREd4VmFyN1M0ZksrNwozMHBEMEFhWVhydkxOZUROZnFDc1Z6Y0x2blhEWmJRTzNFRDRqSC80aUZjTmU4bkJRQlBkTUtWeVBFOXBmMXRRCktaUnRCQ0lMZUx6d1UwVk5xVTlWVTFyYlV1K2Faakw1ZlY0aTlISXB5WE9MZkhYVTUrNjZ4RjluQW9HQkFOb3kKYTljdGFlZXUvRW1oSTJFWEpPZHlsZWdHM0VqMHJUU1lmNU1nRzVsU1kwNHhsUXdmbkRRbzJxVlV5Z280ZWI3egpPRm5zTm1PZEI3cy81ajFmMERKckh6NDBaQ2ZhVEtXdlUvSzRydzEvQ0pYK1h4aTVLTmJ0T29GMkJaN0hMaUZKCjc4WW0xUTUrWUhXcjVQK1ZoanpqSit3TFpkazljMStNUjBzcUE5dzdBb0dCQU8xZVJsOFVDQk5QUDlndDlvbUMKOFVuemdPNW12eS9zS2V5RnVYRTIwYUxsTGdrblA2cTlpN3NoS01odll4SThGWVEvcWdSZVJUZktzRmtRc3BGWAppa0ZsMTZKekxwU3ZmOWxCY2FhcUxOVzY0cEZ4NXZXc1U1TlltNVUwZTkwbFFyVjBVOTdoTWVKQkFiTkVUL1BSClZPeHRxOEQydWJmUkF0VkhEaVgwdkZzWkFvR0JBTkpMQkNxSHAybFcrZW9RdHFOdGhmRFhPK2s3SzNYWTgxSWMKbzkvdGN3d0xIcENQTXVKVFdOM2dmaElZTFAwNnZ3T3RNQ05paUd6clBEZFk5NU14VTl3ejZCR3d0dEsrRDE4awpJcGx0SzdHclBHQXJvQVdZOXVabUR4d1Uzb2ZQMmdMVldwVTBlZVVWSWV4bk5qYXFLbzFtTk9USGUycXJVaFhGCmdqVE1FcHBmQW9HQURydlVNZ3BseXd4dUt3ZDc0L0VUVUcxZFNUM2hsREFwb0hheTNFbWkxT1dkdzMrU3FBVHUKQ0xmQ0JwK3g2NnZYR2l0aFFWd09uMm9jdmlaM0VsZnlLSnJxdnViT1FlM2lEUVZ3bFEzOThQNVZXaHBGY3Z2WApVVmV5SFIvSUtaUG42R2lRY2RMc2IvK2R3R2hSTjJVa0t6SGtmSGdjTTZic2lBV2NXcUJpRWQ4PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVnN2YjdrYWdHQzZjcXZYVnZuN1QrREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3T1RFMk1EZ3hNRFU0V2hjTk1qVXdPVEUyTURneApNRFU0V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1R0L3BteTRKUGt5Y0hiTWxkaVMwN1RqcW8zUndVeWwvcHNjem0vUHdMbWQwVmlwT0YKL0pTR1JxclQrZHlTQmVsc3FpNTQvQzhJdG4yd2M3NGloLzMrWi8yMVUvTW9qT2VrZ1dubFo4R0dSQjNKSWo5ZApmWGpKenVZZTA2bnZhVlVTN0RnYzR4SFBzK01maW1TRWRLRDZIVHNuMXJ1aHQ3TlhRL3gxTVhnbVJzVmtJbExPCmcvVmJhVWVFSXk0bjNYSzcvVTUwSVAzYXBqSEpaNUZkbmh3MmF4M3h1eGdGdmdXVVIzenlGdUpBZVR6Sm9GbUcKZmowdzZRY2h0akF3T2xwTG1TdGdLaHR5UTkxNE9XRGttRkRZYU1OZnVML1ZDSml0UERVYjNOSXRNZTZPcndFNQo5eGkrZzdacFIySXc0aGtYYThiY0RkQktOaXh5SEF0RDhacmRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVta3JGRFpyMkh1dC93dms3WXY0dkNsWC9IY1l3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGY1BiK2ZvTG51ZWw3cUNwUXJZc3ZRSFpOR1pYcm1vLzFtTGt4bW1GVTVSSzlpc3lNRFdLSnBmClNmZk1rdldHVzZhcHVwbzJnb0tVMVhXT00zWVo0dzg3QkI3RnBJK2J5bXY5UE8rZW5xUk5wcFV4MVkycGlkdTEKTUlXcEx4T2tEN2NXN0grTGtwWjlrZHhPRVBqaTJLZ2JHaGNyV2ZINlptcHdWVE5WMk9Qd2ZEUXVxLzRhZDVCbQp1dW1FaExGMHp0RzE4ZzBFUWlHM0VzZWJaRmIydVVKd0duMHdick9FUU9BUFNRRlU2RHdSdTJyOFcxdTdwbEU2CjI3L3hRZFFVTWc4Qmh1dUtjMUdER1lBRTJ0Wi9ZQ29wRTBKeCtGYkNrN1FZMWVvaVBXamI2WW5BYUc3RXBrV3EKMTUwTkhMZHVvR0ZBTmhPZDRIdS9SemVieXp2MnNJWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: Opaque
data:
  JOBSERVICE_SECRET: "aEtKdHZ1WHEweTJuRnVmVw=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-harbor-registry"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "QUY1cTRDZE1Yb1ZhQzlVOA=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJHB0OC9xYXQwejc5QUVRM3dnSGs4R2VjSVZvYmg5WHk3QjR1ZmZwdWxNUHJxVS50eERMQjgy"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-harbor-registryctl"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-harbor-trivy
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9teS1oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-harbor-core
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "my-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://my-harbor-core:80"
  JOBSERVICE_URL: "http://my-harbor-jobservice"
  REGISTRY_URL: "http://my-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://my-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://my-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://my-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://my-harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://my-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://my-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-harbor-core,my-harbor-jobservice,my-harbor-database,my-harbor-registry,my-harbor-portal,my-harbor-trivy,my-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
data:
  CORE_URL: "http://my-harbor-core:80"
  TOKEN_SERVICE_URL: "http://my-harbor-core:80/service/token"
  REGISTRY_URL: "http://my-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://my-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-harbor-core,my-harbor-jobservice,my-harbor-database,my-harbor-registry,my-harbor-portal,my-harbor-trivy,my-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://my-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-harbor-portal"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-harbor-registry"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: my-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-harbor-registryctl"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: jobservice
    app.kubernetes.io/component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: registry
    app.kubernetes.io/component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-harbor-core
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: my-harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-harbor-database"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
spec:
  ports:
    - port: 5432
  selector:
    release: my-harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: my-harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-harbor-portal"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: my-harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-harbor-redis
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
spec:
  ports:
    - port: 6379
  selector:
    release: my-harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-harbor-registry"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: my-harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-harbor-trivy"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: my-harbor
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-harbor-core
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: core
    app.kubernetes.io/component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: my-harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: my-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.11.1"
        component: core
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: ae703ac995cbd8ee79e7d111db8cdccec6251ae3bec0cf25de711abad8a615df
        checksum/secret: 8309a0fa60351bf3da536f277ddccf492181286d5955ea4a8c2d61f3cfa57cee
        checksum/secret-jobservice: bc79e88aad2e83cbbc00373194fe695c3c692b75291ff60fa124a957fb104f55
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.11.1
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "my-harbor-core"
        - secretRef:
            name: "my-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-harbor-jobservice
                key: JOBSERVICE_SECRET
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: my-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: my-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: my-harbor-core
      - name: ca-download
        secret:
          secretName: "my-harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: jobservice
    app.kubernetes.io/component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: my-harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: my-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.11.1"
        component: jobservice
        app.kubernetes.io/component: jobservice
      annotations:
        checksum/configmap: 84b8b844eb6f0f80d173b435b1709af6c1ae7847f040a6adf6543405e0de3e95
        checksum/configmap-env: a8f573e01cf41aa7e2a2a9fa5338c9f0964c63eb4b4982f43a4f2e7b8b22693c
        checksum/secret: 39ef1613a1903a11876cd796d354a319009083d15ec4f05336896b4457a27c05
        checksum/secret-core: 523209454f05bcffa6fa9b3f7e86d773aeb80b9d643f05d22aea7ac1a1299b59
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-harbor-core
                key: secret
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - configMapRef:
            name: "my-harbor-jobservice-env"
        - secretRef:
            name: "my-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "my-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: my-harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-harbor-portal"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: portal
    app.kubernetes.io/component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: my-harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: my-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.11.1"
        component: portal
        app.kubernetes.io/component: portal
      annotations:
        checksum/configmap: 56b17d1e4ef4a4b19f985be2d2e4a0d88f241e7095dddc7b8b33fe167b5db05d
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.11.1
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "my-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-harbor-registry"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: registry
    app.kubernetes.io/component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: my-harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: my-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.11.1"
        component: registry
        app.kubernetes.io/component: registry
      annotations:
        checksum/configmap: 3c576dc08c3f69b497098371e6aaa989146140df8678a77789cfc3ec168ac71c
        checksum/secret: 64feb9a50fa70623d86efd79783afd829cc6b86baf7bd6fa6d4ca73d82abdd11
        checksum/secret-jobservice: 98ceaabc1edfeb4678205498e2632a69f10051976de63cc2162103c49b785f9b
        checksum/secret-core: d78d0876a09062ca9f7bd4451bea04a4d62f7c67c3b3b90429412f22fa812269
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "my-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - configMapRef:
            name: "my-harbor-registryctl"
        - secretRef:
            name: "my-harbor-registry"
        - secretRef:
            name: "my-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: my-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: my-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: my-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "my-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: my-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-harbor-database"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: database
    app.kubernetes.io/component: database
spec:
  replicas: 1
  serviceName: "my-harbor-database"
  selector:
    matchLabels:
      release: my-harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: my-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.11.1"
        component: database
        app.kubernetes.io/component: database
      annotations:
        checksum/secret: 87fa67c6fc6f2245bd3a89ece6ca3e88c5168bca33696ada5ba37fda62616cb8
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.11.1
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.11.1
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "my-harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-harbor-redis
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: redis
    app.kubernetes.io/component: redis
spec:
  replicas: 1
  serviceName: my-harbor-redis
  selector:
    matchLabels:
      release: my-harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: my-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.11.1"
        component: redis
        app.kubernetes.io/component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.11.1
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-harbor-trivy
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
    component: trivy
    app.kubernetes.io/component: trivy
spec:
  replicas: 1
  serviceName: my-harbor-trivy
  selector:
    matchLabels:
      release: my-harbor
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: my-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.11.1"
        component: trivy
        app.kubernetes.io/component: trivy
      annotations:
        checksum/secret: b9b9cab230116e6ffa7e5ea35d63a4ce170e4c5dd025560591693720631b2d29
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.11.1
          imagePullPolicy: IfNotPresent
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "my-harbor-core,my-harbor-jobservice,my-harbor-database,my-harbor-registry,my-harbor-portal,my-harbor-trivy,my-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: my-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_JAVA_DB_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: my-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "my-harbor-ingress"
  labels:
    heritage: Helm
    release: my-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: my-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.11.1"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: my-harbor-ingress
    hosts:
    - core.harbor.domain
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: my-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: my-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: my-harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: my-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: my-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-harbor-portal
            port:
              number: 80
    host: core.harbor.domain
