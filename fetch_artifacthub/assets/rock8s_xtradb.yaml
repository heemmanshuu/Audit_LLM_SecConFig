---
# Source: xtradb/templates/secrets/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: xtradb
  labels:
    app.kubernetes.io/name: xtradb
    helm.sh/chart: xtradb-1.12.0
    app.kubernetes.io/instance: my-xtradb
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  clustercheck: "dEFHdU1XT0UwNnQ2SGJDZ2pQNzNoWkc3"
  monitor: "NmJqaEZCQk9UZEhUNUs1SlY0R0c0UEg4"
  operator: "Nm9SMWFWQVkwS3JPRGNIckEzWGQzZ0FV"
  proxyadmin: "UjFxU2F5eEdUdWhhRGhkdVFwcWwzZFlZ"
  root: "NGFtODE2YWJPZ0trWlNxYWdlZUloRXU5"
  xtrabackup: "ZVVhcXd4cklVYmpveXM1bGVLbTdzYVV6"
  replication: "WjBIVHdtd04yY1JIS1NpcFdScmVNTXp2"
  pmmserver: ""
---
# Source: xtradb/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: xtradb
  labels:
    app.kubernetes.io/name: xtradb
    helm.sh/chart: xtradb-1.12.0
    app.kubernetes.io/instance: my-xtradb
    app.kubernetes.io/managed-by: Helm
rules:
  # TODO: narrow api groups
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'
---
# Source: xtradb/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: xtradb
  labels:
    app.kubernetes.io/name: xtradb
    helm.sh/chart: xtradb-1.12.0
    app.kubernetes.io/instance: my-xtradb
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: xtradb
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
---
# Source: xtradb/templates/operator.yaml
apiVersion: easyolm.rock8s.com/v1alpha1
kind: ManualSubscription
metadata:
  name: xtradb
  labels:
    app.kubernetes.io/name: xtradb
    helm.sh/chart: xtradb-1.12.0
    app.kubernetes.io/instance: my-xtradb
    app.kubernetes.io/managed-by: Helm
spec:
  channel: stable
  name: percona-xtradb-cluster-operator
  source: operatorhubio-catalog
  sourceNamespace: olm
  startingCSV: percona-xtradb-cluster-operator.v1.12.0
---
# Source: xtradb/templates/xtradb.yaml
apiVersion: pxc.percona.com/v1
kind: PerconaXtraDBCluster
metadata:
  name: xtradb
  labels:
    app.kubernetes.io/name: xtradb
    helm.sh/chart: xtradb-1.12.0
    app.kubernetes.io/instance: my-xtradb
    app.kubernetes.io/managed-by: Helm
spec:
  crVersion: 1.12.0
  enableCRValidationWebhook: false
  allowUnsafeConfigurations: true
  secretsName: xtradb
  pause: false
  updateStrategy: Recreate
  initImage: 'percona/percona-xtradb-cluster-operator:1.12.0'
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com
    apply: disabled
    schedule: 0 4 * * *
  pxc:
    size: 1
    image: 'percona/percona-xtradb-cluster:8.0.29-21.1'
    readinessDelaySec: 15
    livenessDelaySec: 600
    autoRecovery: true
    # expose:
    #   enabled: true
    #   type: LoadBalancer
    #   trafficPolicy: Local
    #   loadBalancerSourceRanges:
    #     - 10.0.0.0/8
    #   annotations:
    #     networking.gke.io/load-balancer-type: "Internal"
    # replicationChannels:
    # - name: pxc1_to_pxc2
    #   isSource: true
    # - name: pxc2_to_pxc1
    #   isSource: false
    #   configuration:
    #     sourceRetryCount: 3
    #     sourceConnectRetry: 60
    #     ssl: false
    #     sslSkipVerify: true
    #     ca: '/etc/mysql/ssl/ca.crt'
    #   sourcesList:
    #   - host: 10.95.251.101
    #     port: 3306
    #     weight: 100
    # schedulerName: mycustom-scheduler
    labels: {}
    nodeSelector: {}
    tolerations: []
    affinity:
      antiAffinityTopologyKey: kubernetes.io/hostname
    gracePeriod: 600
    livenessDelaySec: 300
    livenessProbes:
      failureThreshold: 3
      initialDelaySeconds: 300
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    podDisruptionBudget:
      maxUnavailable: 1
    readinessDelaySec: 15
    readinessProbes:
      failureThreshold: 5
      initialDelaySeconds: 15
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 15
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 200m
        memory: 640Mi
    volumeSpec:
      persistentVolumeClaim:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
  haproxy:
    enabled: false
    size: 1
    image: 'percona/percona-xtradb-cluster-operator:1.12.0-haproxy'
    annotations: {}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
      requests:
        cpu: 10m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi
    volumeSpec:
      emptyDir: {}
  logcollector:
    enabled: false
    image: 'percona/percona-xtradb-cluster-operator:1.12.0-logcollector'
  proxysql:
    enabled: false
    size: 1
    image: 'percona/percona-xtradb-cluster-operator:1.12.0-proxysql'
    annotations: {}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
      requests:
        cpu: 10m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi
    volumeSpec:
      emptyDir: {}
  pmm:
    enabled: false
    image: 'perconalab/pmm-client:2.37.1'
    serverHost: ""
    serverUser: "admin"
  backup:
    image: 'percona/percona-xtradb-cluster-operator:1.12.0-pxc8.0-backup'
    pitr:
      enabled: false
---
# Source: xtradb/templates/socket.yaml
apiVersion: integration.rock8s.com/v1beta1
kind: Socket
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: xtradb
    helm.sh/chart: xtradb-1.12.0
    app.kubernetes.io/instance: my-xtradb
    app.kubernetes.io/managed-by: Helm
spec:
  epoch: "1726476819"
  interface:
    config:
      plug:
        database:
          required: true
        preserve: {}
        preserve: {}
      socket:
        protocol:
          required: true
        username:
          required: true
        password:
          required: true
        hostname:
          required: true
        port:
          required: true
  config:
    protocol: mysql
    username: root
    hostname: xtradb-pxc.default.svc.cluster.local
    port: '3306'
  configTemplate:
    password: '{% .vars.BASE64_ENCODED_MYSQL_PASSWORD | b64dec %}'
  resources:
    - when: [coupled, updated]
      do: recreate
      template:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: xtradb-coupled-or-updated-{% .plug.metadata.namespace %}
        spec:
          activeDeadlineSeconds: 360
          backoffLimit: 6
          ttlSecondsAfterFinished: 360
          template:
            metadata:
              annotations:
                sidecar.istio.io/inject: 'false'
            spec:
              automountServiceAccountToken: true
              restartPolicy: Never
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: kubernetes.io/arch
                            operator: In
                            values:
                              - amd64
              containers:
                - name: kubectl
                  image: registry.gitlab.com/bitspur/rock8s/images/kube-commands-mysql:3.19
                  imagePullPolicy: Always
                  env:
                    - name: MYSQL_PROTOCOL
                      value: '{% .socketConfig.protocol %}'
                    - name: MYSQL_USERNAME
                      value: '{% .socketConfig.username %}'
                    - name: MYSQL_HOSTNAME
                      value: '{% .socketConfig.hostname %}'
                    - name: MYSQL_PORT
                      value: '{% .socketConfig.port %}'
                    - name: MYSQL_DATABASE
                      value: '{% .plugConfig.database %}'
                    - name: MYSQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: xtradb
                          key: root
                  command:
                    - sh
                    - -c
                    - |
                      if [ "{% .plugConfig.create %}" != "0" ]; then
                        echo "Creating database if not exists"
                        mysql -h $MYSQL_HOSTNAME -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -P $MYSQL_PORT -e "CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;"
                        echo "STATUS_MESSAGE: Database $MYSQL_DATABASE checked/created"
                      fi
                      kubectl get pods -n default \
                        -l job-name=xtradb-coupled-or-updated-{% .plug.metadata.namespace %} \
                        --field-selector status.phase=Failed \
                        -o yaml | kubectl delete -f -
    - when: [decoupled]
      do: recreate
      template:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: xtradb-decoupled-{% .plug.metadata.namespace %}
        spec:
          activeDeadlineSeconds: 360
          backoffLimit: 6
          ttlSecondsAfterFinished: 360
          template:
            metadata:
              annotations:
                sidecar.istio.io/inject: 'false'
            spec:
              automountServiceAccountToken: true
              restartPolicy: Never
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: kubernetes.io/arch
                            operator: In
                            values:
                              - amd64
              containers:
                - name: kubectl
                  image: registry.gitlab.com/bitspur/rock8s/images/kube-commands-mysql:3.19
                  imagePullPolicy: Always
                  env:
                    - name: MYSQL_PROTOCOL
                      value: '{% .socketConfig.protocol %}'
                    - name: MYSQL_USERNAME
                      value: '{% .socketConfig.username %}'
                    - name: MYSQL_HOSTNAME
                      value: '{% .socketConfig.hostname %}'
                    - name: MYSQL_PORT
                      value: '{% .socketConfig.port %}'
                    - name: MYSQL_DATABASE
                      value: '{% .plugConfig.database %}'
                    - name: MYSQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: xtradb
                          key: root
                  command:
                    - sh
                    - -c
                    - |
                      {%- if (and (not (eq .plugConfig.create "0")) (eq .plugConfig.preserve "0")) %}
                      echo "Dropping database if exists"
                      mysql -h $MYSQL_HOSTNAME -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -P $MYSQL_PORT -e "DROP DATABASE IF EXISTS $MYSQL_DATABASE;"
                      echo "STATUS_MESSAGE: Database $MYSQL_DATABASE dropped if existed"
                      {%- end %}
                      kubectl get pods -n default \
                        -l job-name=xtradb-decoupled-{% .plug.metadata.namespace %} \
                        --field-selector status.phase=Failed \
                        -o yaml | kubectl delete -f -
  vars:
    - name: BASE64_ENCODED_MYSQL_PASSWORD
      fieldref:
        fieldPath: data.root
      objref:
        apiVersion: v1
        kind: Secret
        name: xtradb
        namespace: default
