---
# Source: deepspeed/templates/client/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-deepspeed-client
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-deepspeed
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: client
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # By default, the client is not setting any port
---
# Source: deepspeed/templates/worker/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-deepspeed-worker
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-deepspeed
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: worker
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow complete connection from other worker pods (we cannot predict the ports the application creates)
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: my-deepspeed
              app.kubernetes.io/name: deepspeed
              app.kubernetes.io/part-of: deepspeed
              app.kubernetes.io/component: worker 
    - ports:
        - port: 2222
      from:
---
# Source: deepspeed/templates/client/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-deepspeed-client
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-deepspeed
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: client
---
# Source: deepspeed/templates/worker/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-deepspeed-worker
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-deepspeed
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: worker
---
# Source: deepspeed/templates/client/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-deepspeed-client
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
automountServiceAccountToken: false
---
# Source: deepspeed/templates/worker/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-deepspeed-worker
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
automountServiceAccountToken: false
---
# Source: deepspeed/templates/ssh-keys-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-deepspeed-ssh-key
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
data:
  id_rsa: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBNUNlUyt4MGhpVkxHQ3d5SjVTVUdWVEVzTFRpM2UxTng0eU1JbW5ZTW1GMDYxS3NlCm1ZQlQ1NGpkYzFzUWFMM0t0eVcxa08vS21JdlJKbFJiMEsvSno5Rjl4UWMxY2t2L1drOU9naWNMM1dSUkFpejAKMFVtaXpReXY4R05EdHVIc0l5amZuL1lNUDBocUJraEdHQzhjT3pxUFdKYUtJNk1IejlHT2ZON0ZYZFZMams2YwpVSGZNVjR0M0o3UjZHSVRsaVNFSmhCR3FPZS9oMFlMcytBeFVRZk9nS1NNakZlb29KUGl6QUh3Ti9ZVWJqVlV6CmlGZ3lDcHAzQnRJY28vaUgyWitsdTlKOXltU3dBZU51Y2gycURxR2pFMExTMTVmVW5QWFQveDRrc0pTbS9RTHkKdFBwNmt1WUVUYUNOWWNwbXJVY2RDTmo2L3paeitCZXJjS1RDUnVHVUp6Qk9yMEEwaDNvenpjVlkxOVFxVGNEVgpvSkkyZjhVTHAvd1lZUHZOdkdKajR0OUw1RjVTSTJaVUhVMVAwbkxmMnZwZFkvKzAzL3NPUmZCWG9UZmNDcmpxCjlKODdYNENOcXl0V2pNell2OWpCS0VGemxKWjBXTlBsamQ5M1JBVXgrYWRWZ1MyblZnVEVpR1cwTVBkZE9YUHEKUlNpRm1DVGUvNDFPams4MlRDUE9VK0NkZGQ0VEhic1lMRjgwR2hjWFRBRGJySHRKQ09qUFFGUHp6QjVWbjJHdQo3QlpvNTllc244OTFpM0VEWWxHUXAyc2hQblNkeHlLYXlhTkdCY2ZxcWZxY3VrTDBLNGRyNGFGZitaRG4renFsCkdrbnJrWW95d0xDdWJSV01Edy9CMmd3OUM4OFRpWUZDaFBjS21NcmYvN1pjNG9YWTZ6bThzRnFkeDc4Q0F3RUEKQVFLQ0FnQlpMSHFQT1lpVkVzd2pIMmg2TG1sMlBMem1nK2Q3QlZkYkRxTmJNODZpY3JYK3owOHJjZlBaYUM0ZAoyemJqcVdLbENORVpjQS9BWmMxK2JMUmlNWUx3ZmhIcFEzTUpWRmplNUdac0NuVGh1RWJOVWVMeU5oU3lqa1hwCjcvSlVkYU1FN3dIUWxLdWV4Ri9rU3JWUzJIN3hTMmNobWQwdUpwZDBDNVRraTNHYXhqWTh6YzdjeUtZT2hZMHgKOEtGVUdnVlkvcGVvamZyNW9CK2o4c2RLQUEraW8yVXpEdSswcmd1NHY1ZS9GYjJtSEROem54eUFLdkNNSW1scApPaEJGcW1yMmpTYUs3YStLdnFYb1p3c1JBVFVwZU5XelBvZ0lDZWpvM0ZCYXcxNVZ3aFF1aWN0eEh3RnZqd1daCmphb1UwYllsL2NpRVg4SmlvOWJaM2U1OUhYaHMzT1ErakNHY2dzZWFNWUwxbnRiNnd5VWJYL3FuTjM4MXBmeFIKcVBNSk5WTGhFanE2VFJ2QzNrVStvS2lISGdxaXFTYWtFMmdZNE5zVUU2MEtJL0NCbVhuZGsxRmhvOFlWaVVVLwozMGRLRXFFSXZjWDllQzA3WHlncWJHQ2RoVlNwUTA1R0lLV05nSHFpZUpRcm4vWmgwY1Z5dkJxSnIxTG1LV1Y1CldYYWRaNEJrOVl2V1V4YUhIcEVQcTl2WDFGbGt2cld6cXhYVjN2bCt6Y0tkMnVYc29weElvbDhHWkwraG1pLy8KOXEyNzJSUFZVQmtzWVg0WWVDbE5HRjFpaitpVEExeXRsYUdFR2l6QkdBdVc4UWZpTk95RXVicEFyVDgrNWxzQwo3cnNybDdBOUJLSGg1MGkrUmRiY1JJd3M2ZGd5aEtKSDllZ3R4dzNjRzJ2UDNuVFpVUUtDQVFFQTdUcWgxR2l2CnZCSmYxYllwckFxMWxWT1h6QVZkQ1dmTDJyb2ZSVnRDQWxQczl4dmVvY3ZrVWd1MVBRdnBYSHhUSWFzbGw2TnIKeGRUbG1HTVZ3MUNFRi96Um9COVZZeVg0QmpnRm1nTzFYcFlLN1BRNHdCWU9FV0FEb0xQdkhBRFZuWFpKb0UzYwpESEQ5aVlNaFR3YytqWXhuTWdnSXVwUE11NzlQa3BBaDJ4YnQzR0diUjVxNUZXSlZoU0FCNjhrTzhUQVR2N3M5CkpyL3ltZmNVdGEvQ1ZpYThaV2paV1hYbm1kanIxZThZWnQ4c2V4eEF4Z1MrV0pQbXBBdzVJWE4wY0kwbUpuYmEKS1A3NnBFVllwZTNZY3JyK3VVaUJJYVMyY0JSQmVCSkJpRUtTUk44bkIvR1c3ZkhyR0ZRMW1Ja0NMV2NRK2FtUwo3dE9RZjY5dDVIZTJ4d0tDQVFFQTlqVWd1L05ZQjhad1dVc1czUldoZitseDBMd0E4N0RIWkZaYTBXcUpyYXRiCmRMZkJleUlkak9OOVEyelgrcHBZQXlzcGIrcS9paTJrcXdqK3ZDMXRDYkM0UXJEMzBqMEhKQW1LTitvVVUycE0Kd1FuTUo0VmQzQnBpS3IwSGpYdUFtdGtMeTJOVWI4dDlIaXh4WkNadGpMWnI5amNnNElMMFpNZXI2WmdnbmV1SQp0dmlybmJXY1RWSXZaQ01mcjJ1MlU2UlZ6Sm1WbHZhQlY3d3BIK0hNNll0ZXVmUzdzNHRqWFlDY05qdU8yRit4CkNVVWlSTFA3WjV0S0JwOVRUTS91R1BtVmcrZHFKMUpHRTY5c3pYSE1GR0piekFuRjAzOUtsS2lBMHFEMnplR0MKNW5YYmtrUGRqV0VLWWU0NXVMNENZamdZT0k1MHBWaWRMMTBtWUJNUFNRS0NBUUVBdjFISDdidzM3aCtMZHBtZwo1Z1VGQ05jUDF4U0VRZStaOGw2a2xaVFJtWHNCNHhCdzdsKzNWWXZuc01JSWcvUW9QMEQ5NGx1RHNWclBoNlJ4CmlzRkdwdW5ZVGFDM2hteTZxSmxKdXpvK2JYZm9lODFDYjNmYUJKMUFqN3hObkhIMzFUUHVrUC81OVhheW90SkUKYkszVS91YzYycGlzSVh6TllxVVprWVA0S2U5R0NiUVdQUnRGSlQvVzVMUTVtR1RnVGhlTjlkVVZya2lqYVJSaAplVjIwQnpMYVFaYmJvMUI1WmhRUnJzbFREclB4OVorRmhhMlJyWElxVWljaGRCN2V5MTZxWTk3NmRwR2NwaHJmCk1ZS3VTMmtQd1hIOTRwb3FJQjNWNXZZaUw3Z3dxcWFsbmJ4ekVwZEdHS3JoUnBGSVZrR0c2VEtmTTBrZ2dqbUQKRVB5VFJRS0NBUUVBNW95Zlo0Q2FpVVZZQlRXY1psQ1FGNUJKWk5YMzZqbzZySWwwcDY4azEzeWp1bXNzQVpyVApvdytQUitrUFlmclB1Yi9jSUpIbzVJS1ROUm5LTi9vdHBhcFhFUlJZTEFXN3Z4SXozT0lVUUh4RS9XcW9Rc1hQCk80RjFOV0luUldSRjdEcWNvY3NVMFU3eWphTytWckxwV0orbC96eG1TL1kwMW41blMrbUplWGVLWVJRQTJFQ3MKNlhheExBcjc2NjlvWDNCK2E0WFNIemdickVWbEdSYS9aRjUreUpFVWh5OWFUNzlVQ0RERE5YaDk5aGxIMnAvVApKcFN5di9ySDdTQzBhNnlqUm80WHlGUnhqSk56eGZudXlaUEZOQTVlc2dyN2tyTXJWcEVtSzJvbHdwclFqbW1BCmVKaExPYUx6YUR4OVRPNE1PRUdsbHdPZ3hTNXI5Z0ZEQ1FLQ0FRRUFuQlU0dGkrZGlvNkJuOHcwb3RzclBCajkKUXF0SFdsdXR4SWo4QUNRaGEzaklNN1NPR3B4TUQ4d0hLWWR0WGtNTEZMdjRjK0x1bm83dUdOdjRSanNhWDhLVgpOU1VtWnhQc0NRZE5acC9Ob2l5SUFEVHRXenZodEZKRXBIbDlQa0xCYXY1NTNPVnorVjJsZ1g4SXBQbVlNbndhCkltaFl5YlpOc1dEL0lKenlEdG94VTZVMVZuUGUyNWhvS0pmMlIzVlExWFVmeW5lalpyVUdTRGdmYnpvVitiWnEKN2dyUk9TbXU5OThUN3ZSVW9obnlpL1dXSmpOVzdNS3k0TVNTZUNvdWt4TFcxc2duRk84RFNXZWdDR0RRUmJ0aApmYXoyVk4ySFZabjdwdXN6aUhXNCtjUURYQ1Fxbm5qQUxOUHJTQkZpUXZ1a0lFWkpoSVZmL3RkQTk5WHVFdz09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: deepspeed/templates/client/hostfile-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-deepspeed-hosts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
data:
  hostfile: |
    
    my-deepspeed-worker-0.my-deepspeed-worker-headless slots=1
    my-deepspeed-worker-1.my-deepspeed-worker-headless slots=1
    my-deepspeed-worker-2.my-deepspeed-worker-headless slots=1
---
# Source: deepspeed/templates/client/ssh-client-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-deepspeed-ssh-client
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
data:
  deepspeed_ssh_client.conf: |
    
    Host my-deepspeed-worker-0.my-deepspeed-worker-headless
      Port 2222
      IdentityFile /bitnami/ssh/client-private-key/id_rsa
      StrictHostKeyChecking no
    Host my-deepspeed-worker-1.my-deepspeed-worker-headless
      Port 2222
      IdentityFile /bitnami/ssh/client-private-key/id_rsa
      StrictHostKeyChecking no
    Host my-deepspeed-worker-2.my-deepspeed-worker-headless
      Port 2222
      IdentityFile /bitnami/ssh/client-private-key/id_rsa
      StrictHostKeyChecking no
---
# Source: deepspeed/templates/worker/ssh-server-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-deepspeed-ssh-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
data:
  deepspeed_ssh_server.conf: |
    Port 2222
    PasswordAuthentication no
    UsePAM no
    PermitUserEnvironment yes
---
# Source: deepspeed/templates/worker/worker-headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-deepspeed-worker-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
---
# Source: deepspeed/templates/client/client-dep-job.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deepspeed-client
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-deepspeed
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: client
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/hostfile: 2646d885949a8798d7e6217dcd196675a1cb20b770e102a4b00fd117af53cb56
        checksum/ssh-private-key: 7e1e9fa7c69eb5173f168254741d4a0281808c2562757e0f5d9463515067742f
        checksum/ssh-client-conf: 7bc3d49b677fe199b0fa4645c35153a60749223ebc7eded91371ec8213acd888
      labels:
        app.kubernetes.io/instance: my-deepspeed
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: deepspeed
        app.kubernetes.io/version: 0.15.1
        helm.sh/chart: deepspeed-2.2.18
        app.kubernetes.io/part-of: deepspeed
        app.kubernetes.io/component: client
    spec:
      
      serviceAccountName: my-deepspeed-client
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-deepspeed
                    app.kubernetes.io/name: deepspeed
                    app.kubernetes.io/component: client
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: ssh-client-configure
          image: docker.io/bitnami/deepspeed:0.15.1-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              # HACK: Depending on the OS, the ssh version may not have support for
              # /etc/ssh/ssh_config.d. Therefore, we need to copy the ssh_config
              # to a volume and perform modifications to include the configuration
              # from the ConfigMap, as it will not be read
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              cp /etc/ssh/ssh_config /bitnami/ssh/ssh-config
              if [[ ! -d /etc/ssh/ssh_config.d ]]; then
                # Older version of ssh, add the include directive
                echo "Modifying ssh_config with include directive"
                echo "Include /etc/ssh/ssh_config.d/*.conf" >> /bitnami/ssh/ssh-config/ssh_config
              fi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/ssh/ssh-config
              subPath: ssh-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
        - name: wait-for-workers
          image: docker.io/bitnami/deepspeed:0.15.1-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              worker_hosts=(
                my-deepspeed-worker-0.my-deepspeed-worker-headless
                my-deepspeed-worker-1.my-deepspeed-worker-headless
                my-deepspeed-worker-2.my-deepspeed-worker-headless
              )
        
              check_worker() {
                  local -r worker_host="${1:-?missing host}"
                  if ssh "$worker_host" "echo OK"; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
        
              for host in "${worker_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_worker $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: ssh-client-config
              mountPath: /etc/ssh/ssh_config.d/deepspeed_ssh_client.conf
              subPath: deepspeed_ssh_client.conf
            - name: empty-dir
              mountPath: /etc/ssh/ssh_config
              subPath: ssh-conf-dir/ssh_config
            - name: ssh-client-private-key
              mountPath: /bitnami/ssh/client-private-key
            - name: empty-dir
              mountPath: /home/deepspeed/.ssh
              subPath: app-ssh-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: deepspeed
          image: docker.io/bitnami/deepspeed:0.15.1-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
          args:
            - -ec
            - |
              #!/bin/bash
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              sleep infinity
          env:
            - name: HOME
              value: /home/deepspeed
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - deepspeed
                - --help
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - python
                - -c
                - import deepspeed; deepspeed.__version__
          volumeMounts:
            - name: source
              mountPath: /app
            - name: empty-dir
              mountPath: /etc/ssh/ssh_config
              subPath: ssh-conf-dir/ssh_config
            - name: ssh-client-config
              mountPath: /etc/ssh/ssh_config.d
            - name: hostfile
              mountPath: /job
            - name: empty-dir
              mountPath: /home/deepspeed/.local
              subPath: app-local-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.ssh
              subPath: app-ssh-dir
            - name: ssh-client-private-key
              mountPath: /bitnami/ssh/client-private-key
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.cache
              subPath: app-cache-dir
            - name: data
              mountPath: /bitnami/deepspeed/data
      volumes:
        - name: empty-dir
          emptyDir: {}
        # SSH client settings for connecting to the worker nodes
        - name: ssh-client-config
          configMap:
            name: my-deepspeed-ssh-client
        - name: ssh-client-private-key
          secret:
            secretName: my-deepspeed-ssh-key
        # Source code of the application
        - name: source
          emptyDir: {}
        # hostfile for connecting to the worker nodes
        - name: hostfile
          configMap:
            name: my-deepspeed-hosts
        # These folders are necessary for building and pip install operations
        # Optional data folder in case the application requires storing data
        - name: data
          emptyDir: {}
        # Temporary folders: /tmp and .ssh
---
# Source: deepspeed/templates/worker/worker-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-deepspeed-worker
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-deepspeed
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.15.1
    helm.sh/chart: deepspeed-2.2.18
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  replicas: 3
  podManagementPolicy: "Parallel"
  serviceName: my-deepspeed-worker-headless
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-deepspeed
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: worker
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/ssh-private-key: 3fc0e02e7a88f48348a225dfac133234de6fd6a02dd574cdaca731cdca069960
        checksum/ssh-server-conf: 74e94f61fb396d851a0cbe7f68b2c318b7f8b7abd127fc057e9d9b517bbde7be
      labels:
        app.kubernetes.io/instance: my-deepspeed
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: deepspeed
        app.kubernetes.io/version: 0.15.1
        helm.sh/chart: deepspeed-2.2.18
        app.kubernetes.io/part-of: deepspeed
        app.kubernetes.io/component: worker
    spec:
      serviceAccountName: my-deepspeed-worker
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-deepspeed
                    app.kubernetes.io/name: deepspeed
                    app.kubernetes.io/component: worker
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: ssh-server-configure
          image: docker.io/bitnami/deepspeed:0.15.1-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              echo "Obtaining public key and generating authorized_keys file"
              mkdir -p /home/deepspeed/.ssh
              ssh-keygen -y -f /bitnami/ssh/client-private-key/id_rsa > /home/deepspeed/.ssh/authorized_keys
              # Create user environment file so the container env vars are included
              echo "C_INCLUDE_PATH=$C_INCLUDE_PATH" >> /home/deepspeed/.ssh/environment
              echo "CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH" >> /home/deepspeed/.ssh/environment
              echo "PATH=$PATH" >> /home/deepspeed/.ssh/environment
              echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> /home/deepspeed/.ssh/environment
              echo "CFLAGS=$CFLAGS" >> /home/deepspeed/.ssh/environment
              echo "CPPFLAGS=$CPPFLAGS" >> /home/deepspeed/.ssh/environment
              echo "LDFLAGS=$LDFLAGS" >> /home/deepspeed/.ssh/environment
              chmod 700 /home/deepspeed/.ssh
              chmod 600 /home/deepspeed/.ssh/authorized_keys
              ssh-keygen -A -f /bitnami/ssh/server-private-key/
        
              replace_in_file() {
                  local filename="${1:?filename is required}"
                  local match_regex="${2:?match regex is required}"
                  local substitute_regex="${3:?substitute regex is required}"
                  local posix_regex=${4:-true}
        
                  local result
        
                  # We should avoid using 'sed in-place' substitutions
                  # 1) They are not compatible with files mounted from ConfigMap(s)
                  # 2) We found incompatibility issues with Debian10 and "in-place" substitutions
                  local -r del=$'\001' # Use a non-printable character as a 'sed' delimiter to avoid issues
                  if [[ $posix_regex = true ]]; then
                      result="$(sed -E "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
                  else
                      result="$(sed "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
                  fi
                  echo "$result" > "$filename"
              }
        
              # HACK: Depending on the OS, the ssh version may not have support for
              # /etc/ssh/sshd_config.d. Therefore, we need to copy the sshd_config
              # to a volume and perform modifications to include the configuration
              # from the ConfigMap. The sshd_config file does not allow the
              # Include directive, so we need to append the configuration
              cp /etc/ssh/sshd_config /bitnami/ssh/sshd-config
              if [[ ! -d /etc/ssh/sshd_config.d ]]; then
                # Older version of ssh, merge the contents
                while read -r line; do
                  read -a entry <<< $line
                  key="${entry[0]}"
                  value="${entry[1]}"
                  if grep -q "${entry[0]}" /bitnami/ssh/sshd-config/sshd_config; then
                    echo "Replacing ${entry[*]} in sshd_config file"
                    replace_in_file /bitnami/ssh/sshd-config/sshd_config "^[#]*${entry[0]}.*" "${entry[*]}"
                  else
                    echo "Adding ${entry[*]} in sshd_config file"
                    echo "${entry[*]}" >> /bitnami/ssh/sshd-config/sshd_config
                  fi
                done < /bitnami/ssh/server-configmap/*.conf
              fi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: ssh-client-private-key
              mountPath: /bitnami/ssh/client-private-key
            # ssh-keygen -A forces /etc/ssh in the prefix path
            - name: empty-dir
              mountPath: /bitnami/ssh/server-private-key/etc/ssh
              subPath: app-worker-private-key-dir
            - name: ssh-server-config
              mountPath: /bitnami/ssh/server-configmap
            - name: empty-dir
              mountPath: /bitnami/ssh/sshd-config
              subPath: sshd-conf-dir
            - name: empty-dir
              mountPath: /home
              subPath: home-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: deepspeed
          image: docker.io/bitnami/deepspeed:0.15.1-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
          args:
            - -ec
            - |
              #!/bin/bash
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              ## sshd requires the absolute path
              SSHD_PATH="$(command -v sshd)"
              exec "$SSHD_PATH" -D -h "/bitnami/ssh/server-private-key/ssh_host_rsa_key" -e
          ports:
            - name: tcp-ssh
              containerPort: 2222
              protocol: TCP
          env:
            - name: HOME
              value: /home/deepspeed
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - -f
                - sshd
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: tcp-ssh
          volumeMounts:
            - name: ssh-server-config
              mountPath: /etc/ssh/sshd_config.d
            - name: empty-dir
              mountPath: /etc/ssh/sshd_config
              subPath: sshd-conf-dir/sshd_config
            # As we are disabling host key verification from the client, we can
            # auto-generate the worker private key
            - name: empty-dir
              mountPath: /bitnami/ssh/server-private-key
              subPath: app-worker-private-key-dir
            # We need to use /home because of the permission
            # limitations of sshd
            - name: empty-dir
              mountPath: /home
              subPath: home-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /run
              subPath: run-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.cache
              subPath: app-cache-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.local
              subPath: app-local-dir
            - name: source
              mountPath: /app
      volumes:
        - name: empty-dir
          emptyDir: {}
        # Depending on the application, the source needs to be in the worker host
        - name: source
          emptyDir: {}
        # We need the client private key for generating the public key and updating the authorized_keys file
        - name: ssh-client-private-key
          secret:
            secretName: my-deepspeed-ssh-key
        # SSH Server configuration
        - name: ssh-server-config
          configMap:
            name: my-deepspeed-ssh-server
        - name: data
          emptyDir: {}
