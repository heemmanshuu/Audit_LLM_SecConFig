---
# Source: csi-vault/templates/controller.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: my-csi-vault-controller
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
---
# Source: csi-vault/templates/node.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-csi-vault-node
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
---
# Source: csi-vault/templates/apiserver-cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-csi-vault-apiserver-cert
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuekNDQW9lZ0F3SUJBZ0lSQUw5cUJVUkJVOUhNQ0tGU0laQlVZVU13RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTWpRd09URTJNRGd6TkRVNFdoY05NelF3T1RFME1EZ3pORFU0V2pBWApNUlV3RXdZRFZRUURFd3h0ZVMxamMya3RkbUYxYkhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEQjQ0T1lHNW5yclM3dkxjYUVmVnZucWMwTE8wNnBvcStEUEdpODhYUUFTdlJZOTJRcXF1Q3AKTVJSd29wcnphRC9ONGg1RHVlVndZZVhRaDhzd2VEQ0dzL0ZBYSsxdjZlZTR6YnorMjRtbWU5ek9YaGVzUW54dQpKSkNTQ3dGdWRML3BCZUN5bnV3UzNBaTh3elpJZUdUQlR2eTVXTnYvc2tjc05uZ2IzbU5EOURMQkJVK2plRnkxCng0RFBNMFVpKzArb0Qrd3NIMVJqbHUxN1RtSXkrSElLMDlJc1BCaHFNUmRqcHNUNGNyUTZaK1MxSjIxbjZPTy8Kd1h0eUJrYkdYNjAwb0V5aHVNY3pZWnpMcE1TVis3VmlJcjdKSy9IRkE2N0hKdG9LaUVlVER2OFV6QXBIK1J4VApveCtoYjhja295ZjZOMm9aUWpTdzBsUEpsVEk3MFQ0bkFnTUJBQUdqZ2U4d2dld3dEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZHUjFlQjh0N0lUT1dHUGtRc3BUcUFseHo2RjhNSUdMQmdOVkhSRUVnWU13Z1lDQwpIMjE1TFdOemFTMTJZWFZzZEMxamIyNTBjbTlzYkdWeUxtUmxabUYxYkhTQ0kyMTVMV056YVMxMllYVnNkQzFqCmIyNTBjbTlzYkdWeUxtUmxabUYxYkhRdWMzWmpnaGx0ZVMxamMya3RkbUYxYkhRdGJtOWtaUzVrWldaaGRXeDAKZ2gxdGVTMWpjMmt0ZG1GMWJIUXRibTlrWlM1a1pXWmhkV3gwTG5OMll6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBbkxpN3I3UnJheVdDZktHdEd3NEdlN0ZWdUhQODlRaXA4VGhoVXZieXFnSUFoMGVqdHJaeVdzSGFBdTdtCnAzOVNGK01DSFYydm9vYjE1dFV1RitNUkYxbU5DR0lEcHhIdU5KaDFGSWN6TnBnWGExNEJzTndVd29wYW02ejAKZkpmOFlnY2UxV0gzRXk3ZTFTcjlFWFY3L3ltL1dzdHpQbnFIR3FOMDQxVmRKcDdlbG10ZVBlbHBvVDA4R2dFKwpkZldlZE96cUdCdUFlZWN2NjJQWWFPSXVGRnlqTzNTdUNlNGtzd0xWTFI5d1R4Wm1EUUk2bXI3QlI2VEpwSWlqCks1QkJNaWMyYjdiUzlrZUZ3M1Bna3FXVVJkTUdrNzlySGJPUnRDVTI4enRtWG5pb1g4Z0JYVkhFdU9zN3Jpc3YKb2x2ZHcraXd1ajNjc08zNGx0Qkdzd0dsSkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd2VPRG1CdVo2NjB1N3kzR2hIMWI1Nm5OQ3p0T3FhS3ZnenhvdlBGMEFFcjBXUGRrCktxcmdxVEVVY0tLYTgyZy96ZUllUTdubGNHSGwwSWZMTUhnd2hyUHhRR3Z0YitubnVNMjgvdHVKcG52Y3psNFgKckVKOGJpU1FrZ3NCYm5TLzZRWGdzcDdzRXR3SXZNTTJTSGhrd1U3OHVWamIvN0pITERaNEc5NWpRL1F5d1FWUApvM2hjdGNlQXp6TkZJdnRQcUEvc0xCOVVZNWJ0ZTA1aU12aHlDdFBTTER3WWFqRVhZNmJFK0hLME9tZmt0U2R0Cloramp2OEY3Y2daR3hsK3ROS0JNb2JqSE0yR2N5NlRFbGZ1MVlpSyt5U3Z4eFFPdXh5YmFDb2hIa3c3L0ZNd0sKUi9rY1U2TWZvVy9ISktNbitqZHFHVUkwc05KVHlaVXlPOUUrSndJREFRQUJBb0lCQVFDMGx5Y1EzRlNIVVcxdgoxYUViOG05UjNiUmdDOE4rK1VxazMvVm1WemNHdHNuVXU4aU9mVTU0Q0lEVFVJRW15aWp6cVBNcmZkQ1kxblpwCnZyR2cyYkhKSlgxRjFjRDRCbE9RckFDbkdQQ2pJcWROaUJKZ25pU3JxbDhGeUQ1ekZVZFMwZWl5TnBnSUVPNEsKYzREeUMwRTlWRWJNbEZtRlZoWTR0aHMxU2ZRSGE1Ly9XVnhYWm1pWkY2d2ZGUDlXZ1Q2Vm9zL0VMTWM5Z1Y3VQptZGlUU2RheXQ1WEFndDhhSzZKVWk5bkxoeGx6V3I4N0lRN0RMdnlXOCsrd0tGTWNuSkFrR2hPbWY2UVdGbHV5CnQ0Q0hEclJ2ZjUrb0t6Mmk1MVRQTllMN1drajJ2eXgvL1h5VEhtek5Ka2tHbHBhbHI2cWdOSFRlTyt6S1pzM2wKZEVRTCtacHhBb0dCQU1PNVkrNjJBUWRLVEcwMEhLMEdlbkpWMUo3V0FUWnhOcEM3aU8vQVlMbEJrZ0lYcnBobQoyYnhlWUlOYXhXQ2E4dnM3OTFYRGZSRnVZSzlZNVl6N1B1NWxSTEFlU1J2bE03WllCOWdoU2V1aFlueW5VVXU1CmJEclZoMUI1WkNZWFdNbVNUZ1BxQnRqbG1MWkRGdmRabVo5dkdHNlllSUlPeERMTXdudFd5djJkQW9HQkFQMloKYTB2V2V4VTlVRnlLczlQZ0pLM3p6a3BES3VrZXZIbG83bEN6QkQvNTY4L2xOY3Exa1ZRNTBHUXhSNHZ0YVN6YQpIM2ZzWFA0OGFDQVpxaUsxKytVcC9GWS9YV2doTStnYm5PajQvTzFNakVxNDJuK2FuMWpPdGw0b096UTFaYmxnCk1mYVA1QVYvUVlqY1RsOUw2N3NOOUttQ3YwMFpWRnVJVFFyU0ZBR1RBb0dCQUlkQjFPZWdhM0dJVE95aXVMWngKNWFpaDIvK3dVTUk0MXNhS2N3V01Zc3RqbnUxSFJHY1puSnJxZGJRUXhKb1FPcDZZUUVMS2grSEY3NWI5emhUeApnL25uamVKUDY2SVZjUGt3T0t1SnhiWEtuMjhaaWJyVTl4QnBnOHQvT0ZDQ2pkOHU5aThLU1pVV2hjUmU5TDRXCjgyMFVyME91cG9qcWYzZkR2UnJUVGhDWkFvR0FJdHRqbEJqMjhnUnJkMHpaU3RZVU5KUytWaGJGWHlXS1ltVzUKMi8yL0o4d0NUYUVEczhraElLS1JzalBUMGJmZ0xQb09PVDJUeXA0aThjYVZUQkFYZjNnMTV1VHV3ZEZPZ1NqSwplSHRBeUowczYxaGRNQXpndWlRdmpPR2F3YUpWU1JXZnlIUWVzMks2YjBWWXdHQi9Ga2JreWlmZWc0cG52ZTBPCktkNldRV0VDZ1lCTHN3bFpaUzY1YjNPaEFTZzN2SlM3UEtwd2Q1U1BWOFNPa053WDVtR1FIYjQ1V3Q3YWtvRHgKcGFsWDRDdEJ5NWRROEFLMlRCOGRjcEpDTzNHSlJKeUp6dnQvSU5Jdi82NGFhV0V0bGw2WEM4VXRlQXE3djU1egpQd2txQUZoQWdvYldsK2JsbWFzd0xrYitIY20vdFpEdUNFdnU1U3pxYlNpaTU0ZVZiZ28wUmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-controller
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents"]
  verbs: ["get", "list"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csidrivers", "csinodes"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
# Source: csi-vault/templates/controller.yaml
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-attacher
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "get", "list", "patch", "update", "watch"]
---
# Source: csi-vault/templates/controller.yaml
# Provisioner must be able to work with PVCs, storageClasses, nodes and csiNodes
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-provisioner
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["create", "delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "patch", "update", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "get", "list", "patch", "update", "watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csinodes"]
  verbs: ["get", "list", "watch"]
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-node
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-node-registrar
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "create"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-controller
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
- kind: ServiceAccount
  name: my-csi-vault-controller
  namespace: default
roleRef:
    kind: ClusterRole
    name: my-csi-vault-controller
    apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-attacher
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
- kind: ServiceAccount
  name: my-csi-vault-controller
  namespace: default
roleRef:
    kind: ClusterRole
    name: my-csi-vault-attacher
    apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-provisioner
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
  - kind: ServiceAccount
    name: my-csi-vault-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-csi-vault-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-node
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
subjects:
- kind: ServiceAccount
  name: my-csi-vault-node
  namespace: default
roleRef:
  kind: ClusterRole
  name: my-csi-vault-node
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-csi-vault-node-registrar
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
subjects:
- kind: ServiceAccount
  name: my-csi-vault-node
  namespace: default
roleRef:
  kind: ClusterRole
  name: my-csi-vault-node-registrar
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: my-csi-vault-controller
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  selector:
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/component: controller
  ports:
  - name: api
    port: 443
    targetPort: 8443
---
# Source: csi-vault/templates/node.yaml
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: my-csi-vault-node
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  selector:
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/component: node
  ports:
  - name: api
    port: 443
    targetPort: 8443
---
# Source: csi-vault/templates/node.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: my-csi-vault-node
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: csi-vault
      app.kubernetes.io/instance: my-csi-vault
      app.kubernetes.io/component: node
  template:
    metadata:
      labels:
        app.kubernetes.io/name: csi-vault
        app.kubernetes.io/instance: my-csi-vault
        app.kubernetes.io/component: node
      annotations:
        checksum/apiserver-cert.yaml: fdc591ac38f700730d8715a435a1b175cdb491bb4079d3ce02be70d798069e4e
    spec:
      serviceAccount: my-csi-vault-node
      containers:
      - name: node-driver-registrar
        securityContext:
          {}
        image: quay.io/k8scsi/csi-node-driver-registrar:v1.1.0
        args:
        - --v=3
        - --csi-address=/csi/csi.sock
        - --kubelet-registration-path=/var/lib/kubelet/plugins/secrets.csi.kubevault.com/csi.sock
        imagePullPolicy: IfNotPresent
        resources:
          {}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
      - name: csi-vault-plugin
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
          privileged: true
        image: kubevault/csi-vault:v0.3.0
        args :
        - run
        - --csi-address=unix:/csi/csi.sock
        - "--node=$(NODE_NAME)"
        - "--v=3"
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=true
        - --enable-analytics=true
        ports:
        - containerPort: 8443
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
        resources:
          {}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: kubelet-dir
          mountPath: /var/lib/kubelet
          # needed so that any mounts setup inside this container are
          # propagated back to the host machine.
          mountPropagation: "Bidirectional"
        - name: device-dir
          mountPath: /dev
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
      - name: kubelet-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/secrets.csi.kubevault.com/
          type: DirectoryOrCreate
      - name: device-dir
        hostPath:
          path: /dev
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-csi-vault-apiserver-cert
      securityContext:
        {}
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        beta.kubernetes.io/os: linux
---
# Source: csi-vault/templates/controller.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: my-csi-vault-controller
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.3.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-csi-vault
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  serviceName: my-csi-vault-controller
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: csi-vault
      app.kubernetes.io/instance: my-csi-vault
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: csi-vault
        app.kubernetes.io/instance: my-csi-vault
        app.kubernetes.io/component: controller
      annotations:
        checksum/apiserver-cert.yaml: b0c3c1f4c3338ab5b1707837e912461ad9b3034b58aba830dacca37ca83e99b8
    spec:
      serviceAccount: my-csi-vault-controller
      containers:
      - name: csi-provisioner
        securityContext:
          {}
        image: quay.io/k8scsi/csi-provisioner:v1.3.0
        args:
        - --csi-address=/csi/csi.sock
        - --v=3
        imagePullPolicy: IfNotPresent
        resources:
                        null
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
      - name: csi-attacher
        securityContext:
          {}
        image: quay.io/k8scsi/csi-attacher:v1.2.0
        args:
        - --v=3
        - --csi-address=/csi/csi.sock
        imagePullPolicy: IfNotPresent
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
      - name: csi-vault-plugin
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
          privileged: true
        image: kubevault/csi-vault:v0.3.0
        args :
        - run
        - --csi-address=unix:/csi/csi.sock
        - --node=$(NODE_NAME)
        - --v=3
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=true
        - --enable-analytics=true
        ports:
        - containerPort: 8443
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            port: 8443
            path: /healthz
            scheme: HTTPS
          initialDelaySeconds: 10
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: serving-cert
          mountPath: /var/serving-cert
      volumes:
      - name: socket-dir
        emptyDir: {}
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-csi-vault-apiserver-cert
      securityContext:
        {}
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        beta.kubernetes.io/os: linux
---
# Source: csi-vault/templates/csidriver.yaml
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: secrets.csi.kubevault.com
spec:
  attachRequired: false
  podInfoOnMount: true
---
# Source: csi-vault/templates/appcatalog-user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:appcatalog:admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: csi-vault/templates/appcatalog-user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appscode:appcatalog:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
