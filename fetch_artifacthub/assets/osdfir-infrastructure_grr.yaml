---
# Source: grr/templates/serviceaccount/sa-grr-client.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grr-client-sa
---
# Source: grr/templates/serviceaccount/sa-grr.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grr-sa
---
# Source: grr/templates/database/mysql.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-mysql
stringData:
  fleetspeak-password: fleetspeak-password
  grr-password: grr-password
  mysql-password: password
---
# Source: grr/templates/secret/sec-fleetspeak-admin-components.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-fleetspeak-admin-components
stringData:
  admin.components.textproto: |
    mysql_data_source_name: "fleetspeak-user:fleetspeak-password@tcp(mysql:3306)/fleetspeak"
    admin_config: <
      listen_address: "0.0.0.0:4444"
    >
    notification_use_http_notifier: true
    stats_config: <
      address: "0.0.0.0:19090"
    >
---
# Source: grr/templates/secret/sec-fleetspeak-frontend-components.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-fleetspeak-frontend-components
stringData:
  frontend.components.textproto: |
    mysql_data_source_name: "fleetspeak-user:fleetspeak-password@tcp(mysql:3306)/fleetspeak"
    https_config: <
      listen_address: "0.0.0.0:4443"
      certificates: "-----BEGIN CERTIFICATE-----\nMIIDJDCCAgygAwIBAgIPSoqR9ro6gSBpMtjxuuQDMA0GCSqGSIb3DQEBCwUAMB4x\nHDAaBgNVBAMTE2ZsZWV0c3BlYWstZnJvbnRlbmQwHhcNMjQwOTE2MDkyNDMwWhcN\nMzQwOTE0MDkyNDMwWjAeMRwwGgYDVQQDExNmbGVldHNwZWFrLWZyb250ZW5kMIIB\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwS2h0COyipUpnjvZYofnatCD\nyTwED2+wa8bZB5ruheBV+NPbsHReH/U+gx1/DszgRGRssOKK9czKZGIruJfsGP4f\nKVGURcCjE1KztIPWpd2pN0Vtx+eS4mBraCnUtmOxVigGFTLB77IRv3F7K3+/9qhM\n+0HZLy+0L6UULccrmJAI3h20nyI7gqxd02umITUIVNkrQBCLIkYPrJi6Zpt72U8j\n3zq/kjasoldDqHgX53eGTx6lR6KrF7Fl87+E0WbRB4YRKeAEIo0C9zSLYxTeJrpb\nUcgCanwhrCm+Iv5TFibkAc4jsEKrTNIx/erj2qnkRJMCyeLHqBTLkouQzVmcFQID\nAQABo18wXTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG\nAQUFBwMCMAwGA1UdEwEB/wQCMAAwHgYDVR0RBBcwFYITZmxlZXRzcGVhay1mcm9u\ndGVuZDANBgkqhkiG9w0BAQsFAAOCAQEACWcYN1EyJomCILlVxMxVXnWgKjXEmkej\nbXYTnMSuCd64SF0usS4qHPvuCc9Ww8Z96jGk7GJ5Cw6mjy+nwf1SEXXiZcBKk6e7\n/H2N+4HyyxhjDSqavLYR87/nYh7D9v57uHUaLk+fC65BJMTAs2Qh4yJWfwUu02Xa\nZFu8iwHJ1V84Pz2B/8FaIrpZrPsOA2N8M25+4q7BD/KOWRY+zTUgBu+y1klwSng6\nlcONjCMVvXRlMB8y1rjDvj1Zjij6tGKlKNu8f2mBhztSunDKZiROpvGUYMuC1eM9\nkKk0X8JMJcKYoxIx7zfVroKC/t4Q2CPrSoTg2WtDMukjM7dnq6JR/A==\n-----END CERTIFICATE-----\n"
      key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAwS2h0COyipUpnjvZYofnatCDyTwED2+wa8bZB5ruheBV+NPb\nsHReH/U+gx1/DszgRGRssOKK9czKZGIruJfsGP4fKVGURcCjE1KztIPWpd2pN0Vt\nx+eS4mBraCnUtmOxVigGFTLB77IRv3F7K3+/9qhM+0HZLy+0L6UULccrmJAI3h20\nnyI7gqxd02umITUIVNkrQBCLIkYPrJi6Zpt72U8j3zq/kjasoldDqHgX53eGTx6l\nR6KrF7Fl87+E0WbRB4YRKeAEIo0C9zSLYxTeJrpbUcgCanwhrCm+Iv5TFibkAc4j\nsEKrTNIx/erj2qnkRJMCyeLHqBTLkouQzVmcFQIDAQABAoIBAQCtKrau2hEmYWgZ\nTBUmWiV8fsZkEcSiAcDoHCxYwO2oXN00XNXGa8okY7dR2ZMYNVekd1Fnjux6QsX7\nDnWa17TxAnv0kgiULocAv1YQL06vCPCzdy1d0Zy+CSi/CyB/Dwbc8KvjPMjUkY+P\nSa7b43y1I1E+ulxyDBU90IEyOCRAcOrWxgK9jtfMqNWFuOoZ5U0DaVMYSBBprDgM\nlSMl1wdQayWDkZmeuIjDtp+im0uXrAjDb5bSL1kXhCHgDveDTPNssHQXIJlKCbJr\n65Shlc3PEBCOWfWdTvDdzE1vQpiYLptS/dc0wJ8YY+1yWDhfUw3tiiNYJl9R6Dmu\nNtBHQqBRAoGBAP7rM7TsMYOaNY0mq4bFatxPPbpL+y8kuzVw3xH9hScS+MQe21+g\nXd7VmUZRuvZ4NGRuWlNm0J6jFzaFvjLjfuQjk+WkeSZvY0cLbqcFh5aYdaJSaW4N\nZEVlSr+KGVzYrZZWRID6FA1KLPSV4V+v7ae1CQtgOegIjmcVO/Kt9smPAoGBAMH/\nY/hT659wHzxC64ZglfAX2LuiuNpws8EK/BYRyVGWYC3NNIaWIuKgxJk7FNke1w/k\nZA83eZM/4zHwWIsktH5tTEOlhePpOBPHzi+/KzgFgGN0xQAoA+keq+jPqRbSpYJN\nh9AxkpBOPssj7e34qQpOazKu+QnEwhxej8kUVwYbAoGBAOXqcu9aHGpq2qPdXdUn\nF3Nu0OjHAN0LTwIrNDaApuiQFuikQA3mkOObWSvwKSWFUxPF6BfS4pRB2nzlcZ9q\nShcv84OqrU46Jpt8NyfTN/Bev7JQjCCjWW2xpxJMVwXDtASk+BIv+4fk/9j1mZj5\nDus0v9yPxIp/tRhKMZB20OAHAoGAXTkhzCJfttVFXUr3LTLaum5rKveuBuJjrt9d\ndimD6Z3uh/P1Srt49hi1gMDgatmkFTH2V02cMYNg5Q2PLwYrahmRrWwsI/JdjTvV\nvCIMXbZfFOv3AvU3s92WVKD9q0b8W9pv6j74JDpFeI7Cdjmo2ZgHcWqdp/ESKlnS\nlJkenIMCgYAIcjugtdEhuXsR6di856KdGkUVShCgxEAJk0q0VqShLqU1LMArDfo6\nHP0yVA/R2+nuS5LgpbziE1U8P4Nc5NWlS4qKr98BK4FyXTmRfWi3arQPzs45uqAg\ngSoK5dtH+8lSz8GLhC3ab152kenq3E/TmwqY1o09+OiLQGnSGLIDvQ==\n-----END RSA PRIVATE KEY-----\n"
    >
    health_check_config: <
      listen_address: "0.0.0.0:8080"
    >
    notification_listen_address: "0.0.0.0:12000"
    notification_public_address: "FLEETSPEAK_FRONTEND_IP:12000"
    stats_config: <
      address: "0.0.0.0:19090"
    >
---
# Source: grr/templates/secret/sec-grr-executable-keys.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-grr-executable-signing-keys
  labels:
    chart: "grr-1.0.3"
    release: "my-grr"
    heritage: "Helm"
type: Opaque
data:
    exe-sign-private-key.pem: 
    exe-sign-public-key.pem:
---
# Source: grr/templates/secret/sec-grr-server-local.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-grr-server-local
stringData:
  server.local.yaml: |
    Database.implementation: MysqlDB
    Blobstore.implementation: DbBlobStore
    Mysql.host: mysql
    Mysql.port: 3306
    Mysql.database: grr
    Mysql.username: grr-user
    Mysql.password: grr-password
    Mysql.flow_processing_threads_max: 20
    AdminUI.csrf_secret_key: KPK,_0a_xY&DTeiaokEdsH1uXGobNIhfrr67BTSLlPPv64_UE0nyn8QsD6
    AdminUI.url: http://localhost:8000
    AdminUI.bind: 0.0.0.0
    AdminUI.use_precompiled_js: true
    API.DefaultRouter: ApiCallRouterWithoutChecks

    Logging.domain: localhost
    Logging.verbose: true
    Logging.engines: file,stderr
    Logging.path: /grr
    Logging.filename: /grr/grr-server.log
    Monitoring.alert_email: grr-monitoring@localhost
    Monitoring.emergency_access_email: grr-emergency@localhost
    Monitoring.http_address: 0.0.0.0
    Monitoring.http_port: 19090

    Server.initialized: true
    Server.fleetspeak_enabled: true
    Server.fleetspeak_server: svc-fleetspeak-admin:4444
    Server.fleetspeak_message_listen_address: 0.0.0.0:11111

    # Configuration for repacking client templates:
    PrivateKeys.executable_signing_private_key: "EXE_SIGN_PRIVATE_KEY"
    Client.executable_signing_public_key: "EXE_SIGN_PUBLIC_KEY"

    Client.fleetspeak_enabled: true
    ClientBuilder.fleetspeak_bundled: true
    ClientBuilder.template_dir: /client_templates
    ClientBuilder.executables_dir: /client_installers

    Target:Linux:
      ClientBuilder.fleetspeak_client_config: /config/config.textproto
    Target:Windows:
      ClientBuilder.fleetspeak_client_config: /config/config.textproto
    Target:Darwin:
      ClientBuilder.fleetspeak_client_config: /config/config.textproto
---
# Source: grr/templates/configmap/cfm-fleetspeak-services.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfm-fleetspeak-services
data:
  services.textproto: |
    services {
      name: "GRR"
      factory: "GRPC"
      config {
        [type.googleapis.com/fleetspeak.grpcservice.Config] {
          target: "svc-grr-frontend:11111"
          insecure: true
        }
      }
    }
    broadcast_poll_time {
      seconds: 1
    }
---
# Source: grr/templates/database/mysql.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfm-mysql-init
data:
  init.sh: |
    #!/bin/bash
    set -ex
    echo "** Creating default DB for GRR and fleetspeak"
    mariadb -u root -p"$MYSQL_ROOT_PASSWORD" --execute \
    "CREATE USER'grr-user'@'%' IDENTIFIED BY '$GRR_PASSWORD';
     CREATE DATABASE grr;
     GRANT ALL ON grr.* TO 'grr-user'@'%';
     CREATE USER 'fleetspeak-user'@'%' IDENTIFIED BY '$FLEETSPEAK_PASSWORD';
     CREATE DATABASE fleetspeak;
     GRANT ALL ON fleetspeak.* TO 'fleetspeak-user'@'%';
     FLUSH PRIVILEGES;"
    echo "** Finished creating DBs and users"
---
# Source: grr/templates/database/mysql.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
# Source: grr/templates/service/svc-fleetspeak-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-fleetspeak-admin
spec:
  selector:
    app.kubernetes.io/name: fleetspeak-admin
  ports:
    - protocol: TCP
      name: admin
      port: 4444
      targetPort: 4444
---
# Source: grr/templates/service/svc-fleetspeak-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-fleetspeak-frontend
spec:
  selector:
    app.kubernetes.io/name: fleetspeak-frontend
  ports:
    - protocol: TCP
      name: frontend
      port: 4443
      targetPort: 4443
---
# Source: grr/templates/service/svc-fleetspeak-frontend.yaml
kind: Service
apiVersion: v1
metadata:
  name: fleetspeak-frontend
spec:
  type: ExternalName
  externalName: svc-fleetspeak-frontend.default.svc.cluster.local
  ports:
  - port: 4443
---
# Source: grr/templates/service/svc-grr-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-grr-admin
spec:
  selector:
    app.kubernetes.io/name: grr-admin
  ports:
    - protocol: TCP
      name: admin
      port: 8000
      targetPort: 8000
---
# Source: grr/templates/service/svc-grr-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-grr-frontend
spec:
  selector:
    app.kubernetes.io/name: grr-frontend
  ports:
    - protocol: TCP
      name: frontend
      port: 11111
      targetPort: 11111
---
# Source: grr/templates/daemonset/dst-grr.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: grr
  labels:
    app: grr
spec:
  selector:
    matchLabels:
      app: grr
  template:
    metadata:
      labels:
        app: grr
    spec:
      # Only deploying GRR to nodes with the label 'grrclient=installed'.
      nodeSelector:
        grrclient: installed
      serviceAccountName: grr-client-sa
      # Uses the host network rather than the container network. This way
      # the hostname that shows up in GRR will contain the cluster name too.
      hostNetwork: true
      # Allows us to list all processes on the host rather than just those
      # from the container.
      hostPID: true
      # Labeling volumes from the root file system so they can be exposed to
      # our container.
      volumes:
      - name: root
        hostPath:
          path: /
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: grr
        image: grr-client:v0.1
        imagePullPolicy: Never
        # Making it a privileged container. This way the processes within
        # the container get almost the same privileges as those outside the
        # container (e.g. manipulating the network stack or accessing devices).
        securityContext:
          privileged: true
        # Exposing the machine's file system to the container (read-only).
        volumeMounts:
        - mountPath: /hostroot
          name: root
          readOnly: true
---
# Source: grr/templates/database/mysql.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mariadb:11.3.2
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sec-mysql
              key: mysql-password
        - name: GRR_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sec-mysql
              key: grr-password
        - name: FLEETSPEAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sec-mysql
              key: fleetspeak-password
        args: ["--max_allowed_packet=40M", "--log_bin_trust_function_creators=ON"]
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d/
      volumes:
      - name: mysql-init
        configMap:
          name: cfm-mysql-init
          items:
          - key: init.sh
            path: init.sh
---
# Source: grr/templates/deployment/dpl-fleetspeak-admin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-fleetspeak-admin
  labels:
    app: fleetspeak-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fleetspeak-admin
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fleetspeak-admin
        prometheus: fleetspeak-admin
    spec:
      serviceAccountName: grr-sa
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: fleetspeak-admin
        image: ghcr.io/google/fleetspeak:v0.1.17
        ports:
        - containerPort: 4444
          name: admin
        - containerPort: 19090
          name: metrics
        command: ["/fleetspeak/bin/server"]
        args: ["-alsologtostderr"]
        volumeMounts:
        - name: fleetspeak-admin-components
          mountPath: /etc/fleetspeak-server/server.components.config
          subPath: server.components.config
        - name: fleetspeak-services
          mountPath: /etc/fleetspeak-server/server.services.config
          subPath: server.services.config
      volumes:
      - name: fleetspeak-admin-components
        secret:
          secretName: sec-fleetspeak-admin-components
          items:
          - key: admin.components.textproto
            path: server.components.config
      - name: fleetspeak-services
        configMap:
          name: cfm-fleetspeak-services
          items:
          - key: services.textproto
            path: server.services.config
---
# Source: grr/templates/deployment/dpl-fleetspeak-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-fleetspeak-frontend
  labels:
    app: fleetspeak-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fleetspeak-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fleetspeak-frontend
        prometheus: fleetspeak-frontend
    spec:
      serviceAccountName: grr-sa
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      initContainers:
      - name: init-fleetspeak-frontend
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: busybox:1.36
        command: ['sh', '-c', "cp /stage/fleetspeak-server/server.*.config /etc/fleetspeak-server/; sed -i \"s/FLEETSPEAK_FRONTEND_IP/$POD_IP/g\" /etc/fleetspeak-server/server.components.config"]
        volumeMounts:
        - name: fleetspeak-config-volume
          mountPath: /etc/fleetspeak-server
        - name: fleetspeak-frontend-components
          mountPath: /stage/fleetspeak-server/server.components.config
          subPath: server.components.config
        - name: fleetspeak-services
          mountPath: /stage/fleetspeak-server/server.services.config
          subPath: server.services.config
      containers:
      - name: fleetspeak-frontend
        image: ghcr.io/google/fleetspeak:v0.1.17
        ports:
        - containerPort: 4443
          name: frontend
        - containerPort: 8080
          name: healthz
        - containerPort: 12000
          name: notification
        - containerPort: 19090
          name: metrics
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        command: ["/fleetspeak/bin/server"]
        args: ["-alsologtostderr"]
        volumeMounts:
        - name: fleetspeak-config-volume
          mountPath: /etc/fleetspeak-server
      volumes:
      - name: fleetspeak-config-volume
        emptyDir:
          sizeLimit: 5Mi
      - name: fleetspeak-frontend-components
        secret:
          secretName: sec-fleetspeak-frontend-components
          items:
          - key: frontend.components.textproto
            path: server.components.config
      - name: fleetspeak-services
        configMap:
          name: cfm-fleetspeak-services
          items:
          - key: services.textproto
            path: server.services.config
---
# Source: grr/templates/deployment/dpl-grr-admin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-grr-admin
  labels:
    app: grr-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grr-admin
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grr-admin
        prometheus: grr-admin
    spec:
      serviceAccountName: grr-sa
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: grr-admin
        image: ghcr.io/google/grr:v3.4.7.5-release
        ports:
        - containerPort: 8000
          name: admin
        - containerPort: 19090
          name: metrics
        args: ["-component", "admin_ui", "-config", "/usr/src/grr/grr/core/install_data/etc/server.local.yaml", "--logtostderr"]
        volumeMounts:
        - name: grr-admin-config
          mountPath: /usr/src/grr/grr/core/install_data/etc/server.local.yaml
          subPath: server.local.yaml
        - name: grr-exe-sign-keys
          readOnly: true
          mountPath: "/grr/exe/sign/keys"
      volumes:
      - name: grr-admin-config
        secret:
          secretName: sec-grr-server-local
          items:
          - key: server.local.yaml
            path: server.local.yaml
      - name: grr-exe-sign-keys
        secret:
          secretName: sec-grr-executable-signing-keys
---
# Source: grr/templates/deployment/dpl-grr-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-grr-frontend
  labels:
    app: grr-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grr-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grr-frontend
        prometheus: grr-frontend
    spec:
      serviceAccountName: grr-sa
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: grr-frontend
        image: ghcr.io/google/grr:v3.4.7.5-release
        ports:
        - containerPort: 11111
          name: frontend
        - containerPort: 19090
          name: metrics
        args: ["-component", "frontend", "-config", "/usr/src/grr/grr/core/install_data/etc/server.local.yaml", "--logtostderr"]
        volumeMounts:
        - name: grr-frontend-config
          mountPath: /usr/src/grr/grr/core/install_data/etc/server.local.yaml
          subPath: server.local.yaml
        - name: grr-exe-sign-keys
          readOnly: true
          mountPath: "/grr/exe/sign/keys"
      volumes:
      - name: grr-frontend-config
        secret:
          secretName: sec-grr-server-local
          items:
          - key: server.local.yaml
            path: server.local.yaml
      - name: grr-exe-sign-keys
        secret:
          secretName: sec-grr-executable-signing-keys
---
# Source: grr/templates/deployment/dpl-grr-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-grr-worker
  labels:
    app: grr-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grr-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grr-worker
        prometheus: grr-worker
    spec:
      serviceAccountName: grr-sa
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: grr-worker
        image: ghcr.io/google/grr:v3.4.7.5-release
        ports:
        - containerPort: 19090
          name: metrics
        args: ["-component", "worker", "-config", "/usr/src/grr/grr/core/install_data/etc/server.local.yaml", "--logtostderr"]
        volumeMounts:
        - name: grr-worker-config
          mountPath: /usr/src/grr/grr/core/install_data/etc/server.local.yaml
          subPath: server.local.yaml
        - name: grr-exe-sign-keys
          readOnly: true
          mountPath: "/grr/exe/sign/keys"
      volumes:
      - name: grr-worker-config
        secret:
          secretName: sec-grr-server-local
          items:
          - key: server.local.yaml
            path: server.local.yaml
      - name: grr-exe-sign-keys
        secret:
          secretName: sec-grr-executable-signing-keys
