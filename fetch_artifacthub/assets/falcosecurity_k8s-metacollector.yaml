---
# Source: k8s-metacollector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-k8s-metacollector
  namespace: default
  labels:
    helm.sh/chart: k8s-metacollector-0.1.10
    app.kubernetes.io/name: k8s-metacollector
    app.kubernetes.io/instance: my-k8s-metacollector
    app.kubernetes.io/version: "0.1.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "metadata-collector"
---
# Source: k8s-metacollector/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-k8s-metacollector
  labels:
    helm.sh/chart: k8s-metacollector-0.1.10
    app.kubernetes.io/name: k8s-metacollector
    app.kubernetes.io/instance: my-k8s-metacollector
    app.kubernetes.io/version: "0.1.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "metadata-collector"
rules:
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
      - namespaces
      - pods
      - replicationcontrollers
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-metacollector/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-k8s-metacollector
  labels:
    helm.sh/chart: k8s-metacollector-0.1.10
    app.kubernetes.io/name: k8s-metacollector
    app.kubernetes.io/instance: my-k8s-metacollector
    app.kubernetes.io/version: "0.1.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "metadata-collector"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-k8s-metacollector
subjects:
  - kind: ServiceAccount
    name: my-k8s-metacollector
    namespace: default
---
# Source: k8s-metacollector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-k8s-metacollector
  namespace: default
  labels:
    helm.sh/chart: k8s-metacollector-0.1.10
    app.kubernetes.io/name: k8s-metacollector
    app.kubernetes.io/instance: my-k8s-metacollector
    app.kubernetes.io/version: "0.1.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "metadata-collector"
spec:
  type: ClusterIP
  ports:    
    - name: broker-grpc
      port: 45000
      protocol: TCP
      targetPort: broker-grpc
    - name: health-probe
      port: 8081
      protocol: TCP
      targetPort: health-probe
    - name: metrics
      port: 8080
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: k8s-metacollector
    app.kubernetes.io/instance: my-k8s-metacollector
---
# Source: k8s-metacollector/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-k8s-metacollector
  namespace: default
  labels:
    helm.sh/chart: k8s-metacollector-0.1.10
    app.kubernetes.io/name: k8s-metacollector
    app.kubernetes.io/instance: my-k8s-metacollector
    app.kubernetes.io/version: "0.1.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "metadata-collector"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-metacollector
      app.kubernetes.io/instance: my-k8s-metacollector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: k8s-metacollector
        app.kubernetes.io/instance: my-k8s-metacollector
    spec:
      serviceAccountName: my-k8s-metacollector
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: k8s-metacollector
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "docker.io/falcosecurity/k8s-metacollector:0.1.1"
          imagePullPolicy: IfNotPresent
          command:
            - /meta-collector
          args:
            - run
          ports:            
            - name: "broker-grpc"
              containerPort: 45000
              protocol: TCP
            - name: "health-probe"
              containerPort: 8081
              protocol: TCP
            - name: "metrics"
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            {}
