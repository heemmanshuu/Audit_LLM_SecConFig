---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: kubefed-admission-webhook
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: default
  name: kubefed-admission-webhook-serving-cert
type: kubernetes.io/tls
stringData:
  tls.crt: "-----BEGIN CERTIFICATE-----\nMIIDkDCCAnigAwIBAgIRANaNq9hjozTDnmEufTbzKqkwDQYJKoZIhvcNAQELBQAw\nJzElMCMGA1UEAxMca3ViZWZlZC1hZG1pc3Npb24td2ViaG9vay1jYTAeFw0yNDA5\nMTYwODI5NDNaFw0zNDA5MTQwODI5NDNaMCcxJTAjBgNVBAMTHG15LWt1YmVmZWQt\nYWRtaXNzaW9uLXdlYmhvb2swggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQCmwj2iMpIdHrzyjVPlcx7UeRSq1RxllHh609qBzl8bEckklP2vBlWh/NB85u+m\nulCW4NkzPDYKj9n1yFuxra2nUARfqhOj60ExOzbQaAWEx2bPppr1MwBn1tekudXy\nyll/HaXdhl4EeX987600UlCyV8T5SmYnZXqC8/OOgh/t22cbSErF2ZPY6Qgv053h\nQYMATxXcNww55lPBG3OgLCzr+c6zjDG+9qXnn3IwQbURnIPvy4rwf8ftGaMrsEDe\nPtB388LrKZDIHXmhmSfe6UlUg1LHOFMqOxgy8N/hHE8W6AraKNayRbivpPGXSTat\nYkdQf9okkkzT0ymAD4mN6KbJAgMBAAGjgbYwgbMwDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFCfIBMnN3hGLy4/y4dUuR0HZLyh0MFMGA1UdEQRMMEqCIWt1YmVmZWQt\nYWRtaXNzaW9uLXdlYmhvb2suZGVmYXVsdIIla3ViZWZlZC1hZG1pc3Npb24td2Vi\naG9vay5kZWZhdWx0LnN2YzANBgkqhkiG9w0BAQsFAAOCAQEAm3WDZPb/AGQn+KV3\nd2bec45Jp7REOZNG1SWwmik+It7+37qwY97Gxo9MmaooMyP5SGO6kv4XkGXUbImP\n3z7g9+nFAgF80LWWsjzm3JMwdgT4PCZylss9fF3gUltCN9srE35qALx60Rx2NRnG\nzPk9Wi0EBRYeLqhKzuGoM/fUXVEPlUBprPL9dZMB8EQne2QuMyNHoUiZr+xgMZzx\nQkBR8J/TZu/BYfebXW8GBcBXvlwiGLyZa4zyXXstdBd8RCidcW1CeDHQ5CFcNxJX\nF6Nn9s4ZWTZoGUufaNexr2EWh5yWHqWyuGHb4xdBLd8sFSJTdaGjDlfueXDetwpu\nixRrrA==\n-----END CERTIFICATE-----\n"
  tls.key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEApsI9ojKSHR688o1T5XMe1HkUqtUcZZR4etPagc5fGxHJJJT9\nrwZVofzQfObvprpQluDZMzw2Co/Z9chbsa2tp1AEX6oTo+tBMTs20GgFhMdmz6aa\n9TMAZ9bXpLnV8spZfx2l3YZeBHl/fO+tNFJQslfE+UpmJ2V6gvPzjoIf7dtnG0hK\nxdmT2OkIL9Od4UGDAE8V3DcMOeZTwRtzoCws6/nOs4wxvval559yMEG1EZyD78uK\n8H/H7RmjK7BA3j7Qd/PC6ymQyB15oZkn3ulJVINSxzhTKjsYMvDf4RxPFugK2ijW\nskW4r6Txl0k2rWJHUH/aJJJM09MpgA+JjeimyQIDAQABAoIBAQCkLG1TZyg0pRNu\nVDc5mSnMEtyHB0Jqu04V1sazrwIw+0Sk0E4k5z6dOPHlVdKwuZMnx3vuliO6KD90\nW2nytkNVilCUAjRN2AmZt2tSqGZuf4W3f5XlOu32TSyGjzKUUiTkIcMvId8j1p3t\n2WUTMsshmYlhyJ5jwONpU1UAgxl+KEChGC44X04clQNhIw/uLqDbpuODgqLumfdP\nMeqMRFB/yIFZmnVSobkJagiRd/zuxyjRV+RUQvYbYHypfXAnoo0JGKDACwBlL4nr\njWzkoBE04lniudns0e+AAy4Hk/U7DJU65N1/lphbjPT4Ko4zUbVft21BfT9QO6b3\neFfZY5CRAoGBANoMS+uYOy4YJe1EFl7rAYFOZpaPX9gN2thGmBRRggGwzDasYIrR\nLy5DAUPXfjQymtgXHQfqgD7mBg34iIHc652vbCC+Ul+C6fDb7qTK/Trb58aGtYwI\noNist5Ng+AFQuRHX+rAtWtJovfPD1NDFUZNylryGEdSOMZI3jWC2m0oNAoGBAMPI\nnY3ta1TMqCQMyNLMJoektm6iXSPDwRabaZZUpAABs7Sgc5QuW3bB+H1sy12kkN8E\nDsgLgRND09t/5/NsE7+K+Odtv8sOwbx5kXNELm/Tp/vJp8xCQt/HqhSe0/uA/M7V\nfNsuxDsDuldF+e78sZUJPyKzvSshS476dWTouwytAoGALrql5paYUDeSoTePR8Y7\na1e++pM9ahMGDIWMgAY7w1r9WNY2VmmgH9zyP3TGMi+KKbdCXHjwBQrMz1+s+Y+7\n2u5GUPoYsyleM2UezqhF/sAz+sLR03Hh7q2NJgOJAtcm4mET83+00BTsaHpWeGth\nISVUkpB078WNcBWBsfFQdF0CgYEAsWlKdEDvYNFvj/NRy8sZIxN8CTbyBaWuhAji\nnkomrqbcLFK1SVLUqQHOZgG/KyUj7iNkLZxXI5j0EtSN4IRQROLu9+/4u02s+1iC\nGBxxo/39G+m5NxvYM6Zflf3zA9X3wImucYOoZ/3RzqHngMvVM8NERfLv+XRbXr3Q\nwVcvoKUCgYArANst8esZfJpQVwn802Os06NnJdRg9iL6MX/ECTfFm1QQl/ophvqj\nGZH2BtEQ+VQRjJ/6SA44nLk28DCgGvS786nj0ht7nmR4qHy5r3CTn/bXTK2vYOm7\nOfJlnDkmmnyqqGXkjxk7mITQo74mGMAQvOHd8Vctbd74d4TDg+ZN6Q==\n-----END RSA PRIVATE KEY-----\n"
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kubefed-admin
rules:
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: kubefed-edit
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - create
  - patch
  - delete
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kubefed-view
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-role
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - create
  - update
  - patch
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
# This role provides the necessary permissions to create admission reviews.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: system:kubefed:admission-requester

rules:
- apiGroups:
  - validation.core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - create
- apiGroups:
  - mutation.core.kubefed.io
  resources:
  - kubefedconfigs
  verbs:
  - create
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubefed-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubefed-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# name using the namespace. This is needed because admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:auth-delegator

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
# This clusterrolebinding grants permissions for the admission webhook to create
# admission reviews on behalf of the system:anonymous user.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:anonymous-auth

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:kubefed:admission-requester

subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:anonymous
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-config-role
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
# Only need access to these core namespaced resources in the KubeFed system
# namespace regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-admission-webhook-role
  namespace: default
rules:
- apiGroups:
  - core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Grant admission webhook access to core.kubefed.io in the KubeFed system
# namespace only, regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-admission-webhook-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-admission-webhook-role
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Allow the admission webhook to read the config for terminating
# authentication.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique resource name in
# the kube-system namespace using the namespace. This is needed because
# admission-webhooks do not currently support the ability to have
# namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:apiextension-viewer

  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-admission-webhook
  namespace: default
spec:
  selector:
    kubefed-admission-webhook: "true"
  ports:
  - port: 443
    targetPort: 8443
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-controller-manager-metrics-service
  namespace: default
  annotations:
    prometheus.io/port: "9090"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
spec:
  selector:
    kubefed-control-plane: "controller-manager"
  ports:
  - name: metrics
    port: 9090
    targetPort: metrics
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubefed-controller-manager
  namespace: default
  labels:
    kubefed-control-plane: controller-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      kubefed-control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      labels:
        kubefed-control-plane: controller-manager
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-controller
      containers:
      - command:
        - /hyperfed/controller-manager
        - "--v=2"
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        name: controller-manager
        ports:
        - containerPort: 9090
          name: metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 3
        resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 64Mi
      terminationGracePeriodSeconds: 10
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: kubefed-admission-webhook
  labels:
    kubefed-admission-webhook: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      kubefed-admission-webhook: "true"
  template:
    metadata:
      labels:
        kubefed-admission-webhook: "true"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-admission-webhook
      containers:
      - name: admission-webhook
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        command:
        - "/hyperfed/webhook"
        - "--secure-port=8443"
        - "--cert-dir=/var/serving-cert/"
        - "--v=8"
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8443
            scheme: HTTPS
        resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubefed-admission-webhook-serving-cert
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: clusterroles.rbac.authorization.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedClusterRole
    pluralName: federatedclusterroles
    scope: Cluster
    version: v1beta1
  propagation: Enabled
  targetType:
    group: rbac.authorization.k8s.io
    kind: ClusterRole
    pluralName: clusterroles
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: configmaps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedConfigMap
    pluralName: federatedconfigmaps
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ConfigMap
    pluralName: configmaps
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: deployments.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedDeployment
    pluralName: federateddeployments
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: Deployment
    pluralName: deployments
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: ingresses.networking.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedIngress
    pluralName: federatedingresses
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: networking.k8s.io
    kind: Ingress
    pluralName: ingresses
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: jobs.batch
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedJob
    pluralName: federatedjobs
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: batch
    kind: Job
    pluralName: jobs
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: namespaces
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedNamespace
    pluralName: federatednamespaces
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Namespace
    pluralName: namespaces
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: replicasets.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedReplicaSet
    pluralName: federatedreplicasets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: ReplicaSet
    pluralName: replicasets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: secrets
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedSecret
    pluralName: federatedsecrets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Secret
    pluralName: secrets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: serviceaccounts
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedServiceAccount
    pluralName: federatedserviceaccounts
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ServiceAccount
    pluralName: serviceaccounts
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: services
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedService
    pluralName: federatedservices
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Service
    pluralName: services
    scope: Namespaced
    version: v1
---
# Source: kubefed/charts/controllermanager/templates/kubefedconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: KubeFedConfig
metadata:
  name: kubefed
  namespace: default
spec:
  scope: "Cluster"
  controllerDuration:
    availableDelay: "20s"
    unavailableDelay: "60s"
    cacheSyncTimeout: "5m"
  leaderElect:
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "5s"
    resourceLock: "configmaps"
  clusterHealthCheck:
    period: "10s"
    failureThreshold: 3
    successThreshold: 1
    timeout: "3s"
  syncController:
    maxConcurrentReconciles: 1
    adoptResources: "Enabled"
  statusController:
    maxConcurrentReconciles: 1
  featureGates:
  - name: PushReconciler
    configuration: "Enabled"
  - name: SchedulerPreferences
    configuration: "Enabled"
  # NOTE: Commented feature gate to fix https://github.com/kubernetes-sigs/kubefed/issues/1333
  #- name: RawResourceStatusCollection
  #  configuration: "Disabled"
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
# The same comments for ValidatingWebhookConfiguration apply here to
# MutatingWebhookConfiguration.
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: mutation.core.kubefed.io
  annotations:
webhooks:
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /default-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU8xRko0TlNtaHNtUWRjeit1ZHZzQ2d3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBNQpNVFl3T0RJNU5ETmFGdzB6TkRBNU1UUXdPREk1TkROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEQTVKcEkzeWlDOFdpVWFvMDRkd0Z4V1QwMlZBb1lsWXo3WkluellJRHNxc2dSaVBiN3RUd3pNam1DSngwMwpZS1ZZbEpPaVdNeUdJMWg4WnBLT0p3SEgxZjdVcFVoV0JBdlB3c3RLUXp5dzBXdElmNzVVWEN1dmhqdTNJVXlFCmF3MkVDKy93NzNKQkQ3WjNIZ3FKVmZ5Vk5kRVFRbklaOUxnM3pBYjJaczdMMStnaVhtbWFCTlNGWXhnQkhDeDQKK0FxbXZ2N1pXMStwZVlyanlYYXVQTGQrZ2hIUVBDVXlacWhFaENIeGJqNVR0MVhnSzBNdDIzSlZFbFVnd2tjVQp3U3gweEdYVHhLc0NRZlZhQ2lKV1htRkRrSE5kaUU2c2hRK1lVUmZFeHA2ZnBXSW5BaXhuRWZVdjgrQ0RIRHJrCkxHRnFjYllQM0ZIU2dIYUN6OXRVbmk1WkFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVUo4Z0V5YzNlRVl2TGovTGgxUzVIUWRrdktIUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSjhIClZwdnNtUVVQcGl6NFZXN3JwM1c3OEUvQXdBSkYyaGdkUWQ2L21vb3dqb2F0OGxET3B1WlR6UFJ1SFh4bkRTd3UKT1JtcjJHVko1RHdNMlBaTjNsRjRqdjZZOFlmN0txcUNiRTRWZUxaQjI0bmhpMkhNTW96YnIxRVZXMGYzdWp3YgpiYmZHTUtWcmpta2M1b3VvNHpPaXRLUGU4clFZUXRMWEp0bkhDcCtITXNBWkhRTmhydXFkYUVJNVk3ZTBIYTEzCjVLcGFpeENhS1FSU3ErK2JWZkgzcnhBS1g2TENndEJ3UXphM0dVRlcxRVhjZ3o1UUJWSHRoZklGOXNMb2FtbDEKcVd1WUpabTZMYXFWQlJGalpBUnBMeWpBMmhJQ1g1ZFJ3UXJKMkVlc0pUbTZPUjR6eXA5YXZjWWJLc2pTRHhyVwp4eCtMYnRXVW9wcUFoUVlYbDgwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# using the namespace.
  name: validations.core.kubefed.io
  annotations:
webhooks:
- name: federatedtypeconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-federatedtypeconfigs
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU8xRko0TlNtaHNtUWRjeit1ZHZzQ2d3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBNQpNVFl3T0RJNU5ETmFGdzB6TkRBNU1UUXdPREk1TkROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEQTVKcEkzeWlDOFdpVWFvMDRkd0Z4V1QwMlZBb1lsWXo3WkluellJRHNxc2dSaVBiN3RUd3pNam1DSngwMwpZS1ZZbEpPaVdNeUdJMWg4WnBLT0p3SEgxZjdVcFVoV0JBdlB3c3RLUXp5dzBXdElmNzVVWEN1dmhqdTNJVXlFCmF3MkVDKy93NzNKQkQ3WjNIZ3FKVmZ5Vk5kRVFRbklaOUxnM3pBYjJaczdMMStnaVhtbWFCTlNGWXhnQkhDeDQKK0FxbXZ2N1pXMStwZVlyanlYYXVQTGQrZ2hIUVBDVXlacWhFaENIeGJqNVR0MVhnSzBNdDIzSlZFbFVnd2tjVQp3U3gweEdYVHhLc0NRZlZhQ2lKV1htRkRrSE5kaUU2c2hRK1lVUmZFeHA2ZnBXSW5BaXhuRWZVdjgrQ0RIRHJrCkxHRnFjYllQM0ZIU2dIYUN6OXRVbmk1WkFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVUo4Z0V5YzNlRVl2TGovTGgxUzVIUWRrdktIUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSjhIClZwdnNtUVVQcGl6NFZXN3JwM1c3OEUvQXdBSkYyaGdkUWQ2L21vb3dqb2F0OGxET3B1WlR6UFJ1SFh4bkRTd3UKT1JtcjJHVko1RHdNMlBaTjNsRjRqdjZZOFlmN0txcUNiRTRWZUxaQjI0bmhpMkhNTW96YnIxRVZXMGYzdWp3YgpiYmZHTUtWcmpta2M1b3VvNHpPaXRLUGU4clFZUXRMWEp0bkhDcCtITXNBWkhRTmhydXFkYUVJNVk3ZTBIYTEzCjVLcGFpeENhS1FSU3ErK2JWZkgzcnhBS1g2TENndEJ3UXphM0dVRlcxRVhjZ3o1UUJWSHRoZklGOXNMb2FtbDEKcVd1WUpabTZMYXFWQlJGalpBUnBMeWpBMmhJQ1g1ZFJ3UXJKMkVlc0pUbTZPUjR6eXA5YXZjWWJLc2pTRHhyVwp4eCtMYnRXVW9wcUFoUVlYbDgwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - federatedtypeconfigs
    - federatedtypeconfigs/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedclusters.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-kubefedcluster
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU8xRko0TlNtaHNtUWRjeit1ZHZzQ2d3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBNQpNVFl3T0RJNU5ETmFGdzB6TkRBNU1UUXdPREk1TkROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEQTVKcEkzeWlDOFdpVWFvMDRkd0Z4V1QwMlZBb1lsWXo3WkluellJRHNxc2dSaVBiN3RUd3pNam1DSngwMwpZS1ZZbEpPaVdNeUdJMWg4WnBLT0p3SEgxZjdVcFVoV0JBdlB3c3RLUXp5dzBXdElmNzVVWEN1dmhqdTNJVXlFCmF3MkVDKy93NzNKQkQ3WjNIZ3FKVmZ5Vk5kRVFRbklaOUxnM3pBYjJaczdMMStnaVhtbWFCTlNGWXhnQkhDeDQKK0FxbXZ2N1pXMStwZVlyanlYYXVQTGQrZ2hIUVBDVXlacWhFaENIeGJqNVR0MVhnSzBNdDIzSlZFbFVnd2tjVQp3U3gweEdYVHhLc0NRZlZhQ2lKV1htRkRrSE5kaUU2c2hRK1lVUmZFeHA2ZnBXSW5BaXhuRWZVdjgrQ0RIRHJrCkxHRnFjYllQM0ZIU2dIYUN6OXRVbmk1WkFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVUo4Z0V5YzNlRVl2TGovTGgxUzVIUWRrdktIUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSjhIClZwdnNtUVVQcGl6NFZXN3JwM1c3OEUvQXdBSkYyaGdkUWQ2L21vb3dqb2F0OGxET3B1WlR6UFJ1SFh4bkRTd3UKT1JtcjJHVko1RHdNMlBaTjNsRjRqdjZZOFlmN0txcUNiRTRWZUxaQjI0bmhpMkhNTW96YnIxRVZXMGYzdWp3YgpiYmZHTUtWcmpta2M1b3VvNHpPaXRLUGU4clFZUXRMWEp0bkhDcCtITXNBWkhRTmhydXFkYUVJNVk3ZTBIYTEzCjVLcGFpeENhS1FSU3ErK2JWZkgzcnhBS1g2TENndEJ3UXphM0dVRlcxRVhjZ3o1UUJWSHRoZklGOXNMb2FtbDEKcVd1WUpabTZMYXFWQlJGalpBUnBMeWpBMmhJQ1g1ZFJ3UXJKMkVlc0pUbTZPUjR6eXA5YXZjWWJLc2pTRHhyVwp4eCtMYnRXVW9wcUFoUVlYbDgwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedclusters
    - kubefedclusters/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU8xRko0TlNtaHNtUWRjeit1ZHZzQ2d3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBNQpNVFl3T0RJNU5ETmFGdzB6TkRBNU1UUXdPREk1TkROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEQTVKcEkzeWlDOFdpVWFvMDRkd0Z4V1QwMlZBb1lsWXo3WkluellJRHNxc2dSaVBiN3RUd3pNam1DSngwMwpZS1ZZbEpPaVdNeUdJMWg4WnBLT0p3SEgxZjdVcFVoV0JBdlB3c3RLUXp5dzBXdElmNzVVWEN1dmhqdTNJVXlFCmF3MkVDKy93NzNKQkQ3WjNIZ3FKVmZ5Vk5kRVFRbklaOUxnM3pBYjJaczdMMStnaVhtbWFCTlNGWXhnQkhDeDQKK0FxbXZ2N1pXMStwZVlyanlYYXVQTGQrZ2hIUVBDVXlacWhFaENIeGJqNVR0MVhnSzBNdDIzSlZFbFVnd2tjVQp3U3gweEdYVHhLc0NRZlZhQ2lKV1htRkRrSE5kaUU2c2hRK1lVUmZFeHA2ZnBXSW5BaXhuRWZVdjgrQ0RIRHJrCkxHRnFjYllQM0ZIU2dIYUN6OXRVbmk1WkFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVUo4Z0V5YzNlRVl2TGovTGgxUzVIUWRrdktIUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSjhIClZwdnNtUVVQcGl6NFZXN3JwM1c3OEUvQXdBSkYyaGdkUWQ2L21vb3dqb2F0OGxET3B1WlR6UFJ1SFh4bkRTd3UKT1JtcjJHVko1RHdNMlBaTjNsRjRqdjZZOFlmN0txcUNiRTRWZUxaQjI0bmhpMkhNTW96YnIxRVZXMGYzdWp3YgpiYmZHTUtWcmpta2M1b3VvNHpPaXRLUGU4clFZUXRMWEp0bkhDcCtITXNBWkhRTmhydXFkYUVJNVk3ZTBIYTEzCjVLcGFpeENhS1FSU3ErK2JWZkgzcnhBS1g2TENndEJ3UXphM0dVRlcxRVhjZ3o1UUJWSHRoZklGOXNMb2FtbDEKcVd1WUpabTZMYXFWQlJGalpBUnBMeWpBMmhJQ1g1ZFJ3UXJKMkVlc0pUbTZPUjR6eXA5YXZjWWJLc2pTRHhyVwp4eCtMYnRXVW9wcUFoUVlYbDgwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "my-kubefed-kubefed-config-hook"
  namespace: "default"
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  setup.sh: |-
    #!/bin/bash
    set -euo pipefail

    kubectl patch kubefedconfig -n default kubefed --type='json' -p='[{"op": "add", "path": "/spec/featureGates", "value":[{"configuration": "Enabled","name":"PushReconciler"},{"configuration": "Disabled","name":"RawResourceStatusCollection"},{"configuration": "Enabled","name":"SchedulerPreferences"}]}]'

    echo "Kubefedconfig patched successfully!"

    kubectl rollout restart deployment/kubefed-controller-manager -n default
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["patch","get"]
  - apiGroups: ["core.kubefed.io"]
    resources: ["kubefedconfigs"]
    verbs: ["patch","get"]
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-hook
subjects:
  - kind: ServiceAccount
    name: kubefed-config-hook
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-kubefed-gecvk34uaf"
  namespace: "default"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "my-kubefed"
    app.kubernetes.io/version: 0.8.1
    helm.sh/chart: "controllermanager-0.0.6"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  template:
    metadata:
      name: "my-kubefed"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "my-kubefed"
        helm.sh/chart: "controllermanager-0.0.6"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      restartPolicy: Never
      serviceAccountName: kubefed-config-hook
      automountServiceAccountToken: true
      containers:
      - name: post-install-job
        image: "bitnami/kubectl:1.17.16"
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/bash"]
        args: ["/opt/scripts/setup.sh"]
        volumeMounts:
        - name: "scripts"
          mountPath: "/opt/scripts"
      volumes:
      - name: "scripts"
        configMap:
          name: "my-kubefed-kubefed-config-hook"
