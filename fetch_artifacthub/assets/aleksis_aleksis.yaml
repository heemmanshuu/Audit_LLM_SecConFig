---
# Source: aleksis/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "my-aleksis-app"
  labels:
    app: my-aleksis
    chart: aleksis-0.4.2
    heritage: Helm
    release: my-aleksis
spec:
  selector:
    matchLabels:
      app: my-aleksis-app
      release: my-aleksis
  minAvailable: 1
---
# Source: aleksis/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "my-aleksis-worker"
  labels:
    app: my-aleksis
    chart: aleksis-0.4.2
    heritage: Helm
    release: my-aleksis
spec:
  selector:
    matchLabels:
      app: my-aleksis-worker
      release: my-aleksis
  minAvailable: 1
---
# Source: aleksis/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-aleksis-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
---
# Source: aleksis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-aleksis
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
---
# Source: aleksis/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-aleksis-postgresql
  namespace: default
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.1
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "VUtjenlFMFJMeA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: aleksis/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-aleksis-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "YUdUZk5wTHR1Sw=="
---
# Source: aleksis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-aleksis-aleksis
  namespace: "default"
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  secret_configured.yaml: |
    dynaconf_merge: true
    {}
  secret_generated.yaml: |
    dynaconf_merge: true
    secret_key: "1ONVm59obtjkQbqsg0glzoKg7WzorNGSAwvZI91WjGxXXFfeCUMopbhCe1La9rjW"
    auth:
      superuser:
        password: "ORu53c18ywt9"
---
# Source: aleksis/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-aleksis-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    # End of replica configuration
---
# Source: aleksis/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-aleksis-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ $? == 124 ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ $? == 124 ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ $? == 124 ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ $? == 124 ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: aleksis/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-aleksis-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: aleksis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-aleksis-config
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
data:
  configured.yaml: |
    http:
      allowed_hosts: '[*]'
  generated.yaml: |
    dynaconf_merge: true
    database:
      host: "my-aleksis-postgresql"
      user: "aleksis"
      name: "aleksis"
    redis:
      host: "my-aleksis-redis-master"
    http:
      allowed_hosts:
        - "*"
---
# Source: aleksis/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-aleksis-postgresql-hl
  namespace: default
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.1
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/component: primary
---
# Source: aleksis/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-aleksis-postgresql
  namespace: default
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.1
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/component: primary
---
# Source: aleksis/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-aleksis-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-aleksis
---
# Source: aleksis/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-aleksis-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/component: master
---
# Source: aleksis/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-aleksis-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/component: replica
---
# Source: aleksis/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-aleksis
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: my-aleksis-app
    release: my-aleksis
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
---
# Source: aleksis/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-aleksis-app
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
    app: my-aleksis-app
    release: my-aleksis
spec:
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: aleksis
      app.kubernetes.io/instance: my-aleksis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aleksis
        app.kubernetes.io/instance: my-aleksis
        app: my-aleksis-app
        release: my-aleksis
    spec:
      serviceAccountName: my-aleksis
      securityContext:
        fsGroup: 33
        runAsNonRoot: true
      containers:
        - name: aleksis-app
          securityContext:
            {}
          image: "registry.edugit.org/aleksis/official/aleksis-core:master"
          imagePullPolicy: Always
          env:
            - name: PREPARE
              value: "0"
            - name: ALEKSIS_database__password
              valueFrom:
                secretKeyRef:
                  name: "my-aleksis-postgresql"
                  key: postgresql-password
            - name: ALEKSIS_redis__password
              valueFrom:
                secretKeyRef:
                  name: "my-aleksis-redis"
                  key: redis-password
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/aleksis
              name: my-aleksis-config
              readOnly: true
            - mountPath: /etc/aleksis/secret
              name: my-aleksis-secret
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health/
              port: http
              httpHeaders:
               - name: Accept
                 value: application/json
               - name: Host
                 value: "my-aleksis.linode.aleksis.org"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
               - name: Host
                 value: "my-aleksis.linode.aleksis.org"
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health/
              port: http
              httpHeaders:
               - name: Accept
                 value: application/json
               - name: Host
                 value: "my-aleksis.linode.aleksis.org"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            null
      volumes:
        - name: my-aleksis-config
          configMap:
            name: my-aleksis-config
        - name: my-aleksis-secret
          secret:
            secretName: my-aleksis-aleksis
---
# Source: aleksis/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-aleksis-celery-worker
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
    app: my-aleksis-worker
    release: my-aleksis
spec:
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: aleksis
      app.kubernetes.io/instance: my-aleksis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aleksis
        app.kubernetes.io/instance: my-aleksis
        app: my-aleksis-worker
        release: my-aleksis
    spec:
      serviceAccountName: my-aleksis
      securityContext:
        fsGroup: 33
        runAsNonRoot: true
      containers:
        - name: aleksis-celery-worker
          securityContext:
            {}
          image: "registry.edugit.org/aleksis/official/aleksis-core:master"
          imagePullPolicy: Always
          env:
            - name: RUN_MODE
              value: celery-worker
            - name: PREPARE
              value: "0"
            - name: ALEKSIS_database__password
              valueFrom:
                secretKeyRef:
                  name: "my-aleksis-postgresql"
                  key: postgresql-password
            - name: ALEKSIS_redis__password
              valueFrom:
                secretKeyRef:
                  name: "my-aleksis-redis"
                  key: redis-password
          volumeMounts:
            - mountPath: /etc/aleksis
              name: my-aleksis-config
              readOnly: true
            - mountPath: /etc/aleksis/secret
              name: my-aleksis-secret
              readOnly: true
          resources:
            null
      volumes:
        - name: my-aleksis-config
          configMap:
            name: my-aleksis-config
        - name: my-aleksis-secret
          secret:
            secretName: my-aleksis-aleksis
---
# Source: aleksis/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-aleksis-celery-beat
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
    app: my-aleksis-beat
    release: my-aleksis
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: aleksis
      app.kubernetes.io/instance: my-aleksis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aleksis
        app.kubernetes.io/instance: my-aleksis
        app: my-aleksis-beat
        release: my-aleksis
    spec:
      serviceAccountName: my-aleksis
      securityContext:
        fsGroup: 33
        runAsNonRoot: true
      containers:
        - name: aleksis-celery-beat
          securityContext:
            {}
          image: "registry.edugit.org/aleksis/official/aleksis-core:master"
          imagePullPolicy: Always
          env:
            - name: PREPARE
              value: "0"
            - name: RUN_MODE
              value: celery-beat
            - name: ALEKSIS_database__password
              valueFrom:
                secretKeyRef:
                  name: "my-aleksis-postgresql"
                  key: postgresql-password
            - name: ALEKSIS_redis__password
              valueFrom:
                secretKeyRef:
                  name: "my-aleksis-redis"
                  key: redis-password
          volumeMounts:
            - mountPath: /etc/aleksis
              name: my-aleksis-config
              readOnly: true
            - mountPath: /etc/aleksis/secret
              name: my-aleksis-secret
              readOnly: true
      volumes:
        - name: my-aleksis-config
          configMap:
            name: my-aleksis-config
        - name: my-aleksis-secret
          secret:
            secretName: my-aleksis-aleksis
---
# Source: aleksis/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-aleksis-app
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-aleksis-app
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: aleksis/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-aleksis-celery-worker
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-aleksis-celery-worker
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: aleksis/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-aleksis-postgresql
  namespace: default
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.1
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-aleksis-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-aleksis
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-aleksis-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.0.1
        app.kubernetes.io/instance: my-aleksis
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-aleksis
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:13-debian-10
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-aleksis-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: aleksis/charts/redis/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-aleksis-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-aleksis
      app.kubernetes.io/component: master
  serviceName: my-aleksis-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.3.0
        app.kubernetes.io/instance: my-aleksis
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: a894a3cfbe1490c10394b2c1fc94e9ebbd97a650f35c88d9cf599c1a7613e397
        checksum/health: 2ccfd32bae692df1fdd3e79de9a2aec334c18c282a5a959fbeb2e1ffcddbc1bf
        checksum/scripts: 210b9363faf916975b989d0915ef3db4f7a75a8be0b994926094e467c1144f6b
        checksum/secret: 145190d5b704031fb1b36e2bc432e4cda03126e027fe619e2a5397500b2116f4
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-aleksis-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-aleksis
                    app.kubernetes.io/component: master
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r103
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-aleksis-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-aleksis-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-aleksis-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-aleksis-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-aleksis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: aleksis/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-aleksis-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.3.0
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-aleksis
      app.kubernetes.io/component: replica
  serviceName: my-aleksis-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.3.0
        app.kubernetes.io/instance: my-aleksis
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: a894a3cfbe1490c10394b2c1fc94e9ebbd97a650f35c88d9cf599c1a7613e397
        checksum/health: 2ccfd32bae692df1fdd3e79de9a2aec334c18c282a5a959fbeb2e1ffcddbc1bf
        checksum/scripts: 210b9363faf916975b989d0915ef3db4f7a75a8be0b994926094e467c1144f6b
        checksum/secret: 1d249873a56eaf5d01a778e545d3abcb0840e28d93f314d97b679be19eb63446
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-aleksis-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-aleksis
                    app.kubernetes.io/component: replica
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r103
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: my-aleksis-redis-master-0.my-aleksis-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-aleksis-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-aleksis-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: my-aleksis-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-aleksis-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-aleksis-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-aleksis
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: aleksis/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-aleksis
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "my-aleksis.linode.aleksis.org"
      secretName: my-aleksis-aleksis-tls
  rules:
    - host: "my-aleksis.linode.aleksis.org"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-aleksis
                port:
                  number: 8000
---
# Source: aleksis/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-aleksis-test-connection"
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-aleksis:8000']
  restartPolicy: Never
---
# Source: aleksis/templates/jobs.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-aleksis-migrations
  labels:
    helm.sh/chart: aleksis-0.4.2
    app.kubernetes.io/name: aleksis
    app.kubernetes.io/instance: my-aleksis
    app.kubernetes.io/version: "2021.06"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
spec:
  template:
    spec:
      containers:
      - name: my-aleksis-prepare
        image: "registry.edugit.org/aleksis/official/aleksis-core:master"
        imagePullPolicy: Always
        env:
          - name: RUN_MODE
            value: prepare
          - name: ALEKSIS_database__password
            valueFrom:
              secretKeyRef:
                name: "my-aleksis-postgresql"
                key: postgresql-password
          - name: ALEKSIS_redis__password
            valueFrom:
              secretKeyRef:
                name: "my-aleksis-redis"
                key: redis-password
        volumeMounts:
          - mountPath: /etc/aleksis
            name: my-aleksis-config
            readOnly: true
          - mountPath: /etc/aleksis/secret
            name: my-aleksis-secret
            readOnly: true
      volumes:
        - name: my-aleksis-config
          configMap:
            name: my-aleksis-config
        - name: my-aleksis-secret
          secret:
            secretName: my-aleksis-aleksis
      restartPolicy: Never
  backoffLimit: 4
