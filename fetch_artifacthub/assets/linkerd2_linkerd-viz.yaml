---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: default
  labels:
    linkerd.io/extension: viz
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: default
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROVENDQWgyZ0F3SUJBZ0lSQU92eDFrUlFUZFFsa3M3Qi81T1laZ3d3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUI0WERUSTBNRGt4TmpBNApNVEV3T1ZvWERUSTFNRGt4TmpBNE1URXdPVm93SXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsClptRjFiSFF1YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdk01cHZEVkcKREhjcWpGZ0xSSEJVczJFUlNscitEYzRVclB6MzdqU1pjNkVhQ09pUU50NHJRdnZHWVJqRmZGbWR2QTZ3S1EwYwpsalBwbmlwZlJSMWtiWGFzU2ZJbFdDL2V0aHhSKy9RNVJLc3lKK2NCa05WUndaSXNPMGRSYXBRdkJaK1F5WVd0CjZ5REpwNGsxZFVtWkkvQjE4L2l2YjBOVUVMQXdaK3dCY3NXdkJaamdCWTAvVkNmR2htRmduNmZXTXpSRGFYOVgKWEM3cElVT0ZWUTBtcHRoL2F0aDN6QTU1VFVjS2VPL0pKMC9OV3NCcHJ3OWNZZjJuQ3BoSHBranhmZmdFNDZpdwpEblozUHZVUTI3OGhZODB2UHZWNlRMcWJrUU5keC8vc1YzR3JwT2MrSjZpdm41QXQzM1ZRSHVYWDBTYkhsQzFwCitHOUFDUW84K1N2MkV3SURBUUFCbzJRd1lqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdJd1lEVlIwUkJCd3dHb0lZZEdGdwpMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBSGxnNkZOWElrCnNVbUpxQUw0NWc1dVV0N2ZvUUlVOFZ6anNsQ0V6VjBFeWdidWlVM1JTMk9qeU00cjJwUGpWT3RIbi9XRjBZNkIKSVBqR1pjVXNRQWxOTDNRQW02Wmk0NXAzaUpqZXFHbnNTc2xwRG93NERyNnl1dEZhZTZBRnl5Nm1PdCtyS0hPNQpja1gyOUJFMVozUFNZQmJ6aUdyME1PeFI4WFpLbFJyRk44WUlsTERTdk5XTUJqUHJrL2R2dm1sZjRVVVptVGhDClp5UTYySExmeVp1Tk1FVUxsbHplTE9qVGUxTWt4dGU0WVNKUEc1V1hodWI3cC9MMDdyYTA4M2lLQlpNQVRVVlMKcWxITEg5aVR2NWMyZ1AwQ0tIekZJempRQVJFM3cvRVVkTExFRld0UGJjMVMyV1hKQlZXRnhvb3JBLzlQY0RDYQptRW10TnJkckt6WXQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdk01cHZEVkdESGNxakZnTFJIQlVzMkVSU2xyK0RjNFVyUHozN2pTWmM2RWFDT2lRCk50NHJRdnZHWVJqRmZGbWR2QTZ3S1EwY2xqUHBuaXBmUlIxa2JYYXNTZklsV0MvZXRoeFIrL1E1UktzeUorY0IKa05WUndaSXNPMGRSYXBRdkJaK1F5WVd0NnlESnA0azFkVW1aSS9CMTgvaXZiME5VRUxBd1ord0Jjc1d2QlpqZwpCWTAvVkNmR2htRmduNmZXTXpSRGFYOVhYQzdwSVVPRlZRMG1wdGgvYXRoM3pBNTVUVWNLZU8vSkowL05Xc0JwCnJ3OWNZZjJuQ3BoSHBranhmZmdFNDZpd0RuWjNQdlVRMjc4aFk4MHZQdlY2VExxYmtRTmR4Ly9zVjNHcnBPYysKSjZpdm41QXQzM1ZRSHVYWDBTYkhsQzFwK0c5QUNRbzgrU3YyRXdJREFRQUJBb0lCQVFDcGVQWDcxQzNlUHBEWQpqS2NBZFh2eHoyMC91dEZUL3VrY0phMCtDY1M3djUybzVXZWRlR3FJbzRwNzJVcGF4ZTRKd1gxcU83U3ZOa1c2CmpQb2JCYmtCY0laUmthTG50NEJISXNDTVVibWQ0N1VQa0JFZHVmeTZyY1E2S1ZmeFBMWEFiR3dBRjVmMjkrVksKRnFUL2RHS2JtZG1tZGxDeXBGS3U4QmRqRUxwMEUyVVZ3L2VmNzZUYllDbTFKU1ZTNTZFRlZJNFVuVk1PZXNhRgpQVTZHSjBnMVgwc1hjVnNUV2VFT2RLOVpPWElQSkVVajZMOHBjSW9uQ3ZvVkxiOFRzMUh1bHFBM0ZYMDRKcW1MCllLQndYMVgva0hXbHNGM2M2Yy85OUJ3QmtrcHZDRWpRSkNBdkRDVnRhZlBmbldwTGg2KzF1VFNMRnlaaThyaEsKY2pNcXBnaHhBb0dCQVBGQXp0OG1pQlBMalQrL2NMSkQrTVlsV2s0RldwbitOaDRIZjZDUGEwUU5TbWswQ010egpFS0pZYUNuRC9nOFpxNDJrRXdkd2UyUjViaXQ1UU8zL2x3Q3hRaGMzQzhqRzlhQSt0VStMQnZKaFVNRXc0Q1RUClByZ1lGMjM3Wm0vcFBRMUtvdUZjeFBaLzVIWDdDUVl4MVk5M0ZIRzJHdVBvazFydkZyZDNZVnVGQW9HQkFNaFkKNXllUEt1TmVDZFVoVjFJdGY0cUxmWDVqMTJzRjJTajE2REJXM0s5eUdvYlBVSG5mUnBtc096QjUzRXIzVzk1RQpWRlVNaGxLbmcyZmxsOWZRRDgxZUYvOWFST1FXTGlnWjdJeVgwZ2drNFgzQmR4WWJSTDBIaDcyYlU3V0F6NCt6CjJYYUlaSEJxVy84QzlWemFNYmR5bGZXV0tnMUgrK0FadEpaVDBvSzNBb0dCQUxUdUE3ZTdjQVpZZkFBNUZNMjgKeUUvaUo0Mm4ya0R2TTZybHVNT3ppNkNuend5REo2MWRDRGFZMHRXdjFWT0J6dlVVL2Vod1pUbi9ENjZ1NnhFUwp4QzZTd1p3amZrVC9ZYXJpSEp3aENmNnhHUjBxQ0kvVmxZMy9FMk02VGFMVWF5TVN2SUVEVC93R0FsS3hDQjJMCk5qeTM4NjhzQVpLM0UvdjRuekxNNTBqNUFvR0FlQWlUemFiQU9tTWdIdnFQMTZOODA2UUpOdzFZaGoyRnd6MjUKdENTR3FmTUNJNXpZQ1h5VlR3TGFuNHVUU2JMejdySWZtS2tkWFM0UjA5REI3Y0l4aFlpSGRpMCtNeTE2ei9uZwpPTWZKUmFuYkU3NHl2Q0x3UnhUWTVlZkcrbXJIY01CL1hMNFE5eTB5R3hKSnNTemxOcFRIZGRGWE5vZlhSNGYvCkkwWHJUUGNDZ1lFQTFTbHYrdFBSQXdYdmVvbzhRQkdrdkVGcUkwaHRxY05mdkNQUVZRMzN6Y0JOU0dsUHVTa1kKdXZ3Nmlna2l4NzRBWTlVaU9RNlFnbExCVHRzNS96VC9SUW9taWUyTko2aStHL0szVm9SNjV6VXljT1R1T1hTNgpIemVYVkcyTkdpYm5PZ2VBMTR1QmVjZzcxQjhhZmNHbmhrOHRkUHVMNzM3U2F4THJpUTBMcEI0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHakNDQWdLZ0F3SUJBZ0lSQUpUbk9OVXd2TFkvb3ByajBoWGdJbm93RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUI0WERUSTBNRGt4TmpBNE1URXdPVm9YRFRJMQpNRGt4TmpBNE1URXdPVm93R2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcEYvdUUwZ3NHdzZhQkYvbTFYN2I4blRBQ0RCUTY4SzYKNFNOZzhGaHUyVU5wd0RPZExPdDlZQjZiZS9YRTRnUmZuZFZsOGdmaGNROTJ0RFo3WWJDWTZwWFVxRWRkSjBJVAp0bTdQbmExb0kxdnFQc3l0SjY1Q01wM2EwSXNEMVlzNFZjbVVYTXZrdzVZanZlU1FHUnNhL2tMcU1GSGR4elZCCkF4d1JwU0VTbEoxS2lnRENLbEMrcDE3aFhBQUZMTkJ2bTM1LzZJd3lGUDRwSkhqZDhEaVBpSGM5a3RzeE5jWjcKMDFiclo1NmROSGZ4Nkd3T2J2eDBKRCtaZm9rVS95eDBRUms0YVJ4MWZYQUpMbVVJbU1meFdxaCtPQk1NQTB3MwpsN1FLOHJJR1ZvWW5XQ2NIRnY3WXhzSGtqSjBncFdzNjJ6S2Y1d01MRzMrM3ZBZVlHL1BwcndJREFRQUJvMXN3CldUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUF3R0ExVWRFd0VCL3dRQ01BQXdHZ1lEVlIwUkJCTXdFWUlQZEdGd0xtUmxabUYxYkhRdWMzWmpNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFCUTVHOFRWbjR4V2syQ24zZTBjV2s1ZmlNNERWVlhyaVFidHV1RVZmQkI0YmpXCjFSUUM0NDBJa0lQTXJoZjliZjZQZzlNTHpjUkFhblJwVHpMcTZYclZTYVpCdEFOTExHQTM1RUg0eTRzeXBrQVgKTkJCSnV0aGlySDg4ajRRWWJTb2VaRFZpdjJqTDhvSkxmaXppZy90Nk9VQzk1YVFjZ1puMVNSZlhRREFBa1NDZgo0eXBFVllSNE5lcTJNSmh4OVVRNUwzYnR6ZWxKcXpVLzVnYzM4RzRaZC9pOGdjTEtEVEsrUjgwVkxUNWlyZGRMCmhFWUdia0xqL2pZMElCdFVnNTMvVTVOWlZub0VqMjZBQzdGazJ4ZzkzS0dNRWViT1BXaDQwQ0xYM1dYaFhOUjEKeDFucGMxZDlxVEptYkM1TDR5WFZ6RHNXRU1QMDVFcGxPMWtnTGZPUwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcEYvdUUwZ3NHdzZhQkYvbTFYN2I4blRBQ0RCUTY4SzY0U05nOEZodTJVTnB3RE9kCkxPdDlZQjZiZS9YRTRnUmZuZFZsOGdmaGNROTJ0RFo3WWJDWTZwWFVxRWRkSjBJVHRtN1BuYTFvSTF2cVBzeXQKSjY1Q01wM2EwSXNEMVlzNFZjbVVYTXZrdzVZanZlU1FHUnNhL2tMcU1GSGR4elZCQXh3UnBTRVNsSjFLaWdEQwpLbEMrcDE3aFhBQUZMTkJ2bTM1LzZJd3lGUDRwSkhqZDhEaVBpSGM5a3RzeE5jWjcwMWJyWjU2ZE5IZng2R3dPCmJ2eDBKRCtaZm9rVS95eDBRUms0YVJ4MWZYQUpMbVVJbU1meFdxaCtPQk1NQTB3M2w3UUs4cklHVm9ZbldDY0gKRnY3WXhzSGtqSjBncFdzNjJ6S2Y1d01MRzMrM3ZBZVlHL1BwcndJREFRQUJBb0lCQUY0bVhGVkxCNGhQNnNRSwpza3NqS0pSTmJ4akJvL2dHUjhoZzNVdU5PNkRTVGlZNjZoSXFxRnQvN0lzcUVLVnMzOStsdFlqV0hya0ZwSFpBCnBwY2o4ZEtjRTN4M3M5R2l0V3ZQT0xnVjlRb2J3YVpLMGZ0aWdxUS9hbS84MEN0bVhOUTJhL1pqQ3h0RVNpQ2cKWkRFZEoyN3ZvUGdnVENtb1JSNmsyeTU4TFFwVnltWTNEQWZ4MXh5ZUtDMmxSY3Nib21CY2VKS2FQU20wV0RQNApzQ1ZhZlZoY2NrTHNoT1JISDVIR3NVM2lUaC9aUUtVcWlmMG9MSjJxVHo3L0d4ZWRuRzBMQXZURFNJQnI3a25UCnVMY201MUJNRlJhYm9WRnBnYUt6VXVuVXFuWkRJVWFQQ1ZmaE1CYlZNc3h3YjFPdDB6dmJZZkRkZlpwQ0VVUm4KQ0VhczNzRUNnWUVBd3NEQ1Q1VkdyaE5ic3d1SkZFQ2dLRWh1OU4zaERVNWRPVzR6cngvencwTEhCL21paUU2NQo1dEZLd3hCY29SOWlTL0pPanJYbjg1NzJZZzRmWWY3bXRhMXcrdTdCWTZkd3FDbUlxeVc5MlVsZHozMlRZeVJRCnk0SmZ6VEUrcnpIa01mZ2tYK24zejJuK1U1S2Q2d1MyZTZmcDBMSER2Tnd0S1RwVjQyR1FzUDhDZ1lFQTJCRjQKQzZwUlhXdUpEQnVXaFRqeEtKRkFTTTBHcXBmeHA5ZmZOb3YvcDR5Qmp0aWN5ZWVidDFVZnZJNjMrdVVKYklYRgpxbzJZb1NrOWdmVGRJVHNOenZzTWJDQnFTR0hocDFVVEg3eisxcGIyaTJrK1Fqb0JzSEZ4bkJlZ3V3OVJIc2xtCmx5U3BzQjV2ckJTcTJjZE1TZzEvcnJzS2gvd3c2VVk4ekEyN0YxRUNnWUFiUzJxd1BxcWVRUVpNREtUVW1zNFgKZHpkZHlDNy9iMmt2WUZ1TUFyMW1NMWl6ckcvMERKeVBWZXZWZE5pV21GQnRkbk0rR3c1OEhWNUlsZFFlSnR4cwp2L2NpcEEya2l0WUdLM1FGRUpBUUFQRk40RHFrM1hVWllKZE9xY1V3UnB6RnlCSkpBd0NCS0VqRnE3bklNMnZqCjNyK3RTUXkyem1EaDgxUVFQeDlKUHdLQmdRQ0hzbGpwUXByOUI5YzNRbkJDMU9Nbjdpa29UNU03T2xmcmFIam8KSWY1NmRKUzlhSzczWXJ6NTQ3MGR4NmdtS3dmREh6Um9DNnRxczZMTVprTW1acGNpZ2Fwb2tlY045R01xbXhSNgpuMUNRNXBpS0w1dUpMakwzWkJmTXgwNExqUEFPWE1CUWRoY1g0OVdRaGg1U3pZYk5Eek04UW4yM3I1dnNOVTlqCmU5QWZNUUtCZ0Y3U0dxWnRBLzcvbDZDa1MrUmFHS0tSMWhIVDdlMFBWb1FWN084OXV4SGFyWDBFUWJvMzgybmEKa3Y1RXZzS1hVYzFQd3NvL0p5NWJ3YTFndjl6aVJvejVYL1ZPTjk5Uzcxa3Z3TzJBNldmQk1nZWYxdW9LQjQ5cQp6dVUwNS84cERaVFJHYjByWHVGRThBQVJYRXNmTXhZYmVwTVBRZXYxMDdFVHBiYzNNNlpSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
# Source: linkerd-viz/templates/prometheus.yaml
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'default'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-default-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-default-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: default
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: default
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: default
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-default-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-default-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-default-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/metrics-api.yaml
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
# Source: linkerd-viz/templates/prometheus.yaml
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
# Source: linkerd-viz/templates/tap-injector.yaml
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
# Source: linkerd-viz/templates/tap.yaml
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
# Source: linkerd-viz/templates/web.yaml
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
# Source: linkerd-viz/templates/metrics-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: metrics-api
  name: metrics-api
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: c7b62ca668afea406bccbd1c2a66d99d9151d3da9b95f745c035c39119aa13ea
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.default.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
# Source: linkerd-viz/templates/prometheus.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: prometheus
    namespace: default
  name: prometheus
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: default
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.48.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
# Source: linkerd-viz/templates/tap-injector.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: fa541b5812d7fb06bc588e1321aac15740f17706a417599e1ce231e76b0a3fc6
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.default.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
# Source: linkerd-viz/templates/tap.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: tap
    namespace: default
  name: tap
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: default
  template:
    metadata:
      annotations:
        checksum/config: 51bbaa95beccea5100289a748a3cb27485dd8c5c610074c9868dd32d9503da23
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
# Source: linkerd-viz/templates/web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: web
    namespace: default
  name: web
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: default
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.default.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.default\.svc\.cluster\.local|web\.default\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: default
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHakNDQWdLZ0F3SUJBZ0lSQUpUbk9OVXd2TFkvb3ByajBoWGdJbm93RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUI0WERUSTBNRGt4TmpBNE1URXdPVm9YRFRJMQpNRGt4TmpBNE1URXdPVm93R2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcEYvdUUwZ3NHdzZhQkYvbTFYN2I4blRBQ0RCUTY4SzYKNFNOZzhGaHUyVU5wd0RPZExPdDlZQjZiZS9YRTRnUmZuZFZsOGdmaGNROTJ0RFo3WWJDWTZwWFVxRWRkSjBJVAp0bTdQbmExb0kxdnFQc3l0SjY1Q01wM2EwSXNEMVlzNFZjbVVYTXZrdzVZanZlU1FHUnNhL2tMcU1GSGR4elZCCkF4d1JwU0VTbEoxS2lnRENLbEMrcDE3aFhBQUZMTkJ2bTM1LzZJd3lGUDRwSkhqZDhEaVBpSGM5a3RzeE5jWjcKMDFiclo1NmROSGZ4Nkd3T2J2eDBKRCtaZm9rVS95eDBRUms0YVJ4MWZYQUpMbVVJbU1meFdxaCtPQk1NQTB3MwpsN1FLOHJJR1ZvWW5XQ2NIRnY3WXhzSGtqSjBncFdzNjJ6S2Y1d01MRzMrM3ZBZVlHL1BwcndJREFRQUJvMXN3CldUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUF3R0ExVWRFd0VCL3dRQ01BQXdHZ1lEVlIwUkJCTXdFWUlQZEdGd0xtUmxabUYxYkhRdWMzWmpNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFCUTVHOFRWbjR4V2syQ24zZTBjV2s1ZmlNNERWVlhyaVFidHV1RVZmQkI0YmpXCjFSUUM0NDBJa0lQTXJoZjliZjZQZzlNTHpjUkFhblJwVHpMcTZYclZTYVpCdEFOTExHQTM1RUg0eTRzeXBrQVgKTkJCSnV0aGlySDg4ajRRWWJTb2VaRFZpdjJqTDhvSkxmaXppZy90Nk9VQzk1YVFjZ1puMVNSZlhRREFBa1NDZgo0eXBFVllSNE5lcTJNSmh4OVVRNUwzYnR6ZWxKcXpVLzVnYzM4RzRaZC9pOGdjTEtEVEsrUjgwVkxUNWlyZGRMCmhFWUdia0xqL2pZMElCdFVnNTMvVTVOWlZub0VqMjZBQzdGazJ4ZzkzS0dNRWViT1BXaDQwQ0xYM1dYaFhOUjEKeDFucGMxZDlxVEptYkM1TDR5WFZ6RHNXRU1QMDVFcGxPMWtnTGZPUwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
# Source: linkerd-viz/templates/prometheus-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: default
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-viz/templates/tap-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: default
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: default
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROVENDQWgyZ0F3SUJBZ0lSQU92eDFrUlFUZFFsa3M3Qi81T1laZ3d3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUI0WERUSTBNRGt4TmpBNApNVEV3T1ZvWERUSTFNRGt4TmpBNE1URXdPVm93SXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsClptRjFiSFF1YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdk01cHZEVkcKREhjcWpGZ0xSSEJVczJFUlNscitEYzRVclB6MzdqU1pjNkVhQ09pUU50NHJRdnZHWVJqRmZGbWR2QTZ3S1EwYwpsalBwbmlwZlJSMWtiWGFzU2ZJbFdDL2V0aHhSKy9RNVJLc3lKK2NCa05WUndaSXNPMGRSYXBRdkJaK1F5WVd0CjZ5REpwNGsxZFVtWkkvQjE4L2l2YjBOVUVMQXdaK3dCY3NXdkJaamdCWTAvVkNmR2htRmduNmZXTXpSRGFYOVgKWEM3cElVT0ZWUTBtcHRoL2F0aDN6QTU1VFVjS2VPL0pKMC9OV3NCcHJ3OWNZZjJuQ3BoSHBranhmZmdFNDZpdwpEblozUHZVUTI3OGhZODB2UHZWNlRMcWJrUU5keC8vc1YzR3JwT2MrSjZpdm41QXQzM1ZRSHVYWDBTYkhsQzFwCitHOUFDUW84K1N2MkV3SURBUUFCbzJRd1lqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdJd1lEVlIwUkJCd3dHb0lZZEdGdwpMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBSGxnNkZOWElrCnNVbUpxQUw0NWc1dVV0N2ZvUUlVOFZ6anNsQ0V6VjBFeWdidWlVM1JTMk9qeU00cjJwUGpWT3RIbi9XRjBZNkIKSVBqR1pjVXNRQWxOTDNRQW02Wmk0NXAzaUpqZXFHbnNTc2xwRG93NERyNnl1dEZhZTZBRnl5Nm1PdCtyS0hPNQpja1gyOUJFMVozUFNZQmJ6aUdyME1PeFI4WFpLbFJyRk44WUlsTERTdk5XTUJqUHJrL2R2dm1sZjRVVVptVGhDClp5UTYySExmeVp1Tk1FVUxsbHplTE9qVGUxTWt4dGU0WVNKUEc1V1hodWI3cC9MMDdyYTA4M2lLQlpNQVRVVlMKcWxITEg5aVR2NWMyZ1AwQ0tIekZJempRQVJFM3cvRVVkTExFRld0UGJjMVMyV1hKQlZXRnhvb3JBLzlQY0RDYQptRW10TnJkckt6WXQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
# Source: linkerd-viz/templates/admin-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: default
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: default
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
# Source: linkerd-viz/templates/prometheus-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: default
  port: admin-http
  proxyProtocol: HTTP/1
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
# Source: linkerd-viz/templates/tap-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: default
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
# Source: linkerd-viz/templates/service-profiles.yaml
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.default.svc.cluster.local
  namespace: default
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
# Source: linkerd-viz/templates/service-profiles.yaml
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.default.svc.cluster.local
  namespace: default
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "patch"]
  resourceNames: ["default"]
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: viz-namespace-metadata-linkerd-config
roleRef:
  kind: Role
  name: ext-namespace-metadata-linkerd-config
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-viz/templates/namespace-metadata.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
  name: namespace-metadata
  namespace: default
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: disabled
      labels:
        linkerd.io/extension: viz
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: stable-2.14.10
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: namespace-metadata
      containers:
      - name: namespace-metadata
        image: cr.l5d.io/linkerd/extension-init:v0.1.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        args:
        - --log-format
        - plain
        - --log-level
        - info
        - --extension
        - viz
        - --namespace
        - default
        - --linkerd-namespace
        - linkerd
