---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-grpc-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuRENDQW9TZ0F3SUJBZ0lRTkR6WU05L2JXWDFPWmNMb0lSS3ZNVEFOQmdrcWhraUc5dzBCQVFzRkFEQXkKTVRBd0xnWURWUVFERXlkdGFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdQphVzh3SGhjTk1qUXdPVEUyTURneE1qVTJXaGNOTXpRd09URTBNRGd4TWpVMldqQXlNVEF3TGdZRFZRUURFeWR0CmFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdWFXOHdnZ0VpTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFRPRlZvQ0xVK2MySWoxUEtkeGx2dUlYaHVmSUo1ei84TgpiUjlSSkZRWXR5b25OQkNKUjc2ayt0YzdBSUxjRklpeGdEWVArTld0RWQ4akZaQ1hNZXFoNlVGaHg2N0VuWTZDCnRCZ21DR2FVSVpqZHZQZjhXZ3pGNmZpUjkrTDA0dUI1UDROdG9yNmNOT1lvNFVMUWJxQmdyelRlSHc2UnY5aFkKK2E1aEhzWHd3d2dNbmlTVnk2TjR1UDBLN3lmdUFCYlZoU0cwV3FmeEFSS09JSnRoekdVT3Z5SGpqblBxV1l2YgprSytxYU9uVFdDalBFZWxsOS9OSzB2ZE1nZytRL3BORll5VmIvamw3WmhWWXNNMDN1Q29LNm9aa2VSY3dTZ09HCndmY09vYWcyOS8wc0x5cTBjSmlJK01idmgzZVNValRoUkNwc0YyYUh1VUk0QWMyVXkycGJBZ01CQUFHamdhMHcKZ2Fvd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjRApBakFNQmdOVkhSTUJBZjhFQWpBQU1Hc0dBMVVkRVFSa01HS0NMRzFwWTNKdlkydHpMV2R5Y0dNdGJXbGpjbTlqCmEzTXVNVGt5TGpFMk9DNDVPUzR4TURBdWJtbHdMbWx2Z2lkdGFXTnliMk5yY3kxbmNuQmpMbVJsWm1GMWJIUXUKYzNaakxtTnNkWE4wWlhJdWJHOWpZV3lDQ1d4dlkyRnNhRzl6ZERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpvSkh2dVZzQ0lLYWdUSWVyOEc2b3VaS1lZeHZQOVlNVHM3b1JSMER0NE9RQ0xER1VzdmoyKzBiY1I4WHg3c25WCitabUhpQXE1UVFMZE5sbmNnLzFOejI3aWt1OE9Dc2lqeVN2MWhGQ3VGNFRGc0hiUHo5T3JFTXlXN0ptbVBhdGMKTThVSzhLcnd4bWk3anpkOFU2OXV5Vk1KeFJJSGR6eFhzM05KT0ZRdU5PZTQ0OWRaUkV3RmN4d1hLV0FhRmtqLwo4ZHlBWnhWYS8zd1FOa3RxQjRGZUJqYkNZRG42MkFmVkZFQ3haMSt1UkV5SEZ3Y0grT0piWHJhYmh1bXZhOG9oCkdyUTJzSFhxYm9PRURHc1owNXluc0JqSEo2MS90SU51TFp0TnYxdnNCVmdWaTk1azUrbnlETVBFeVdJN3QrVjIKUGVYK3F3Uk41L2ZjY0g0OHd1UHhWQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMHpoVmFBaTFQbk5pSTlUeW5jWmI3aUY0Ym55Q2VjLy9EVzBmVVNSVUdMY3FKelFRCmlVZStwUHJYT3dDQzNCU0lzWUEyRC9qVnJSSGZJeFdRbHpIcW9lbEJZY2V1eEoyT2dyUVlKZ2htbENHWTNiejMKL0ZvTXhlbjRrZmZpOU9MZ2VUK0RiYUsrbkRUbUtPRkMwRzZnWUs4MDNoOE9rYi9ZV1BtdVlSN0Y4TU1JREo0awpsY3VqZUxqOUN1OG43Z0FXMVlVaHRGcW44UUVTamlDYlljeGxEcjhoNDQ1ejZsbUwyNUN2cW1qcDAxZ296eEhwClpmZnpTdEwzVElJUGtQNlRSV01sVy80NWUyWVZXTEROTjdncUN1cUdaSGtYTUVvRGhzSDNEcUdvTnZmOUxDOHEKdEhDWWlQakc3NGQza2xJMDRVUXFiQmRtaDdsQ09BSE5sTXRxV3dJREFRQUJBb0lCQVFDblEwTU80V1oxai9XMQpubHFLYXB3K0ZTOURmMEhycUxTM015VExvdE1keDE2UU1RQ3ZWYXM1QnBNT1hEZEVoTlpDaWQ5R0FxMWpJblhyCldKWnB4Tk9qYUEyb212SmhMTXUvNFZJR1BEelBMVlBhdEZ4RThDS1JUOWpSN3RWQlM3Q3JFNHJHZFV3d2N3dVkKYjluektNZkVDTHI2OHVrY3JpbHJQRDNGRnhOMHRlMEFVWjFVTjRUTnhZaFdYcEMyNXlyL0M3ZUhWL1RscDJzbgpqbzVLOGlKUUdjYm5qZE1PY0tRSVJ5OElscWRhY1V2Rzl2TE1TanRjN0ZsdnNoTmJSekI2ZldLaGx3dm1vc3IyCm5SNnRxNUFKeEZQYm92N3ZEOHdwclh0bjdHVHdRdmtMVUJmSnZ2UGttVXUxdUg1NVZPS2Y1WlhLWHIySEJIdWoKSTltRlNGN0JBb0dCQU95SHoyTEd3djgxa3VQaE1rSHN1MlloWHJkNVdENkpPaW1rSVdDTzM5bTJCK2JMejRQWQo0bUN4elVoaTdrbHlSMzdmT0w2MUk0STJNUzVUalc0K3JMRDVFRzZBSVEzcktKdXZsTTFEMFl5Y2x2eFRUTGd2CjdNVzJZZ0g5TmRZUk1NOFhiZ2R1WG5hOFMxNkZMVEp5dytZVURqVDdqWjVZOWRMeFFXQmM1VzZ4QW9HQkFPU2IKTGZpR0RlODBSUjFxWWRDVVp5NDRzeENNUHBtWnJOZFd1ZVZQNnZneEJzQndMNzh1NzIxQjZ2eTduZ1l5RlJVZApUaEw4MlMzS3lrTHQvTkEzS3RQZ1dJZUhlZHRNbTlJdnl2ZlIxWVQ4eitCS3NlTldSNEJ3TlNmSG1UekgxRXR3CmZQaTVmbHZBY0ROa3FNSk91ZDArNjJnYlNhcWkvU2VPVnBzZ2QrVExBb0dBRGRLcUJnWERvNUtIOFJWYUVJdzcKTDI3SDBFVWhLUlp2OWJzSDBGTEpOam56SUVQTTd0R2YrVEtxNG80Vml1bEkwRnRQUDZYcVcxTzdjQStsOWtsbgpZamhNQTRrdFpWalcyTEpjS2RyS3hrTG9kL3FPUXoxWnd2d3pvaFlnTFZCMzM4Sm94YnBuZnR6bU1ySHB3RWNBCnQ5TjRPUlJ5WkV5aW9SOUVTTk5rL1NFQ2dZQm9wV0IxMDJldGlBL2JWMGRQWTUrWDJQeWZKcFBCWEVkeWk1Q3QKRjloSHBLbWlqYmhObS82ZDFQN3NralhVUURqR1laUEx2Vkx0VTFjakxDMytZa0tJbXJucjBHaEhxdG5wYlZkTAoraEh6dm9hcDlZZFl1YlloWlR2djZiNkx4QzI2R3RRYVIwOUFVT2NMbjVoZzJnamE3bUowVllselF3ai9nbmpDCnFpbzM0UUtCZ1FEV2RwRmV2WGRtQ01WSVgvejJsQVlIYjR3enl0U29waUVKTVdZZCs5RUtLNzhhN3BESFVSaFEKNzg0STJmZXlaL2RDVGxOVktRT09qL1hPRXdnUE12bmZUY0RHb0ZMUWJQYitodnF4b3dzc3F2UjhxRmlzbk5mZAo0dkNuT1oxdjZqUU1Iblc1WmltaFNGN1Nsb3M5QnRidGIwNGhSOVlVaWtSaDN5ZUtYbndFWXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZakNDQWtxZ0F3SUJBZ0lSQUltdnNFWW91VFZmU1VLUjl2cXZmQ0l3RFFZSktvWklodmNOQVFFTEJRQXcKTWpFd01DNEdBMVVFQXhNbmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sdwpMbWx2TUI0WERUSTBNRGt4TmpBNE1USTFObG9YRFRJMU1Ea3hOakE0TVRJMU5sb3dNakV3TUM0R0ExVUVBeE1uCmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sd0xtbHZNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF3ZXRyREV6ZnkzTVRMS3FMZTBkYzRvQXFORXd2b0MvSwp2SmlJM25SRkk1czhlYnVEVjJCd0kxYVcxNXI1bTdIbmFpYWFKeXVNZDY1TS9IVUVVcVlkcUpnUGtFeGVYMVFTCmFuVTdJZncrSDBlRndDRkdjOTBvQnhiTmh1UzJhdjRlZGdNbVFaSHowZlhEYkx3R2Z5SVZGYkduWmlrOENBUE8KMjNGVFZsZTdsYk52dnZGdEdSR1pudHIzWFVLNGs1aHhXaXphbTI5S0lVS1dxVmhXekVXWHgxNkJKcnhVVEp4VgpLNHJmdFBmaU9rQWUvbXlubXBmTHphSzhOZE44OHJobS96T1VMMTExR3NTRE1RYkljcDlXMU01cmV2K1BwSmFEClpRUG5qdjNaUUNjV1g5d01KK2RGMFd6MFBPNmJFZSthTEl6V21KVEJCYXJtYksvT3Z4M1RWUUlEQVFBQm8zTXcKY1RBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQwpNQXdHQTFVZEV3RUIvd1FDTUFBd01nWURWUjBSQkNzd0tZSW5iV2xqY205amEzTXRiV2xqY205amEzTXVNVGt5CkxqRTJPQzQ1T1M0eE1EQXVibWx3TG1sdk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQlBWMWN4citpRER1aXcKY25VMjhQRlk0SEY4UVE1Y21URHNVSEcvOWNqd0VJQnljWmF5aFl0ZEZzaEFra1V1ODBlTFV6VGNuUzl4K1FhTgpzT3NJcXVEa0Vid3ptMHFXOXNSZ0V1WDNTU2ZTWGl4Tk9TaXdlaVFVZ0xyVmozaTcrL3VGQ2F6M1ZweHdaRGUvCjJyaFhIS1Q2eVdPeUVaS2MrSWpnNnhqbTZMUTF4a3pFcjRvQXJERnY4K3pTcUtOMUVBbnljZW0zcnY3Rk1jNVMKaEk4bm1IRzFEU25vTk1hbG1TV3pKVDhiVnFJWGpXbkNzS1FiVG5EOUR6U1FzOXozQkxPckdaRFhaU2htOE9uaAozdm5LS0l4MDJBTWhESy9PRDNUWUJhaWZTUnRTRnJYaWt1bnhRL2dyR1BNNVVDNWg0dnNLeFJhMWZQRWpSdXBjCkhzYlZyTitwCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd2V0ckRFemZ5M01UTEtxTGUwZGM0b0FxTkV3dm9DL0t2SmlJM25SRkk1czhlYnVEClYyQndJMWFXMTVyNW03SG5haWFhSnl1TWQ2NU0vSFVFVXFZZHFKZ1BrRXhlWDFRU2FuVTdJZncrSDBlRndDRkcKYzkwb0J4Yk5odVMyYXY0ZWRnTW1RWkh6MGZYRGJMd0dmeUlWRmJHblppazhDQVBPMjNGVFZsZTdsYk52dnZGdApHUkdabnRyM1hVSzRrNWh4V2l6YW0yOUtJVUtXcVZoV3pFV1h4MTZCSnJ4VVRKeFZLNHJmdFBmaU9rQWUvbXluCm1wZkx6YUs4TmROODhyaG0vek9VTDExMUdzU0RNUWJJY3A5VzFNNXJlditQcEphRFpRUG5qdjNaUUNjV1g5d00KSitkRjBXejBQTzZiRWUrYUxJeldtSlRCQmFybWJLL092eDNUVlFJREFRQUJBb0lCQUZ4Q2NPK3RNMXhNSjNjOAp2SmV1WUJheSsyRmVUZHBjWW94UDFlNWdTdlNoeXFmditwRDdwTjVyTitEa0xwVlFrdFVDQUoxYUxyNVNBdmFwCmhhRDh2MmVTMFBUS0lLd2lCNUQycldlQjV0eGkzdE9HQVVybWtVQ3VMS0pjOWh6NVFlekxtc3ZmY0swWHpCNVQKWnBQZDEwSTIvM212Ykl3em81cnIwOFprZnk2OUY4ZXhVU3g0dERncE56VHRwaURYRnEwaUlWT0hEYkFrR0wxeAp1cFEvRlpUeXcxb3NUMXlQb3FLdnE0eSs2WVFMSzlQVkp5QmZhUzVQSHhvdWpjWkRhMEU0Y2FKVkVWak9KZDd4ClNpQWIvYjkvU0JCaDNuZmxhTXlzeCtsd1phaUg0WjZGbWl6UVduS0IreENMRHUwL29rWFIrTWtIOCtWUWVjZUwKMU01UE5wRUNnWUVBMDdXS1EyR3VPNXlGRnZHU05SOXpMRWVxOTFiWlJVUTZIcFdaank1YjJUU2J6R3A0bnA5ZApPbFdvcXpJMEh5UUxhbEIrY1B5QTB1cDBQVUVJajR6cm9peDcySmQrM0NCTkNqcWF4WnVIbG9sMURyYUJxZC9sCmN2dklPY0JaeUx4Q0p1bDlPb01JYTk2RGxXQmtEVU4wM1RoUk1XQVJOTnVpdnRnQ25QZ0YwYk1DZ1lFQTZuMGcKclljWWU1ZWZGZTlQdkxWOWhPR3l2RjZ4SXRxNE1uQzdkbXFSYXg5aXBGYjczMkRkZ1p4TEhaVi9QR2w4aUFYbgpyN21HUW5BNzBXa2pBajdPb05zNTVMQW1iTG0xRDdKSVZoMXNDa3BqWWZXUzlWcUVFTUZWaFRySkhnRm04QUErCjVDV1d0RnJKTkt3VkhlbXZIOVA3Qms4QkY5eWZDVVNRRDZORGN0Y0NnWUVBeTd5UUUycEVmMCtRY05VSGJDSVkKOTByOUI4eEhpVFl3YkZCeGwrMzRMQjVKdEwzZDJHRHJHZ0ZuTVdFOThaNEJjazJHY1BzK2lqdGdvN1liSS9KcwpyUVA4SnlNYnpZRTBRcHpGWjFmV2N4TlRXRlpnai9kTTI0dmNVMTk5eUFVTDhHQ1F5Q2RqaWxOMzg5L3dTU2RhCnBxM1V6Unh6VXBmdmxaTlJhSGZ6T2FzQ2dZRUFxU3A4V0xRTnhad3MrUFljNEZkT3BuN3RJMWh0RW1nWVdzdFoKY3FTUEpHa1FFTjl2OWtjN2hqWHJPdnlQUGxZYnNVWVJUNFRZaHpYUThkS1hueGNRbXB1TnVKNGNHblFmVzZPUwo3QTF0MUQ2MlZBV0diOXROUzRrdTJWNy9tTllLSFRzUUpDZTZBWU05aFBKZ2lhUDg0MGxhMzhJL1Y2ZWlWRjFTClVQWEh3eUVDZ1lBRG0yZ2cxZjZvR0dyWElRbmZhMlg0V3FsNWdQNk96QU1BTmdSYTY4K1Q1TXdtNkJKVWVtMXkKR2U4a1lZdFdFUHJ5cEJpait5RVVLZWZVaFdnb1p1MG1Ud2xuYTBPS1NudkwxMjNFNUE5ZnZ0ZWtXSGdaejFUQgpMVnNNZnNmTTVHM1daY0VUWFpjS2ZyYWRoNDVVZGtBc3lCZk1OcU5RQlAwMXRncTU0eFN0UGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-mongodb-connection"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
type: kubernetes.io/basic-auth
stringData:
  username: "userM"
data:
  password: "Umo0bDVaZDdwSEZIbHRPckNiNTJROTc3WE9CQkJHbm4="
  adminUsername: "UTFublh1RXpMM0ZhUjBSWQ=="
  adminPassword: "OEJvcmZxaUt2NmJlYWtySGh4S0Z4eFFNRG5yaE9hdjk5aUp6dVA2Mg=="
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZakNDQWtxZ0F3SUJBZ0lSQUxhZ0xUZDg5VUdPK1RZSEhUMkQxTG93RFFZSktvWklodmNOQVFFTEJRQXcKTWpFd01DNEdBMVVFQXhNbmEyVjVZMnh2WVdzdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sdwpMbWx2TUI0WERUSTBNRGt4TmpBNE1USTFOMW9YRFRJMU1Ea3hOakE0TVRJMU4xb3dNakV3TUM0R0ExVUVBeE1uCmEyVjVZMnh2WVdzdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sd0xtbHZNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0T1VMTWUvQ0Jya1ljQWtSRHlaZUlDZEUwK3BHa3BnVQpTZTVUa0NIekZLSHAzc3d6RHF3c0ttVU9XZWMvS2NTTU1TZmtGRWxGS2JvZ1pRVUV3bmVDaEsxVFl4T2sxVURKCmNucWJXVHpyV3U1cTI3bkhUYzMvWVB2eWdpTDVhY0ZxYUpRdVFpSjFtMHlhQzZOWU9qTmhMVEpRY3ZiRjNhNmcKUU1HajR4K1NpckRLQ2NpVHR3S3JiWmhlYXNpbDc5aHhsRDVaanRBaDBVclV0VlNOYmk2aElRL1FNTlFad3NxNwpobXdnblUyei9tSHovb3llb2grUFpHQmZieitYK1pxQ0RuRWN0NmZpNmVJZUE2VlZDZkJJOEZ5c0ozdHJ3dVQ3CmVteWp6dzhTY0pySi9GM3lISkgybEsyczliMzhsL1Yzb1pDRCt5cEdSOURSL0JsNytmQ2hrd0lEQVFBQm8zTXcKY1RBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQwpNQXdHQTFVZEV3RUIvd1FDTUFBd01nWURWUjBSQkNzd0tZSW5hMlY1WTJ4dllXc3RiV2xqY205amEzTXVNVGt5CkxqRTJPQzQ1T1M0eE1EQXVibWx3TG1sdk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQkpWRHRqUmh5UTJqeE0KYlo5RTk0VCtUL0ZZaC84YUU4bzdaSlhxZXBmSFhwa0FabXJNOEV1VEY2M05hMlhuMmgyY2NueVcwaWpMbFdsYQoxTXBtWVhSZ1lQa0lmaDNvUEpSeTNWNnVscGNJWklUeU5YcXFwbzJROEZIV2FtcXNkQW5NUVVJT0s3T0RSME1RCjhiVU1wQnlXeUorWkVNcGU2YW1SalMwaEFOejA0Q0M2N2R5aXViQnpKVzBSM0U2cHB1NWhVV3RSNkdNVHRWYWIKbmt4aGlZQjN4VTNSYlNtNFkrT2s0cUtsOWFOQ1I3K09SK3JydS9QVFJ2R1QwLy9XZGk0MFIreTM2azRCRitiQgprVTJQM3BSZ2FKd3B6bnlmb2I3M3hnbFg3VzVGV2krM3c1a3NIY0l1KzBBUVcvaXBHUmZ4QnNWcXBZS2syblNCCklIbGp0TXFhCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdE9VTE1lL0NCcmtZY0FrUkR5WmVJQ2RFMCtwR2twZ1VTZTVUa0NIekZLSHAzc3d6CkRxd3NLbVVPV2VjL0tjU01NU2ZrRkVsRktib2daUVVFd25lQ2hLMVRZeE9rMVVESmNucWJXVHpyV3U1cTI3bkgKVGMzL1lQdnlnaUw1YWNGcWFKUXVRaUoxbTB5YUM2TllPak5oTFRKUWN2YkYzYTZnUU1HajR4K1NpckRLQ2NpVAp0d0tyYlpoZWFzaWw3OWh4bEQ1Wmp0QWgwVXJVdFZTTmJpNmhJUS9RTU5RWndzcTdobXdnblUyei9tSHovb3llCm9oK1BaR0JmYnorWCtacUNEbkVjdDZmaTZlSWVBNlZWQ2ZCSThGeXNKM3Ryd3VUN2VteWp6dzhTY0pySi9GM3kKSEpIMmxLMnM5YjM4bC9WM29aQ0QreXBHUjlEUi9CbDcrZkNoa3dJREFRQUJBb0lCQUdaYWV2MGtaaXFick1Jbgp2eWxOVWxEckp6eXBBSW1OMTEwRnB1NlU1dyt6bGJyazI3YmZvSlhVWEV4dVZnVHlHMGp0QTFhZkpxMDNqWURiCldCZ1l1eGNMWTNWWjloaGI4aC8rVTh3b2Roc2JjQWNubFNmbStTc05JK2lTbFlGTFdVUVhKQjF6bGd2clNmWnYKMUVvS0xHQUFhaGpDbks2VVVrU1J6SU9FcDh3a3k5VERMUUJlRlM1WXpZZWE5aGZ4K1dJWnVUK2wxdEdmUXhydQpCazJxck81ZlR6R0pMVlh2OXRXY29sOHd6NlRvTDNackRkNUZKNTl2Z2E0ekMxeitjOFFmenJVRndYa0lrTnhOCklCc0g0Q0drMVBpcGNsemt2MEt5UkJ6SmliOEhVTjVsbEh5MHpJOWlUTHMwdmU2YUFZc2VQTk81QWVJMTFjVWYKRkZLb0FKRUNnWUVBeDVIRWdWY082dlJ0UkNvaVZIYXZXWENzZFRaanpHK1JUZGg1Rkl0UmhKMXEyTnI0V0VVOApsb243Zm9HZ3VtRzk1L0tObEg2ZmZqY3EwQzJjR21WQ2ovRU1MeUhwQk1WSkl6c08yRUNWbGNlRlE4azhpamxjCnRLVGhtV0taZVpuWkdWeGtKNGVZR0RoUkRLdjJJNEd6TFNtcmlkc20vYjY3S2FuZFp2aC9KNDBDZ1lFQTZBdDQKWXJWZXU4TVhxYTNuS0x4VkQ2a3BQTk9YRE1YdjVRcGl3c1ZXU3hzL0I4S2FCd0NRS3pkUlZSUW9DSDkrc2loVwp4TkV6dWtVUGNhUlQ2Snpud2JkcXZEUmNKSC9MU3o4RE92NTFBaWR3dEloSktRcm1BMUlTNllPRkZjYlVXNmc2CnVINFRKQktBUDMwejA1aWdsK1E5eVJ3UXFrOVlQSFBWN1JjNmxaOENnWUVBcUFRQjR6NXZNY0g4NStGdEs1ME0KUFltTnQ5VEZxb3pYVVNtSnJwRW9YVFRHaXJHM1dXRlpCQWhBOHAyaHVxaWxZRXlsZzdvaS92amxFNFVDb25wVAowcW1HcjN1bUdUMGJPUXowajMyNE1mUmJMdG1TSFhEenFxWVJ4TGZ0TENJcFU1K2tObCtDM2drenV5NWZPRDl1Cm9Qd3ZEZzJ5UXZpN3kvVFZrR1p2YnRVQ2dZRUEyUTI1cTJPS1hNb04vVnM5U2o1NHRyQitjWFplNmNUUk5JYjEKZ01sRWdmYlhpN085am1VNWRpTkZnZmJieDY4eTNRV2N2SGdRRWVIOW8waWFjSkVzdkdpTWY4WGVsd212S1JDbApQZTY5bHFrNzVMTkM5QkJNdmJodEZsOC9Bdks4dTR2dWVacjgzcFlydnJlbjNmcjc1WGpMVHE1ZzdGNVI1Q0phCmJtOTNEbk1DZ1lBUDl5dmtmK3Jmb2NQZEhKb2dJdTBha25jSFhCNjJjYjRQWi9MNFdEYUFZOFpyVWY2cUNqWGMKU0NNVlJ1cU91Vms2Vm5PaklMUmZJT3NreWFvQWw5RFhpZDFzZFhQQWhLNVZKVTZHK2cyL0xlOTdMMVNId2RiaApEODkxSzFUZFM2ck5JR012VExwUFVFVzdFSmZaZVNrWk56WS9jR21PNXRJN2o5WUhvY2xSM0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-admin"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
type: kubernetes.io/basic-auth
stringData:
  username: "admin"
  postgresUsername: "userP"
data:
  password: "THd1b1hzdW02SHJtbzBybXBadVdGN2dBUDB6THA5REZDNUxsekZMOA=="
  postgresPassword: "cGlKNHphZjd0ajZJU2E0WWRHaFFTcHNqUld1amxFcmU="
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-config"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
data:
  features.properties: |-
    features.feature.microcks-hub.enabled=true
    features.feature.microcks-hub.endpoint=https://hub.microcks.io/api
    features.feature.microcks-hub.allowed-roles=admin,manager,manager-any

    features.feature.repository-filter.enabled=false
    features.feature.repository-filter.label-key=app
    features.feature.repository-filter.label-label=Application
    features.feature.repository-filter.label-list=app,status

    features.feature.repository-tenancy.enabled=false
    features.feature.repository-tenancy.artifact-import-allowed-roles=admin,manager,manager-any

    features.feature.async-api.enabled=false
    features.feature.async-api.default-binding=KAFKA
    features.feature.async-api.endpoint-WS=microcks-ws-microcks.192.168.99.100.nip.io
    features.feature.async-api.endpoint-KAFKA=microcks-kafka.192.168.99.100.nip.io:443

    features.feature.ai-copilot.enabled=false
  application.properties: |-
    # Application configuration properties
    tests-callback.url=${TEST_CALLBACK_URL}
    postman-runner.url=${POSTMAN_RUNNER_URL}
    async-minion.url=${ASYNC_MINION_URL|http://localhost:8081}

    network.username=
    network.password=

    validation.resourceUrl=https://microcks-microcks.192.168.99.100.nip.io/api/resources/
    services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}
    mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}

    # Logging configuration properties
    logging.config=/deployments/config/logback.xml

    # Spring Security adapter configuration properties
    spring.security.oauth2.client.registration.keycloak.client-id=microcks-app
    spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
    spring.security.oauth2.client.registration.keycloak.scope=openid,profile
    spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}
    spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
    spring.security.oauth2.resourceserver.jwt.issuer-uri=${sso.public-url}/realms/${keycloak.realm}

    # Keycloak configuration properties
    keycloak.auth-server-url=${KEYCLOAK_URL}
    keycloak.realm=microcks
    keycloak.resource=microcks-app
    keycloak.use-resource-role-mappings=true
    keycloak.bearer-only=true
    keycloak.ssl-required=external
    keycloak.disable-trust-manager=true

    # Keycloak access configuration properties
    sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}

    # Async mocking support.
    async-api.enabled=false
    async-api.default-binding=KAFKA
    async-api.default-frequency=10

    # Kafka configuration properties
    spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}
    
    # Grpc server properties
    grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
    grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key

    # AI Copilot configuration properties
    ai-copilot.enabled=false
    ai-copilot.implementation=openai
    ai-copilot.openai.api-key=sk-my-openai-api-token
    ai-copilot.openai.timeout=20
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration scan="true">
      <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <charset>utf-8</charset>
          <Pattern>%d{HH:mm:ss.SSS} [%p] %c - %m%n</Pattern>
        </encoder>
      </appender>

      <logger name="io.github.microcks" level="INFO"/>
      <!-- Change com.mongodb to org.mongodb so that com.mongodb.FongoDBCollection is ignored, set to debug and tests do not fail... -->
      <logger name="org.mongodb" level="INFO"/>
      <logger name="org.springframework.data.mongodb" level="INFO"/>
      <logger name="org.reflections" level="WARN"/>
      <logger name="sun.net.www.protocol.http" level="INFO"/>

      <logger name="jdk.event.security" level="WARN"/>
      <logger name="javax.activation" level="WARN"/>
      <logger name="javax.mail" level="WARN"/>
      <logger name="javax.xml.bind" level="WARN"/>
      <logger name="ch.qos.logback" level="WARN"/>
      <logger name="com.codahale.metrics" level="WARN"/>
      <logger name="com.ryantenney" level="WARN"/>
      <logger name="com.sun.xml.internal.bind" level="WARN"/>
      <logger name="com.zaxxer" level="WARN"/>
      <logger name="io.undertow" level="WARN"/>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
      <logger name="org.bson" level="WARN"/>
      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.aop" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="org.springframework.security" level="WARN"/>
      <logger name="org.springframework.cache" level="WARN"/>
      <logger name="org.springframework.scheduling" level="WARN"/>
      <logger name="org.thymeleaf" level="WARN"/>
      <logger name="org.xnio" level="WARN"/>
      <logger name="com.mangofactory.swagger" level="WARN"/>
      <logger name="sun.rmi.transport" level="WARN"/>

      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
      </contextListener>

      <root level="INFO">
        <appender-ref ref="CONSOLE"/>
      </root>
    </configuration>
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-mongodb-init"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
data:
  create-user.sh: |-
    #!/bin/bash
    echo "Started Adding the Users..."
    mongo admin --eval "db.getSiblingDB('${MONGO_INITDB_DATABASE}').createUser({user: '${MONGODB_USER}', pwd: '${MONGODB_PASSWORD}', roles: [{role: 'readWrite', db: '${MONGO_INITDB_DATABASE}'}]})"
    echo "End Adding the User Roles."
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-keycloak-config"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
data:
  microcks-realm.json: |-
    {
      "id": "microcks",
      "realm": "microcks",
      "displayName": "Microcks",
      "notBefore": 0,
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "offlineSessionIdleTimeout": 2592000,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "users" : [
        {
          "username" : "user",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user" ]
          }
        },
        {
          "username" : "manager",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user", "manager" ]
          }
        },
        {
          "username" : "admin",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "realm-management": [ "manage-users", "manage-clients" ],
            "account": [ "manage-account" ],
            "microcks-app": [ "user", "manager", "admin" ]
          }
        }
      ],
      "roles": {
        "realm": [],
        "client": {
          "microcks-app": [
            {
              "name": "user",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "admin",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "manager",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            }
          ]
        }
      },
      "groups": [
        {
          "name": "microcks",
          "path": "/microcks",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {},
          "subGroups": [
            {
              "name": "manager",
              "path": "/microcks/manager",
              "attributes": {},
              "realmRoles": [],
              "clientRoles": {},
              "subGroups": []
            }
          ]
        }
      ],
      "defaultRoles": [ ],
      "requiredCredentials": [ "password" ],
      "scopeMappings": [],
      "clientScopeMappings": {
        "microcks-app": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manager",
              "admin",
              "user"
            ]
          }
        ],
        "realm-management": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manage-users",
              "manage-clients"
            ]
          }
        ]
      },
      "clients": [
        {
          "clientId": "microcks-app-js",
          "enabled": true,
          "publicClient": true,
          "redirectUris": [
            "https://microcks-microcks.192.168.99.100.nip.io/*"
          ],
          "webOrigins": [
            "+"
          ],
          "fullScopeAllowed": false,
          "protocolMappers": [
            {
              "name": "microcks-group-mapper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "microcks-groups",
                "userinfo.token.claim": "true"
              }
            }
          ]
        }
      ],
      "applications": [
        {
          "name": "microcks-app",
          "enabled": true,
          "bearerOnly": true,
          "defaultRoles": [
            "user"
          ]
        },
        {
          "name": "microcks-serviceaccount",
          "secret": "ab54d329-e435-41ae-a900-ec6b3fe15c54",
          "enabled": true,
          "bearerOnly": false,
          "publicClient": false,
          "standardFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "clientAuthenticatorType": "client-secret"
        }
      ],
      "identityProviders": [
      ],
      "requiredActions": [
        {
          "alias": "VERIFY_PROFILE",
          "name": "Verify Profile",
          "providerId": "VERIFY_PROFILE",
          "enabled": false,
          "defaultAction": false,
          "priority": 90,
          "config": {}
        }
      ],
      "keycloakVersion": "10.0.1"
    }
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    

spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: spring
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
      name: spring-grpc
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
    name: postman-runtime
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: postman-runtime
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: mongodb
    protocol: TCP
    port: 27017
    targetPort: 27017
    nodePort: 0
  selector:
    app: "microcks"
    container: mongodb
    group: microcks
  type: ClusterIP
  sessionAffinity: None
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: keycloak
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: postgresql
    protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 0
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks"
        container: spring
        group: microcks
        
      annotations:
        checksum/config: 4d00734ad5d1629312088aecc15d2b25db6dee91a91e9ed36c2c0c13a7809f6a
        
    spec:
      containers:
      - name: spring
        image: quay.io/microcks/microcks:1.10.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-XX:+TieredCompilation -XX:TieredStopAtLevel=2"
          - name: JAVA_MAJOR_VERSION
            value: "11"
          - name: SPRING_PROFILES_ACTIVE
            value: prod
          - name: SPRING_DATA_MONGODB_URI
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@microcks-mongodb:27017/${SPRING_DATA_MONGODB_DATABASE}
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_DATABASE
            value: microcks
          - name: POSTMAN_RUNNER_URL
            value: http://microcks-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://microcks:8080
          - name: KEYCLOAK_ENABLED
            value: "true"
          - name: KEYCLOAK_URL
            value: https://keycloak-microcks.192.168.99.100.nip.io
          - name: KAFKA_BOOTSTRAP_SERVER
            value: "microcks-kafka-kafka-bootstrap:9092"
          - name: SERVICES_UPDATE_INTERVAL
            value: 0 0 0/2 * * *
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - name: "microcks-config"
            mountPath: "/deployments/config"
          - name: "microcks-grpc-certs"
            mountPath: "/deployments/config/grpc"
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "microcks-config"
          configMap:
            name: "microcks-config"
        - name: "microcks-grpc-certs"
          secret:
            secretName: "microcks-microcks-grpc-secret"
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks-postman-runtime"
      container: postman-runtime
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks-postman-runtime"
        container: postman-runtime
        group: microcks
        
      annotations:
        checksum/config: 4d00734ad5d1629312088aecc15d2b25db6dee91a91e9ed36c2c0c13a7809f6a
        
    spec:
      containers:
      - name: postman-runtime
        image: quay.io/microcks/microcks-postman-runtime:latest
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: info
        resources:
          limits:
            memory: 256Mi
          requests:
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 4
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    

  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
        
      annotations:
        
    spec:
      securityContext:
        runAsUser: 184
        runAsGroup: 184
        fsGroup: 184
      containers:
      - name: mongodb
        image: library/mongo:4.4.29
        args: ["--dbpath","/var/lib/mongodb/data"]
        ports:
        - containerPort: 27017
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 3
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - mongo 127.0.0.1:27017/$MONGO_INITDB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
        env:
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-mongodb-connection"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-mongodb-connection"
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              key: adminUsername
              name: "microcks-mongodb-connection"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: adminPassword
              name: "microcks-mongodb-connection"
        - name: MONGO_INITDB_DATABASE
          value: "microcks"
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 512Mi
        volumeMounts:
        - name: "microcks-mongodb-data"
          mountPath: "/var/lib/mongodb/data"
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities: {}
          privileged: false
      volumes:
      - name: "microcks-mongodb-data"
        persistentVolumeClaim:
          claimName: "microcks-mongodb"
      - name: custom-init-scripts
        configMap:
          name: "microcks-mongodb-init"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak
      container: keycloak
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak
        container: keycloak
        group: microcks
        
      annotations:
        checksum/config: 4d00734ad5d1629312088aecc15d2b25db6dee91a91e9ed36c2c0c13a7809f6a
        
    spec:
      containers:
      - name: keycloak-server
        image: quay.io/keycloak/keycloak:24.0.4
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 400m
            memory: 512Mi
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: jolokia
          containerPort: 8778
          protocol: TCP
        args:
        - 'start'
        - '--features=token-exchange'
        - '--db=$(KC_DB)'
        - '--db-url-host=$(KC_DB_URL_HOST)'
        - '--db-username=$(KC_DB_USER)'
        - '--db-password=$(KC_DB_PASSWORD)'
        - '--hostname=keycloak-microcks.192.168.99.100.nip.io'
        - '--health-enabled=true'
        - '--import-realm'
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-keycloak-admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-keycloak-admin"
        - name: OPERATING_MODE
          value: clustered
        - name: KC_DB
          value: postgres
        - name: KC_DB_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: KC_DB_URL_DATABASE
          value: root
        - name: KC_DB_URL_HOST
          value: "microcks-keycloak-postgresql"
        - name: KC_PROXY
          value: "edge"
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: microcks-keycloak-config
          mountPath: "/opt/keycloak/data/import"
        securityContext:
          privileged: false
      volumes:
      - name: "microcks-keycloak-config"
        configMap:
          name: "microcks-keycloak-config"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak-postgresql
      container: keycloak-postgresql
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak-postgresql
        container: keycloak-postgresql
        group: microcks
        
      annotations:
        
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: keycloak-postgresql
        image: library/postgres:16.3-alpine
        args: ["-c", "max_connections=100", "-c", "shared_buffers=12MB"]
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql 127.0.0.1 -U ${POSTGRES_USER} -q -d ${POSTGRES_DB} -c 'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: POSTGRES_DB
          value: root
        volumeMounts:
          - name: "microcks-keycloak-postgresql-data"
            mountPath: "/var/lib/postgresql/data"
      volumes:
      - name: "microcks-keycloak-postgresql-data"
        persistentVolumeClaim:
          claimName: "microcks-keycloak-postgresql"
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "microcks-microcks.192.168.99.100.nip.io"
    secretName: microcks-microcks-ingress-secret
  rules:
  - host: "microcks-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks"
            port:
              number: 8080
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
spec:
  tls:
  - hosts:
     - "microcks-grpc-microcks.192.168.99.100.nip.io"
  rules:
  - host: "microcks-grpc-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-grpc"
            port:
              number: 9090
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "keycloak-microcks.192.168.99.100.nip.io"
    secretName: microcks-keycloak-ingress-secret
  rules:
  - host: "keycloak-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-keycloak"
            port:
              number: 8080
