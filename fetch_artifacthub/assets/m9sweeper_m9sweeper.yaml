---
# Source: m9sweeper/charts/dash/templates/rbac-m9sweeper.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: m9sweeper
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: m9sweeper/charts/dash/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dash-sa
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: m9sweeper/charts/trawler/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trawler-sa
  labels:
    helm.sh/chart: trawler-1.6.0
    app.kubernetes.io/name: trawler
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: m9sweeper/charts/dash/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-m9sweeper-dash-secrets
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  SECURITY_JWT_SECRET: "dGhpcy1pcy1ub3Qtc2VjcmV0"
  DATABASE_CONNECTION_HOST: "bTlzd2VlcGVyLXBvc3RncmVzcWw="
  DATABASE_CONNECTION_PORT: "NTQzMg=="
  DATABASE_CONNECTION_DATABASE: "cG9zdGdyZXM="
  DATABASE_CONNECTION_USERNAME: "cG9zdGdyZXM="
  DATABASE_CONNECTION_PASSWORD: "cG9zdGdyZXM="
  RABBITMQ_HOST_NAME: "bTlzd2VlcGVyLXJhYmJpdG1x"
  RABBITMQ_PORT: "NTY3Mg=="
  RABBITMQ_USERNAME: "Z3Vlc3Q="
  RABBITMQ_PASSWORD: "Z3Vlc3Q="
  MSG_QUEUE_NAME_IMAGE_SCANNER: "dHJhd2xlcl9xdWV1ZQ=="
  EMAIL_CONFIG_USE: "U01UUA=="
  EMAIL_SMTP_HOST: ""
  EMAIL_SMTP_PORT: "NDY1"
  EMAIL_SMTP_SECURE_CONNECTION: "MQ=="
  EMAIL_SMTP_AUTH_USER: ""
  EMAIL_SMTP_AUTH_PASSWORD: ""
  EMAIL_DEFAULT_SENDER_EMAIL: ""
  EMAIL_SYSTEM_ERROR_REPORT_ENABLE: "MA=="
  EMAIL_SYSTEM_ERROR_REPORT: ""
---
# Source: m9sweeper/charts/trawler/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-m9sweeper-trawler-secrets
  labels:
    helm.sh/chart: trawler-1.6.0
    app.kubernetes.io/name: trawler
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  RABBITMQ_HOSTNAME: "bTlzd2VlcGVyLXJhYmJpdG1x"
  RABBITMQ_PORT: "NTY3Mg=="
  RABBITMQ_USERNAME: "Z3Vlc3Q="
  RABBITMQ_PASSWORD: "Z3Vlc3Q="
  RABBITMQ_QUEUE_NAME: "dHJhd2xlcl9xdWV1ZQ=="
  M9SWEEPER_API_KEY: ""
---
# Source: m9sweeper/charts/dash/templates/rbac-m9sweeper.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: m9sweeper
rules:
  - apiGroups: [""]
    resources: ["namespaces","pods","nodes"]
    verbs: ["get","watch","list"]
  - apiGroups: [ "" ]
    resources: ["events"]
    verbs: ["get","watch","list","create"]
  - apiGroups: [ "constraints.gatekeeper.sh" ]
    resources: ["*"]
    verbs: ["get","watch","list","create","update","patch","delete"]
  - apiGroups: [ "templates.gatekeeper.sh" ]
    resources: ["constrainttemplates"]
    verbs: ["get","watch","list","create","update","patch","delete"]
  - apiGroups: [ "templates.gatekeeper.sh" ]
    resources: ["constrainttemplates/finalizers"]
    verbs: ["get","watch","list","create","update","patch","delete"]
  - apiGroups: [ "templates.gatekeeper.sh" ]
    resources: ["constrainttemplates/status"]
    verbs: ["get","watch","list","create","update","patch","delete"]
  - apiGroups: [ "apiregistration.k8s.io" ]
    resources: [ "apiservices" ]
    verbs: [ "get","watch","list" ]
  - apiGroups: [ "admissionregistration.k8s.io" ]
    resources: [ "validatingwebhookconfigurations" ]
    verbs: [ "get", "watch", "list", "create", "update", "patch", "delete" ]
---
# Source: m9sweeper/charts/dash/templates/rbac-m9sweeper.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: m9sweeper
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: m9sweeper
subjects:
- kind: ServiceAccount
  name: m9sweeper
  namespace: default
---
# Source: m9sweeper/charts/dash/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-m9sweeper-dash
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      name: http
  selector:
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
---
# Source: m9sweeper/charts/postgresql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-m9sweeper-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.6.0
    release: "my-m9sweeper"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "my-m9sweeper"
---
# Source: m9sweeper/charts/rabbitmq/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-m9sweeper-rabbitmq
  labels:
    helm.sh/chart: rabbitmq-1.6.0
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "3.8.34"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5672
      targetPort: 5672
      name: tcp
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-m9sweeper
---
# Source: m9sweeper/charts/dash/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-m9sweeper-dash
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dash
      app.kubernetes.io/instance: my-m9sweeper
  template:
    metadata:
      annotations:
        checksum/my-m9sweeper-dash-secrets: 38cd361e6acd0aa59dd0c9b49c249b6abe93de8403a32c5e0bf3cb3fb59b485d
      labels:
        app.kubernetes.io/name: dash
        app.kubernetes.io/instance: my-m9sweeper
    spec:
      serviceAccount: dash-sa
      initContainers:
        - name: wait-for-postgresql
          image: "ghcr.io/m9sweeper/dash:1.6.0"
          imagePullPolicy: Always
          command:
            - 'sh'
            - '-c'
            - 'npm run cli:database:wait'
          envFrom:
            - secretRef:
                name: my-m9sweeper-dash-secrets
          env:
            - name: CLI_PATH
              value: ./cli.js
      containers:
        - name: dash
          image: "ghcr.io/m9sweeper/dash:1.6.0"
          imagePullPolicy: Always
          env:
            - name: SERVER_BASE_URL
              value: "http://m9sweeper-dash.m9sweeper-system.svc:3000"
          envFrom:
            - secretRef:
                name: my-m9sweeper-dash-secrets
          ports:
            - containerPort: 3000
          livenessProbe:
            httpGet:
              path: /api/info
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 2
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 2
            periodSeconds: 10
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 128Mi
        - name: kubesec
          image: "docker.io/kubesec/kubesec:v2.13.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 128Mi
---
# Source: m9sweeper/charts/rabbitmq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-m9sweeper-rabbitmq
  labels:
    helm.sh/chart: rabbitmq-1.6.0
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "3.8.34"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: my-m9sweeper
  template:
    metadata:
      annotations:
        checksum/my-m9sweeper-rabbitmq-configmap: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/my-m9sweeper-rabbitmq-secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/instance: my-m9sweeper
    spec:
      securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
      containers:
        - name: rabbitmq
          image: "rabbitmq:3.8.34-alpine"
          imagePullPolicy: Always
          envFrom:
          ports:
            - containerPort: 5672
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
---
# Source: m9sweeper/charts/trawler/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-m9sweeper-trawler
  labels:
    helm.sh/chart: trawler-1.6.0
    app.kubernetes.io/name: trawler
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trawler
      app.kubernetes.io/instance: my-m9sweeper
  template:
    metadata:
      annotations:
        checksum/my-m9sweeper-trawler-secrets: da270b8a78b4a102952c64b34a22c48c0281c9eabc35afdd164f918affd79c84
      labels:
        app.kubernetes.io/name: trawler
        app.kubernetes.io/instance: my-m9sweeper
    spec:
      serviceAccount: trawler-sa
      containers:
        - name: "trawler"
          image: "ghcr.io/m9sweeper/trawler:1.6.0"
          imagePullPolicy: "Always"
          command: ["trawler"]
          env:
            - name: DEBUG
              value: "0"
            - name: TRAWLER_RUN_MODE
              value: rabbitmq
            - name: M9SWEEPER_URL
              value: "http://m9sweeper-dash:3000"
          envFrom:
            - secretRef:
                name: my-m9sweeper-trawler-secrets
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 256Mi
---
# Source: m9sweeper/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-m9sweeper-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.6.0
    release: "my-m9sweeper"
    heritage: "Helm"
spec:
  serviceName: my-m9sweeper-postgresql-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      release: "my-m9sweeper"
  template:
    metadata:
      name: my-m9sweeper-postgresql
      labels:
        app: "postgresql"
        chart: postgresql-1.6.0
        release: "my-m9sweeper"
        heritage: "Helm"
    spec:
      initContainers:
      - name: init-chmod-data
        image: "debian:buster-slim"
        imagePullPolicy: "Always"
        resources:
          {}
        command:
          - sh
          - -c
          - |
            mkdir -p /var/lib/postgresql/data/userdata
            chmod 700 /var/lib/postgresql/data/userdata
            find /var/lib/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              xargs chown -R 1001:1001
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql
          subPath: 
      containers:
      - name: my-m9sweeper-postgresql
        image: "postgres:11.10"
        imagePullPolicy: "IfNotPresent"
        resources:
          {}
        env:
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_DB
          value: "postgres"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
            null
        readinessProbe:
            null
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/userdata
          subPath: 
          readOnly: false
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
---
# Source: m9sweeper/charts/dash/templates/cronjob-exception-status-update.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: dash-exception-status-update
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            checksum/my-m9sweeper-dash-secrets: 38cd361e6acd0aa59dd0c9b49c249b6abe93de8403a32c5e0bf3cb3fb59b485d
        spec:
          serviceAccount: m9sweeper
          containers:
            - name: my-m9sweeper-dash-scrape-history
              image: "ghcr.io/m9sweeper/dash:1.6.0"
              imagePullPolicy: Always
              command: ["npm"]
              args:
                - "run"
                - "cli"
                - "sync:exception-status"
              env:
                - name: CLI_PATH
                  value: "./cli.js"
              envFrom:
                - secretRef:
                    name: my-m9sweeper-dash-secrets
          restartPolicy: OnFailure
  schedule: "1 0 * * *"
---
# Source: m9sweeper/charts/dash/templates/cronjob-gatekeeper-exception-block.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: dash-gatekeeper-exception-block
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            checksum/my-m9sweeper-dash-secrets: 38cd361e6acd0aa59dd0c9b49c249b6abe93de8403a32c5e0bf3cb3fb59b485d
        spec:
          serviceAccount: m9sweeper
          containers:
            - name: my-m9sweeper-dash-scrape-history
              image: "ghcr.io/m9sweeper/dash:1.6.0"
              imagePullPolicy: Always
              command: ["npm"]
              args:
                - "run"
                - "cli"
                - "sync:gatekeeper-exceptions"
              env:
                - name: CLI_PATH
                  value: "./cli.js"
              envFrom:
                - secretRef:
                    name: my-m9sweeper-dash-secrets
          restartPolicy: OnFailure
  schedule: "30 * * * *"
---
# Source: m9sweeper/charts/dash/templates/cronjob-scrape-history.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: dash-scrape-history
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            checksum/my-m9sweeper-dash-secrets: 38cd361e6acd0aa59dd0c9b49c249b6abe93de8403a32c5e0bf3cb3fb59b485d
        spec:
          serviceAccount: m9sweeper
          containers:
            - name: my-m9sweeper-dash-scrape-history
              image: "ghcr.io/m9sweeper/dash:1.6.0"
              imagePullPolicy: Always
              command: ["npm"]
              args:
                - "run"
                - "cli"
                - "populate:kubernetes-history"
              env:
                - name: CLI_PATH
                  value: "./cli.js"
              envFrom:
                - secretRef:
                    name: my-m9sweeper-dash-secrets
          restartPolicy: OnFailure
  schedule: "1 0 * * *"
---
# Source: m9sweeper/charts/dash/templates/cronjob-scrape.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: dash-scheduled-scrape
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            checksum/my-m9sweeper-dash-secrets: 38cd361e6acd0aa59dd0c9b49c249b6abe93de8403a32c5e0bf3cb3fb59b485d
        spec:
          serviceAccount: m9sweeper
          containers:
            - name: dash-scheduled-scrape
              image: "ghcr.io/m9sweeper/dash:1.6.0"
              imagePullPolicy: Always
              command: ["npm"]
              args:
                - "run"
                - "cli"
                - "cluster:sync"
                - "all"
              env:
                - name: CLI_PATH
                  value: "./cli.js"
              envFrom:
                - secretRef:
                    name: my-m9sweeper-dash-secrets
          restartPolicy: OnFailure
  schedule: "30 * * * *"
---
# Source: m9sweeper/charts/dash/templates/rbac-first-scrape.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: first-scrape-sa
  labels:
    helm.sh/chart: dash-1.6.0
    app.kubernetes.io/name: dash
    app.kubernetes.io/instance: my-m9sweeper
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    # "helm.sh/hook-delete-policy": hook-succeeded
---
# Source: m9sweeper/charts/dash/templates/rbac-first-scrape.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: first-scrape
  namespace: default
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    # "helm.sh/hook-delete-policy": hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get","watch","list"]
  - apiGroups: ["batch"]
    resources: ["*"]
    verbs: ["create","get","watch","list"]
---
# Source: m9sweeper/charts/dash/templates/rbac-first-scrape.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: first-scrape
  namespace: default
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    # "helm.sh/hook-delete-policy": hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: first-scrape
subjects:
- kind: ServiceAccount
  name: first-scrape-sa
  namespace: default
---
# Source: m9sweeper/charts/dash/templates/job-init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-m9sweeper-dash-init
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      serviceAccount: m9sweeper
      initContainers:
        - name: wait-for-postgresql
          image: "ghcr.io/m9sweeper/dash:1.6.0"
          imagePullPolicy: Always
          command:
            - 'sh'
            - '-c'
            - 'npm run cli:database:wait'
          envFrom:
            - secretRef:
                name: my-m9sweeper-dash-secrets
          env:
            - name: CLI_PATH
              value: ./cli.js
      containers:
      - name: dash-init
        image: "ghcr.io/m9sweeper/dash:1.6.0"
        imagePullPolicy: Always
        command: ["npm"]
        args:
          - "run"
          - "cli:init:all"
        env:
          - name: FIRST_CLUSTER_GROUP_NAME
            value: default-cluster-group
          - name: FIRST_CLUSTER_NAME
            value: default-cluster
          - name: CLUSTER_API_KEY
            value: ""
          - name: SUPER_ADMIN_EMAIL
            value: ""
          - name: SUPER_ADMIN_PASSWORD
            value: ""
          - name: INITIAL_REGISTRIES_JSON
            value: "eyJyZWdpc3RyaWVzIjpbeyJhbGlhc2VzIjpbImluZGV4LmRvY2tlci5pbyJdLCJob3N0bmFtZSI6ImRvY2tlci5pbyIsImxvZ2luX3JlcXVpcmVkIjpmYWxzZSwibmFtZSI6IkRvY2tlcmh1YiJ9LHsiaG9zdG5hbWUiOiJnaGNyLmlvIiwibG9naW5fcmVxdWlyZWQiOmZhbHNlLCJuYW1lIjoiR2l0SHViIENvbnRhaW5lciBSZWdpc3RyeSJ9LHsiaG9zdG5hbWUiOiJyZWdpc3RyeS5rOHMuaW8iLCJsb2dpbl9yZXF1aXJlZCI6ZmFsc2UsIm5hbWUiOiJLdWJlcm5ldGVzIENvbnRhaW5lciBSZWdpc3RyeSJ9XX0="
          - name: DEFAULT_NAMESPACE_EXCEPTIONS
            value: kube-system
          - name: TRAWLER_API_KEY
            value: 
          - name: KUBE_HUNTER_API_KEY
            value: 
          - name: KUBE_BENCH_API_KEY
            value: 
          - name: FALCO_API_KEY
            value: 
          - name: CLI_PATH
            value: ./cli.js
        envFrom:
          - secretRef:
              name: my-m9sweeper-dash-secrets
      restartPolicy: Never
  backoffLimit: 0
