---
# Source: backyards-sre/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-backyards-sre-controller
  namespace: default
  labels:
    
    app: my-backyards-sre-controller
    app.kubernetes.io/name: backyards-sre-controller
    backyards.banzaicloud.io/cluster-name: master
    helm.sh/chart: backyards-sre-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-backyards-sre
    app.kubernetes.io/version: 1.3.3
    app.kubernetes.io/component: backyards-sre
    app.kubernetes.io/part-of: backyards-sre
---
# Source: backyards-sre/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-backyards-sre-controller
  namespace: default
  labels:
    
    app: my-backyards-sre-controller
    app.kubernetes.io/name: backyards-sre-controller
    backyards.banzaicloud.io/cluster-name: master
    helm.sh/chart: backyards-sre-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-backyards-sre
    app.kubernetes.io/version: 1.3.3
    app.kubernetes.io/component: backyards-sre
    app.kubernetes.io/part-of: backyards-sre
---
# Source: backyards-sre/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: alertingpolicies.sre.banzaicloud.io
spec:
  additionalPrinterColumns:
  - JSONPath: .status.alertState
    description: 'Represents the actual state of the alert: inactive, pending or firing'
    format: byte
    name: Alert state
    type: string
  - JSONPath: .status.inStateFrom
    description: The duration since the alert is in the current state
    format: date
    name: In state
    type: date
  - JSONPath: .status.currentValue
    description: The last calculated value for the alert metric
    format: float
    name: Current value
    type: string
  - JSONPath: .metadata.creationTimestamp
    format: date
    name: Age
    type: date
  - JSONPath: .spec.burnRate.sloRef.name
    description: Name of the corresponding SLO resource
    format: byte
    name: SLO Name
    priority: 1
    type: string
  - JSONPath: .spec.burnRate.sloRef.namespace
    description: Namespace of the corresponding SLO resource
    format: byte
    name: SLO Namespace
    priority: 1
    type: string
  - JSONPath: .spec.burnRate.lookBackWindow
    description: Duration for which the error rate is averaged
    format: byte
    name: LookBack Window
    priority: 1
    type: string
  - JSONPath: .spec.burnRate.secondaryWindow
    description: Shorter duration for which the error rate is averaged at the end
      of the longer duration
    format: byte
    name: Secondary Window
    priority: 1
    type: string
  - JSONPath: .spec.burnRate.threshold
    description: The burn rate value, when it is exceeded for the given time periods
      an alert is triggered
    format: float
    name: Threshold
    priority: 1
    type: string
  - JSONPath: .spec.burnRate.conditionMetDuration
    description: Configures the duration for which the alerting condition has to be
      fulfilled continuously to trigger an alert
    format: byte
    name: Condition Met Duration
    priority: 1
    type: string
  - JSONPath: .spec.burnRate.severity
    description: 'Can be set for an alert: page or ticket'
    format: byte
    name: Severity
    priority: 1
    type: string
  group: sre.banzaicloud.io
  names:
    kind: AlertingPolicy
    listKind: AlertingPolicyList
    plural: alertingpolicies
    shortNames:
    - ap
    singular: alertingpolicy
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: AlertingPolicy is the Schema for the alertingpolicies API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: AlertingPolicySpec defines the desired state of AlertingPolicy
          properties:
            burnRate:
              description: BurnRate defines a burn rate based alert configuration
              properties:
                conditionMetDuration:
                  description: 'TODO: Use this when allowDangerousTypes feature is
                    released to support floats Threshold float64 `json:"threshold,omitempty"`
                    ConditionMetDuration configures the duration for which the alerting
                    condition has to be fulfilled continuously to trigger an alert'
                  type: string
                lookBackWindow:
                  description: LookBackWindow is the duration for which the error
                    rate is averaged
                  type: string
                secondaryWindow:
                  description: SecondaryWindow is a shorter duration for which the
                    error rate is averaged at the end of the longer duration
                  type: string
                severity:
                  description: 'Severity can be set for an alert: page or ticket'
                  enum:
                  - page
                  - ticket
                  type: string
                sloRef:
                  description: SLORef has to reference an existing ServiceLevelObjective
                    CR based on which the alerts are evaluated
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                threshold:
                  description: Threshold is the burn rate value, when it is exceeded
                    for the given time periods an alert is triggered
                  type: string
              required:
              - sloRef
              type: object
          type: object
        status:
          description: AlertingPolicyStatus defines the observed state of AlertingPolicy
          properties:
            alertState:
              description: 'AlertState represents the actual state of the alert: inactive,
                pending or firing'
              enum:
              - inactive
              - pending
              - firing
              type: string
            currentValue:
              description: CurrentValue is the last calculated value for the alert
                metric
              type: string
            inStateFrom:
              description: InStateFrom is the timestamp starting from the alert is
                in the current state
              format: date-time
              type: string
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: backyards-sre/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: servicelevelindicatortemplates.sre.banzaicloud.io
spec:
  group: sre.banzaicloud.io
  names:
    kind: ServiceLevelIndicatorTemplate
    listKind: ServiceLevelIndicatorTemplateList
    plural: servicelevelindicatortemplates
    shortNames:
    - slit
    singular: servicelevelindicatortemplate
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: ServiceLevelIndicatorTemplate is the Schema for the servicelevelindicatortemplates
        API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: ServiceLevelIndicatorTemplateSpec defines the desired state
            of ServiceLevelIndicatorTemplate
          properties:
            description:
              type: string
            goodEvents:
              type: string
            kind:
              type: string
            parameters:
              items:
                properties:
                  default:
                    type: string
                  description:
                    type: string
                  name:
                    type: string
                required:
                - default
                - name
                type: object
              type: array
            totalEvents:
              type: string
          required:
          - goodEvents
          - totalEvents
          type: object
        status:
          description: ServiceLevelIndicatorTemplateStatus defines the observed state
            of ServiceLevelIndicatorTemplate
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: backyards-sre/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: servicelevelobjectives.sre.banzaicloud.io
spec:
  group: sre.banzaicloud.io
  names:
    kind: ServiceLevelObjective
    listKind: ServiceLevelObjectiveList
    plural: servicelevelobjectives
    shortNames:
    - slo
    singular: servicelevelobjective
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: ServiceLevelObjective is the Schema for the servicelevelobjectives
        API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: ServiceLevelObjectiveSpec defines the desired state of ServiceLevelObjective
          properties:
            selector:
              properties:
                name:
                  type: string
                namespace:
                  type: string
              required:
              - name
              - namespace
              type: object
            sli:
              properties:
                evaluation:
                  properties:
                    type:
                      type: string
                    windowCriteria:
                      description: WindowCriteria is required when type is WindowBased
                      properties:
                        duration:
                          type: string
                        goodness:
                          type: integer
                      required:
                      - duration
                      - goodness
                      type: object
                  required:
                  - type
                  type: object
                parameters:
                  additionalProperties:
                    type: string
                  type: object
                templateRef:
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
              required:
              - templateRef
              type: object
            slo:
              properties:
                calendar:
                  properties:
                    length:
                      type: string
                  required:
                  - length
                  type: object
                goal:
                  type: string
                rolling:
                  properties:
                    length:
                      type: string
                  required:
                  - length
                  type: object
              required:
              - goal
              type: object
          required:
          - selector
          - sli
          - slo
          type: object
        status:
          description: ServiceLevelObjectiveStatus defines the observed state of ServiceLevelObjective
          properties:
            periodEnd:
              format: date-time
              type: string
            periodStart:
              format: date-time
              type: string
            requestBasedStats:
              properties:
                burnRate:
                  type: string
                complianceRatio:
                  type: string
                errorBudgetConsumedRatio:
                  type: string
                goodEvents:
                  type: string
                totalEvents:
                  type: string
              required:
              - burnRate
              - complianceRatio
              - errorBudgetConsumedRatio
              - goodEvents
              - totalEvents
              type: object
          required:
          - periodEnd
          - periodStart
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: backyards-sre/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-backyards-sre-controller
  labels:
    
    app: my-backyards-sre-controller
    app.kubernetes.io/name: backyards-sre-controller
    backyards.banzaicloud.io/cluster-name: master
    helm.sh/chart: backyards-sre-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-backyards-sre
    app.kubernetes.io/version: 1.3.3
    app.kubernetes.io/component: backyards-sre
    app.kubernetes.io/part-of: backyards-sre
rules:
- apiGroups: ["monitoring.backyards.banzaicloud.io"]
  resources: ["*"]
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
- apiGroups: ["sre.banzaicloud.io"]
  resources: ["*"]
  verbs:
  - get
  - list
  - watch
---
# Source: backyards-sre/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-backyards-sre-controller
  labels:
    
    app: my-backyards-sre-controller
    app.kubernetes.io/name: backyards-sre-controller
    backyards.banzaicloud.io/cluster-name: master
    helm.sh/chart: backyards-sre-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-backyards-sre
    app.kubernetes.io/version: 1.3.3
    app.kubernetes.io/component: backyards-sre
    app.kubernetes.io/part-of: backyards-sre
roleRef:
  kind: ClusterRole
  name: my-backyards-sre-controller
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: my-backyards-sre-controller
  namespace: default
---
# Source: backyards-sre/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-backyards-sre-controller
  namespace: default
  labels:
    
    app: my-backyards-sre-controller
    app.kubernetes.io/name: backyards-sre-controller
    backyards.banzaicloud.io/cluster-name: master
    helm.sh/chart: backyards-sre-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-backyards-sre
    app.kubernetes.io/version: 1.3.3
    app.kubernetes.io/component: backyards-sre
    app.kubernetes.io/part-of: backyards-sre
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: backyards-sre-controller
    app.kubernetes.io/instance: my-backyards-sre
---
# Source: backyards-sre/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-backyards-sre-controller
  namespace: default
  labels:
    
    app: my-backyards-sre-controller
    app.kubernetes.io/name: backyards-sre-controller
    backyards.banzaicloud.io/cluster-name: master
    helm.sh/chart: backyards-sre-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-backyards-sre
    app.kubernetes.io/version: 1.3.3
    app.kubernetes.io/component: backyards-sre
    app.kubernetes.io/part-of: backyards-sre
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: backyards-sre-controller
      app.kubernetes.io/instance: my-backyards-sre
  template:
    metadata:
      labels:
        
        app: my-backyards-sre-controller
        app.kubernetes.io/name: backyards-sre-controller
        backyards.banzaicloud.io/cluster-name: master
        helm.sh/chart: backyards-sre-0.1.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: my-backyards-sre
        app.kubernetes.io/version: 1.3.3
        app.kubernetes.io/component: backyards-sre
        app.kubernetes.io/part-of: backyards-sre
    spec:
      securityContext:
        {}
      serviceAccountName: my-backyards-sre-controller
      containers:
        - name: controller
          args:
            - --enable-leader-election
            - --metrics-addr=:8080
            - --prometheus-api-address=http://prometheus:9090
          securityContext:
            {}
          image: "banzaicloud/backyards-sre:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
          resources:
            {}
---
# Source: backyards-sre/templates/servicelevelindicatortemplates.yaml
# WARNING: Only the .Release.Namespace template will work (see servicelevelindicatortemplates.yaml)
apiVersion: sre.banzaicloud.io/v1alpha1
kind: ServiceLevelIndicatorTemplate
metadata:
  name: http-requests-duration
  namespace: default
spec:
  description: |
    Indicates the percentages of 200 return codes compared to all requests
  goodEvents: |
    sum(delta(
      istio_request_duration_milliseconds_bucket{le="{{ .Params.threshold }}", reporter="{{ .Params.reporter }}", destination_service_namespace="{{ .Service.Namespace }}", destination_service_name="{{ .Service.Name }}",response_code=~"2[0-9]{2}"}[{{ .SLO.Period }}]
    ))
  kind: latency
  parameters:
  - default: "100"
    description: acceptance threshold for HTTP latency values in milliseconds
    name: threshold
  - default: source
    description: time-frame to calculate the request numbers on
    name: reporter
  totalEvents: |
    sum(delta(
      istio_request_duration_milliseconds_count{reporter="{{ .Params.reporter }}", destination_service_namespace="{{ .Service.Namespace }}", destination_service_name="{{ .Service.Name }}"}[{{ .SLO.Period }}]
    ))
---
# Source: backyards-sre/templates/servicelevelindicatortemplates.yaml
# WARNING: Only the .Release.Namespace template will work (see servicelevelindicatortemplates.yaml)
apiVersion: sre.banzaicloud.io/v1alpha1
kind: ServiceLevelIndicatorTemplate
metadata:
  name: http-requests-success-rate
  namespace: default
spec:
  description: |
    Indicates the percentages of 200 return codes compared to all requests
  goodEvents: |
    sum(rate(
      istio_requests_total{reporter="{{ .Params.reporter }}", destination_service_namespace="{{ .Service.Namespace }}", destination_service_name="{{ .Service.Name }}",response_code=~"2[0-9]{2}"}[{{ .SLO.Period }}]
    ))
  kind: availability
  parameters:
  - default: source
    description: time-frame to calculate the request numbers on
    name: reporter
  totalEvents: |
    sum(rate(
      istio_requests_total{reporter="{{ .Params.reporter }}", destination_service_namespace="{{ .Service.Namespace }}", destination_service_name="{{ .Service.Name }}"}[{{ .SLO.Period }}]
    ))
---
# Source: backyards-sre/templates/scraping.yaml
apiVersion: monitoring.backyards.banzaicloud.io/v1
kind: ServiceMonitor
metadata:
  name: my-backyards-sre-controller
  namespace: default
  labels:
    
    app: my-backyards-sre-controller
    app.kubernetes.io/name: backyards-sre-controller
    backyards.banzaicloud.io/cluster-name: master
    helm.sh/chart: backyards-sre-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-backyards-sre
    app.kubernetes.io/version: 1.3.3
    app.kubernetes.io/component: backyards-sre
    app.kubernetes.io/part-of: backyards-sre
spec:
  selector:
    matchLabels:
        app.kubernetes.io/name: backyards-sre-controller
        app.kubernetes.io/instance: my-backyards-sre
  namespaceSelector:
    matchNames: [ default ]
  endpoints:
  - interval: 5s
    port: "metrics"
    relabelings:
      
      - sourceLabels: [__metrics_path__]
        targetLabel: metrics_path
      - targetLabel: cluster
        replacement: "master"
