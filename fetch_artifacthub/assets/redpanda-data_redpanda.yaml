---
# Source: redpanda/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda
  namespace: default
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: redpanda-statefulset
      app.kubernetes.io/instance: my-redpanda
      app.kubernetes.io/name: redpanda
      redpanda.com/poddisruptionbudget: my-redpanda
---
# Source: redpanda/charts/console/templates/serviceaccount.yaml
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations: {}
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: v2.7.0
    helm.sh/chart: console-0.7.29
  name: my-redpanda-console
  namespace: default
---
# Source: redpanda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-sts-lifecycle
  namespace: default
stringData:
  common.sh: |-
    #!/usr/bin/env bash

    # the SERVICE_NAME comes from the metadata.name of the pod, essentially the POD_NAME
    CURL_URL="https://${SERVICE_NAME}.my-redpanda.default.svc.cluster.local:9644"

    # commands used throughout
    CURL_NODE_ID_CMD="curl --silent --fail --cacert /etc/tls/certs/default/ca.crt ${CURL_URL}/v1/node_config"

    CURL_MAINTENANCE_DELETE_CMD_PREFIX='curl -X DELETE --silent -o /dev/null -w "%{http_code}"'
    CURL_MAINTENANCE_PUT_CMD_PREFIX='curl -X PUT --silent -o /dev/null -w "%{http_code}"'
    CURL_MAINTENANCE_GET_CMD="curl -X GET --silent --cacert /etc/tls/certs/default/ca.crt ${CURL_URL}/v1/maintenance"
  postStart.sh: |-
    #!/usr/bin/env bash
    # This code should be similar if not exactly the same as that found in the panda-operator, see
    # https://github.com/redpanda-data/redpanda/blob/e51d5b7f2ef76d5160ca01b8c7a8cf07593d29b6/src/go/k8s/pkg/resources/secret.go

    # path below should match the path defined on the statefulset
    source /var/lifecycle/common.sh

    postStartHook () {
      set -x

      touch /tmp/postStartHookStarted

      until NODE_ID=$(${CURL_NODE_ID_CMD} | grep -o '\"node_id\":[^,}]*' | grep -o '[^: ]*$'); do
          sleep 0.5
      done

      echo "Clearing maintenance mode on node ${NODE_ID}"
      CURL_MAINTENANCE_DELETE_CMD="${CURL_MAINTENANCE_DELETE_CMD_PREFIX} --cacert /etc/tls/certs/default/ca.crt ${CURL_URL}/v1/brokers/${NODE_ID}/maintenance"
      # a 400 here would mean not in maintenance mode
      until [ "${status:-}" = '"200"' ] || [ "${status:-}" = '"400"' ]; do
          status=$(${CURL_MAINTENANCE_DELETE_CMD})
          sleep 0.5
      done

      touch /tmp/postStartHookFinished
    }

    postStartHook
    true
  preStop.sh: |-
    #!/usr/bin/env bash
    # This code should be similar if not exactly the same as that found in the panda-operator, see
    # https://github.com/redpanda-data/redpanda/blob/e51d5b7f2ef76d5160ca01b8c7a8cf07593d29b6/src/go/k8s/pkg/resources/secret.go

    touch /tmp/preStopHookStarted

    # path below should match the path defined on the statefulset
    source /var/lifecycle/common.sh

    set -x

    preStopHook () {
      until NODE_ID=$(${CURL_NODE_ID_CMD} | grep -o '\"node_id\":[^,}]*' | grep -o '[^: ]*$'); do
          sleep 0.5
      done

      echo "Setting maintenance mode on node ${NODE_ID}"
      CURL_MAINTENANCE_PUT_CMD="${CURL_MAINTENANCE_PUT_CMD_PREFIX} --cacert /etc/tls/certs/default/ca.crt ${CURL_URL}/v1/brokers/${NODE_ID}/maintenance"
      until [ "${status:-}" = '"200"' ]; do
          status=$(${CURL_MAINTENANCE_PUT_CMD})
          sleep 0.5
      done

      until [ "${finished:-}" = "true" ] || [ "${draining:-}" = "false" ]; do
          res=$(${CURL_MAINTENANCE_GET_CMD})
          finished=$(echo $res | grep -o '\"finished\":[^,}]*' | grep -o '[^: ]*$')
          draining=$(echo $res | grep -o '\"draining\":[^,}]*' | grep -o '[^: ]*$')
          sleep 0.5
      done

      touch /tmp/preStopHookFinished
    }
    preStopHook
    true
type: Opaque
---
# Source: redpanda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-config-watcher
  namespace: default
stringData:
  sasl-user.sh: |-
    #!/usr/bin/env bash

    trap 'error_handler $? $LINENO' ERR

    error_handler() {
      echo "Error: ($1) occurred at line $2"
    }

    set -e

    # rpk cluster health can exit non-zero if it's unable to dial brokers. This
    # can happen for many reasons but we never want this script to crash as it
    # would take down yet another broker and make a bad situation worse.
    # Instead, just wait for the command to eventually exit zero.
    echo "Waiting for cluster to be ready"
    until rpk cluster health --watch --exit-when-healthy; do
      echo "rpk cluster health failed. Waiting 5 seconds before trying again..."
      sleep 5
    done
    echo "Nothing to do. Sleeping..."
    sleep infinity
type: Opaque
---
# Source: redpanda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-configurator
  namespace: default
stringData:
  configurator.sh: |-
    set -xe
    SERVICE_NAME=$1
    KUBERNETES_NODE_NAME=$2
    POD_ORDINAL=${SERVICE_NAME##*-}
    BROKER_INDEX=`expr $POD_ORDINAL + 1`

    CONFIG=/etc/redpanda/redpanda.yaml

    # Setup config files
    cp /tmp/base-config/redpanda.yaml "${CONFIG}"
    cp /tmp/base-config/bootstrap.yaml /etc/redpanda/.bootstrap.yaml

    LISTENER="{\"address\":\"${SERVICE_NAME}.my-redpanda.default.svc.cluster.local.\",\"name\":\"internal\",\"port\":9093}"
    rpk redpanda config --config "$CONFIG" set redpanda.advertised_kafka_api[0] "$LISTENER"

    ADVERTISED_KAFKA_ADDRESSES=()

    PREFIX_TEMPLATE=""
    ADVERTISED_KAFKA_ADDRESSES+=("{\"address\":\"${SERVICE_NAME}\",\"name\":\"default\",\"port\":31092}")

    PREFIX_TEMPLATE=""
    ADVERTISED_KAFKA_ADDRESSES+=("{\"address\":\"${SERVICE_NAME}\",\"name\":\"default\",\"port\":31092}")

    PREFIX_TEMPLATE=""
    ADVERTISED_KAFKA_ADDRESSES+=("{\"address\":\"${SERVICE_NAME}\",\"name\":\"default\",\"port\":31092}")

    rpk redpanda config --config "$CONFIG" set redpanda.advertised_kafka_api[1] "${ADVERTISED_KAFKA_ADDRESSES[$POD_ORDINAL]}"

    LISTENER="{\"address\":\"${SERVICE_NAME}.my-redpanda.default.svc.cluster.local.\",\"name\":\"internal\",\"port\":8082}"
    rpk redpanda config --config "$CONFIG" set pandaproxy.advertised_pandaproxy_api[0] "$LISTENER"

    ADVERTISED_HTTP_ADDRESSES=()

    PREFIX_TEMPLATE=""
    ADVERTISED_HTTP_ADDRESSES+=("{\"address\":\"${SERVICE_NAME}\",\"name\":\"default\",\"port\":30082}")

    PREFIX_TEMPLATE=""
    ADVERTISED_HTTP_ADDRESSES+=("{\"address\":\"${SERVICE_NAME}\",\"name\":\"default\",\"port\":30082}")

    PREFIX_TEMPLATE=""
    ADVERTISED_HTTP_ADDRESSES+=("{\"address\":\"${SERVICE_NAME}\",\"name\":\"default\",\"port\":30082}")

    rpk redpanda config --config "$CONFIG" set pandaproxy.advertised_pandaproxy_api[1] "${ADVERTISED_HTTP_ADDRESSES[$POD_ORDINAL]}"
type: Opaque
---
# Source: redpanda/templates/configmap.yaml
apiVersion: v1
data:
  bootstrap.yaml: |-
    audit_enabled: false
    compacted_log_segment_size: 67108864
    enable_rack_awareness: false
    enable_sasl: false
    group_topic_partitions: 16
    kafka_batch_max_bytes: 1048576
    kafka_connection_rate_limit: 1000
    kafka_enable_authorization: false
    log_segment_size: 134217728
    log_segment_size_max: 268435456
    log_segment_size_min: 16777216
    max_compacted_log_segment_size: 536870912
    storage_min_free_bytes: 1073741824
    topic_partitions_per_shard: 1000
  redpanda.yaml: |-
    config_file: /etc/redpanda/redpanda.yaml
    pandaproxy:
      pandaproxy_api:
      - address: 0.0.0.0
        name: internal
        port: 8082
      - address: 0.0.0.0
        name: default
        port: 8083
      pandaproxy_api_tls:
      - cert_file: /etc/tls/certs/default/tls.crt
        enabled: true
        key_file: /etc/tls/certs/default/tls.key
        name: internal
        require_client_auth: false
        truststore_file: /etc/tls/certs/default/ca.crt
      - cert_file: /etc/tls/certs/external/tls.crt
        enabled: true
        key_file: /etc/tls/certs/external/tls.key
        name: default
        require_client_auth: false
        truststore_file: /etc/tls/certs/external/ca.crt
    pandaproxy_client:
      broker_tls:
        enabled: true
        require_client_auth: false
        truststore_file: /etc/tls/certs/default/ca.crt
      brokers:
      - address: my-redpanda-0.my-redpanda.default.svc.cluster.local.
        port: 9093
      - address: my-redpanda-1.my-redpanda.default.svc.cluster.local.
        port: 9093
      - address: my-redpanda-2.my-redpanda.default.svc.cluster.local.
        port: 9093
    redpanda:
      admin:
      - address: 0.0.0.0
        name: internal
        port: 9644
      - address: 0.0.0.0
        name: default
        port: 9645
      admin_api_tls:
      - cert_file: /etc/tls/certs/default/tls.crt
        enabled: true
        key_file: /etc/tls/certs/default/tls.key
        name: internal
        require_client_auth: false
        truststore_file: /etc/tls/certs/default/ca.crt
      - cert_file: /etc/tls/certs/external/tls.crt
        enabled: true
        key_file: /etc/tls/certs/external/tls.key
        name: default
        require_client_auth: false
        truststore_file: /etc/tls/certs/external/ca.crt
      audit_enabled: false
      compacted_log_segment_size: 67108864
      crash_loop_limit: 5
      empty_seed_starts_cluster: false
      enable_sasl: false
      group_topic_partitions: 16
      kafka_api:
      - address: 0.0.0.0
        name: internal
        port: 9093
      - address: 0.0.0.0
        name: default
        port: 9094
      kafka_api_tls:
      - cert_file: /etc/tls/certs/default/tls.crt
        enabled: true
        key_file: /etc/tls/certs/default/tls.key
        name: internal
        require_client_auth: false
        truststore_file: /etc/tls/certs/default/ca.crt
      - cert_file: /etc/tls/certs/external/tls.crt
        enabled: true
        key_file: /etc/tls/certs/external/tls.key
        name: default
        require_client_auth: false
        truststore_file: /etc/tls/certs/external/ca.crt
      kafka_batch_max_bytes: 1048576
      kafka_connection_rate_limit: 1000
      kafka_enable_authorization: false
      log_segment_size: 134217728
      log_segment_size_max: 268435456
      log_segment_size_min: 16777216
      max_compacted_log_segment_size: 536870912
      rpc_server:
        address: 0.0.0.0
        port: 33145
      rpc_server_tls:
        cert_file: /etc/tls/certs/default/tls.crt
        enabled: true
        key_file: /etc/tls/certs/default/tls.key
        require_client_auth: false
        truststore_file: /etc/tls/certs/default/ca.crt
      seed_servers:
      - host:
          address: my-redpanda-0.my-redpanda.default.svc.cluster.local.
          port: 33145
      - host:
          address: my-redpanda-1.my-redpanda.default.svc.cluster.local.
          port: 33145
      - host:
          address: my-redpanda-2.my-redpanda.default.svc.cluster.local.
          port: 33145
      storage_min_free_bytes: 1073741824
      topic_partitions_per_shard: 1000
    rpk:
      additional_start_flags:
      - --default-log-level=info
      - --memory=2048M
      - --reserve-memory=205M
      - --smp=1
      admin_api:
        addresses:
        - my-redpanda-0.my-redpanda.default.svc.cluster.local.:9644
        - my-redpanda-1.my-redpanda.default.svc.cluster.local.:9644
        - my-redpanda-2.my-redpanda.default.svc.cluster.local.:9644
        tls:
          ca_file: /etc/tls/certs/default/ca.crt
      enable_memory_locking: false
      kafka_api:
        brokers:
        - my-redpanda-0.my-redpanda.default.svc.cluster.local.:9093
        - my-redpanda-1.my-redpanda.default.svc.cluster.local.:9093
        - my-redpanda-2.my-redpanda.default.svc.cluster.local.:9093
        tls:
          ca_file: /etc/tls/certs/default/ca.crt
      overprovisioned: false
      tune_aio_events: true
    schema_registry:
      schema_registry_api:
      - address: 0.0.0.0
        name: internal
        port: 8081
      - address: 0.0.0.0
        name: default
        port: 8084
      schema_registry_api_tls:
      - cert_file: /etc/tls/certs/default/tls.crt
        enabled: true
        key_file: /etc/tls/certs/default/tls.key
        name: internal
        require_client_auth: false
        truststore_file: /etc/tls/certs/default/ca.crt
      - cert_file: /etc/tls/certs/external/tls.crt
        enabled: true
        key_file: /etc/tls/certs/external/tls.key
        name: default
        require_client_auth: false
        truststore_file: /etc/tls/certs/external/ca.crt
    schema_registry_client:
      broker_tls:
        enabled: true
        require_client_auth: false
        truststore_file: /etc/tls/certs/default/ca.crt
      brokers:
      - address: my-redpanda-0.my-redpanda.default.svc.cluster.local.
        port: 9093
      - address: my-redpanda-1.my-redpanda.default.svc.cluster.local.
        port: 9093
      - address: my-redpanda-2.my-redpanda.default.svc.cluster.local.
        port: 9093
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda
  namespace: default
---
# Source: redpanda/templates/configmap.yaml
apiVersion: v1
data:
  profile: |-
    admin_api:
      addresses:
      - my-redpanda-0:31644
      - my-redpanda-1:31644
      - my-redpanda-2:31644
      tls:
        ca_file: ca.crt
    kafka_api:
      brokers:
      - my-redpanda-0:31092
      - my-redpanda-1:31092
      - my-redpanda-2:31092
      tls:
        ca_file: ca.crt
    name: default
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-rpk
  namespace: default
---
# Source: redpanda/templates/console/configmap-and-deployment.yaml
---
apiVersion: v1
data:
  config.yaml: |
    # from .Values.console.config
    kafka:
      brokers:
      - my-redpanda-0.my-redpanda.default.svc.cluster.local.:9093
      - my-redpanda-1.my-redpanda.default.svc.cluster.local.:9093
      - my-redpanda-2.my-redpanda.default.svc.cluster.local.:9093
      sasl:
        enabled: false
      schemaRegistry:
        enabled: true
        tls:
          caFilepath: /mnt/cert/schemaregistry/default/ca.crt
          certFilepath: ""
          enabled: true
          insecureSkipTlsVerify: false
          keyFilepath: ""
        urls:
        - https://my-redpanda-0.my-redpanda.default.svc.cluster.local.:8081
        - https://my-redpanda-1.my-redpanda.default.svc.cluster.local.:8081
        - https://my-redpanda-2.my-redpanda.default.svc.cluster.local.:8081
      tls:
        caFilepath: /mnt/cert/kafka/default/ca.crt
        certFilepath: ""
        enabled: true
        insecureSkipTlsVerify: false
        keyFilepath: ""
    redpanda:
      adminApi:
        enabled: true
        tls:
          caFilepath: /mnt/cert/adminapi/default/ca.crt
          certFilepath: ""
          enabled: true
          insecureSkipTlsVerify: false
          keyFilepath: ""
        urls:
        - https://my-redpanda.default.svc.cluster.local.:9644
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: v2.7.0
    helm.sh/chart: console-0.7.29
  name: my-redpanda-console
---
# Source: redpanda/charts/console/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: v2.7.0
    helm.sh/chart: console-0.7.29
  name: my-redpanda-console
  namespace: default
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 0
  selector:
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/name: console
  type: ClusterIP
---
# Source: redpanda/templates/service.internal.yaml
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
    monitoring.redpanda.com/enabled: "false"
  name: my-redpanda
  namespace: default
spec:
  clusterIP: None
  ports:
  - appProtocol: null
    name: admin
    port: 9644
    protocol: TCP
    targetPort: 9644
  - name: http
    port: 8082
    protocol: TCP
    targetPort: 8082
  - name: kafka
    port: 9093
    protocol: TCP
    targetPort: 9093
  - name: rpc
    port: 33145
    protocol: TCP
    targetPort: 33145
  - name: schemaregistry
    port: 8081
    protocol: TCP
    targetPort: 8081
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: redpanda-statefulset
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/name: redpanda
  type: ClusterIP
---
# Source: redpanda/templates/service.nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-external
  namespace: default
spec:
  externalTrafficPolicy: Local
  ports:
  - name: admin-default
    nodePort: 31644
    port: 9645
    protocol: TCP
    targetPort: 0
  - name: kafka-default
    nodePort: 31092
    port: 9094
    protocol: TCP
    targetPort: 0
  - name: http-default
    nodePort: 30082
    port: 8083
    protocol: TCP
    targetPort: 0
  - name: schema-default
    nodePort: 30081
    port: 8084
    protocol: TCP
    targetPort: 0
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: redpanda-statefulset
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/name: redpanda
  sessionAffinity: None
  type: NodePort
---
# Source: redpanda/templates/console/configmap-and-deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: v2.7.0
    helm.sh/chart: console-0.7.29
  name: my-redpanda-console
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-redpanda
      app.kubernetes.io/name: console
  strategy: {}
  template:
    metadata:
      annotations:
        checksum-redpanda-chart/config: fc80c9c54cd99f7d900a8781d98b9bf7454e3076866a7c7476d7f623a17ad635
        checksum/config: 74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: my-redpanda
        app.kubernetes.io/name: console
    spec:
      affinity: {}
      automountServiceAccountToken: true
      containers:
      - args:
        - --config.filepath=/etc/console/configs/config.yaml
        command: null
        env:
        - name: KAFKA_TLS_CAFILEPATH
          value: /mnt/cert/kafka/default/ca.crt
        - name: KAFKA_SCHEMAREGISTRY_TLS_CAFILEPATH
          value: /mnt/cert/schemaregistry/default/ca.crt
        envFrom: []
        image: docker.redpanda.com/redpandadata/console:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /admin/health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: console
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /admin/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - mountPath: /etc/console/configs
          name: configs
          readOnly: true
        - mountPath: /mnt/cert/kafka/default
          name: kafka-default-cert
          readOnly: true
        - mountPath: /mnt/cert/schemaregistry/default
          name: schemaregistry-default-cert
          readOnly: true
        - mountPath: /mnt/cert/adminapi/default
          name: adminapi-default-cert
          readOnly: true
      imagePullSecrets: []
      initContainers: []
      nodeSelector: {}
      priorityClassName: ""
      securityContext:
        fsGroup: 99
        runAsUser: 99
      serviceAccountName: my-redpanda-console
      tolerations: []
      topologySpreadConstraints: []
      volumes:
      - configMap:
          name: my-redpanda-console
        name: configs
      - name: kafka-default-cert
        secret:
          defaultMode: 272
          secretName: my-redpanda-default-cert
      - name: schemaregistry-default-cert
        secret:
          defaultMode: 272
          secretName: my-redpanda-default-cert
      - name: adminapi-default-cert
        secret:
          defaultMode: 272
          secretName: my-redpanda-default-cert
---
# Source: redpanda/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda
  namespace: default
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: redpanda-statefulset
      app.kubernetes.io/instance: my-redpanda
      app.kubernetes.io/name: redpanda
  serviceName: my-redpanda
  template:
    metadata:
      annotations:
        config.redpanda.com/checksum: 77a89de367a597235176b1980e7fb6c877c6f7f98defeefabb5cd1837c2cf034
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: redpanda-statefulset
        app.kubernetes.io/instance: my-redpanda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redpanda
        helm.sh/chart: redpanda-5.9.3
        redpanda.com/poddisruptionbudget: my-redpanda
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: redpanda-statefulset
                app.kubernetes.io/instance: my-redpanda
                app.kubernetes.io/name: redpanda
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - rpk
        - redpanda
        - start
        - --advertise-rpc-addr=$(SERVICE_NAME).my-redpanda.default.svc.cluster.local.:33145
        env:
        - name: SERVICE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                timeout -v 45 bash -x /var/lifecycle/postStart.sh
                true
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                timeout -v 45 bash -x /var/lifecycle/preStop.sh
                true # do not fail and cause the pod to terminate
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - curl --silent --fail -k -m 5 --cacert /etc/tls/certs/default/ca.crt
              "https://${SERVICE_NAME}.my-redpanda.default.svc.cluster.local.:9644/v1/status/ready"
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
        name: redpanda
        ports:
        - containerPort: 9644
          name: admin
        - containerPort: 9645
          name: admin-default
        - containerPort: 8082
          name: http
        - containerPort: 8083
          name: http-default
        - containerPort: 9093
          name: kafka
        - containerPort: 9094
          name: kafka-default
        - containerPort: 33145
          name: rpc
        - containerPort: 8081
          name: schemaregistry
        - containerPort: 8084
          name: schema-default
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              set -x
              RESULT=$(rpk cluster health)
              echo $RESULT
              echo $RESULT | grep 'Healthy:.*true'
          failureThreshold: 3
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 0
        resources:
          limits:
            cpu: 1
            memory: 2.5Gi
        securityContext:
          runAsGroup: 101
          runAsUser: 101
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              set -e
              RESULT=$(curl --silent --fail -k -m 5 --cacert /etc/tls/certs/default/ca.crt "https://${SERVICE_NAME}.my-redpanda.default.svc.cluster.local.:9644/v1/status/ready")
              echo $RESULT
              echo $RESULT | grep ready
          failureThreshold: 120
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /tmp/base-config
          name: my-redpanda
        - mountPath: /var/lifecycle
          name: lifecycle-scripts
        - mountPath: /var/lib/redpanda/data
          name: datadir
      - args:
        - -c
        - trap "exit 0" TERM; exec /etc/secrets/config-watcher/scripts/sasl-user.sh
          & wait $!
        command:
        - /bin/sh
        env: []
        image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
        name: config-watcher
        resources: {}
        securityContext: {}
        volumeMounts:
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/secrets/config-watcher/scripts
          name: my-redpanda-config-watcher
      imagePullSecrets: null
      initContainers:
      - command:
        - /bin/bash
        - -c
        - rpk redpanda tune all
        image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
        name: tuning
        resources: {}
        securityContext:
          capabilities:
            add:
            - SYS_RESOURCE
          privileged: true
          runAsGroup: 0
          runAsUser: 0
        volumeMounts:
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
        - mountPath: /etc/redpanda
          name: my-redpanda
      - command:
        - /bin/bash
        - -c
        - trap "exit 0" TERM; exec $CONFIGURATOR_SCRIPT "${SERVICE_NAME}" "${KUBERNETES_NODE_NAME}"
          & wait $!
        env:
        - name: CONFIGURATOR_SCRIPT
          value: /etc/secrets/configurator/scripts/configurator.sh
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef: null
            fieldRef:
              fieldPath: metadata.name
            resourceFieldRef: null
            secretKeyRef: null
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: HOST_IP_ADDRESS
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
        name: redpanda-configurator
        resources: {}
        securityContext:
          allowPrivilegeEscalation: null
          runAsGroup: 101
          runAsNonRoot: null
          runAsUser: 101
        volumeMounts:
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /tmp/base-config
          name: my-redpanda
        - mountPath: /etc/secrets/configurator/scripts/
          name: my-redpanda-configurator
      nodeSelector: {}
      priorityClassName: ""
      securityContext:
        fsGroup: 101
        fsGroupChangePolicy: OnRootMismatch
      serviceAccountName: default
      terminationGracePeriodSeconds: 90
      tolerations: []
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/component: redpanda-statefulset
            app.kubernetes.io/instance: my-redpanda
            app.kubernetes.io/name: redpanda
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: redpanda-default-cert
        secret:
          defaultMode: 288
          secretName: my-redpanda-default-cert
      - name: redpanda-external-cert
        secret:
          defaultMode: 288
          secretName: my-redpanda-external-cert
      - name: lifecycle-scripts
        secret:
          defaultMode: 509
          secretName: my-redpanda-sts-lifecycle
      - configMap:
          name: my-redpanda
        name: my-redpanda
      - emptyDir: {}
        name: config
      - name: my-redpanda-configurator
        secret:
          defaultMode: 509
          secretName: my-redpanda-configurator
      - name: my-redpanda-config-watcher
        secret:
          defaultMode: 509
          secretName: my-redpanda-config-watcher
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      annotations: null
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: redpanda
        app.kubernetes.io/instance: my-redpanda
        app.kubernetes.io/name: redpanda
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
    status: {}
---
# Source: redpanda/templates/console/configmap-and-deployment.yaml
# before license changes, this was not printing a secret, so we gather in which case to print
# for now only if we have a license do we print, however, this may be an issue for some
# since if we do include a license we MUST also print all secret items.
---
# Source: redpanda/templates/cert-issuers.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-default-root-certificate
  namespace: default
spec:
  commonName: my-redpanda-default-root-certificate
  duration: 43800h
  isCA: true
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: my-redpanda-default-selfsigned-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: my-redpanda-default-root-certificate
---
# Source: redpanda/templates/cert-issuers.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-external-root-certificate
  namespace: default
spec:
  commonName: my-redpanda-external-root-certificate
  duration: 43800h
  isCA: true
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: my-redpanda-external-selfsigned-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: my-redpanda-external-root-certificate
---
# Source: redpanda/templates/certs.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-default-cert
  namespace: default
spec:
  dnsNames:
  - my-redpanda-cluster.my-redpanda.default.svc.cluster.local
  - my-redpanda-cluster.my-redpanda.default.svc
  - my-redpanda-cluster.my-redpanda.default
  - '*.my-redpanda-cluster.my-redpanda.default.svc.cluster.local'
  - '*.my-redpanda-cluster.my-redpanda.default.svc'
  - '*.my-redpanda-cluster.my-redpanda.default'
  - my-redpanda.default.svc.cluster.local
  - my-redpanda.default.svc
  - my-redpanda.default
  - '*.my-redpanda.default.svc.cluster.local'
  - '*.my-redpanda.default.svc'
  - '*.my-redpanda.default'
  duration: 43800h
  isCA: false
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: my-redpanda-default-root-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: my-redpanda-default-cert
---
# Source: redpanda/templates/certs.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-external-cert
  namespace: default
spec:
  dnsNames:
  - my-redpanda-cluster.my-redpanda.default.svc.cluster.local
  - my-redpanda-cluster.my-redpanda.default.svc
  - my-redpanda-cluster.my-redpanda.default
  - '*.my-redpanda-cluster.my-redpanda.default.svc.cluster.local'
  - '*.my-redpanda-cluster.my-redpanda.default.svc'
  - '*.my-redpanda-cluster.my-redpanda.default'
  - my-redpanda.default.svc.cluster.local
  - my-redpanda.default.svc
  - my-redpanda.default
  - '*.my-redpanda.default.svc.cluster.local'
  - '*.my-redpanda.default.svc'
  - '*.my-redpanda.default'
  duration: 43800h
  isCA: false
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: my-redpanda-external-root-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/cert-issuers.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-default-selfsigned-issuer
  namespace: default
spec:
  selfSigned: {}
---
# Source: redpanda/templates/cert-issuers.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-default-root-issuer
  namespace: default
spec:
  ca:
    secretName: my-redpanda-default-root-certificate
---
# Source: redpanda/templates/cert-issuers.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-external-selfsigned-issuer
  namespace: default
spec:
  selfSigned: {}
---
# Source: redpanda/templates/cert-issuers.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-external-root-issuer
  namespace: default
spec:
  ca:
    secretName: my-redpanda-external-root-certificate
---
# Source: redpanda/templates/tests/test-nodeport-tls.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-nodeport-tls-redpanda-no-a-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-100"
---
# Source: redpanda/templates/tests/test-nodeport-tls.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: test-nodeport-tls-redpanda-no-a-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-100"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
    verbs:
      - get
---
# Source: redpanda/templates/tests/test-nodeport-tls.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: test-nodeport-tls-redpanda-no-a-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-100"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: test-nodeport-tls-redpanda-no-a-test
subjects:
  - kind: ServiceAccount
    name: test-nodeport-tls-redpanda-no-a-test
    namespace: default
---
# Source: redpanda/charts/console/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-redpanda-console-test-connection"
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: v2.7.0
    helm.sh/chart: console-0.7.29
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-redpanda-console:8080']
  restartPolicy: Never
  priorityClassName:
---
# Source: redpanda/templates/tests/test-console.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-redpanda-test-console"
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      command:
      - /usr/bin/timeout
      - "120"
      - bash
      - -c
      - |
        curl  -svm3 --fail --retry "120" --retry-max-time "120" --retry-all-errors -o - -w "\nstatus=%{http_code} %{redirect_url} size=%{size_download} time=%{time_total} content-type=\"%{content_type}\"\n"  http://my-redpanda-console.default.svc:8080/api/cluster
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/tests/test-internal-external-tls-secrets.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-redpanda-test-internal-externals-cert-secrets
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      command:
        - bash
        - -c
        - |
          set -x

          retry() {
            local retries="$1"
            local command="$2"

            # Run the command, and save the exit code
            bash -c $command
            local exit_code=$?

            # If the exit code is non-zero (i.e. command failed), and we have not
            # reached the maximum number of retries, run the command again
            if [[ $exit_code -ne 0 && $retries -gt 0 ]]; then
              retry $(($retries - 1)) "$command"
              else
              # Return the exit code from the command
              return $exit_code
            fi
          }
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/tests/test-kafka-internal-tls-status.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-redpanda-test-kafka-internal-tls-status
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      command:
      - /usr/bin/timeout
      - "120"
      - bash
      - -c
      - |
        until rpk cluster info \
          --brokers my-redpanda-0.my-redpanda.default.svc.cluster.local.:9093 \
          --tls-enabled \
          --tls-truststore /etc/tls/certs/default/ca.crt
        do sleep 2
        done
      resources: 
            null
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/tests/test-kafka-nodelete.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-redpanda-test-kafka-nodelete
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      env:
        - name: REDPANDA_BROKERS
          value: "my-redpanda.default.svc.cluster.local:9093"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      command:
        - /usr/bin/timeout
        - "120"
        - bash
        - -c
        - |
          set -e

          exists=$(rpk topic list | grep my_sample_topic | awk '{print $1}')
          if [[ "$exists" != "my_sample_topic" ]]; then
            until rpk topic create my_sample_topic 
              do sleep 2
            done
          fi
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          sleep 2
          rpk topic consume my_sample_topic -n 1 | grep "Pandas are awesome!"

          # now check if we can delete the topic (we should not)
          rpk topic delete my_sample_topic

      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      resources: 
            null
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/tests/test-kafka-produce-consume.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-redpanda-test-kafka-produce-consume
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      env:
        - name: REDPANDA_BROKERS
          value: "my-redpanda.default.svc.cluster.local:9093"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      command:
        - /usr/bin/timeout
        - "120"
        - bash
        - -c
        - |
          set -e
          until rpk topic create produce.consume.test.$POD_NAME 
            do sleep 2
          done
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          echo "Pandas are awesome!" | rpk topic produce produce.consume.test.$POD_NAME
          sleep 2
          rpk topic consume produce.consume.test.$POD_NAME -n 1 | grep "Pandas are awesome!"
          rpk topic delete produce.consume.test.$POD_NAME
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      resources: 
            null
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/tests/test-lifecycle-scripts.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-redpanda-test-lifecycle"
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      env:
        - name: SERVICE_NAME
          value: my-redpanda-0
      command:
        - /bin/timeout
        - "180"
        - bash
        - -xec
        - |
          /bin/timeout -v 45 bash -x /var/lifecycle/preStop.sh
          ls -l /tmp/preStop*
          test -f /tmp/preStopHookStarted
          test -f /tmp/preStopHookFinished

          /bin/timeout -v 45 bash -x /var/lifecycle/postStart.sh
          ls -l /tmp/postStart*
          test -f /tmp/postStartHookStarted
          test -f /tmp/postStartHookFinished
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
        - name: lifecycle-scripts
          mountPath: /var/lifecycle
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
    - name: lifecycle-scripts
      secret:
        secretName: my-redpanda-sts-lifecycle
        defaultMode: 0o775
---
# Source: redpanda/templates/tests/test-nodeport-tls.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-redpanda-test-nodeport-tls
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  serviceAccountName: test-nodeport-tls-redpanda-no-a-test
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: mintel/docker-alpine-bash-curl-jq:latest
      command:
        - bash
        - -c
        - |
          set -x
          export APISERVER=https://kubernetes.default.svc
          export SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
          export NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
          export TOKEN=$(cat ${SERVICEACCOUNT}/token)
          export CACERT=${SERVICEACCOUNT}/ca.crt
          
          ip_list=""
          
          replicas=3
          if [ "${replicas}" -lt "1" ]; then
            echo "replicas cannot be less than 1"
            exit 1
          fi
          
          range=$(expr $replicas - 1)          
          ordinal_list=$(seq 0 $range)

          set -e 
          
          for i in $ordinal_list
          do
            POD_DESC=$(curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" \
            -X GET ${APISERVER}/api/v1/namespaces/default/pods/my-redpanda-$i)
            ip=$(echo $POD_DESC | jq -r .status.hostIP )
            ip_list="$ip $ip_list"
          done
          
          echo test will be run against $ip_list
          echo testing NodePort connectivity
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/tests/test-pandaproxy-internal-tls-status.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-redpanda-test-pandaproxy-internal-tls-status
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      command: [ "/bin/bash", "-c" ]
      args:
        - |

          curl -svm3 --fail --retry "120" --retry-max-time "120" --retry-all-errors --ssl-reqd \
          --cacert /etc/tls/certs/default/ca.crt \
          https://my-redpanda.default.svc.cluster.local.:8082/brokers

          curl -svm3 --fail --retry "120" --retry-max-time "120" --retry-all-errors --ssl-reqd \
          --cacert /etc/tls/certs/default/ca.crt \
          https://my-redpanda.default.svc.cluster.local.:8082/topics
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      resources: 
            null
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/tests/test-rack-awareness.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-redpanda-test-rack-awareness
  namespace: "default"
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: 
    fsGroup: 101
    fsGroupChangePolicy: OnRootMismatch
  containers:
    - name: redpanda
      image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
      command:
      - /bin/bash
      - -c
      - |
        set -e

        rpk redpanda admin config print --host my-redpanda.default.svc.cluster.local.:9644 | grep '"enable_rack_awareness": false'

        rpk cluster config get enable_rack_awareness
      volumeMounts: 
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      securityContext: 
        allowPrivilegeEscalation: null
        runAsGroup: 101
        runAsNonRoot: null
        runAsUser: 101
  volumes: 
    - configMap:
        name: my-redpanda
      name: config
    - name: redpanda-default-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-default-cert
    - name: redpanda-external-cert
      secret:
        defaultMode: 288
        secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/post-install-upgrade-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-5"
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: my-redpanda-configuration
  namespace: default
spec:
  template:
    metadata:
      annotations: {}
      creationTimestamp: null
      generateName: my-redpanda-post-
      labels:
        app.kubernetes.io/component: redpanda-post-install
        app.kubernetes.io/instance: my-redpanda
        app.kubernetes.io/name: redpanda
    spec:
      affinity: {}
      containers:
      - args:
        - |
          set -e
          if [[ -n "$REDPANDA_LICENSE" ]] then
            rpk cluster license set "$REDPANDA_LICENSE"
          fi




          rpk cluster config export -f /tmp/cfg.yml


          for KEY in "${!RPK_@}"; do
            if ! [[ "$KEY" =~ ^(RPK_USER|RPK_PASS|RPK_SASL_MECHANISM)$ ]]; then
              config="${KEY#*RPK_}"
              rpk redpanda config set --config /tmp/cfg.yml "${config,,}" "${!KEY}"
            fi
          done


          rpk cluster config import -f /tmp/cfg.yml
        command:
        - bash
        - -c
        env: []
        image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
        name: post-install
        resources: {}
        securityContext:
          runAsGroup: 101
          runAsUser: 101
        volumeMounts:
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      imagePullSecrets: null
      nodeSelector: {}
      restartPolicy: Never
      securityContext:
        fsGroup: 101
        fsGroupChangePolicy: OnRootMismatch
      serviceAccountName: default
      tolerations: null
      volumes:
      - configMap:
          name: my-redpanda
        name: config
      - name: redpanda-default-cert
        secret:
          defaultMode: 288
          secretName: my-redpanda-default-cert
      - name: redpanda-external-cert
        secret:
          defaultMode: 288
          secretName: my-redpanda-external-cert
---
# Source: redpanda/templates/post-upgrade.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-10"
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: my-redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.9.3
  name: redpanda-post-upgrade
  namespace: default
spec:
  backoffLimit: null
  template:
    metadata:
      annotations: {}
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: redpanda-post-upgrade
        app.kubernetes.io/instance: my-redpanda
        app.kubernetes.io/name: redpanda
      name: my-redpanda
    spec:
      affinity: {}
      containers:
      - args:
        - |
          set -e

          rpk cluster config set default_topic_replications 3
          rpk cluster config set storage_min_free_bytes 1073741824
          if [ -d "/etc/secrets/users/" ]; then
              IFS=":" read -r USER_NAME PASSWORD MECHANISM < <(grep "" $(find /etc/secrets/users/* -print))
              curl -svm3 --fail --retry "120" --retry-max-time "120" --retry-all-errors --ssl-reqd \
              --cacert "/etc/tls/certs/default/ca.crt" \
              -X PUT -u ${USER_NAME}:${PASSWORD} \
              https://my-redpanda.default.svc.cluster.local.:9644/v1/debug/restart_service?service=schema-registry || true
          fi
        command:
        - /bin/bash
        - -c
        env: []
        image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
        name: post-upgrade
        securityContext:
          runAsGroup: 101
          runAsUser: 101
        volumeMounts:
        - mountPath: /etc/redpanda
          name: config
        - mountPath: /etc/tls/certs/default
          name: redpanda-default-cert
        - mountPath: /etc/tls/certs/external
          name: redpanda-external-cert
      imagePullSecrets: null
      nodeSelector: {}
      restartPolicy: Never
      securityContext:
        fsGroup: 101
        fsGroupChangePolicy: OnRootMismatch
      serviceAccountName: default
      tolerations: []
      volumes:
      - configMap:
          name: my-redpanda
        name: config
      - name: redpanda-default-cert
        secret:
          defaultMode: 288
          secretName: my-redpanda-default-cert
      - name: redpanda-external-cert
        secret:
          defaultMode: 288
          secretName: my-redpanda-external-cert
