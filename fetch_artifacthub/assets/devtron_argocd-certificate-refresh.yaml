---
# Source: argocd-certificate-refresh/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-cert-sa
  namespace: default
---
# Source: argocd-certificate-refresh/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-cert-role
rules:
- apiGroups: 
    - ""
    - batch
    - apps
  resources:
  - pods
  - secrets
  - cronjobs
  - deployments
  verbs:
  - create
  - get
  - watch
  - list
  - delete
  - update
  - patch
---
# Source: argocd-certificate-refresh/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-cert-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argocd-cert-role
subjects:
- kind: ServiceAccount
  name: argocd-cert-sa
  namespace: default
---
# Source: argocd-certificate-refresh/templates/cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: argocd-cert-cronjob
  namespace: default
spec:
  schedule: "59 23 1 */6 *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: argocd-cert-sa
          serviceAccount: argocd-cert-sa
          containers:
          - name: argocd-cert-cron
            image: quay.io/devtron/argocd-cert-refresh:v10
            env:
              - name: devtronNamespace
                value: default
              - name: argocdNamespace
                value: default
              - name: clusterType
                value: "ENTERPRISE"
            imagePullPolicy: IfNotPresent
            command: ["/bin/bash", "-c", "chmod +x argocd.sh && bash argocd.sh"]
          restartPolicy: OnFailure
