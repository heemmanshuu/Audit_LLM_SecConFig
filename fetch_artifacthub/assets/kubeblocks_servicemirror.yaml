---
# Source: servicemirror/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: servicemirror-server
  labels:
    helm.sh/chart: servicemirror-0.3.1
    app.kubernetes.io/name: servicemirror-server
    app.kubernetes.io/instance: my-servicemirror
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: servicemirror/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: servicemirror-server
type: Opaque
stringData:
  tls.crt:     ""
  tls.key:     ""
---
# Source: servicemirror/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servicemirror-server
  labels:
    helm.sh/chart: servicemirror-0.3.1
    app.kubernetes.io/name: servicemirror-server
    app.kubernetes.io/instance: my-servicemirror
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
---
# Source: servicemirror/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servicemirror-server
  labels:
    helm.sh/chart: servicemirror-0.3.1
    app.kubernetes.io/name: servicemirror-server
    app.kubernetes.io/instance: my-servicemirror
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: servicemirror-server
subjects:
- kind: ServiceAccount
  name: servicemirror-server
  namespace: default
---
# Source: servicemirror/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: servicemirror-server
  labels:
    helm.sh/chart: servicemirror-0.3.1
    app.kubernetes.io/name: servicemirror-server
    app.kubernetes.io/instance: my-servicemirror
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: servicemirror-server
  ports:
    - port: 9876
  type: LoadBalancer
---
# Source: servicemirror/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: servicemirror-server-api
  labels:
    helm.sh/chart: servicemirror-0.3.1
    app.kubernetes.io/name: servicemirror-server
    app.kubernetes.io/instance: my-servicemirror
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: servicemirror-server
  ports:
    - port: 80
      targetPort: 8888
  type: ClusterIP
---
# Source: servicemirror/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: servicemirror-server
  labels:
    helm.sh/chart: servicemirror-0.3.1
    app.kubernetes.io/name: servicemirror-server
    app.kubernetes.io/instance: my-servicemirror
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: servicemirror-server
      app.kubernetes.io/instance: my-servicemirror
  template:
    metadata:
      labels:
        app.kubernetes.io/name: servicemirror-server
        app.kubernetes.io/instance: my-servicemirror
    spec:
      serviceAccountName: servicemirror-server
      containers:
        - name: servicemirror
          image: "apecloud/servicemirror:0.3.1"
          imagePullPolicy: IfNotPresent
          args: ["server"]
          env:
            - name: CERT_FILE
              value: /app/tls.crt
            - name: KEY_FILE
              value: /app/tls.key
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - mountPath: /app/
              name: tls
          # TODO: resource limits
      volumes:
        - name: tls
          secret:
            secretName: servicemirror-server
