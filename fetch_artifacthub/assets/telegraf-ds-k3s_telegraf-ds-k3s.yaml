---
# Source: telegraf-ds/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-telegraf-ds-k3s
  labels:
    helm.sh/chart: telegraf-ds-1.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: my-telegraf-ds-k3s
---
# Source: telegraf-ds/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-telegraf-ds-k3s
  labels:
    helm.sh/chart: telegraf-ds-1.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: my-telegraf-ds-k3s
data:
  telegraf.conf: |+
    
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      hostname = "$HOSTNAME"
      interval = "10s"
      logfile = ""
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = false
      precision = ""
      quiet = false
      round_interval = true
    
    
    [[outputs.influxdb]]
      database = "telegraf"
      insecure_skip_verify = false
      password = ""
      retention_policy = ""
      timeout = "5s"
      urls = [
        "http://influxdb.monitoring.svc:8086"
      ]
      user_agent = "telegraf"
      username = ""
    
    

    [[inputs.diskio]]
    [[inputs.kernel]]
    [[inputs.mem]]
    [[inputs.net]]
    [[inputs.processes]]
    [[inputs.swap]]
    [[inputs.system]]

    [[inputs.cpu]]
    percpu = true
    totalcpu = true
    collect_cpu_time = false
    report_active = false

    [[inputs.disk]]
    ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

    [[inputs.kubernetes]]
    url = "https://$HOSTIP:10250"
    bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
    insecure_skip_verify = true
---
# Source: telegraf-ds/templates/role.yaml
# kubernetes_plugin: Give access to stats endpoints
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx:stats:viewer
  labels:
    helm.sh/chart: telegraf-ds-1.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: my-telegraf-ds-k3s
    rbac.authorization.k8s.io/aggregate-view-telegraf-stats: "true"
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy", "nodes/stats"]
    verbs: ["get", "list", "watch"]
---
# Source: telegraf-ds/templates/role.yaml
# Define global role with the default system:aggregate-to-view cluster role and the two rules we just created
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx:telegraf
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-view-telegraf-stats: "true"
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-view: "true"
rules: [] # Rules are automatically filled in by the controller manager.
---
# Source: telegraf-ds/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: influx:telegraf:viewer
  labels:
    helm.sh/chart: telegraf-ds-1.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: my-telegraf-ds-k3s
subjects:
  - kind: ServiceAccount
    name: my-telegraf-ds-k3s
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influx:telegraf
---
# Source: telegraf-ds/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-telegraf-ds-k3s
  labels:
    helm.sh/chart: telegraf-ds-1.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: telegraf-ds
    app.kubernetes.io/instance: my-telegraf-ds-k3s
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: telegraf-ds
      app.kubernetes.io/instance: my-telegraf-ds-k3s
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegraf-ds
        app.kubernetes.io/instance: my-telegraf-ds-k3s
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: 2dca75aa5124fd9974447bf965736b2904883b2537351e393079e8e2bfc3e56a
    spec:
      serviceAccountName: my-telegraf-ds-k3s
      containers:
      - name: telegraf-ds
        image: "telegraf:1.19.0-alpine"
        imagePullPolicy: "IfNotPresent"
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 0.1
            memory: 256Mi
        env:
        - name: HOSTIP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: HOSTIP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: HOST_PROC
          value: /rootfs/proc
        - name: HOST_SYS
          value: /rootfs/sys
        volumeMounts:
        - name: varrunutmpro
          mountPath: /var/run/utmp
          readOnly: true
        - name: sysro
          mountPath: /rootfs/sys
          readOnly: true
        - name: procro
          mountPath: /rootfs/proc
          readOnly: true
        - name: config
          mountPath: /etc/telegraf
      volumes:
      - name: sysro
        hostPath:
          path: /sys
      - name: procro
        hostPath:
          path: /proc
      - name: varrunutmpro
        hostPath:
          path: /var/run/utmp
      - name: config
        configMap:
          name:  my-telegraf-ds-k3s
      hostNetwork:
