---
# Source: hive/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-hive
  labels:
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: hive/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-hive-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "UUV1SU9vdEEwcg=="
  password: "aGl2ZQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: hive/templates/hive-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-hive-hive-hive-config
  labels:
    app.kubernetes.io/component: hive
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
data:
  startup.sh: |-
    #!/bin/bash
    
    set -x
    
    # Note. This script set hive paths in hdfs with user hive and ensures hiveServer is runAsUser hive
    HADOOP_USER_NAME=hdfs hdfs dfs -mkdir -p /tmp/hive
    HADOOP_USER_NAME=hdfs hdfs dfs -chmod 777 /tmp/hive
    HADOOP_USER_NAME=hdfs hdfs dfs -chmod g+w /tmp/hive
    
    HADOOP_USER_NAME=hdfs hdfs dfs -mkdir -p /user/hive/warehouse
    HADOOP_USER_NAME=hdfs hdfs dfs -chmod g+w /user/hive/warehouse
    HADOOP_USER_NAME=hdfs hdfs dfs -chown hive:hive /user/hive/warehouse
    
    su hive -c "$HIVE_HOME/bin/hiveserver2 --hiveconf hive.root.logger=INFO,console"
  hive-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    
    <configuration>
        <property>
            <name>hive.metastore.uris</name>
            <value>thrift://my-hive-metastore:9083</value>
        </property>
    </configuration>
---
# Source: hive/templates/hive-hadoop-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-hive-hive-hadoop-config
  labels:
    app.kubernetes.io/component: hive
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
data:
  core-site.xml: |-
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
    </configuration>
  hdfs-site.xml: |-
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
    
    </configuration>
  mapred-site.xml: |-
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
    </configuration>
  yarn-site.xml: |-
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
    </configuration>
---
# Source: hive/templates/metastore-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-hive-metastore
  labels:
    app.kubernetes.io/component: metastore
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
data:
  hive-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
        <property>
            <name>javax.jdo.option.ConnectionURL</name>
            <value>jdbc:postgresql://my-hive-postgresql-hl:5432/metastore</value>
        </property>
        <property>
            <name>javax.jdo.option.ConnectionDriverName</name>
            <value>org.postgresql.Driver</value>
        </property>
        <property>
            <name>javax.jdo.option.ConnectionUserName</name>
            <value>hive</value>
        </property>
        <property>
            <name> javax.jdo.option.ConnectionPassword</name>
            <value>hive</value>
        </property>
        <property>
            <name>datanucleus.autoCreateSchema</name>
            <value>false</value>
        </property>
        <property>
            <name>hive.metastore.event.db.notification.api.auth</name>
            <value>false</value>
        </property>
        <property>
            <name>hive.metastore.uris</name>
            <value>thrift://my-hive-metastore:9083</value>
        </property>
    </configuration>
---
# Source: hive/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-hive-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/component: primary
---
# Source: hive/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-hive-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/component: primary
---
# Source: hive/templates/hive-service.yaml
# A headless service to create DNS records
apiVersion: v1
kind: Service
metadata:
  name: my-hive-hiveserver
  labels:
    app.kubernetes.io/component: hive
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
  - name: thrift
    port: 10000
    protocol: TCP
  - name: ui
    port: 10002
    protocol: TCP
  selector:
    app.kubernetes.io/component: hive
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
---
# Source: hive/templates/metastore-service.yaml
# A headless service to create DNS records
apiVersion: v1
kind: Service
metadata:
  name: my-hive-metastore
  labels:
    app.kubernetes.io/component: metastore
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
  - name: thrift
    port: 9083
    protocol: TCP
  selector:
    app.kubernetes.io/component: metastore
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
---
# Source: hive/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-hive-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-hive-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-hive
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-hive-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.26
        app.kubernetes.io/instance: my-hive
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-hive
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "hive"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-hive-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-hive-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "metastore"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "hive" -d "dbname=metastore" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "hive" -d "dbname=metastore" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hive/templates/hive-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-hive-hiveserver
  labels:
    app.kubernetes.io/component: hive
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: hive
      app.kubernetes.io/name: hive
      app.kubernetes.io/instance: my-hive
  serviceName: my-hive-hiveserver
  template:
    metadata:
      labels:
        app.kubernetes.io/component: hive
        app.kubernetes.io/name: hive
        app.kubernetes.io/instance: my-hive
    spec:
      serviceAccountName: my-hive
      securityContext:
        {}
      containers:
        - name: server
          securityContext:
            {}
          image: "5200710/hive:3.1.3"
          imagePullPolicy: 
          command:
            - /bin/bash
            - /opt/hive/bin/startup.sh
          readinessProbe:
            httpGet:
              path: /
              port: 10002
            initialDelaySeconds: 5
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /
              port: 10002
            initialDelaySeconds: 10
            timeoutSeconds: 2
          volumeMounts:
            - name: hive-config
              mountPath: /opt/hive/conf/hive-site.xml
              subPath: hive-site.xml
            - name: hive-config
              mountPath: /opt/hive/bin/startup.sh
              subPath: startup.sh
            - name: hadoop-config
              mountPath: /opt/hadoop/etc/hadoop
          resources:
            null
      volumes:
      - name: hive-config
        configMap:
          name: my-hive-hive-hive-config
      - name: hadoop-config
        configMap:
          name: my-hive-hive-hadoop-config
---
# Source: hive/templates/metastore-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-hive-metastore
  labels:
    app.kubernetes.io/component: metastore
    helm.sh/chart: hive-0.2.0
    app.kubernetes.io/name: hive
    app.kubernetes.io/instance: my-hive
    app.kubernetes.io/version: "3.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: metastore
      app.kubernetes.io/name: hive
      app.kubernetes.io/instance: my-hive
  serviceName: my-hive-metastore
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: metastore
        app.kubernetes.io/name: hive
        app.kubernetes.io/instance: my-hive
    spec:
      containers:
      - name: metastore
        image: "5200710/hive:3.1.3"
        imagePullPolicy: 
        command:
          - "/usr/local/bin/bootstrap.sh"
          - "metastore"
        securityContext:
          runAsUser: 971
        resources:
                  {}
        volumeMounts:
          - name: hive-config
            mountPath: /opt/hive/conf/hive-site.xml
            subPath: hive-site.xml
      volumes:
        - name: hive-config
          configMap:
            name: my-hive-metastore
