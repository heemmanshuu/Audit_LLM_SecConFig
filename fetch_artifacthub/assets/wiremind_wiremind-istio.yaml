---
# Source: wiremind-istio/templates/prometheus-istio/prometheus-istio-thanos-sidecar-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-istio-thanos
  namespace: default
  labels:
    app: prometheus-istio-thanos
spec:
  type: ClusterIP
  ports:
    - name: grpc
      protocol: TCP
      port: 10901
      targetPort: grpc
    - name: http
      protocol: TCP
      port: 10902
      targetPort: http
  selector:
    app.kubernetes.io/name: prometheus
    operator.prometheus.io/name: prometheus-istio
---
# Source: wiremind-istio/templates/istio/istio-envoyfilter-listener-timeout-tcp.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: listener-timeout-tcp
  labels:
    helm.sh/chart: wiremind-istio-2.5.0
    app.kubernetes.io/name: wiremind-istio
    app.kubernetes.io/instance: my-wiremind-istio
    app.kubernetes.io/managed-by: Helm
spec:
  configPatches:
    - applyTo: NETWORK_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.tcp_proxy
      patch:
        operation: MERGE
        value:
          name: envoy.filters.network.tcp_proxy
          typed_config:
            '@type': >-
              type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
            idle_timeout: 24h
    - applyTo: NETWORK_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.tcp_proxy
      patch:
        operation: MERGE
        value:
          name: envoy.filters.network.tcp_proxy
          typed_config:
            '@type': >-
              type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
            idle_timeout: 24h
---
# Source: wiremind-istio/templates/istio/gateway-expose-services.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: cross-network-gateway
spec:
  selector:
    istio: eastwestgateway
  servers:
    - port:
        number: 15443
        name: tls
        protocol: TLS
      tls:
        mode: AUTO_PASSTHROUGH
      hosts:
        - "*.local"
---
# Source: wiremind-istio/templates/istio/istio-operator.yaml
# https://github.com/istio/istio/tree/master/operator
# https://github.com/istio/istio/blob/master/operator/ARCHITECTURE.md#manifest-creation
# https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: my-wiremind-istio
  labels:
    helm.sh/chart: wiremind-istio-2.5.0
    app.kubernetes.io/name: wiremind-istio
    app.kubernetes.io/instance: my-wiremind-istio
    app.kubernetes.io/managed-by: Helm
spec:
  profile: default  # https://github.com/istio/istio/blob/master/manifests/profiles
  components:  # https://istio.io/latest/docs/setup/install/istioctl/#identify-an-istio-component
    pilot:
      k8s:

        resources:
          {}
        podAnnotations:
          cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'

        hpaSpec:
          maxReplicas: 5
          minReplicas: 1

    ingressGateways:
      - name: istio-ingressgateway
        enabled: false
      - name: istio-eastwestgateway
        enabled: true
        label:
          istio: eastwestgateway
          app: istio-eastwestgateway
          topology.istio.io/network: 
        k8s:

          podAnnotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
          env:
            # sni-dnat adds the clusters required for AUTO_PASSTHROUGH mode
            - name: ISTIO_META_ROUTER_MODE
              value: "sni-dnat"
            # traffic through this gateway should be routed inside the network
            - name: ISTIO_META_REQUESTED_NETWORK_VIEW
              value: 

          hpaSpec:
            maxReplicas: 3
            minReplicas: 2

          service:
            ports:
              - name: status-port
                port: 15021
                targetPort: 15021

              - name: tls
                port: 15443
                targetPort: 15443

              - name: tls-istiod
                port: 15012
                targetPort: 15012

              - name: tls-webhook
                port: 15017
                targetPort: 15017

          # nodeSelector:
          #   node-role.kubernetes.io/istio-eastwestgateway: "true"
          # overlays:  # https://istio.io/latest/docs/setup/install/istioctl/#configure-gateways
          # - kind: Service
          #   name: istio-eastwestgateway
          #   - kind: Deployment
          #     name: istio-eastwestgateway
          #     patches:
          #       # We change it to a daemonset
          #       - path: kind
          #         value: DaemonSet
          #       - path: spec.strategy
          #         value:
          #       - path: spec.template.spec.containers.[name:istio-proxy].ports.[containerPort:15021].hostPort
          #         value: 15021
          #       - path: spec.template.spec.containers.[name:istio-proxy].ports.[containerPort:15443].hostPort
          #         value: 15443
          #       - path: spec.template.spec.containers.[name:istio-proxy].ports.[containerPort:15012].hostPort
          #         value: 15012
          #       - path: spec.template.spec.containers.[name:istio-proxy].ports.[containerPort:15017].hostPort
          #         value: 15017
    # egressGateways:
    #   - name: istio-egressgateway
    #     enabled: true
    cni:  # https://istio.io/latest/docs/setup/additional-setup/cni
      enabled: false

  ## Ref: https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/
  meshConfig:
    
    enablePrometheusMerge: false
    # Restrict access to services in registry (Requires namespaced Sidecars)
    # https://istio.io/latest/docs/tasks/traffic-management/egress/egress-control/#envoy-passthrough-to-external-services
    # https://www.funkypenguin.co.nz/blog/istio-namespace-isolation-tricks/
    # outboundTrafficPolicy:
    #   mode: REGISTRY_ONLY
    ## Ref: https://istio.io/latest/docs/reference/config/networking/destination-rule/#ConnectionPoolSettings-TCPSettings-TcpKeepalive
    tcpKeepalive:
      ## This is the default value in our machines, but we need to state something in order for istio to enable SO_KEEPALIVE
      ## Ref: https://github.com/istio/istio/blob/4ecbb5e8d193ce59687a79f27cf84c98124f8e52/pilot/pkg/networking/core/v1alpha3/cluster.go#L538
      time: 60s
    enableTracing: false
    defaultConfig:
      proxyMetadata:  # provides native support for DNS resolution with ServiceEntries (https://istio.io/latest/news/releases/1.8.x/announcing-1.8/upgrade-notes/#istio-coredns-plugin-deprecation)
      # (OLD) Disabled because it seems to cause dns issues ("temporary failure") when containers start quickly and try to resolve dns names.
      # Re enabled because it seems like using those setting we do not need to create services in namespaces in order to reach other istio meshed clusters, to be monitored (2022-05 istio 1.12).
        ISTIO_META_DNS_CAPTURE: "true"
      tracing:
        sampling: 100  # XXX too much for production
      drainDuration: 180s
      # We basically never want a connection to be dropped BEFORE the main container stops
      terminationDrainDuration:  300s
      holdApplicationUntilProxyStarts: true
      # https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#ProxyConfig-InboundInterceptionMode
      
      interceptionMode: TPROXY
      
    

  values:  # Helm pass-through API, https://github.com/istio/istio/blob/1.9.0/manifests/charts
    # https://github.com/istio/istio/blob/master/manifests/charts/base/values.yaml
    base:
      enableIstioConfigCRDs: false
    global:
      logging:
        level: "default:warn,ads:warn,kube:warn"
      meshID: mesh-kubernetes-default
      multiCluster:
        enabled: true
        clusterName: 
      network: 
      proxy:
        resources:
          {}
      tracer:
        {}

    # cni:  # https://istio.io/latest/docs/setup/additional-setup/cni
    #   excludeNamespaces:
    #     - istio-operator
    #     - istio-system
    #     - kube-system
    #   logLevel: info
    #   cniBinDir: /opt/cni/bin
    #   cniConfDir: /etc/cni/net.d

    sidecarInjectorWebhook:  # https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/values.yaml
      enableNamespacesByDefault: false
      neverInjectSelector:
        - matchExpressions:
          - key: sidecar.istio.io/inject
            operator: DoesNotExist
        - matchExpressions:
          - key: job-name
            operator: Exists
---
# Source: wiremind-istio/templates/main-prometheus-federation-service-monitor.yaml
# See https://istio.io/latest/docs/ops/best-practices/observability/#using-prometheus-for-production-scale-monitoring
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: my-wiremind-istio-federation
  namespace: default
  labels:
    helm.sh/chart: wiremind-istio-2.5.0
    app.kubernetes.io/name: wiremind-istio
    app.kubernetes.io/instance: my-wiremind-istio
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      prometheus: prometheus-istio
  podMetricsEndpoints:
  - interval: 30s
    scrapeTimeout: 30s
    params:
      'match[]':
      - '{__name__=~"workload:(.*)"}'
      - '{__name__=~"pilot(.*)"}'
    path: /federate
    port: "9090"
    honorLabels: true
    metricRelabelings:
    - sourceLabels: ["__name__"]
      regex: 'workload:(.*)'
      targetLabel: "__name__"
      action: replace
---
# Source: wiremind-istio/templates/prometheus-istio/envoy-sidecar-pod-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: my-wiremind-istio-envoy-stats-monitor
  labels:
    monitoring: istio-proxies
    prometheus: prometheus-istio
    helm.sh/chart: wiremind-istio-2.5.0
    app.kubernetes.io/name: wiremind-istio
    app.kubernetes.io/instance: my-wiremind-istio
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchExpressions:
    - key: security.istio.io/tlsMode
      operator: Exists
  namespaceSelector:
    any: true
  jobLabel: envoy-stats
  podMetricsEndpoints:
    - path: /stats/prometheus
      port: http-envoy-prom
      interval: 15s
      scrapeTimeout: 15s
      relabelings:
        - action: keep
          sourceLabels: [__meta_kubernetes_pod_container_name]
          regex: "istio-proxy"
        - action: keep
          sourceLabels: [__meta_kubernetes_pod_annotationpresent_prometheus_io_scrape]
        - action: replace
          regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
          replacement: '[$2]:$1'
          sourceLabels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
          targetLabel: __address__
        - action: replace
          regex: (\d+);((([0-9]+?)(\.|$)){4})
          replacement: $2:$1
          sourceLabels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
          targetLabel: __address__
        - action: labeldrop
          regex: "__meta_kubernetes_pod_label_(.+)"
        - sourceLabels: [__meta_kubernetes_namespace]
          action: replace
          targetLabel: namespace
        - sourceLabels: [__meta_kubernetes_pod_name]
          action: replace
          targetLabel: pod_name
      # Drop all metrics that are talking about ... metrics scraping
      metricRelabelings:
        - action: drop
          sourceLabels: [source_canonical_service]
          regex: "prometheus"
---
# Source: wiremind-istio/templates/prometheus-istio/istio-component-pod-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: my-wiremind-istio-component-monitor
  labels:
    monitoring: istio-components
    prometheus: prometheus-istio
    helm.sh/chart: wiremind-istio-2.5.0
    app.kubernetes.io/name: wiremind-istio
    app.kubernetes.io/instance: my-wiremind-istio
    app.kubernetes.io/managed-by: Helm
spec:
  jobLabel: istio
  targetLabels: [app]
  selector:
    matchExpressions:
      - key: istio
        operator: In
        values:
          - pilot
  namespaceSelector:
    any: true
  endpoints:
    - port: http-monitoring
      interval: 15s
