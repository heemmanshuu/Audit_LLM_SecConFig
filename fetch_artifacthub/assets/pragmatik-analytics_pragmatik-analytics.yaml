---
# Source: pragmatik-analytics/templates/enrich-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: enrich-serviceaccount-creds
  namespace: default
type: Opaque
data:
  sa_json: |
---
# Source: pragmatik-analytics/templates/iglu-secret.yaml
apiVersion: v1
data:
  password: aWdsdQ==
  username: aWdsdQ==
kind: Secret
metadata:
  name: iglu-postgres-app
  namespace: default
type: Opaque
---
# Source: pragmatik-analytics/templates/iglu-secret.yaml
apiVersion: v1
data:
  username: cG9zdGdyZXM=
  password: UkVQTEFDRU1F
kind: Secret
metadata:
  name: iglu-postgres-master
  namespace: default
type: Opaque
---
# Source: pragmatik-analytics/templates/iglu-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: iglu-backup-creds
data:
  ACCESS_KEY_ID: 
  ACCESS_SECRET_KEY:
---
# Source: pragmatik-analytics/templates/collector-cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: collector-configmap
  namespace: default
data:
  config.hocon: |
    collector {
      interface = "0.0.0.0"
      port = 8080
      ssl {
        enable = false
        redirect = false
        port = 8443
      }
      paths {
        "/customdtsp/tp2" = "/com.snowplowanalytics.snowplow/tp2"
      }
      p3p {
        policyRef = "/w3c/p3p.xml"
        CP = "NOI DSP COR NID PSA OUR IND COM NAV STA"
      }
      crossDomain {
        enabled = false
        domains = [ "*" ]
        secure = true
      }
      cookie {
        enabled = true
        expiration = "365 days"
        name = sp
        domains = []
        fallbackDomain = ""
        secure = true
        httpOnly = false
        sameSite = "None"
      }
      doNotTrackCookie {
        enabled = false
        name = ""
        value = ""
      }
      cookieBounce {
        enabled = false
        name = "n3pc"
        fallbackNetworkUserId = "00000000-0000-4000-A000-000000000000"
        forwardedProtocolHeader = "X-Forwarded-Proto"
      }
      enableDefaultRedirect = false
      redirectMacro {
        enabled = false
        placeholder = "[TOKEN]"
      }
      rootResponse {
        enabled = false
        statusCode = 302
        headers = {}
        body = "302, redirecting"
      }
      cors {
        accessControlMaxAge = "5 seconds"
      }
      prometheusMetrics {
        enabled = true
      }
      streams {
        good = sp-collector-payloads
        bad = sp-collector-bad-payloads
        sink {
          host  = snowplow-kafka-bootstrap.snowplow.svc.cluster.local
          port = 9092
          brokers = "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
          backoffPolicy {
            minBackoff = 1000
            maxBackoff = 1000
            totalBackoff = 10000
            multiplier = 1
          }
        }
        buffer {
          byteLimit = 1000000
          recordLimit = 500
          timeLimit = 500
        }
      }
      telemetry {
        disable = false
        url = "telemetry-g.snowplowanalytics.com"
        userProvidedId = ""
        moduleName = "collector-pubsub-ce"
        moduleVersion = "0.2.2"
        autoGeneratedId = "329042380932sdjfiosdfo"
      }
    }
    akka {

      loglevel = WARNING
      loggers = ["akka.event.slf4j.Slf4jLogger"]
      http.server {
        remote-address-header = on
        raw-request-uri-header = on
        parsing {
          max-uri-length = 32768
          uri-parsing-mode = relaxed
        }
        max-connections = 2048
      }
    }
---
# Source: pragmatik-analytics/templates/enrich-cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: enrich-configmap
  namespace: default
data:
  enrichment_javascript.json: |
    {
      "key": "value"
    }
    
  enrichment_api_request.json: |
    {
      "key": "value"
    }
    
  enrichment_spiders_and_bots.json: |
    {
      "key": "value"
    }
    
  enrichment_campaigns.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/campaign_attribution/jsonschema/1-0-1",
      "data": {
        "name": "campaign_attribution",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "mapping": "static",
          "fields": {
            "mktMedium": ["utm_medium", "medium"],
            "mktSource": ["utm_source", "source"],
            "mktTerm": ["utm_term", "legacy_term"],
            "mktContent": ["utm_content"],
            "mktCampaign": ["utm_campaign", "cid", "legacy_campaign"]
            "mktClickId": {
              "gclid": "Google",
              "fbclid": "Facebook",
              "dclid": "DoubleClick",
              "msclkid": "Bing",
              "ttclid": "TikTok",
              "vmcid": "Yahoo",
              "twclid": "Twitter",
              "li_fat_id": "LinkedIn"
            }
          }
        }
      }
    }

  enrichment_pii.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow.enrichments/pii_enrichment_config/jsonschema/2-0-0",
      "data": {
        "vendor": "com.snowplowanalytics.snowplow.enrichments",
        "name": "pii_enrichment_config",
        "emitEvent": true,
        "enabled": true,
        "parameters": {
          "pii": [
            {
              "pojo": {
                "field": "user_ipaddress"
              }
            }
          ],
          "strategy": {
            "pseudonymize": {
              "hashFunction": "MD5",
              "salt": "empty"
            }
          }
        }
      }
    }

  enrichment_event_fingerprint.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/event_fingerprint_config/jsonschema/1-0-1",
      "data": {
        "name": "event_fingerprint_config",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "excludeParameters": ["cv", "eid", "nuid", "stm"],
          "hashAlgorithm": "MD5"
        }
      }
    }

  enrichment_referrer_parser.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/referer_parser/jsonschema/2-0-0",
      "data": {
        "name": "referer_parser",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "database": "referers-latest.json",
          "uri": "https://s3-eu-west-1.amazonaws.com/snowplow-hosted-assets/third-party/referer-parser/",
          "internalDomains": []
        }
      }
    }

  enrichment_ua_parser.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/ua_parser_config/jsonschema/1-0-1",
      "data": {
        "name": "ua_parser_config",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "uri": "https://s3-eu-west-1.amazonaws.com/snowplow-hosted-assets/third-party/ua-parser",
          "database": "regexes-latest.yaml"
        }
      }
    }

  enrichment_yauaa.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow.enrichments/yauaa_enrichment_config/jsonschema/1-0-0",
      "data": {
        "enabled": true,
        "vendor": "com.snowplowanalytics.snowplow.enrichments",
        "name": "yauaa_enrichment_config"
      }
    }

  config.hocon: |
    {
      "input": {
        "topicName": sp-collector-payloads
          "bootstrapServers": "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
      }

      "output": {
        "good": {
          "topicName": sp-enriched
            "bootstrapServers": "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
        }

        "bad": {
          "topicName": sp-bad
            "bootstrapServers": "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
        }
      }
    }

  iglu-config.json: |
    {
      "schema": "iglu:com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-3",
      "data": {
        "cacheSize": 500,
        "cacheTtl": 600,
        "repositories": [
          {
            "connection": {
              "http": {
                "uri": "http://iglucentral.com"
              }
            },
            "name": "Iglu Central",
            "priority": 10,
            "vendorPrefixes": []
          },
          {
            "connection": {
              "http": {
                "uri": "http://mirror01.iglucentral.com"
              }
            },
            "name": "Iglu Central - Mirror 01",
            "priority": 20,
            "vendorPrefixes": []
          },
          {
            "connection": {
              "http": {
                "apikey": "REPLACE-ME",
                "uri": "http://iglu-server.default:8080/api"
              }
            },
            "name": "Iglu Server",
            "priority": 0,
            "vendorPrefixes": []
          }
        ]
      }
    }
---
# Source: pragmatik-analytics/templates/iglu-cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: iglu
  namespace: default
data:
  iglu-server.hocon: |
    {
      "repoServer": {
        "interface": "0.0.0.0",
        "port": 8080,
        "threadPool": "cached",
        "maxConnections": 2048
      },
      "database": {
        "type": "postgres",
        "host": "snowplow-postgres.snowplow",
        "port": 5432,
        "dbname": "iglu",
        "username": "iglu",
        "password": "iglu",
        "driver": "org.postgresql.Driver",
        "pool": {
          "type": "hikari",
          "maximumPoolSize": 5
        },
        "connectionPool": {
          "type": "fixed",
          "size": 4
        },
        "transactionPool": "cached"
      },
      "debug": false,
      "patchesAllowed": true,
      "superApiKey": "REPLACE-ME"
    }
---
# Source: pragmatik-analytics/templates/collector-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: default
  annotations:
    cloud.google.com/backend-config: '{"default": "collector-backendconfig"}' # this is only required, if you run on GKE. See note in the step above.
spec:
  selector:
    app: collector
  type: NodePort
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: pragmatik-analytics/templates/iglu-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: iglu-server
  namespace: default
spec:
  selector:
    app: iglu
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: pragmatik-analytics/templates/collector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collector-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: collector
  template:
    metadata:
      labels:
        app: collector
        checksum-config: 54a6129c48127b32c058d82397f16cc365f0c890bebffb1bd10ca9595bb5ca2
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - collector
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: collector-server
          image: pragmatikai/scala-stream-collector-kafka:2.10.3
          command:
            - "/home/snowplow/bin/snowplow-stream-collector"
            - "--config"
            - "/snowplow/config/config.hocon"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: JAVA_OPTS
              value: -Dorg.slf4j.simpleLogger.defaultLogLevel=info
          volumeMounts:
            - name: collector-config-volume
              mountPath: /snowplow/config
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
      volumes:
        - name: collector-config-volume
          configMap:
            name: collector-configmap
            items:
              - key: config.hocon
                path: config.hocon
---
# Source: pragmatik-analytics/templates/enrich-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enrich-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enrich
  template:
    metadata:
      labels:
        app: enrich
        checksum-config: 4eef3543db11b2eaf441bd942abd7fbfcb3479d0ff0c5721c2f30e1bbb5bc48
    spec:
      containers:
        - name: enrich-server
          image: pragmatikai/pragmatik-enrich-kafka:3.9.11
          command:
            - "/home/snowplow/bin/pragmatik-enrich-kafka"
            - "--config"
            - "/snowplow/config/config.hocon"
            - "--iglu-config"
            - "/snowplow/config/iglu-config.json"
            - "--enrichments"
            - "/snowplow/config/enrichments"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: -Dorg.slf4j.simpleLogger.defaultLogLevel=info -Dorg.slf4j.simpleLogger.log.InvalidEnriched=debug
          volumeMounts:
            - name: enrich-config-volume
              mountPath: /snowplow/config
          resources:
            requests:
              memory: "256Mi"
              cpu: "350m"
            limits:
              memory: "1.5Gi"
      volumes:
        - name: enrich-config-volume
          configMap:
            name: enrich-configmap
            items:
              - key: iglu-config.json
                path: iglu-config.json
              - key: config.hocon
                path: config.hocon
              - key: enrichment_campaigns.json
                path: enrichments/enrichment_campaigns.json
              - key: enrichment_pii.json
                path: enrichments/enrichment_pii.json
              - key: enrichment_event_fingerprint.json
                path: enrichments/enrichment_event_fingerprint.json
              - key: enrichment_referrer_parser.json
                path: enrichments/enrichment_referrer_parser.json
              - key: enrichment_ua_parser.json
                path: enrichments/enrichment_ua_parser.json
              - key: enrichment_javascript.json
                path: enrichments/enrichment_javascript.json
              - key: enrichment_api_request.json
                path: enrichments/enrichment_api_request.json
              - key: enrichment_spiders_and_bots.json
                path: enrichments/enrichment_spiders_and_bots.json
---
# Source: pragmatik-analytics/templates/iglu-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: iglu-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: iglu
  template:
    metadata:
      labels:
        app: iglu
        checksum-config: c7449149e91231fc9dda39dee09615d1569abdbd5e0c6ee9bb7ccda9110e3fe
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
      containers:
        - name: iglu-server
          image: pragmatikai/iglu-server:0.12.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          command: ["/home/snowplow/bin/iglu-server", "--config", "/snowplow/config/iglu-server.hocon"]
          env:
            - name: JAVA_OPTS
              value: -Dorg.slf4j.simpleLogger.defaultLogLevel=info
          volumeMounts:
            - name: iglu-config-volume
              mountPath: /snowplow/config
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1.5Gi"
      volumes:
        - name: iglu-config-volume
          configMap:
            name: iglu
            items:
              - key: iglu-server.hocon
                path: iglu-server.hocon
---
# Source: pragmatik-analytics/templates/collector-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: snowplow-collector
  namespace: default
  annotations:
   
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  tls:
    - hosts:
        - pragmatik.co
      
  ingressClassName: 
  rules:
    - host: pragmatik.co
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: collector
                port:
                  number: 8080
