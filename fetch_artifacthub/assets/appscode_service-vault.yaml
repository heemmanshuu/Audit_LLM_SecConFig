---
# Source: service-vault/templates/vault/issuer.yaml
# https://cert-manager.io/docs/configuration/vault/#secretless-authentication-with-a-service-account

# kubectl create serviceaccount -n cert-manager vault-issuer
# --cluster-resource-namespace



apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-issuer
  namespace: cert-manager
---
# Source: service-vault/templates/vault/issuer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-issuer
  namespace: cert-manager
rules:
  - apiGroups: ['']
    resources: ['serviceaccounts/token']
    resourceNames: ['vault-issuer']
    verbs: ['create']
---
# Source: service-vault/templates/vault/issuer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-issuer
  namespace: cert-manager
subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-issuer
---
# Source: service-vault/templates/vault/issuer.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: vault-issuer
spec:
  vault:
    path: pki/sign/gw-c1-chart-example-local
    server: http://vault.default.svc:8200
    auth:
      kubernetes:
        role: "vault-issuer"
        mountPath: /v1/auth/kubernetes
        serviceAccountRef:
          name: vault-issuer
---
# Source: service-vault/templates/vault/gw.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: vault
  namespace: default
spec:
  gatewayClassName: ace
  listeners:
    - name: vault
      protocol: HTTPS
      port: 8200
      tls:
        certificateRefs:
        - group: ""
          kind: Secret
          name: my-service-vault-cert
          namespace: default
        mode: Terminate
---
# Source: service-vault/templates/vault/gw.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: vault
  namespace: default
spec:
  parentRefs:
    - name: vault
  hostnames:
    - "gw-c1.chart-example.local"
  rules:
    - backendRefs:
        - group: ""
          kind: Service
          name: vault
          port: 8200
          weight: 1
      matches:
        - path:
            type: PathPrefix
            value: /
---
# Source: service-vault/templates/vault/issuer.yaml
# https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-cert-manager#deploy-cert-manager

apiVersion: policy.kubevault.com/v1alpha1
kind: VaultPolicy
metadata:
  name: vault-issuer
  namespace: default
spec:
  vaultRef:
    name: vault
  vaultPolicyName: vault-issuer
  policyDocument: |
    path "pki*"                        { capabilities = ["read", "list"] }
    path "pki/sign/gw-c1-chart-example-local"    { capabilities = ["create", "update"] }
    path "pki/issue/gw-c1-chart-example-local"   { capabilities = ["create"] }
---
# Source: service-vault/templates/vault/issuer.yaml
# vault write auth/kubernetes/role/vault-issuer \
#     bound_service_account_names=vault-issuer \
#     bound_service_account_namespaces=cert-manager \
#     audience="vault://vault-issuer" \
#     policies=vault-issuer \
#     ttl=1m

apiVersion: policy.kubevault.com/v1alpha1
kind: VaultPolicyBinding
metadata:
  name: vault-issuer
  namespace: default
spec:
  vaultRef:
    name: vault
  vaultRoleName: vault-issuer
  policies:
  - name: vault-issuer
  subjectRef:
    kubernetes:
      serviceAccountNames:
        - "vault-issuer"
      serviceAccountNamespaces:
        - "cert-manager"
      ttl: "1m"
      # maxTTL: "2000"
      # period: "1000"
---
# Source: service-vault/templates/vault/vault-server.yaml
# backups
# tls encrypt
# monitoring

apiVersion: kubevault.com/v1alpha2
kind: VaultServer
metadata:
  name: vault
  namespace: default
spec:
  # tls:
  #   issuerRef:
  #     apiGroup: "cert-manager.io"
  #     kind: Issuer
  #     name: vault-issuer
  allowedSecretEngines:
    namespaces:
      from: All
  version: "1.13.3"
  replicas: 3
  backend:
    raft:
      storage:
        # storageClassName: ""
        resources:
          requests:
            storage: 1Gi
  unsealer:
    secretShares: 5
    secretThreshold: 3
    mode:
      kubernetesSecret:
        secretName: vault-keys
  monitor:
    agent: prometheus.io
    prometheus:
      exporter:
        resources: {}
  terminationPolicy: Delete
