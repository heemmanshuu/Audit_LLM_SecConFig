---
# Source: nexus/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-nexus-blobs
  namespace: default
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: my-nexus
    chart: "nexus-1.2.4"
    release: "my-nexus"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: nexus/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-nexus-dbs-data
  namespace: default
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: my-nexus
    chart: "nexus-1.2.4"
    release: "my-nexus"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: nexus/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-nexus-db-restore
  namespace: default
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: my-nexus
    chart: "nexus-1.2.4"
    release: "my-nexus"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: nexus/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-nexus-nexus"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: dockersnapshot
      port: 8082
      protocol: TCP
      targetPort: 8082
    - name: dockerrelease
      port: 8083
      protocol: TCP
      targetPort: 8083
  selector:
    app: "my-nexus-nexus"
    release: my-nexus
---
# Source: nexus/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-nexus-nexus"
  labels:
    app: "my-nexus-nexus"
    chart: "nexus-1.2.4"
    heritage: Helm
    release: my-nexus
    app.kubernetes.io/name: nexus
    helm.sh/chart: nexus-1.2.4
    app.kubernetes.io/instance: my-nexus
    app.kubernetes.io/version: "3.38.0"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: nexus-statefulset
  replicas: 1
  selector:
    matchLabels:
      app: "my-nexus-nexus"
      release: my-nexus
  template:
    metadata:
      labels:
        app: "my-nexus-nexus"
        release: my-nexus
    spec:
      containers:
      - env:
        - name: INSTALL4J_ADD_VM_PARAMS
          value: -Xms10g -Xmx10g -XX:MaxDirectMemorySize=10g -XX:-MaxFDLimit
        - name: JAVA_TOOL_OPTIONS
          value: 
        - name: NEXUS_CONTEXT
          value: 
        image: "sonatype/nexus3:3.38.0"
        imagePullPolicy: IfNotPresent
        name: nexus
        ports:
        - containerPort: 8081
          name: http
          protocol: TCP
        - containerPort: 8082
          name: dockersnapshot
          protocol: TCP
        - containerPort: 8083
          name: dockerrelease
          protocol: TCP
        resources:
            requests:
              cpu: "4"
        volumeMounts:
        - mountPath: /nexus-data/blobs
          name: "my-nexus-blobs"
        - mountPath: /nexus-data/db
          name: "my-nexus-dbs-data"
        - mountPath: /nexus-data/restore-from-backup
          name: "my-nexus-db-restore"
      initContainers:
      - args:
        - chown
        - -R
        - "200"
        - /data
        image: busybox
        name: chmod
        volumeMounts:
        - mountPath: /data/blobs
          name: "my-nexus-blobs"
        - mountPath: /data/db
          name: "my-nexus-dbs-data"
        - mountPath: /data/restore
          name: "my-nexus-db-restore"
      volumes:
      - name: "my-nexus-blobs"
        persistentVolumeClaim:
          claimName: "my-nexus-blobs"
      - name: "my-nexus-dbs-data"
        persistentVolumeClaim:
          claimName: "my-nexus-dbs-data"
      - name: "my-nexus-db-restore"
        persistentVolumeClaim:
          claimName: "my-nexus-db-restore"
---
# Source: nexus/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: nexus
    chart: "nexus-1.2.4"
    heritage: Helm
    release: my-nexus
  name: "nexus-docker-release"
  annotations:
    nginx.ingress.kubernetes.io/client_max_body_size: 5000m
    nginx.ingress.kubernetes.io/proxy-body-size: 5000m
spec:
  rules:
    - host: nexus-release.company.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "my-nexus-nexus"
                port:
                  number: 8083
  tls:
  - hosts:
    - nexus-release.company.com
    secretName: nexus-release
---
# Source: nexus/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: nexus
    chart: "nexus-1.2.4"
    heritage: Helm
    release: my-nexus
  name: "nexus-docker-snapshot"
  annotations:
    nginx.ingress.kubernetes.io/client_max_body_size: 5000m
    nginx.ingress.kubernetes.io/proxy-body-size: 5000m
spec:
  rules:
    - host: nexus-snapshot.company.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "my-nexus-nexus"
                port:
                  number: 8082
  tls:
  - hosts:
    - nexus-snapshot.company.com
    secretName: nexus-snapshot
---
# Source: nexus/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: nexus
    chart: "nexus-1.2.4"
    heritage: Helm
    release: my-nexus
  name: "my-nexus-nexus"
  annotations:
    nginx.ingress.kubernetes.io/client_max_body_size: 5000m
    nginx.ingress.kubernetes.io/proxy-body-size: 5000m
spec:
  tls:
    - hosts:
      - nexus.company.com
      secretName: nexus
  rules:
    - host: "nexus.company.com"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "my-nexus-nexus"
                port:
                  number: 8081
