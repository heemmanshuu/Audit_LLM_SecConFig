---
# Source: rocketadmin/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-rocketadmin-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-rocketadmin
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: rocketadmin/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-rocketadmin-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-rocketadmin
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: rocketadmin/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-rocketadmin-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
automountServiceAccountToken: false
---
# Source: rocketadmin/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-rocketadmin
  labels:
    helm.sh/chart: rocketadmin-0.1.26
    app.kubernetes.io/name: rocketadmin
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/version: "0.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: rocketadmin/templates/postgres-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rocketadmin-postgresql-secret
  labels:
    helm.sh/chart: rocketadmin-0.1.26
    app.kubernetes.io/name: rocketadmin
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/version: "0.16.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  password: changeme
  postgres-password: "eUMAsFpnopcRTawE"
---
# Source: rocketadmin/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-rocketadmin
  labels:
    helm.sh/chart: rocketadmin-0.1.26
    app.kubernetes.io/name: rocketadmin
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/version: "0.16.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  JWT_SECRET: "E16iD6adun3ot93dcmvM4huBpt7hQheyfRHhHINQ7G91P5EzUMpflu89eZZFclcT"
  PRIVATE_KEY: "svH1UrLbpv1hlHRjfkfUcB58KCF0MPJQq2g0ggHu04JvGmrOCz28nFu6bhTcBKMd"
  APP_DOMAIN_ADDRESS: ''
  DATABASE_URL: postgresql://rocketadmin:changeme@my-rocketadmin-postgresql/rocketadmin
---
# Source: rocketadmin/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-rocketadmin-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: rocketadmin/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-rocketadmin-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: rocketadmin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-rocketadmin
  labels:
    helm.sh/chart: rocketadmin-0.1.26
    app.kubernetes.io/name: rocketadmin
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/version: "0.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: rocketadmin
    app.kubernetes.io/instance: my-rocketadmin
---
# Source: rocketadmin/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-rocketadmin
  labels:
    helm.sh/chart: rocketadmin-0.1.26
    app.kubernetes.io/name: rocketadmin
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/version: "0.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rocketadmin
      app.kubernetes.io/instance: my-rocketadmin
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rocketadmin
        app.kubernetes.io/instance: my-rocketadmin
    spec:
      serviceAccountName: my-rocketadmin
      securityContext:
        {}
      containers:
        - name: rocketadmin
          securityContext:
            {}
          image: "rocketadmin/rocketadmin:0.16.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: my-rocketadmin
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: rocketadmin/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-rocketadmin-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-rocketadmin-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-rocketadmin
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-rocketadmin-postgresql
      labels:
        app.kubernetes.io/instance: my-rocketadmin
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.20
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-rocketadmin-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-rocketadmin
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.3.0-debian-12-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "rocketadmin"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rocketadmin-postgresql-secret
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rocketadmin-postgresql-secret
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "rocketadmin"
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "rocketadmin" -d "dbname=rocketadmin" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "rocketadmin" -d "dbname=rocketadmin" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: rocketadmin/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-rocketadmin-test-connection"
  labels:
    helm.sh/chart: rocketadmin-0.1.26
    app.kubernetes.io/name: rocketadmin
    app.kubernetes.io/instance: my-rocketadmin
    app.kubernetes.io/version: "0.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-rocketadmin:80']
  restartPolicy: Never
