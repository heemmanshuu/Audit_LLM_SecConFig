---
# Source: mtls/templates/secret-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-mtls-certs
  labels:
    app: mtls
    chart: mtls-0.3.4
    release: "my-mtls"
    heritage: "Helm"
type: Opaque
data:
  ca.key: |-
    
  ca.crt: |-
---
# Source: mtls/templates/configmap-mtls.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-mtls
  labels:
    app.kubernetes.io/name: mtls
    helm.sh/chart: mtls-0.3.4
    app.kubernetes.io/instance: my-mtls
    app.kubernetes.io/managed-by: Helm
data:
  config.ini: |-
    
    [ca]
    alternate_name = *.myname.com
    cert = /home/mtls/secrets/certs/authority/RootCA.pem
    issuer = My Company Name
    key = /home/mtls/secrets/certs/authority/RootCA.key
    [gnupg]
    admin = /home/mtls/secrets/admin_gnupg/
    user = /home/mtls/secrets/gnupg/
    [mtls]
    max_lifetime = 82800
    min_lifetime = 60
    [storage]
    engine = sqlite3
    [storage.sqlite3]
    db_path = /home/mtls/database/mtls-server.db
---
# Source: mtls/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-mtls
  labels:
    app: mtls
    chart: mtls-0.3.4
    release: my-mtls
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: mtls/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-mtls
  labels:
    app.kubernetes.io/name: mtls
    helm.sh/chart: mtls-0.3.4
    app.kubernetes.io/instance: my-mtls
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mtls
    app.kubernetes.io/instance: my-mtls
---
# Source: mtls/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-mtls
  labels:
    app.kubernetes.io/name: mtls
    helm.sh/chart: mtls-0.3.4
    app.kubernetes.io/instance: my-mtls
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mtls
      app.kubernetes.io/instance: my-mtls
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mtls
        app.kubernetes.io/instance: my-mtls
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: mtls
          image: "drgrove/mtls-server:v0.14.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: FQDN
              value: "chart-example.local"
            - name: PROTOCOL
              value: "https"
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /home/mtls/config.ini
              subPath: config.ini
            - name: ca-creds
              mountPath: /home/mtls/secrets/certs/authority
              readOnly: false
            - name: persistence
              mountPath: /home/mtls/database
              subPath: database
              readOnly: false
            - name: persistence
              mountPath: /home/mtls/secrets/gnupg/
              subPath: gnupg
              readOnly: false
            - name: persistence
              mountPath: /home/mtls/secrets/admin_gnupg/
              subPath: admin_gnupg
              readOnly: false
          livenessProbe:
            httpGet:
              path: /version
              port: http
          readinessProbe:
            httpGet:
              path: /version
              port: http
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: my-mtls
            items:
              - key: config.ini
                path: config.ini
        - name: ca-creds
          secret:
            secretName: my-mtls-certs
            items:
              - key: ca.key
                path: RootCA.key
              - key: ca.crt
                path: RootCA.pem
        - name: persistence
          persistentVolumeClaim:
            claimName: my-mtls
