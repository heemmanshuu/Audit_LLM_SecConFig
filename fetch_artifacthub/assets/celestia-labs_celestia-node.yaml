---
# Source: celestia-node/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-celestia-node
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/version: v0.16.0
    helm.sh/chart: celestia-node-0.3.1
    app.kubernetes.io/component: node
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-celestia-node
      app.kubernetes.io/name: celestia-node
      app.kubernetes.io/component: node
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 
        - port:
---
# Source: celestia-node/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-celestia-node
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/version: v0.16.0
    helm.sh/chart: celestia-node-0.3.1
    app.kubernetes.io/component: node
automountServiceAccountToken: true
---
# Source: celestia-node/templates/configmap-bridge.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-celestia-node-configtoml
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/version: v0.16.0
    helm.sh/chart: celestia-node-0.3.1
    app.kubernetes.io/component: node
data:
  config.toml: |
    [Node]
      StartupTimeout = "2m0s"
      ShutdownTimeout = "2m0s"
    [Core]
      IP = ""
      RPCPort = "26657"
      GRPCPort = "9090"
    [State]
      DefaultKeyName = "my_celes_key"
      DefaultBackendName = "test"
    [P2P]
      ListenAddresses = ["/ip4/0.0.0.0/udp/2121/quic-v1/webtransport", "/ip6/::/udp/2121/quic-v1/webtransport", "/ip4/0.0.0.0/udp/2121/quic-v1", "/ip6/::/udp/2121/quic-v1", "/ip4/0.0.0.0/udp/2121/webrtc-direct", "/ip6/::/udp/2121/webrtc-direct", "/ip4/0.0.0.0/tcp/2121", "/ip6/::/tcp/2121"]
      AnnounceAddresses = []
      NoAnnounceAddresses = ["/ip4/127.0.0.1/udp/2121/quic-v1/webtransport", "/ip4/0.0.0.0/udp/2121/quic-v1/webtransport", "/ip6/::/udp/2121/quic-v1/webtransport", "/ip4/0.0.0.0/udp/2121/quic-v1", "/ip4/127.0.0.1/udp/2121/quic-v1", "/ip6/::/udp/2121/quic-v1", "/ip4/0.0.0.0/udp/2121/webrtc-direct", "/ip4/127.0.0.1/udp/2121/webrtc-direct", "/ip6/::/udp/2121/webrtc-direct", "/ip4/0.0.0.0/tcp/2121", "/ip4/127.0.0.1/tcp/2121", "/ip6/::/tcp/2121"]
      MutualPeers = []
      PeerExchange = true
      RoutingTableRefreshPeriod = "1m0s"
      [P2P.ConnManager]
        Low = 800
        High = 1000
        GracePeriod = "1m0s"
    [RPC]
      Address = "localhost"
      Port = "26658"
      SkipAuth = false
    [Gateway]
      Address = "localhost"
      Port = "26659"
      Enabled = false
    [Share]
      UseShareExchange = true
      [Share.EDSStoreParams]
        GCInterval = "0s"
        RecentBlocksCacheSize = 10
        BlockstoreCacheSize = 128
      [Share.ShrExEDSParams]
        ServerReadTimeout = "5s"
        ServerWriteTimeout = "1m0s"
        HandleRequestTimeout = "1m0s"
        ConcurrencyLimit = 10
        BufferSize = 32768
      [Share.ShrExNDParams]
        ServerReadTimeout = "5s"
        ServerWriteTimeout = "1m0s"
        HandleRequestTimeout = "1m0s"
        ConcurrencyLimit = 10
      [Share.PeerManagerParams]
        PoolValidationTimeout = "2m0s"
        PeerCooldown = "3s"
        GcInterval = "30s"
        EnableBlackListing = false
      [Share.Discovery]
        PeersLimit = 5
        AdvertiseInterval = "1h0m0s"
    [Header]
      TrustedHash = ""
      TrustedPeers = []
      [Header.Store]
        StoreCacheSize = 4096
        IndexCacheSize = 16384
        WriteBatchSize = 2048
      [Header.Syncer]
        TrustingPeriod = "336h0m0s"
      [Header.Server]
        WriteDeadline = "8s"
        ReadDeadline = "1m0s"
        RangeRequestTimeout = "10s"
      [Header.Client]
        MaxHeadersPerRangeRequest = 64
        RangeRequestTimeout = "8s"
    [Pruner]
      EnableService = false
---
# Source: celestia-node/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-celestia-node-data
  labels:
    app.kubernetes.io/name: celestia-node
    helm.sh/chart: celestia-node-0.3.1
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.16.0"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "250Gi"
---
# Source: celestia-node/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-celestia-node-external
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/version: v0.16.0
    helm.sh/chart: celestia-node-0.3.1
    app.kubernetes.io/component: node
spec:
  type: ClusterIP
  clusterIP: None
  sessionAffinity: None
  ports:
    - name: p2p-tcp
      port: 2121
      protocol: TCP
      nodePort: null
    - name: p2p-udp
      port: 2121
      protocol: UDP
      nodePort: null
    - name: ws
      port: 2122
      protocol: TCP
      nodePort: null
    - name: rest
      port: 26659
      protocol: TCP
      nodePort: null
    - name: rpc
      port: 26658
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/component: node
---
# Source: celestia-node/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-celestia-node-internal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/version: v0.16.0
    helm.sh/chart: celestia-node-0.3.1
    app.kubernetes.io/component: node
spec:
  type: ClusterIP
  clusterIP: None
  sessionAffinity: None
  ports:
    - name: p2p-tcp
      port: 2121
      protocol: TCP
    - name: p2p-udp
      port: 2121
      targetPort: 2121
      protocol: UDP
    - name: ws
      port: 2122
      protocol: TCP
    - name: rest
      port: 26659
      protocol: TCP
    - name: rpc
      port: 26658
      protocol: TCP
    - name: profiling
      port: 6060
      protocol: TCP
    - name: prometheus
      port: 8890
      protocol: TCP
  selector:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/component: node
---
# Source: celestia-node/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-celestia-node
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-node
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-node
    app.kubernetes.io/version: v0.16.0
    helm.sh/chart: celestia-node-0.3.1
    app.kubernetes.io/component: node
spec:
  replicas: 1
  podManagementPolicy: "OrderedReady"
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-celestia-node
      app.kubernetes.io/name: celestia-node
      app.kubernetes.io/component: node
  serviceName: my-celestia-node
  updateStrategy:
    type: RollingUpdate
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: "Retain"
    whenScaled: "Retain"
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-celestia-node
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: celestia-node
        app.kubernetes.io/version: v0.16.0
        helm.sh/chart: celestia-node-0.3.1
        app.kubernetes.io/component: node
    spec:
      
      serviceAccountName: my-celestia-node
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-celestia-node
                    app.kubernetes.io/name: celestia-node
                    app.kubernetes.io/component: app
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 10001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: home-permission
          image: busybox
          command:
            - "sh"
            - "-c"
            - |
              set -ex
              chown -R 10001:10001 /home
              ls -ltra /home
          volumeMounts:
            - name: home-dir # This is needed so that the process has permissions to create files in the home directory
              mountPath: /home
              readOnly: false
        - name: keys
          image: busybox
          command:
            - "sh"
            - "-c"
            - |
              set -ex
              mkdir -p /keys-volume/keyring-test
              cp /keys/NJ3XILLTMVRXEZLUFZVHO5A /keys-volume/
              cp /keys/OAZHALLLMV4Q /keys-volume/
              cp /keys/my_celes_key.info /keys-volume/keyring-test/
              printf "%s" "$(cat /keys/address)" > /keys-volume/keyring-test/$(cat /keys/uid).address
              chown -R 10001:10001 /keys-volume/
              find /keys-volume/ -type f -exec chmod 0600 {} \;
          volumeMounts:
            - name: keys
              mountPath: /keys
              readOnly: true
            - name: keys-volume
              mountPath: /keys-volume
      containers:
        - name: node
          image: ghcr.io/celestiaorg/celestia-node:v0.15.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - celestia
          args: 
            - bridge
            - start
            - --node.store=$(CELESTIA_HOME)
            - --metrics
            - --metrics.tls=false
            - --p2p.metrics
          env:
            - name: CELESTIA_HOME
              value: /home/celestia
          envFrom:
          resources:
            limits:
              memory: 16Gi
            requests:
              cpu: 6
              memory: 16Gi
          ports:
            - name: p2p-tcp
              containerPort: 2121
              hostPort: 2121
              protocol: TCP
            - name: p2p-udp
              containerPort: 2121
              hostPort: 2121
              protocol: UDP
            - name: ws
              containerPort: 2122
              hostPort: 2122
              protocol: TCP
            - name: rest
              containerPort: 26659
              hostPort: 26659
            - name: rpc
              containerPort: 26658
              hostPort: 26658
            - name: profiling
              containerPort: 6060
            - name: prometheus
              containerPort: 8890
          readinessProbe:
            exec:
              command:
                - sh
                - '-c'
                - >
                  AUTH_TOKEN=$(celestia bridge auth read --node.store=/home/celestia 2>/dev/null);
                  curl --max-time 0.5 -s -X POST -H "Content-type: application/json" -H "Accept: application/json" -H "Authorization: Bearer $AUTH_TOKEN" -d '{"id":1,"jsonrpc":"2.0","method":"header.SyncWait","params":[]}' "http://localhost:26658";
                  if [ "$?" -eq 0 ]; then exit 0; else echo "Catching up"; exit 1; fi
          volumeMounts:
            - name: data
              mountPath: /home/celestia/data
              subPath: data
              readOnly: false
            - name: data
              mountPath: /home/celestia/blocks
              subPath: blocks
              readOnly: false
            - name: data
              mountPath: /home/celestia/index
              subPath: index
              readOnly: false
            - name: data
              mountPath: /home/celestia/inverted_index
              subPath: inverted_index
              readOnly: false
            - name: data
              mountPath: /home/celestia/transients
              subPath: transients
              readOnly: false
            - name: keys-volume
              mountPath: /home/celestia/keys
              readOnly: false
            - name: configtoml
              mountPath: /home/celestia/config.toml
              subPath: config.toml
            - name: home-dir # This is needed so that the process has permissions to create files in the home directory
              mountPath: /home/celestia
              readOnly: false
        - name: otel-agent
          image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.102.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 4317
              name: otlp-grpc
            - containerPort: 4318
              name: otlp-http
            - containerPort: 8888
              name: prom-collector
            - containerPort: 8889
              name: prom-exporter
          command:
            - "/otelcol-contrib"
            - "--config=/etc/otelcol-contrib/config.yaml"
          env:
            - name: JOB_NAME
              value: my-celestia-node-default
            - name: GRAFANA_OTEL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: SET_IT
                  key: username
            - name: GRAFANA_OTEL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: SET_IT
                  key: token
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: otel-agent-config
              mountPath: /etc/otelcol-contrib/config.yaml
              subPath: config.yaml
      volumes:
        - name: keys
          secret:
            secretName: SET_IT
            items:
              - key: NJ3XILLTMVRXEZLUFZVHO5A
                path: NJ3XILLTMVRXEZLUFZVHO5A
              - key: OAZHALLLMV4Q
                path: OAZHALLLMV4Q
              - key: my_celes_key_info
                path: my_celes_key.info
              - key: uid
                path: uid
              - key: address
                path: address
        - name: keys-volume
          emptyDir: {}
        - name: home-dir
          emptyDir: {}
        - name: configtoml
          configMap:
            name: my-celestia-node-configtoml
        - name: otel-agent-config
          configMap:
            name: my-celestia-node-otel-agent
            items:
              - key: config.yaml
                path: config.yaml
        - name: data
          persistentVolumeClaim:
            claimName: my-celestia-node-data
