---
# Source: video-analytics-demo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-video-analytics-demo-configmap
  labels:
    app.kubernetes.io/name: video-analytics-demo
    app.kubernetes.io/instance: my-video-analytics-demo
data:
---
# Source: video-analytics-demo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-video-analytics-demo-webui-configmap
  labels:
    app.kubernetes.io/name: video-analytics-demo
    app.kubernetes.io/instance: my-video-analytics-demo
data:
    play.html: "<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\npageEncoding=\"UTF-8\"%>\n<html>\n<head>\n<meta
      http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Ant Media
      Server</title>\n\n<!-- videojs includes  -->\n<link href=\"//vjs.zencdn.net/6.6.0/video-js.css\"
      rel=\"stylesheet\">\n<!-- If you'd like to support IE8 -->\n<script src=\"//vjs.zencdn.net/ie8/1.1.2/videojs-ie8.min.js\"></script>\n<script
      src=\"//vjs.zencdn.net/6.6.0/video.js\"></script>\n<script\n\t\tsrc=\"//cdnjs.cloudflare.com/ajax/libs/videojs-contrib-hls/5.12.2/videojs-contrib-hls.min.js\"></script>\n<!--
      \ end of video js includes  -->\n\n<script src=\"js/fetch.js\"></script>\n<script
      src=\"js/promise.min.js\"></script>\n<script src=\"js/fetch.stream.js\"></script>\n<script
      src=\"js/webrtc_adaptor.js\"></script>\n<script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n\n<link
      href=\"css/player.css\" rel=\"stylesheet\">\n\n</head>\n<body>\n\n\n\t<div id=\"video_info\">\n\t\tStream
      will start playing automatically<br />when it is live\n\t</div>\n\n\t<!-- HLS Player
      -->\n\t<div style=\"width: 100%; max-width: 1680px; max-height: 1080px;\" id=\"video_container\">\n\t\t<video
      id=\"video-player\"\n\t\t\tclass=\"video-js vjs-default-skin vjs-16-9 vjs-big-play-centered\"\n\t\t\tcontrols
      preload=\"auto\" data-setup='{\"fluid\": true}'>\n\t\t\t<p class=\"vjs-no-js\">\n\t\t\t\tTo
      view this video please enable JavaScript, and consider upgrading\n\t\t\t\tto a web
      browser that <a\n\t\t\t\t\thref=\"http://videojs.com/html5-video-support/\" target=\"_blank\">supports\n\t\t\t\t\tHTML5
      video</a>\n\t\t\t</p>\n\t\t</video>\n\t</div>\n\n\n\t<!-- WebRTC Player -->\n\t<video
      id=\"remoteVideo\" autoplay controls playsinline\n\t\tstyle=\"display: none; width:
      100%; max-width: 1680px; max-height: 1080px;\"></video>\n\t<img id=\"play_button\"
      src=\"images/play.png\" onclick=\"playWebRTCVideo()\"\n\t\tstyle=\"position: absolute;
      top: 30px; left: 30px; display: none;\" />\n\n\n\t<script>\n    /**\n    * This
      page accepts 4 arguments.\n    * 1. \"id\": the stream id to play.It is mandatory\n
      \   * 2. \"token\": the token to play stream. It's mandatory if token security is
      enabled on server side.\n    * 3. \"autoplay\": To start playing automatically if
      streams is available. Optional. Default value is true\n    * 4. \"playOrder\": the
      order which technologies is used in playing. Optional. Default value is \"webrtc,hls\".\n
      \   *     possible values are \"hls,webrtc\",\"webrtc\",\"hls\"\n    */\n\n\n\t//The
      play order, player tries to play according to this order, if it can not play then
      tries following format\n\n<%\n    String playOrder = request.getParameter(\"playOrder\")
      ;\n\tif (playOrder == null || playOrder.equals(\"webrtc,hls\")) {\n\t   %>\n\t   var
      \ playOrder = [\"webrtc\", \"hls\"];\n\t   <%\n\t}\n\telse if(playOrder.equals(\"hls,webrtc\"))
      {\n\t   %>\n\t   var  playOrder = [\"hls\", \"webrtc\"];\n\t   <%\n\t}\n\telse if(playOrder.equals(\"hls\"))
      {\n\t   %>\n\t   var  playOrder = [\"hls\"];\n\t   <%\n\t}\n\telse if(playOrder.equals(\"webrtc\"))
      {\n\t   %>\n\t   var  playOrder = [\"webrtc\"];\n\t   <%\n\t}\n\n\tString streamId
      = request.getParameter(\"id\");\n\tif (streamId == null) {\n\t\t//check name variable
      for compatibility with older versions\n\t\tstreamId = request.getParameter(\"name\");\n\t}\n\n%>\n\n\tvar
      name = \"<%= streamId %>\";\n\tvar token = \"<%= request.getParameter(\"token\")
      %>\";\n\n\tvar pAutoplay = \"<%= request.getParameter(\"autoplay\") %>\";\n\tvar
      autoPlay = true;\n\tif (pAutoplay == \"false\" || isMobile()) {\n\t\tautoPlay =
      false;\n\t}\n\n\tvar webRTCAdaptor = null;\n\tvar streamsFolder = \"streams\";\n\n
      \   function webrtcNoStreamCallback() {\n      \t/**\n\t\t * If HLS is in the play
      order then try to play HLS, if not wait for WebRTC stream\n\t\t * In some cases
      user may want to remove HLS from the order and force to play WebRTC only\n\t\t *
      in these cases player only waits for WebRTC streams\n\t\t */\n\t   setTimeout(function(){\n\t\t
      if (playOrder.includes(\"hls\"))\n\t\t {\n\t\t   tryToHLSPlay(name, token, hlsNoStreamCallback);\n\t\t
      }\n\t\t else\n\t\t {\n\t\t\twebRTCAdaptor.getStreamInfo(name);\n\t\t }\n\t\t}, 3000);\n\t}\n\n
      \   function hlsNoStreamCallback()\n    {\n\t    \tdocument.getElementById(\"video_info\").innerHTML=\"Stream
      will start playing automatically<br/>when it is live\";\n\t\tsetTimeout(function()\n\t\t{\n\t\t\tif
      (playOrder.includes(\"webrtc\"))\n\t\t\t{\n\t\t\t\t// It means there is no HLS stream,
      so try to play WebRTC stream\n\t\t\t\tif (webRTCAdaptor == null) {\n\t\t\t\t\tinitializeWebRTCPlayer(name,
      token, webrtcNoStreamCallback);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twebRTCAdaptor.getStreamInfo(name);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttryToHLSPlay(name,
      token, hlsNoStreamCallback);\n\t\t\t}\n\t\t}, 3000);\n\n    }\n\n\tfunction hideHLSElements(){\n\t\tdocument.getElementById(\"video_container\").style.display=\"none\";\n\t}\n\n\tfunction
      hideWebRTCElements(){\n\n\t\tdocument.getElementById(\"remoteVideo\").style.display=\"none\";\n\t\tdocument.getElementById(\"play_button\").style.display=\"none\";\n\n\t}\n\n\tfunction
      playWebRTCVideo() {\n\t\tdocument.getElementById(\"remoteVideo\").style.display
      = \"block\";\n\t\tdocument.getElementById(\"remoteVideo\").play().then(function(value){\n\t\t\t//autoplay
      started\n\t\t\tdocument.getElementById(\"play_button\").style.display=\"none\";\n\t\t}).catch(function(error)
      {\n\t\t\t//\n\t\t\tdocument.getElementById(\"play_button\").style.display=\"block\";\n\t\t\tconsole.log(\"User
      interaction needed to start playing\");\n\t\t});\n\n\t}\n\n\tfunction initializeHLSPlayer(name,
      extension, token) {\n\n\t\thideWebRTCElements();\n\n\t\tstartHLSPlayer(name, extension,
      token)\n\n\t}\n\n\n\tfunction startHLSPlayer(name, extension, token) {\n\t\tvar
      type;\n\t\tvar liveStream = false;\n\t\tif (extension == \"mp4\") {\n\t\t\ttype
      = \"video/mp4\";\n\t\t\tliveStream = false;\n\t\t}\n\t\telse if (extension == \"m3u8\")
      {\n\t\t\ttype = \"application/x-mpegURL\";\n\t\t\tliveStream = true;\n\t\t}\n\t\telse
      {\n\t\t\tconsole.log(\"Unknown extension: \" + extension);\n\t\t\treturn;\n\t\t}\n\n\t\tvar
      preview = name;\n\t\tif (name.endsWith(\"_adaptive\")) {\n\t\t\tpreview = name.substring(0,
      name.indexOf(\"_adaptive\"));\n\t\t}\n\n\t\tvar player = videojs('video-player',
      {\n\t\t\t\t\tposter: \"previews/\"+preview+\".png\"\n\t\t});\n\n\t\tplayer.src({\n
      \ \t\t\tsrc: \"streams/\" + name + \".\" + extension + \"?token=\" + token,\n  \t\t\ttype:
      type,\n\t\t});\n\n\t\tplayer.poster(\"previews/\"+preview+\".png\");\n\n\t\tif (autoPlay)
      {\n\t\t\tplayer.play();\n\t\t}\n\t\tdocument.getElementById(\"video_container\").style.display
      = \"block\";\n\t\tdocument.getElementById(\"video_info\").hidden = true;\n\t}\n\n\n\tfunction
      initializeWebRTCPlayer(name, token, noStreamCallback) {\n\n\t\thideHLSElements();\n\n\t\tdocument.getElementById(\"remoteVideo\").style.display=\"block\";\n\n\t\tvar
      pc_config = null;\n\n\t\tvar sdpConstraints = {\n\t\t\tOfferToReceiveAudio : true,\n\t\t\tOfferToReceiveVideo
      : true\n\n\t\t};\n\t\tvar mediaConstraints = {\n\t\t\tvideo : false,\n\t\t\taudio
      : false\n\t\t};\n\n\t\tvar appName = location.pathname.substring(0, location.pathname.lastIndexOf(\"/\")+1);\n\t\tvar
      path =  location.hostname + \":\" + location.port + appName + \"websocket\";\n\t\tvar
      websocketURL =  \"ws://\" + path;\n\n\t\tif (location.protocol.startsWith(\"https\"))
      {\n\t\t\twebsocketURL = \"wss://\" + path;\n\t\t}\n\n\t\t//webRTCAdaptor is a global
      variable\n\t\twebRTCAdaptor = new WebRTCAdaptor({\n\t\t\twebsocket_url : websocketURL,\n\t\t\tmediaConstraints
      : mediaConstraints,\n\t\t\tpeerconnection_config : pc_config,\n\t\t\tsdp_constraints
      : sdpConstraints,\n\t\t\tremoteVideoId : \"remoteVideo\",\n\t\t\tisPlayMode: true,\n\t\t\tdebug:
      true,\n\t\t\tcallback : function(info, description) {\n\t\t\t\tif (info == \"initialized\")
      {\n\t\t\t\t\tconsole.log(\"initialized\");\n\t\t\t\t\twebRTCAdaptor.getStreamInfo(name);\n\t\t\t\t}\n\t\t\t\telse
      if (info == \"streamInformation\") {\n\t\t\t\t\tconsole.log(\"stream information\");\n\t\t\t\t\twebRTCAdaptor.play(name,
      token);\n\t\t\t\t}\n\t\t\t\telse if (info == \"play_started\") {\n\t\t\t\t\t//joined
      the stream\n\t\t\t\t\tconsole.log(\"play started\");\n\t\t\t\t\tdocument.getElementById(\"video_info\").style.display
      = \"none\";\n\t\t\t\t\tplayWebRTCVideo();\n\t\t\t\t} else if (info == \"play_finished\")
      {\n\t\t\t\t\t//leaved the stream\n\t\t\t\t\tconsole.log(\"play finished\");\n\t\t\t\t\t//check
      that publish may start again\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\twebRTCAdaptor.getStreamInfo(name);\n\t\t\t\t\t},
      3000);\n\t\t\t\t}\n\t\t\t\telse if (info == \"closed\") {\n\t\t\t\t\t//console.log(\"Connection
      closed\");\n\t\t\t\t\tif (typeof description != \"undefined\") {\n\t\t\t\t\t\tconsole.log(\"Connecton
      closed: \" + JSON.stringify(description));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t},\n\t\t\tcallbackError
      : function(error) {\n\t\t\t\t//some of the possible errors, NotFoundError, SecurityError,PermissionDeniedError\n\n\t\t\t\tconsole.log(\"error
      callback: \" + JSON.stringify(error));\n\n\t\t\t\tif (error == \"no_stream_exist\"
      ) {\n\n\t\t\t\t\tif (typeof noStreamCallback != \"undefined\") {\n\t\t\t\t\t\tnoStreamCallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif
      (error == \"notSetRemoteDescription\" ) {\n\t\t\t\t\t/*\n\t\t\t\t\t* If getting
      codec incompatible or remote description error, it will redirect HLS player.\n\t\t\t\t\t*/\n\t\t\t\t\ttryToHLSPlay(name,
      token, hlsNoStreamCallback);\n\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\n\n\t if (name
      != \"null\")\n\t {\n\n\t\tif (name.startsWith(streamsFolder))\n\t\t{\n\t\t\t/*\n\t\t\t*
      If name starts with streams, it's hls or mp4 file to be played\n\t\t\t*/\n\t\t\tvar
      lastIndexOfDot = name.lastIndexOf(\".\")\n\t\t\tstreamPath = name.substring(streamsFolder.length+1,
      lastIndexOfDot);\n\t\t\tvar extension = name.substring(lastIndexOfDot+1);\n\t\t\tinitializeHLSPlayer(streamPath,
      extension, token);\n\t\t}\n\t\telse {\n\t\t\t/*\n\t\t\t * Check that which one is
      in the first order\n\t\t    */\n\t\t\tif (playOrder[0] == \"webrtc\" )\n\t\t\t{\n\t\t\t\tinitializeWebRTCPlayer(name,
      token, webrtcNoStreamCallback);\n\t\t\t}\n\t\t\telse if (playOrder[0] == \"hls\"
      )\n\t\t\t{\n\t\t\t\ttryToHLSPlay(name, token, hlsNoStreamCallback);\n\t\t\t}\n\t\t\telse
      {\n\t\t\t\talert(\"Unsupported play order requested. Supported formats are webrtc
      and hls. Use something like playOrder=webrtc,hls\");\n\t\t\t}\n\t\t}\n\t }\n\t else
      {\n\t\t alert(\"No stream specified. Please add ?id={STREAM_ID}  to the url\");\n\t
      }\n</script>\n\n</body>\n</html>\n"
---
# Source: video-analytics-demo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-video-analytics-demo-create-config
  labels:
    app.kubernetes.io/name: video-analytics-demo
    app.kubernetes.io/instance: my-video-analytics-demo
data:

    create_config.py: |
      """
      Author: Vinay Bagde
      Modifier: Anurag Guda
      Maintainer: Andrew Liu, Anurag Guda
      Copyright (c) 2018 NVIDIA Corporation.  All rights reserved.
      """
      import sys
      import os
      from collections import OrderedDict
    
      tile_map = {1:(1,1), 2: (1,2), 4:(2,2), 6:(2,3), 8:(2,4), 10:(2,5), 12:(3,4), 15:(3,5), 18:(3,6)}
      tile_map = OrderedDict(tile_map)
    
      def read_camera_file():
          camera_path = '/etc/config'
          files = os.listdir(camera_path)
          camera_ips = []
          for file in files:
              current_file = os.path.join(camera_path,file)
              if os.path.isfile(current_file):
                  camera_file = open(current_file)
                  camera_ip = camera_file.readline()
                  camera_ip = camera_ip.strip("\n")
                  camera_file.close()
                  camera_ips.append(camera_ip)
          return camera_ips
    
    
      def main():
          ips = read_camera_file()
          print(ips)
          print(len(ips))
          n_rows = None
          n_columns = None
          for key,val  in tile_map.items():
              if len(ips) < key:
                  break
              n_rows = val[0]
              n_columns = val[1]
    
          write_list = []
          if len(ips) != 0:
    
              with open(sys.argv[2]) as fp:
                  line = fp.readline()
                  while line:
                      pair = line.split("=")
                      if pair[0] == "rows":
                          pair[1] = str(n_rows)
                      elif pair[0] == "columns":
                          pair[1] = str(n_columns)
                      elif pair[0] == "batch-size":
                          pair[1] = str(len(ips))
                      output = line
                      if len(pair) > 1:
                          output = "=".join(pair)
                      output = output.replace('\n','')
                      write_list.append(output)
                      line = fp.readline()
              fp.close()
          else:
              with open(sys.argv[2]) as fp:
                  line = fp.readline()
                  while line:
                      pair = line.split("=")
                      if pair[0] == "rows":
                          pair[1] = str("1")
                      elif pair[0] == "columns":
                          pair[1] = str("1")
                      elif pair[0] == "num-sources":
                          pair[1] = str("1")
                      elif pair[0] == "file-loop":
                          pair[1] = str("1")
                      elif pair[0] == "batch-size":
                          pair[1] = str("1")
                      output = line
                      if len(pair) > 1:
                          output = "=".join(pair)
                      output = output.replace('\n','')
                      write_list.append(output)
                      line = fp.readline()
              fp.close()
    
    
          gpulist = os.popen('nvidia-smi -L').read()
    
          print(gpulist)
    
          if 'T4' in gpulist:
              if len(ips) != 0:
                  for index,ip in enumerate(ips):
                      write_list.append("\n")
                      write_list.append("[source{}]".format(index))
                      write_list.append("enable=1")
                      write_list.append("type=4")
                      write_list.append("uri={}".format(ip))
                      write_list.append("num-sources=1")
                      write_list.append("gpu-id=0")
                      write_list.append("cudadec-memtype=0")
                      write_list.append("\n")
    
                  write_list.append("[sink0]")
                  write_list.append("enable=1")
                  write_list.append("type=4")
                  write_list.append("container=1")
                  write_list.append("codec=1")
                  write_list.append("sync=0")
                  write_list.append("bitrate=2000000")
                  write_list.append("profile=0")
                  write_list.append("output-file=out.mp4")
                  write_list.append("source-id=0")
    
    
              if len(ips) == 0:
                  write_list.append("\n")
                  write_list.append("[sink0]")
                  write_list.append("enable=1")
                  write_list.append("type=1")
                  write_list.append("sync=1")
                  write_list.append("codec=1")
                  write_list.append("bitrate=4000000")
                  write_list.append("rtsp-port=8554")
                  write_list.append("udp-port=5400")
                  write_list.append("source-id=0")
                  write_list.append("gpu-id=0")
                  write_list.append("nvbuf-memory-type=0")
                  write_list.append("\n")
                  write_list.append("[sink2]")
                  write_list.append("enable=1")
                  write_list.append("type=4")
                  write_list.append("container=1")
                  write_list.append("codec=1")
                  write_list.append("sync=1")
                  write_list.append("bitrate=2000000")
                  write_list.append("rtsp-port=8554")
                  write_list.append("udp-port=5400")
                  write_list.append("profile=0")
                  write_list.append("output-file=out.mp4")
                  write_list.append("source-id=0")
          else:
              if len(ips) != 0:
                  for index,ip in enumerate(ips):
                      write_list.append("\n")
                      write_list.append("[source{}]".format(index))
                      write_list.append("enable=1")
                      write_list.append("type=4")
                      write_list.append("uri={}".format(ip))
                      write_list.append("num-sources=1")
                      write_list.append("gpu-id=0")
                      write_list.append("cudadec-memtype=0")
                      write_list.append("\n")
    
                  write_list.append("[sink0]")
                  write_list.append("enable=1")
                  write_list.append("type=4")
                  write_list.append("container=1")
                  write_list.append("codec=1")
                  write_list.append("enc-type=1")
                  write_list.append("sync=0")
                  write_list.append("bitrate=2000000")
                  write_list.append("profile=0")
                  write_list.append("output-file=out.mp4")
                  write_list.append("source-id=0")
    
    
              if len(ips) == 0:
                  write_list.append("\n")
                  write_list.append("[sink0]")
                  write_list.append("enable=1")
                  write_list.append("type=1")
                  write_list.append("sync=1")
                  write_list.append("codec=1")
                  write_list.append("enc-type=1")
                  write_list.append("bitrate=4000000")
                  write_list.append("rtsp-port=8554")
                  write_list.append("udp-port=5400")
                  write_list.append("source-id=0")
                  write_list.append("gpu-id=0")
                  write_list.append("nvbuf-memory-type=0")
                  write_list.append("\n")
                  write_list.append("[sink2]")
                  write_list.append("enable=1")
                  write_list.append("type=4")
                  write_list.append("container=1")
                  write_list.append("codec=1")
                  write_list.append("enc-type=1")
                  write_list.append("sync=1")
                  write_list.append("bitrate=2000000")
                  write_list.append("rtsp-port=8554")
                  write_list.append("udp-port=5400")
                  write_list.append("profile=0")
                  write_list.append("output-file=out.mp4")
                  write_list.append("source-id=0")
    
          write_file = os.path.join(os.path.dirname(sys.argv[2]),'run.txt')
          with open(write_file,"w") as file:
              for line in write_list:
                  file.write(line)
                  file.write("\n")
          file.close()
          print(write_file)
          os.system("{} -c {}".format(sys.argv[1],write_file))
    
    
      if __name__ == '__main__':
          main()
---
# Source: video-analytics-demo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-video-analytics-demo-create-config-a100
  labels:
    app.kubernetes.io/name: video-analytics-demo
    app.kubernetes.io/instance: my-video-analytics-demo
data:
    create_config_a100.py: "\"\"\"\nAuthor: Vinay Bagde\nModifier: Anurag Guda\nMaintainer:
      Andrew Liu, Anurag Guda\nCopyright (c) 2018 NVIDIA Corporation.  All rights reserved.\n\"\"\"\nimport
      sys\nimport os\nfrom collections import OrderedDict\n\ntile_map = {1:(1,1), 2: (1,2),
      4:(2,2), 6:(2,3), 8:(2,4), 10:(2,5), 12:(3,4), 15:(3,5), 18:(3,6)}\ntile_map = OrderedDict(tile_map)\n\ndef
      read_camera_file():\n    camera_path = '/etc/config'\n    files = os.listdir(camera_path)\n
      \   camera_ips = []\n    for file in files:\n        current_file = os.path.join(camera_path,file)\n
      \       if os.path.isfile(current_file):\n            camera_file = open(current_file)\n
      \           camera_ip = camera_file.readline()\n            camera_ip = camera_ip.strip(\"\\n\")\n
      \           camera_file.close()\n            camera_ips.append(camera_ip)\n    return
      camera_ips\n\n\ndef main():\n    ips = read_camera_file()\n    print(ips)\n    print(len(ips))\n
      \   n_rows = None\n    n_columns = None\n    for key,val  in tile_map.items():\n
      \       if len(ips) < key:\n            break\n        n_rows = val[0]\n        n_columns
      = val[1]\n\n    write_list = []\n    if len(ips) != 0:\n\n        with open(sys.argv[2])
      as fp:\n            line = fp.readline()\n            while line:\n                pair
      = line.split(\"=\")\n                if pair[0] == \"rows\":\n                    pair[1]
      = str(n_rows)\n                elif pair[0] == \"columns\":\n                    pair[1]
      = str(n_columns)\n                elif pair[0] == \"batch-size\":\n                    pair[1]
      = str(len(ips))\n                output = line\n                if len(pair) > 1:\n
      \                   output = \"=\".join(pair)\n                output = output.replace('\\n','')\n
      \               write_list.append(output)\n                line = fp.readline()\n
      \       fp.close()\n    else:\n        with open(sys.argv[2]) as fp:\n            line
      = fp.readline()\n            while line:\n                pair = line.split(\"=\")\n
      \               if pair[0] == \"rows\":\n                    pair[1] = str(\"1\")\n
      \               elif pair[0] == \"columns\":\n                    pair[1] = str(\"1\")\n
      \               elif pair[0] == \"num-sources\":\n                    pair[1] =
      str(\"1\")\n                elif pair[0] == \"file-loop\":\n                    pair[1]
      = str(\"1\")\n                elif pair[0] == \"batch-size\":\n                    pair[1]
      = str(\"1\")\n                output = line\n                if len(pair) > 1:\n
      \                   output = \"=\".join(pair)\n                output = output.replace('\\n','')\n
      \               write_list.append(output)\n                line = fp.readline()\n
      \       fp.close()\n\n\n    \n\n    if len(ips) != 0:\n        for index,ip in enumerate(ips):\n
      \           write_list.append(\"\\n\")\n            write_list.append(\"[source{}]\".format(index))\n
      \           write_list.append(\"enable=1\")\n            write_list.append(\"type=4\")\n
      \           write_list.append(\"uri={}\".format(ip))\n            write_list.append(\"num-sources=1\")\n
      \           write_list.append(\"gpu-id=0\")\n            write_list.append(\"cudadec-memtype=0\")\n
      \           write_list.append(\"\\n\")\n\n        write_list.append(\"[sink0]\")\n
      \       write_list.append(\"enable=1\")\n        write_list.append(\"type=4\")\n
      \       write_list.append(\"container=1\")\n        write_list.append(\"codec=1\")\n
      \       write_list.append(\"enc-type=1\")\n        write_list.append(\"sync=0\")\n
      \       write_list.append(\"bitrate=2000000\")\n        write_list.append(\"profile=0\")\n
      \       write_list.append(\"output-file=out.mp4\")\n        write_list.append(\"source-id=0\")\n\n\n
      \   if len(ips) == 0:\n        write_list.append(\"\\n\")\n        write_list.append(\"[sink0]\")\n
      \       write_list.append(\"enable=1\")\n        write_list.append(\"type=1\")\n
      \       write_list.append(\"sync=1\")\n        write_list.append(\"codec=1\")\n
      \       write_list.append(\"enc-type=1\")\n        write_list.append(\"bitrate=4000000\")\n
      \       write_list.append(\"rtsp-port=8554\")\n        write_list.append(\"udp-port=5400\")\n
      \       write_list.append(\"source-id=0\")\n        write_list.append(\"gpu-id=0\")\n
      \       write_list.append(\"nvbuf-memory-type=0\")\n        write_list.append(\"\\n\")\n
      \       write_list.append(\"[sink2]\")\n        write_list.append(\"enable=1\")\n
      \       write_list.append(\"type=4\")\n        write_list.append(\"container=1\")\n
      \       write_list.append(\"codec=1\")\n        write_list.append(\"enc-type=1\")\n
      \       write_list.append(\"sync=1\")\n        write_list.append(\"bitrate=2000000\")\n
      \       write_list.append(\"rtsp-port=8554\")\n        write_list.append(\"udp-port=5400\")\n
      \       write_list.append(\"profile=0\")\n        write_list.append(\"output-file=out.mp4\")\n
      \       write_list.append(\"source-id=0\")\n\n    write_file = os.path.join(os.path.dirname(sys.argv[2]),'run.txt')\n
      \   with open(write_file,\"w\") as file:\n        for line in write_list:\n            file.write(line)\n
      \           file.write(\"\\n\")\n    file.close()\n    print(write_file)\n    os.system(\"{}
      -c {}\".format(sys.argv[1],write_file))\n\n\nif __name__ == '__main__':\n    main()\n"
---
# Source: video-analytics-demo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-video-analytics-demo-nginx-config
data:
  nginx.conf: |
    user nginx;
    worker_processes  1;
    events {
      worker_connections  10240;
    }
    http {
      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;
      include /etc/nginx/mime.types;
      fastcgi_buffers 8 16k;
      fastcgi_buffer_size 32k;

      client_max_body_size 24M;
      client_body_buffer_size 128k;

      client_header_buffer_size 5120k;
      large_client_header_buffers 16 5120k;
      server {
          listen       80 default_server;
          server_name  localhost;
          root /var/www/html;
          location / {
            rewrite ^ $scheme://$http_host/demo/play.html?name=videoanalytics break;
            #return 301 $uri/demo/play.html?name=videoanalytics;
            #proxy_pass http://$server_name:80/demo/play.html?name=videoanalytics;
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
            proxy_buffers 4 256k;
            proxy_buffer_size 128k;
            proxy_busy_buffers_size 256k;
            proxy_connect_timeout 4s;
            proxy_read_timeout 86400s;
            proxy_send_timeout 12s;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          }
          location /demo {
            proxy_pass http://my-video-analytics-demo-web:5080/WebRTCApp;
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
            proxy_buffers 4 256k;
            proxy_buffer_size 128k;
            proxy_busy_buffers_size 256k;
            proxy_connect_timeout 4s;
            proxy_read_timeout 86400s;
            proxy_send_timeout 12s;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          } 
        }
      }
---
# Source: video-analytics-demo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-video-analytics-demo
  labels:
    app.kubernetes.io/name: video-analytics-demo
    helm.sh/chart: video-analytics-demo-0.1.9
    app.kubernetes.io/instance: my-video-analytics-demo
    app.kubernetes.io/version: "1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
      nodePort: 31116
  selector:
    app.kubernetes.io/name: video-analytics-demo
    app.kubernetes.io/instance: my-video-analytics-demo
---
# Source: video-analytics-demo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-video-analytics-demo-webui
  labels:
    name: my-video-analytics-demo-webui
spec:
  type: NodePort
  ports:
    - port: 80
      name: http
      protocol: TCP
      targetPort: 80
      nodePort: 31115
  selector:
    name: my-video-analytics-demo-webui
---
# Source: video-analytics-demo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-video-analytics-demo-web
  labels:
    name: my-video-analytics-demo-webui
spec:
  ports:
    - port: 5080
      name: webui
      protocol: TCP
      targetPort: webui
  selector:
    name: my-video-analytics-demo-webui
---
# Source: video-analytics-demo/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-video-analytics-demo
  labels:
    app.kubernetes.io/name: video-analytics-demo
    helm.sh/chart: video-analytics-demo-0.1.9
    app.kubernetes.io/instance: my-video-analytics-demo
    app.kubernetes.io/version: "1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: video-analytics-demo
      app.kubernetes.io/instance: my-video-analytics-demo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: video-analytics-demo
        app.kubernetes.io/instance: my-video-analytics-demo
      annotations:
        rollme: "bPlmA"
    spec:
      imagePullSecrets:
        - name: nvidia-registrykey-secret
      containers:
        - name: "video-analytics-demo-1"
          image: "nvcr.io/nvidia/deepstream:6.2-samples"
          command:
          - sh
          - -c
          - apt update 2>&1 >/dev/null; 
            apt install apt-utils wget unzip git-svn -y 2>&1 >/dev/null;
            git svn clone https://github.com/NVIDIA-AI-IOT/deepstream_reference_apps/trunk/deepstream_app_tao_configs >/dev/null 2>&1;
            cp deepstream_app_tao_configs/* /opt/nvidia/deepstream/deepstream-6.2/samples/configs/tao_pretrained_models/;
            deepstream_version=$(echo '/opt/nvidia/deepstream/deepstream-6.2/samples/configs/tao_pretrained_models/' | awk -F'/' '{print $5}' | awk -F'-' '{print $2}');
            rm -rf deepstream_app_tao_configs/; 
            echo " ";
            echo " ";
            echo "No NGC Configuration Provided";
            echo " ";
            sed -ie "s/..\/..\/models\/tao_pretrained_models\/trafficcamnet\/resnet18_trafficcamnet_pruned.etlt/\/opt\/nvidia\/deepstream\/deepstream-$deepstream_version\/samples\/configs\/tao_pretrained_models\/resnet18_trafficcamnet_pruned.etlt/g" /opt/nvidia/deepstream/deepstream-6.2/samples/configs/tao_pretrained_models//config_infer_primary_trafficcamnet.txt;
            bash /opt/nvidia/deepstream/deepstream-$deepstream_version/user_additional_install.sh  2>&1 >/dev/null; 
            python /opt/nvidia/deepstream/create_config.py deepstream-app /opt/nvidia/deepstream/deepstream-6.2/samples/configs/deepstream-app/source4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.txt;
            cat /opt/nvidia/deepstream/deepstream-$deepstream_version/samples/configs/deepstream-app/run.txt
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              nvidia.com/gpu: 1
          ports: 
            - name: http
              containerPort: 8554
              protocol: TCP
            - name: http1
              containerPort: 5080
              protocol: TCP
          volumeMounts:
            - name: ipmount
              mountPath: /etc/config
            - name: create-config-a100
              mountPath: /opt/nvidia/deepstream/create_config_a100.py
              subPath: create_config_a100.py
            - name: create-config
              mountPath: /opt/nvidia/deepstream/create_config.py
              subPath: create_config.py
      volumes:
        - name: ipmount
          configMap:
            name: my-video-analytics-demo-configmap
        - name: create-config
          configMap:
            name: my-video-analytics-demo-create-config
        - name: create-config-a100
          configMap:
            name: my-video-analytics-demo-create-config-a100
---
# Source: video-analytics-demo/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-video-analytics-demo-webui
  labels:
    name: my-video-analytics-demo-webui      
    app.kubernetes.io/name: video-analytics-demo
    helm.sh/chart: video-analytics-demo-0.1.9
    app.kubernetes.io/instance: my-video-analytics-demo
    app.kubernetes.io/version: "1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      name: my-video-analytics-demo-webui
      app.kubernetes.io/name: video-analytics-demo
      app.kubernetes.io/instance: my-video-analytics-demo
  template:
    metadata:
      labels:
        name: my-video-analytics-demo-webui
        app.kubernetes.io/name: video-analytics-demo
        app.kubernetes.io/instance: my-video-analytics-demo
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
          - containerPort: 80
            name: http
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
        - name: "video-analytics-demo-webui-1"
          image: anguda/ant-media:2.5
          imagePullPolicy: IfNotPresent
          env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: DS_PORT
            value: "31116"  
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "sleep 45; bash /tmp/serverstart.sh"]
          resources: {}
          volumeMounts:
          - mountPath: /tmp/play.html
            name: play
            subPath: play.html
          ports:
            - name: webui
              containerPort: 5080
              protocol: TCP
      volumes:
      - configMap:
          defaultMode: 420
          name: my-video-analytics-demo-webui-configmap
        name: play
      - name: nginx-conf
        configMap:
          name: my-video-analytics-demo-nginx-config
          items:
            - key: nginx.conf
              path: nginx.conf
---
# Source: video-analytics-demo/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-video-analytics-demo-test-connection"
  labels:
    app.kubernetes.io/name: video-analytics-demo
    helm.sh/chart: video-analytics-demo-0.1.9
    app.kubernetes.io/instance: my-video-analytics-demo
    app.kubernetes.io/version: "1.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-video-analytics-demo:80']
  restartPolicy: Never
