---
# Source: k10app/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: mongo-mongodb
automountServiceAccountToken: true
---
# Source: k10app/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.4
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: mysql
---
# Source: k10app/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mongo-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "TTlCNFFmN1E0Qg=="
  mongodb-replica-set-key: "NWhrWVRoSnFlUQ=="
---
# Source: k10app/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.4
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "eExVcjhqRGtYNA=="
  mysql-password: "TnNIM3Y2M2xUcQ=="
---
# Source: k10app/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.3
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "RE5xZWJoZWlsUQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: k10app/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: k10app/charts/mongodb/templates/replicaset/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-mongodb-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  setup.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh
    . /opt/bitnami/scripts/libfs.sh
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libvalidations.sh

    if is_empty_value "$MONGODB_ADVERTISED_PORT_NUMBER"; then
      export MONGODB_ADVERTISED_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    fi

    info "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    info "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"

    # Check for existing replica set in case there is no data in the PVC
    # This is for cases where the PVC is lost or for MongoDB caches without
    # persistence
    current_primary=""
    if is_dir_empty "${MONGODB_DATA_DIR}/db"; then
      info "Data dir empty, checking if the replica set already exists"
      current_primary=$(mongosh admin --host "mongo-mongodb-0.mongo-mongodb-headless.default.svc.cluster.local:27017,mongo-mongodb-1.mongo-mongodb-headless.default.svc.cluster.local:27017" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand("ismaster")' | awk -F\' '/primary/ {print $2}')

      if ! is_empty_value "$current_primary"; then
        info "Detected existing primary: ${current_primary}"
      fi
    fi

    if ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" == "$current_primary" ]]; then
        info "Advertised name matches current primary, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    elif ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" != "$current_primary" ]]; then
        info "Current primary is different from this node. Configuring the node as replica of ${current_primary}"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_HOST="${current_primary%:*}"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="${current_primary#*:}"
        export MONGODB_SET_SECONDARY_OK="yes"
    elif [[ "$MY_POD_NAME" = "mongo-mongodb-0" ]]; then
        info "Pod name matches initial primary pod name, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    else
        info "Pod name doesn't match initial primary pod name, configuring node as a secondary"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    fi

    if [[ "$MONGODB_REPLICA_SET_MODE" == "secondary" ]]; then
        export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
        export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
        export MONGODB_ROOT_PASSWORD=""
        export MONGODB_EXTRA_USERNAMES=""
        export MONGODB_EXTRA_DATABASES=""
        export MONGODB_EXTRA_PASSWORDS=""
        export MONGODB_ROOT_PASSWORD_FILE=""
        export MONGODB_EXTRA_USERNAMES_FILE=""
        export MONGODB_EXTRA_DATABASES_FILE=""
        export MONGODB_EXTRA_PASSWORDS_FILE=""
    fi

    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
  setup-hidden.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh

    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    echo "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"
    echo "Configuring node as a hidden node"
    export MONGODB_REPLICA_SET_MODE="hidden"
    export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    export MONGODB_ROOT_PASSWORD=""
    export MONGODB_EXTRA_USERNAMES=""
    export MONGODB_EXTRA_DATABASES=""
    export MONGODB_EXTRA_PASSWORDS=""
    export MONGODB_ROOT_PASSWORD_FILE=""
    export MONGODB_EXTRA_USERNAMES_FILE=""
    export MONGODB_EXTRA_DATABASES_FILE=""
    export MONGODB_EXTRA_PASSWORDS_FILE=""
    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
---
# Source: k10app/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.4
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: k10app/templates/2_catalog.yaml
apiVersion: v1
data:
  MONGODB_HOST: mongo-mongodb-0.mongo-mongodb-headless.default.svc.cluster.local
  MONGODB_USER: root
  ROUTE_PREFIX: /catalog
kind: ConfigMap
metadata:
  name: catalog-configuration
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: k10app/templates/2_catalogdefaultdata.yaml
apiVersion: v1
data:
  catalog.json: |-
    [
      {
        "name": "Grey Mug",
        "description": "This is a grey mug. Keeps you drinking coffee all day",
        "price": 3,
        "imgurl": "/static/static-mug-export-plain.svg",
        "stock": 3261
      },
      {
        "name": "Orange Mug",
        "description": "This is a orange mug. Keeps you drinking coffee all day",
        "price": 3,
        "imgurl": "/static/static-mug-export-orange.svg",
        "stock": 9667
      },
      {
        "name": "Yellow Mug",
        "description": "This is a yellow mug. Keeps you drinking coffee all day",
        "price": 3,
        "imgurl": "/static/static-mug-export-yellow.svg",
        "stock": 5821
      },
      {
        "name": "Purple Mug",
        "description": "This is a purple mug. Keeps you drinking coffee all day",
        "price": 3,
        "imgurl": "/static/static-mug-export-purple.svg",
        "stock": 7160
      },
      {
        "name": "Bordeaux Mug",
        "description": "This is a bordeaux mug. Keeps you drinking coffee all day",
        "price": 3,
        "imgurl": "/static/static-mug-export-bordeaux.svg",
        "stock": 8183
      },
      {
        "name": "Turquoise Mug",
        "description": "This is a turquoise mug. Keeps you drinking coffee all day",
        "price": 3,
        "imgurl": "/static/static-mug-export-turquoise.svg",
        "stock": 7389
      },
      {
        "name": "Darkpurple Mug",
        "description": "This is a darkpurple mug. Keeps you drinking coffee all day",
        "price": 3,
        "imgurl": "/static/static-mug-export-darkpurple.svg",
        "stock": 2309
      },
      {
        "name": "Grey Sticker",
        "description": "This is a grey sticker. Stick it everywhere!",
        "price": 1,
        "imgurl": "/static/static-sticker-export-plain.svg",
        "stock": 8518
      },
      {
        "name": "Orange Sticker",
        "description": "This is a orange sticker. Stick it everywhere!",
        "price": 1,
        "imgurl": "/static/static-sticker-export-orange.svg",
        "stock": 9006
      },
      {
        "name": "Yellow Sticker",
        "description": "This is a yellow sticker. Stick it everywhere!",
        "price": 1,
        "imgurl": "/static/static-sticker-export-yellow.svg",
        "stock": 4968
      },
      {
        "name": "Purple Sticker",
        "description": "This is a purple sticker. Stick it everywhere!",
        "price": 1,
        "imgurl": "/static/static-sticker-export-purple.svg",
        "stock": 8265
      },
      {
        "name": "Bordeaux Sticker",
        "description": "This is a bordeaux sticker. Stick it everywhere!",
        "price": 1,
        "imgurl": "/static/static-sticker-export-bordeaux.svg",
        "stock": 4481
      },
      {
        "name": "Turquoise Sticker",
        "description": "This is a turquoise sticker. Stick it everywhere!",
        "price": 1,
        "imgurl": "/static/static-sticker-export-turquoise.svg",
        "stock": 7106
      },
      {
        "name": "Darkpurple Sticker",
        "description": "This is a darkpurple sticker. Stick it everywhere!",
        "price": 1,
        "imgurl": "/static/static-sticker-export-darkpurple.svg",
        "stock": 2516
      },
      {
        "name": "Grey Shirt",
        "description": "This is a grey shirt. Wear it any time!",
        "price": 10,
        "imgurl": "/static/static-tshirt-export-plain.svg",
        "stock": 9809
      },
      {
        "name": "Orange Shirt",
        "description": "This is a orange shirt.  Wear it any time!",
        "price": 10,
        "imgurl": "/static/static-tshirt-export-orange.svg",
        "stock": 2083
      },
      {
        "name": "Yellow Shirt",
        "description": "This is a yellow shirt.  Wear it any time!",
        "price": 10,
        "imgurl": "/static/static-tshirt-export-yellow.svg",
        "stock": 6350
      },
      {
        "name": "Purple Shirt",
        "description": "This is a purple shirt.  Wear it any time!",
        "price": 10,
        "imgurl": "/static/static-tshirt-export-purple.svg",
        "stock": 9110
      },
      {
        "name": "Bordeaux Shirt",
        "description": "This is a bordeaux shirt.  Wear it any time!",
        "price": 10,
        "imgurl": "/static/static-tshirt-export-bordeaux.svg",
        "stock": 7535
      },
      {
        "name": "Turquoise Shirt",
        "description": "This is a turquoise shirt.  Wear it any time!",
        "price": 10,
        "imgurl": "/static/static-tshirt-export-turquoise.svg",
        "stock": 3481
      },
      {
        "name": "Darkpurple Shirt",
        "description": "This is a darkpurple shirt.  Wear it any time!",
        "price": 10,
        "imgurl": "/static/static-tshirt-export-darkpurple.svg",
        "stock": 9215
      }
    ]
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: catalog-init
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: k10app/templates/3_user.yaml
apiVersion: v1
data:
  MARIADB_HOST: mysql.default.svc.cluster.local
  MARIADB_USER: root
  MARIADB_DATABASE: userdb
  ROUTE_PREFIX: /user
kind: ConfigMap
metadata:
  name: basicuserservice-configuration
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: k10app/templates/4_order.yaml
apiVersion: v1
data:
  POSTGRES_HOST: postgres-postgresql.default.svc.cluster.local
  POSTGRES_PORT: "5432"
  POSTGRES_DATABASE: postgres
  POSTGRES_USER: postgres
  CATALOG_SERVER: catalog.default.svc.cluster.local
  CATALOG_PORT: "80"
  ROUTE_PREFIX: /order
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: order-configuration
---
# Source: k10app/templates/5_nginx.yaml
apiVersion: v1
data:
  default.conf: |
    server {
      listen 80;
      listen [::]:80;
      server_name localhost;

      location / {
        proxy_pass http://frontend;
      }

      location /catalog {
        proxy_pass http://catalog/catalog;
      }
      location /user {
        proxy_pass http://basicuserservice/user;
      }
      location /order {
        proxy_pass http://order/order;
      }

      location /static {
        proxy_pass http://static/static/;
      }

      error_page 500 502 503 504 /50x.html;
      location = /50x.html {
        root /usr/share/nginx/html;
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: nginx-config
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: k10app/templates/6_frontend.yaml
apiVersion: v1
data:
  CATALOG_URL: ""
  USERS_URL: ""
  ORDERS_URL: ""
  ROUTE_PREFIX: ""
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: frontend-configuration
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: k10app/charts/mongodb/templates/arbiter/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongo-mongodb-arbiter-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/component: arbiter
---
# Source: k10app/charts/mongodb/templates/replicaset/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongo-mongodb-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/component: mongodb
---
# Source: k10app/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.4
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/component: primary
---
# Source: k10app/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.4
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/component: primary
---
# Source: k10app/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.3
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/component: primary
---
# Source: k10app/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.3
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/component: primary
---
# Source: k10app/templates/2_catalog.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: catalog
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: catalog
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: catalog
  type: ClusterIP
---
# Source: k10app/templates/3_user.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: basicuserservice
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: basicuserservice 
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: basicuserservice 
  type: ClusterIP
---
# Source: k10app/templates/4_order.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: order
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: order 
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: order 
  type: ClusterIP
---
# Source: k10app/templates/5_nginx.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: router
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name:  router
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: router
  type: ClusterIP
---
# Source: k10app/templates/6_frontend.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: frontend
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name:  frontend
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: frontend
  type: ClusterIP
---
# Source: k10app/templates/7_static.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: static
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm     
  name:  static
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: static
  type: ClusterIP
---
# Source: k10app/templates/2_catalog.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: catalog
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalog
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: catalog
        helm.sh/chart: k10app-0.2.1
        app.kubernetes.io/name: k10app
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/version: "0.0.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      initContainers:
      - name: port-check
        image: alpine
        command: ['sh', '-c','CNT=20;while [ $CNT -gt 0 ]; do echo -n "Try $CNT : "; nc -z mongo-mongodb-0.mongo-mongodb-headless.default.svc.cluster.local 27017 && break;CNT=$(($CNT-1)); echo "no connection, sleeping 5s"; sleep 5;done']
      containers:
      - image: ghcr.io/k10app/catalog
        name: catalog
        envFrom:
        - configMapRef:
            name: catalog-configuration
        env:
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-root-password
              name: mongo-mongodb
        volumeMounts:
        - name: catalog-init
          mountPath: /catalog/init
      volumes:
      - name: catalog-init
        configMap:
          name: catalog-init
---
# Source: k10app/templates/3_user.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: basicuserservice
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: basicuserservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: basicuserservice
  strategy: {}
  template:
    metadata:
      labels:
        helm.sh/chart: k10app-0.2.1
        app.kubernetes.io/name: k10app
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/version: "0.0.1"
        app.kubernetes.io/managed-by: Helm
        app: basicuserservice
    spec:
      initContainers:
      - name: port-check
        image: alpine
        command: ['sh', '-c','CNT=20;while [ $CNT -gt 0 ]; do echo -n "Try $CNT : "; nc -z mysql.default.svc.cluster.local 3306 && break;CNT=$(($CNT-1)); echo "no connection, sleeping 5s"; sleep 5;done']
      containers:
      - image: ghcr.io/k10app/basicuserservice 
        name: basicuserservice
        envFrom:
        - configMapRef:
            name: basicuserservice-configuration
        env:
        - name: MARIADB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-root-password
              name: mysql
        volumeMounts:
        - mountPath: /basicuserservice/certificates
          name: buskeys      
      volumes:
      - name: buskeys
        secret:
          secretName: buskeys
---
# Source: k10app/templates/4_order.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: order
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: order
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order
  strategy: {}
  template:
    metadata:
      labels:
        helm.sh/chart: k10app-0.2.1
        app.kubernetes.io/name: k10app
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/version: "0.0.1"
        app.kubernetes.io/managed-by: Helm
        app: order
    spec:
      initContainers:
      - name: port-check
        image: alpine
        command: ['sh', '-c','CNT=20;while [ $CNT -gt 0 ]; do echo -n "Try $CNT : "; nc -z postgres-postgresql.default.svc.cluster.local 5432 && break;CNT=$(($CNT-1)); echo "no connection, sleeping 5s"; sleep 5;done']    
      containers:
      - image: ghcr.io/k10app/order 
        name: order
        envFrom:
        - configMapRef:
            name: order-configuration
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: postgres-postgresql
        volumeMounts:
        - mountPath: /order/certificates
          name: buskeys      
      volumes:
      - name: buskeys
        secret:
          secretName: buskeys
---
# Source: k10app/templates/5_nginx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: router
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: router
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        helm.sh/chart: k10app-0.2.1
        app.kubernetes.io/name: k10app
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/version: "0.0.1"
        app.kubernetes.io/managed-by: Helm
        app: router
    spec:
      containers:
      - image: nginx
        name: nginx
        resources: {}
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/
          name: nginxconf
      volumes:
      - name: nginxconf
        configMap:
          name: nginx-config
status: {}
---
# Source: k10app/templates/6_frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: frontend
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: frontend
        helm.sh/chart: k10app-0.2.1
        app.kubernetes.io/name: k10app
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/version: "0.0.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - image: ghcr.io/k10app/frontend
        name: frontend
        resources: {}
        envFrom:
        - configMapRef:
            name: frontend-configuration
status: {}
---
# Source: k10app/templates/7_static.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: static
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm     
  name: static
spec:
  replicas: 1
  selector:
    matchLabels:
      app: static
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: static
        helm.sh/chart: k10app-0.2.1
        app.kubernetes.io/name: k10app
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/version: "0.0.1"
        app.kubernetes.io/managed-by: Helm        
    spec:
      containers:
      - image: ghcr.io/k10app/staticcache
        name: static
status: {}
---
# Source: k10app/charts/mongodb/templates/arbiter/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-mongodb-arbiter
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  serviceName: mongo-mongodb-arbiter-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongo
      app.kubernetes.io/instance: my-k10app
      app.kubernetes.io/component: arbiter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongo
        helm.sh/chart: mongodb-13.6.0
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: arbiter
    spec:
      
      serviceAccountName: mongo-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongo
                    app.kubernetes.io/instance: my-k10app
                    app.kubernetes.io/component: arbiter
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      initContainers:
      containers:
        - name: mongodb-arbiter
          image: docker.io/bitnami/mongodb:6.0.3-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "mongo-mongodb-arbiter-headless"
            - name: MONGODB_REPLICA_SET_MODE
              value: "arbiter"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: mongo-mongodb-0.mongo-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_INITIAL_PRIMARY_ROOT_USER
              value: "root"
            - name: MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-mongodb
                  key: mongodb-root-password
            - name: MONGODB_REPLICA_SET_KEY
              valueFrom:
                secretKeyRef:
                  name: mongo-mongodb
                  key: mongodb-replica-set-key
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          resources:
            limits: {}
            requests: {}
---
# Source: k10app/charts/mongodb/templates/replicaset/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongo
    helm.sh/chart: mongodb-13.6.0
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  serviceName: mongo-mongodb-headless
  podManagementPolicy: OrderedReady
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongo
      app.kubernetes.io/instance: my-k10app
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongo
        helm.sh/chart: mongodb-13.6.0
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: mongo-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongo
                    app.kubernetes.io/instance: my-k10app
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.3-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: K8S_SERVICE_NAME
              value: "mongo-mongodb-headless"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: mongo-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-mongodb
                  key: mongodb-root-password
            - name: MONGODB_REPLICA_SET_KEY
              valueFrom:
                secretKeyRef:
                  name: mongo-mongodb
                  key: mongodb-replica-set-key
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            
      volumes:
        - name: common-scripts
          configMap:
            name: mongo-mongodb-common-scripts
            defaultMode: 0550
        - name: scripts
          configMap:
            name: mongo-mongodb-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: k10app/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.4
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: my-k10app
      app.kubernetes.io/component: primary
  serviceName: mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 08c125185f1b91d1725b5533708d0975f65dbd6286092ab837c6447d0f774ce6
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-9.4.4
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: my-k10app
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.31-debian-11-r10
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "userdb"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: my-k10app
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: k10app/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.3
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: postgres-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-k10app
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: postgres-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.3
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-k10app
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.1.0-debian-11-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: k10app/templates/1b_busserv.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: my-k10app-sa
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-10"
---
# Source: k10app/templates/1b_busserv.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: my-k10app-sa
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-10"
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
---
# Source: k10app/templates/1b_busserv.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-10"
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  creationTimestamp: null
  name: my-k10app-sa-my-k10app-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-k10app-sa
subjects:
- kind: ServiceAccount
  name: my-k10app-sa
---
# Source: k10app/templates/1b_busserv.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": pre-install
  creationTimestamp: null
  name: businit
  labels:
    helm.sh/chart: k10app-0.2.1
    app.kubernetes.io/name: k10app
    app.kubernetes.io/instance: my-k10app
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      creationTimestamp: null
      labels:
        helm.sh/chart: k10app-0.2.1
        app.kubernetes.io/name: k10app
        app.kubernetes.io/instance: my-k10app
        app.kubernetes.io/version: "0.0.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - image: ghcr.io/k10app/businit
        name: businit
        resources: {}
        env:
        - name: TARGET_NAMESPACE
          value: default
      restartPolicy: Never
      serviceAccountName: my-k10app-sa
