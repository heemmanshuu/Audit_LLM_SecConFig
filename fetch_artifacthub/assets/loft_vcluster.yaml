---
# Source: vcluster/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vc-my-vcluster
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
---
# Source: vcluster/templates/workload-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vc-workload-my-vcluster
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
---
# Source: vcluster/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "vc-config-my-vcluster"
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
type: Opaque
data:
  config.yaml: ""
---
# Source: vcluster/templates/coredns-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vc-coredns-my-vcluster
  namespace: default
data:
  coredns.yaml: |-
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: coredns
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    rules:
      - apiGroups:
          - ""
        resources:
          - endpoints
          - services
          - pods
          - namespaces
        verbs:
          - list
          - watch
      - apiGroups:
          - discovery.k8s.io
        resources:
          - endpointslices
        verbs:
          - list
          - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:coredns
    subjects:
      - kind: ServiceAccount
        name: coredns
        namespace: kube-system
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: coredns
      namespace: kube-system
    data:
      Corefile: |-
        .:1053 {
            errors
            health
            ready
            rewrite name regex .*\.nodes\.vcluster\.com kubernetes.default.svc.cluster.local
            kubernetes cluster.local in-addr.arpa ip6.arpa {
                pods insecure
                fallthrough in-addr.arpa ip6.arpa
            }
            hosts /etc/NodeHosts {
                ttl 60
                reload 15s
                fallthrough
            }
            prometheus :9153
            forward . /etc/resolv.conf
            cache 30
            loop
            loadbalance
        }
      
        import /etc/coredns/custom/*.server
      NodeHosts: ""
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: coredns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/name: "CoreDNS"
    spec:
      replicas: 1
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
      selector:
        matchLabels:
          k8s-app: kube-dns
      template:
        metadata:
          labels:
            k8s-app: kube-dns
        spec:
          priorityClassName: ""
          serviceAccountName: coredns
          nodeSelector:
            kubernetes.io/os: linux
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  k8s-app: kube-dns
              maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
          containers:
            - name: coredns
              image: {{.IMAGE}}
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: 1000m
                  memory: 170Mi
                requests:
                  cpu: 20m
                  memory: 64Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/coredns
                  readOnly: true
                - name: custom-config-volume
                  mountPath: /etc/coredns/custom
                  readOnly: true
              securityContext:
                runAsNonRoot: true
                runAsUser: {{.RUN_AS_USER}}
                runAsGroup: {{.RUN_AS_GROUP}}
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                    - NET_BIND_SERVICE
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /ready
                  port: 8181
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 2
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
          dnsPolicy: Default
          volumes:
            - name: config-volume
              configMap:
                name: coredns
                items:
                  - key: Corefile
                    path: Corefile
                  - key: NodeHosts
                    path: NodeHosts
            - name: custom-config-volume
              configMap:
                name: coredns-custom
                optional: true
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: kube-dns
      namespace: kube-system
      annotations:
        prometheus.io/port: "9153"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        kubernetes.io/name: "CoreDNS"
    spec:
      type: ClusterIP
      selector:
        k8s-app: kube-dns
      ports:
        - name: dns
          port: 53
          targetPort: 1053
          protocol: UDP
        - name: dns-tcp
          port: 53
          targetPort: 1053
          protocol: TCP
        - name: metrics
          port: 9153
          protocol: TCP
---
# Source: vcluster/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vc-my-vcluster
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets", "services", "pods", "pods/attach", "pods/portforward", "pods/exec", "persistentvolumeclaims"]
    verbs: ["create", "delete", "patch", "update", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/status", "pods/ephemeralcontainers"]
    verbs: ["patch", "update"]
  - apiGroups: ["apps"]
    resources: ["statefulsets", "replicasets", "deployments"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["endpoints", "events", "pods/log"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["create", "delete", "patch", "update"]
---
# Source: vcluster/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vc-my-vcluster
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
subjects:
  - kind: ServiceAccount
    name: vc-my-vcluster
    namespace: default
roleRef:
  kind: Role
  name: vc-my-vcluster
  apiGroup: rbac.authorization.k8s.io
---
# Source: vcluster/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-vcluster-headless
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
spec:
  publishNotReadyAddresses: true
  ports:
    - name: https
      port: 443
      targetPort: 8443
      protocol: TCP
  clusterIP: None
  selector:
    app: vcluster
    release: "my-vcluster"
---
# Source: vcluster/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-vcluster
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: https
      port: 443
      targetPort: 8443
      nodePort: 0
      protocol: TCP
    - name: kubelet
      port: 10250
      targetPort: 8443
      nodePort: 0
      protocol: TCP
  selector:
    app: vcluster
    release: my-vcluster
---
# Source: vcluster/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-vcluster
  namespace: default
  labels:
    app: vcluster
    chart: "vcluster-0.20.0"
    release: "my-vcluster"
    heritage: "Helm"
spec:
  selector:
    matchLabels:
      app: vcluster
      release: my-vcluster
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
  serviceName: my-vcluster-headless
  podManagementPolicy: Parallel
  
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 5Gi
  replicas: 1
  template:
    metadata:
      annotations:
        vClusterConfigHash: "d87f8085954d1a422bd9bcd0e0b97f940de07df6fad7ac758316d942a4b69bc4"
      labels:
        app: vcluster
        release: my-vcluster
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: vc-my-vcluster
      volumes:        
        - name: helm-cache
          emptyDir: {}
        - emptyDir: {}
          name: binaries
        - name: tmp
          emptyDir: {}
        - name: certs
          emptyDir: {}
        - name: vcluster-config
          secret:
            secretName: vc-config-my-vcluster
        - name: coredns
          configMap:
            name: vc-coredns-my-vcluster
        # - name: custom-config-volume
        #   configMap:
        #     name: coredns-custom
        #     optional: true
      initContainers:
        
        # this is needed because the k8s containers are distroless and thus we don't have any
        # way of copying the binaries otherwise
        - name: vcluster-copy
          image: "ghcr.io/loft-sh/vcluster-pro:0.20.0"
          volumeMounts:
            - mountPath: /binaries
              name: binaries
          command:
            - /bin/sh
          args:
            - -c
            - "cp /vcluster /binaries/vcluster"
          securityContext:
            {}
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 40m
              memory: 64Mi
        - name: kube-controller-manager
          image: "registry.k8s.io/kube-controller-manager:v1.30.2"
          volumeMounts:
            - mountPath: /binaries
              name: binaries
          command:
            - /binaries/vcluster
          args:
            - cp
            - /usr/local/bin/kube-controller-manager
            - /binaries/kube-controller-manager
          securityContext:
            {}
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 40m
              memory: 64Mi
        - name: kube-apiserver
          image: "registry.k8s.io/kube-apiserver:v1.30.2"
          volumeMounts:
            - mountPath: /binaries
              name: binaries
          command:
            - /binaries/vcluster
          args:
            - cp
            - /usr/local/bin/kube-apiserver
            - /binaries/kube-apiserver
          securityContext:
            {}
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 40m
              memory: 64Mi
      enableServiceLinks: true
      containers:
        - name: syncer
          image: "ghcr.io/loft-sh/vcluster-pro:0.20.0"
          imagePullPolicy: 
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
            failureThreshold: 60
            initialDelaySeconds: 60
            periodSeconds: 2
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8443
              scheme: HTTPS
            failureThreshold: 60
            periodSeconds: 2
          startupProbe:
            httpGet:
              path: /readyz
              port: 8443
              scheme: HTTPS
            failureThreshold: 300
            periodSeconds: 6
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 0
            runAsUser: 0
          resources:
            limits:
              ephemeral-storage: 8Gi
              memory: 2Gi
            requests:
              cpu: 200m
              ephemeral-storage: 400Mi
              memory: 256Mi
          env:
            - name: VCLUSTER_NAME
              value: "my-vcluster"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            
          volumeMounts:            
            - name: data
              mountPath: /data
            - name: binaries
              mountPath: /binaries
            - name: certs
              mountPath: /pki
            - name: helm-cache
              mountPath: /.cache/helm
            - name: vcluster-config
              mountPath: /var/vcluster
            - name: tmp
              mountPath: /tmp
            - name: coredns
              mountPath: /manifests/coredns
              readOnly: true
