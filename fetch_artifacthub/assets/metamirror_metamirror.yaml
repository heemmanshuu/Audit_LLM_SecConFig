---
# Source: metamirror/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-metamirror
  labels:
    helm.sh/chart: metamirror-v0.0.2
    app.kubernetes.io/name: metamirror
    app.kubernetes.io/instance: my-metamirror
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: metamirror/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-metamirror
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
# Source: metamirror/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-metamirror
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-metamirror
subjects:
- kind: ServiceAccount
  name: my-metamirror
  namespace: default
---
# Source: metamirror/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-metamirror
  labels:
    helm.sh/chart: metamirror-v0.0.2
    app.kubernetes.io/name: metamirror
    app.kubernetes.io/instance: my-metamirror
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metamirror
      app.kubernetes.io/instance: my-metamirror
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metamirror
        app.kubernetes.io/instance: my-metamirror
    spec:
      serviceAccountName: my-metamirror
      securityContext:
        {}
      containers:
        - command:
          - /manager
          args:
          - --leader-elect=false
          name: metamirror
          securityContext:
            {}
          env:
            - name: MM_ANNOTATIONS
              value: 
            - name: MM_LABELS
              value: 
          image: "neilharris123/metamirror:v0.0.2"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
          resources:
            {}
