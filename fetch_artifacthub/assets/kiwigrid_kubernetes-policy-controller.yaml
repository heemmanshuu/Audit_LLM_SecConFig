---
# Source: kubernetes-policy-controller/templates/webhookconfiguration.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-kubernetes-policy-controller-cert
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:

  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQRENDQWlTZ0F3SUJBZ0lSQU05ai9ERC9TREJFMVFSQndOaVJXN2t3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWIzQmhMV0ZrYldsemMybHZiaTFqWVRBZUZ3MHlOREE1TVRZd09ESTVORGhhRncwegpOREE1TVRRd09ESTVORGhhTURZeE5EQXlCZ05WQkFNVEsyMTVMV3QxWW1WeWJtVjBaWE10Y0c5c2FXTjVMV052CmJuUnliMnhzWlhJdVpHVm1ZWFZzZEM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRRElRcGJhV2hrb09LbDZxR0J4ZCtTeTRNM1Z4cjg4MzBxcGxSV2Zxc2ZHd2lGK0wwb3J3YjBKcElPYgovZ2JEOWtEdDVlUVNrOFZFQzEvSkF6Zm50TEFRRWwwcDBqZGtzdXhwS0NHa0FxdkRMLys3Rk5hOUxxMXpUd1RoClpZL1FZZ2lPYUJ5Q3pFcmFJZjdDRXZlOE1LQ0w2Rmczck82VFVGUVcrWGd6WW1xalJZdVFCMUM0LzR1enlzMm4KczI3ZVcvb25BRHN1M0x6M2Zac1E1MC93alVienJLU1RnUm8rTzY3U1Rpa25xdjRFblFPZmF3OHlXWm1iY1diTQo3aVVCRkU4TVRkK3dBYi9Jdm5mQ3VuTU1JL0U0YVBKM1puU3NYRjNjckZZeGRWN2c0bnNJWU5DRWtDWVFnL0hQClRZTlpIS3VXdnh5L2xXeDRXRzgxYmJ3T2hyRFRBZ01CQUFHallEQmVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVgpIU01FR0RBV2dCUTljYmR1WFZHbDNGYWxhekRBaElVRXFSRS9qVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBCmlxNHpNTWUxRHplMXovSXNKZng0d3BTZ0dZdGN1dWhhVk1FaHZqMkY3ZENJRmFFWW5Uc0JGOVZVSm54YXREU3YKLzUvTHoyQmJmbWcyZlpJUmI2bGdSajRKc0JTejNTYWdiR1I4dkZFN1orMHFBZ2Q4eG9TTDZDaUFUMit2a05FSApPR2xXUjdQRHB3RC9ONnZQb2tlTHk1aUFvbXFxYmVqSTFHUFA3TGFFK0o4Y1EzTkxrWlRWeDlhb0FKQVhhQ2tXCmwwdUoyd3BKckQ1VkNyeFdKOHY0Q0ZTQjExdWduekZ3OUNPaVBHeXMwNXd4ek1xRGNGK1lqMEhUV3JWdFhnMDYKV0tKNWcxQ1BpMkpPemxjQTdRSDE3S01UV0VRQ2RKMktnQjB3Nm5ZOWpwZWdvRUptVmdud01WYlpDYU02dXkzdQp1SnFsb2o2Ri93R25NOWJDNW1ldWFRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb0FJQkFBS0NBUUVBeUVLVzJsb1pLRGlwZXFoZ2NYZmtzdUROMWNhL1BOOUtxWlVWbjZySHhzSWhmaTlLCks4RzlDYVNEbS80R3cvWkE3ZVhrRXBQRlJBdGZ5UU0zNTdTd0VCSmRLZEkzWkxMc2FTZ2hwQUtyd3kvL3V4VFcKdlM2dGMwOEU0V1dQMEdJSWptZ2Nnc3hLMmlIK3doTDN2RENnaStoWU42enVrMUJVRnZsNE0ySnFvMFdMa0FkUQp1UCtMczhyTnA3TnUzbHY2SndBN0x0eTg5MzJiRU9kUDhJMUc4NnlrazRFYVBqdXUwazRwSjZyK0JKMERuMnNQCk1sbVptM0Ztek80bEFSUlBERTNmc0FHL3lMNTN3cnB6RENQeE9HanlkMlowckZ4ZDNLeFdNWFZlNE9KN0NHRFEKaEpBbUVJUHh6MDJEV1J5cmxyOGN2NVZzZUZodk5XMjhEb2F3MHdJREFRQUJBb0lCQUFKOWlZQzNwQjV5N2ZDZgpqV3Q3MFRWRVJHc0hLTE9xRnpTYXJRVXFTNGUyUEZKa1ppaTdKUTJzcFJKWWkxNytmZm8zWktteWVyNkk0YTBQClJDKzJlSVlLcEd2enVFcWhTdjFYeVd0UHVURVpOTFh2NFdmQzM5ZFNRVDVJVkF5RVc1VGh5SkQ3MTJaMUM4VUEKRldLYXZEUmhORStrNythWEZpU2UvNWFyLzZWK0gwWUNWUWwreXB4aVdBSUJMVGMrSUxJdENxZXh1dkdSUGRkVwoxRjBXcW04M0lybUREZ2JnQno2NTZXVVBRMzd2RDVoV2Y4d2t5VzRISUJIQnFRQlVoRzM0cGt3b2lyVEkvc2tpCnp4Y1FBaExjeHBmRWF4Smk1YjFyMjRQSzRqam5NTkxORFBNSFc0OTRuMU1pbkRHWUdpb080OW5mdFF2eWRwR2kKeU1kL3BVRUNnWUVBMkVpZXhsNkpEVEdlbWY1YjN5ajVFMGVZcEZzVDlXdlVJNWFqZlZmUGpsUE5DdHY5WjQ2NApiNE9kZHFoaGQwZlVwZE51Vko4Ykp5U0E3dDJKeWlIUzNyKzJpZ2dzeFZXZjB1NlBSTm9EVEFCREd4aXZBNy8rCmJZY0V2K2RLMFgzd3E3OFhnTGM0M1AvRUV1akkrM3dncTkyMmNIQ1FSWWJSUkRYdmFZaGVJN01DZ1lFQTdRaTEKekE2QWd5bzhhWlE5RzFzZzlUbnphK0NLc3dqdkVpYlFvekVUVHg3b3VuNjZ6K3Q5ampubzRwQ3JxeHk1d0UxZgpBTHZsRDBPUW9tQ09oWmdha0gvRUt2ODBncXZBM0JJcy9uM01HMTJUQWp1SVlBWFJ6azkvdHhFdjR6U2ovd2llCmc1cjhvdlJzRVR2NTU1cE16Um5EU0g3blZpc3FCM2p4ZUhGTExtRUNnWUJMZkNUMkJONStYVmdHVlBFSmxNcEIKZ1ZaejNsbTc2Uk5VREdvby8vR3ZzZTI1SVloeWtTd3J0MXJJcEFISVdLaU42NW54TE1xVVFiaENKYzNHWDBHeQpmbVNlRGpaWjlRVmYzK1RlMmR3V3RXeTJVMG9aMi9OWGxLMENzUjI2dWVLNmZtb2NnVlgyUThuUjg2N1pucnZrClgvQWhsQmUyUEZSakl4UFkyRUJLNHdKL09sVHFhRTBwVXg0UnYrbTdJQUJOSEF3bTIyVm12S2gyTFFGZ1ZzaTgKOTd1amlrR2x0NFU4WU1QZmkrSU9YUTIwcUo1aHdzeDZra2NPVU9keUsyNURHMHhWK2o3VHJWU1hJWkZYZ1Vsego4VWdWNVhiQkdPQlZ3Vy9PL2o0OGlxMXBybGx3cVBKN09aN3MrVkRKTHpYSnNLK21YekRidlZqaC92VEVkOTlwCm9RS0JnR0ZHRkxxSHQ2bGcvM1AySWNjS1A3UEhLQXlPZkx1aGJ0azJUaks1V2xUQzg2Q2FpTi9ndGcyTWYySFkKajEvbnc1U1Q4eVB6TG9rSnRRckFXRG5xd1d2MHAvbDIvcHpSZmlJZ0JNM0dJVFpKR3QvOEUwdWpIRW9kRzVsNworQnFTTWJHZmZOTzI4bmp3RGMrdHJhZytjSWZIbzk1SC9xR0lFQkQ4L2cwZHJnaXYKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: kubernetes-policy-controller/templates/matches-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-kubernetes-policy-controller-kubernetes-matches
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
data:
  matches.rego: |-
    package k8s
    import data.kubernetes

    matches[[kind, namespace, name, resource]] {
      resource := kubernetes[kind][namespace][name].object
    }

    matches[[kind, namespace, name, resource]] {
        resource := kubernetes[kind][namespace][name]
    }
---
# Source: kubernetes-policy-controller/templates/policymatches-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-kubernetes-policy-controller-kubernetes-policymatches
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
data:
  matches.rego: |-
    package k8s
    import data.kubernetes.policies

    # Matches provides an abstraction to find policies that match the (name). 
    policymatches[[name, policy]] {
        policy := policies[name]
    }
---
# Source: kubernetes-policy-controller/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-kubernetes-policy-controller-opa-viewer
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:default
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubernetes-policy-controller/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: my-kubernetes-policy-controller-configmap-modifier
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["update", "patch"]
---
# Source: kubernetes-policy-controller/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: my-kubernetes-policy-controller-configmap-modifier
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  name: my-kubernetes-policy-controller-configmap-modifier
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:default
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubernetes-policy-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kubernetes-policy-controller
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:  
  - name: https
    protocol: TCP
    port: 443
    targetPort: 443
  selector:
    app.kubernetes.io/name: kubernetes-policy-controller
    app.kubernetes.io/instance: my-kubernetes-policy-controller
---
# Source: kubernetes-policy-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-kubernetes-policy-controller
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernetes-policy-controller
      app.kubernetes.io/instance: my-kubernetes-policy-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubernetes-policy-controller
        app.kubernetes.io/instance: my-kubernetes-policy-controller
      annotations:
        checksum/config: 5ebb0a6bb923af389fee05aeb6118f62ff18e40df1d2ed3a86f4b0deea460b48
    spec:
      containers:
        # WARNING: OPA is NOT running with an authorization policy configured. This
        # means that clients can read and write policies in OPA. If you are
        # deploying OPA in an insecure environment, be sure to configure
        # authentication and authorization on the daemon. See the Security page for
        # details: https://www.openpolicyagent.org/docs/security.html.
        - name: opa
          image: "openpolicyagent/opa:0.10.1"
          imagePullPolicy: IfNotPresent
          args:
            - "run"
            - "--server"
            - "--addr=http://127.0.0.1:8181"
        - name: kube-mgmt
          image: "openpolicyagent/kube-mgmt:0.6"
          imagePullPolicy: IfNotPresent
          args:
            - "--replicate-cluster=v1/namespaces"
            - "--replicate=extensions/v1beta1/ingresses"
            - "--replicate=v1/pods"
        - name: kubernetes-policy-controller          
          image: "nikhilbh/kubernetes-policy-controller:1.2"
          imagePullPolicy: IfNotPresent
          args:
            - "--addr=0.0.0.0:443"
            - "--addr=http://127.0.0.1:7925"
          volumeMounts:
            - readOnly: true
              mountPath: /certs
              name: opa-server
          resources:
            {}
      volumes:
        - name: opa-server
          secret:
            secretName: my-kubernetes-policy-controller-cert
---
# Source: kubernetes-policy-controller/templates/webhookconfiguration.yaml
# this file contains 2 resources because both need the generated cert
# please don't split the resources
kind: MutatingWebhookConfiguration
apiVersion: admissionregistration.k8s.io/v1beta1
metadata:
  name: my-kubernetes-policy-controller  
  labels:
    app.kubernetes.io/name: kubernetes-policy-controller
    helm.sh/chart: kubernetes-policy-controller-0.1.2
    app.kubernetes.io/instance: my-kubernetes-policy-controller
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: mutating.webhook.kubernetes-policy-controller
    failurePolicy: Ignore
    namespaceSelector:
      matchLabels:
        opa-mutation: enabled
    rules:
      - apiGroups:
        - '*'
        apiVersions:
        - '*'
        operations:
        - CREATE
        - UPDATE
        resources:
        - '*'
    clientConfig:

      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRR2xlVnlpbXNTZFFYTkpXeUdKT2YrREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCdmNHRXRZV1J0YVhOemFXOXVMV05oTUI0WERUSTBNRGt4TmpBNE1qazBPRm9YRFRNMApNRGt4TkRBNE1qazBPRm93R3pFWk1CY0dBMVVFQXhNUWIzQmhMV0ZrYldsemMybHZiaTFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwwSkxTZXZNajg3N3VXT3plT0NaR1MrMDZpUFdEZTcKc0hsODVWWW50L0x3bEhLOFU4aWZCcDFmNm9IN1RjUTJJS2pXa3crS2pXeHlBdzdSMHBBdDA4enU0SzRiUjUwdwpHbGF6VmM4ckhGUnU5NGh2Rm0zdDFocUV6c1ZnTnNpUC9TNHZIUVcwYmFqWFJIditzOXNSRXBjZ0ZHbjI3OG9UCjU3aVMxRGF3MmRFQXp0Q2RyNExjeHBhdlhxaTU3Sm1udk04OGFYcDB6S1kwaVhxUUE5RUtKVkZnY1lGTUVSMDYKSmwwYXpKYmZ6TmxMTVgvNy9BU21CWk9IQzVsN0RlR0lQZHluTUJYR3VoZ3hCY3U5cjRCMWhBZ21GMHlBem9xMgpVSjIxRmpCdEQ4Q0xESVNQRldYcStvQ3RGMWFnNFRFRWkzVTdLWXYwb21RRmhvTEVHeS9nN2VzQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJROWNiZHVYVkdsM0ZhbGF6REFoSVVFcVJFLwpqVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBcWVRM2t1QlFPYXRFbkM1em5tZ05MMW5zQ3A5N2FQYlJwRDBSCjBwUVpOdXB6ME1mSmdHMEJuc1EvN1Z5emZ2Yk9BUlVnbGRDQUd0bFZyaXZDUy9EWmRRUXg0cFAwam5Wb25mcFgKbmxLWUh0cUMzRHVpZ2ZrZDV3MDBGam05TjFsRENrN2xMU1FBeW9HTU5mbzlZM0E2cFQvRVgrUmVOQVZ1bUNMNQoxc25GZTBLb2pxcGRVUnFvNzQ3NFh0MlJGVkEwQmNuUHdxOHlROFYwTHdkeVNuRWdsUlBRa3dmeVRrYWRVUGtjCkdjN0hyWWl0ZHZMbjVpcHRHcUpLQ0VwY254aGJCdm5vbjFDN201Z0V5Z0l0WFo4UUljOHNiUkFJdEFqL3I1V2kKRkJmVHYxbHArR3VWREpXNlRJZ1pFc3I4ZHB4T2RVTGdjbU5RWHNXRFhKMzRZRkhPcnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==

      service:
        name: my-kubernetes-policy-controller
        namespace: default
        path: "/v1/admit"
