---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/charts/kibana/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-amorphie-kibana
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kibana
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: kibana-10.11.2
    app.kubernetes.io/component: server
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-amorphie
      app.kubernetes.io/name: kibana
      app.kubernetes.io/component: server
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5601
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/templates/master/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-amorphie-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.19.4
    app.kubernetes.io/component: master
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-amorphie
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9200
        - port: 9300
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/charts/kibana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-amorphie-kibana
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kibana
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: kibana-10.11.2
automountServiceAccountToken: false
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-amorphie-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.19.4
    app.kubernetes.io/component: master
automountServiceAccountToken: false
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe-gateway/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zeebe-gateway-sa
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-gateway
automountServiceAccountToken: false
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zeebe-sa
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-broker
automountServiceAccountToken: false
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr-dashboard/templates/dapr_dashboard_serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dapr-dashboard
  labels:
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: dapr-dashboard
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 0.14.0
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/injector.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dapr-injector
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/operator.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dapr-operator
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/placement.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dapr-placement
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/sentry.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dapr-sentry
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-amorphie-hazelcast
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
---
# Source: amorphie/charts/amorphie-third-party/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-amorphie-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.1.0"
  annotations:
automountServiceAccountToken: true
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/injector-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-amorphie-vault-agent-injector
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-amorphie-vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
---
# Source: amorphie/charts/amorphie-third-party/templates/vault-initializer/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-amorphie-vault-initializer-sa
  namespace: default
  labels:
    helm.sh/chart: amorphie-third-party-0.1.0
    app.kubernetes.io/name: amorphie-third-party
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: vault-initializer
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_operator/templates/dapr_operator_deployment.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dapr-webhook-cert
  labels:
    app: dapr-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwRENDQW95Z0F3SUJBZ0lSQU9JY2l2dWtKaTE0dE5nSS9qaWpwcll3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUFpHRndjaTEzWldKb2IyOXJMV05oTUI0WERUSTBNRGt4TmpBNU1UQTFOMW9YRFRNMApNRGt4TkRBNU1UQTFOMW93RnpFVk1CTUdBMVVFQXhNTVpHRndjaTEzWldKb2IyOXJNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF5dHhnRXhNTWpTTkJ1ckdoa2w0RmNNcFBCdmVoMkJhQ3N1M2cKaS85Z2dhTTN0S1l1Y0czdVJxMDVlMm9SWXMrdnpuV2ZDZUt0V1ExTDVxdWNKbUU5TzJ1MnVJNVBmRmNNQ1VBVApySTR4N1Yzd2J2ZDhjWlRna1p2S2pla3RWMXBJZ3dHN2V0SmYrTkZ3N1RXSGRHa1Z4UTNyS2FnM1FSZ3ZoZVh6Cm5hVTN5eUU4OThsOWJQeFI2UExRNzY2dzd0dXBLcElHYW5Nb3A2NVBRQnlQb3pEUzlOLytvUmxYK1ZTQitIdXEKN0N5VFc2bkkwTHhqY0xaUnBlaGt6WnZnTjQ5NGRZUzFBbWpMUGRjalh3RkpjT28zR1BQd2toWDc1M3FKNVVxWApTUFR4a3JzT3N0U1VKcnJWZ3VRY3VTNWF0OUNMd25Oa1B0MFkzR09YekloSnFwNC9SUUlEQVFBQm80SG5NSUhrCk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlJrYVd2VFB2MERqckZVTVMzcnl3Q3VKU2ZFbURDQgpnd1lEVlIwUkJId3dlb0lVWkdGd2NpMTNaV0pvYjI5ckxtUmxabUYxYkhTQ0dHUmhjSEl0ZDJWaWFHOXZheTVrClpXWmhkV3gwTG5OMlk0SWdaR0Z3Y2kxM1pXSm9iMjlyTG1SbFptRjFiSFF1YzNaakxtTnNkWE4wWlhLQ0ptUmgKY0hJdGQyVmlhRzl2YXk1a1pXWmhkV3gwTG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQk5yMUVmM3lkQk8vQmtEK2plaWFuWVMzRk1acDVXV3hNRXJ0QnJoMTJ6MXBCcC9Tck5TTnpuClE0Z05idXdlZlIxUHRGYUZLeHZwN1VPVFNPZS96T1dSR3gzSlJORndYQ0dGWE9JUSttVmlvaEVjWFh3NVpzelYKUWJzR29KMUQ4cnMyTlYvQmViNUFGeVF3NWNQdFRYSFBObmQ2bFRsOFphdklsWnBNQS83ZEo2bzVLMVdvWVdDVApud3ltbSsvMms5TDhFRlFrM0hTTGJXMWtpMVYyVjlZZEI4RmM3MDJTd0p2TVdmNmtlM1BGNThnZDJ0MXRVb2NHCjRPZno5YTJZaHF1ZWdVdnd5ay91dEVwZ0xNRDZ2WjkzQmZHM2NsMFdJSmtLalQ3M3NnUkRKUWtjanNZTXBHQTcKckpVSXQ3SDhnSk1FTHpJM0JVL09vWG1UYWdXZUFWK3EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  

  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeXR4Z0V4TU1qU05CdXJHaGtsNEZjTXBQQnZlaDJCYUNzdTNnaS85Z2dhTTN0S1l1CmNHM3VScTA1ZTJvUllzK3Z6bldmQ2VLdFdRMUw1cXVjSm1FOU8ydTJ1STVQZkZjTUNVQVRySTR4N1Yzd2J2ZDgKY1pUZ2tadktqZWt0VjFwSWd3RzdldEpmK05GdzdUV0hkR2tWeFEzckthZzNRUmd2aGVYem5hVTN5eUU4OThsOQpiUHhSNlBMUTc2Nnc3dHVwS3BJR2FuTW9wNjVQUUJ5UG96RFM5Ti8rb1JsWCtWU0IrSHVxN0N5VFc2bkkwTHhqCmNMWlJwZWhrelp2Z040OTRkWVMxQW1qTFBkY2pYd0ZKY09vM0dQUHdraFg3NTNxSjVVcVhTUFR4a3JzT3N0U1UKSnJyVmd1UWN1UzVhdDlDTHduTmtQdDBZM0dPWHpJaEpxcDQvUlFJREFRQUJBb0lCQVFDVVBLbHdCdEY3S1RKVQp6SXkydWtIYmc5cHZ5dkRYU012RkdKS25lcnY0djE1cmdhd1p1QnNRUm5Ea3dFTm9Jei9pN0l5RTJzRzFlMFBsCmthMlBWaXM2aXFHQkIyMEovVW5zVUlpUDVYQ1NkYnpHT2M4VDZLaVpmbkJyZHVNTkhBbzB3VVZRb1A1RWdqZTAKL3hLMmZEdk9QVGVFdjBseEpjMUVXUjdHS2Y4MVRRMEtMVDlFYjBTN2NEUmFMMCtIQ1d6d25qbCtLY2hjSW1ETQppdllLOTI5dWZDSHJ4ei9FRWIyWDFGRVA3aU53WDNra3Z3azZvQ3Ntd3k4OXEwbnlRSnIxdHB4a01VRkdCUjFoCmQ4WW4zelVHQXphalBKcFIwdm1hQnJMeEovZDBZSEJOeDdBb2FGTDdyckRTWWtPNmd3a0xGRVlWZjJYUWlSVFEKMWMrdFpTZFpBb0dCQU5nQUVlNGVWaUVCbXdDR3l5ZkpReW52RitrMWE4cmtleXdwRzBFbUo1OURYVU5rOEMwWQphdXdVUThSU3NGZXNsd1dzSTY1OVdtUHIyR3ZwbVBTOXRLNnpDQ0NVZCtKYlN2bHNHSnp4U0V2bGpjZ2RYKzZ5CkJuQjU1WjZZMjEwMFZDekk4Y3YyNmVCa1NZK2pQVkdIcTVGTFNMZzNZVHlmTUVLR1NEZUtlZlh2QW9HQkFQQnQKWjJQRGlHanVyQktDMlVqUTlaWEtXN1V6anFrQjQ0bE5uZXNhalR4WHpheWU0ekk4Mis5SVdqRjZxcnQrZWlDSApkTzh2N1lMdGdhbCtWZWdmRld3MTFnQUszaTUvdjVTMUxyN3BJQ3A4YUdPV0dvMEtjbHdWa3lid1M2ZGF2RUlzCis5SXV1U0ZSR1k4Nm1JTXVTbkZPMG1aRlJWYkswbFhxbExNSUtESUxBb0dBVU9abDBNdW44cURKVHo4dEkrK3IKcWk4VXc1SHdsNE5QNXRCV2x1WVZmUDhjRlR2ZkFPVGVWeUdYNkJZWVdoNFlTbFdZMzZldmpURXVVK3lnRHpwbQpTL0JlSU9XNnFSc01UN0wrM1BrNTNNTlRnUm9QYmpWYldCRXZ3V0Q2K0VPN0t6THY3VGJEamZuQjIzeUdZTnp4CmsyK2hBdTRyQ3l1TVJiNUptaFBSYmgwQ2dZQkRJS2l2U0JhOEJYZHhxNnJ6RTdTZDMrUC9FYWdSTS8vTmhDaEYKVGlLRTZKYjZUVnB0Mm1RbHlQTzF3T1FPZVYrcjJXWWlxaVVNV3pmS2xRVnpTOHAxYmdxVDlIVFlVcjZ3ekcyQwp6Q0E0L0lkQTF0WU83dzNDL0JzYjBoZXRZRDRUMCs5elhhdyt5eC94eDVCeGYrazAvYWJzK3daREYxbm10eHBSCmFrT2V4UUtCZ1FDdG1PTTI0cVBCRE92MGp4V00xazBsVkRRc05lRDc2dVRzbEtwcldpWVZrNW1TYU82SXZDRDUKdEhVSWttNFhIMW52NVFzd3BvUkUrTUtKcllURlAwMFVmU0t5WWxvT2xYeGNKOVVUVTNEZkRmbDllUlMyaXpwVQozQk5oZUN4cFRxV3pFaWJuODRzWHFad24za1FNd2tJQ1BpRHlaRGlwai90bEJQWVZac1FRNXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_operator/templates/dapr_operator_deployment.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dapr-webhook-ca
  labels:
    app: dapr-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
data:
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQUprd0NtUHh2cTM4MmRMTndVcDZXSUl3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUFpHRndjaTEzWldKb2IyOXJMV05oTUI0WERUSTBNRGt4TmpBNU1UQTFOMW9YRFRNMApNRGt4TkRBNU1UQTFOMW93R2pFWU1CWUdBMVVFQXhNUFpHRndjaTEzWldKb2IyOXJMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdklsWXMyQ3hXTlNjQVJqbWxVZGFZZktSMEhtZ0VuTE8KWk5UQXIzNnlOdjR2M1hiQVpRWjROYkExbVFpcGNVc1Y1Umt3SmMzNzZaY0wwOW5XQ0ZrZnd5L2J2bmxPV3J4YQpwZmtsM09wOHdlN1N1M3ZSNzBuTTFzWXhxVzBITHduQkJ5QXJBYU9ydVVTWEZuWEVCbGNwam9kT096UzVER2lkCjlONzcrcFp6cE03MTVGTDhoU1EydTVvQ0xFTlV6V3M0ODhZNStZcHVOUFF5M3lnNTdVU01PTnJMU1VtTXRJTDAKRDNXWW5WRnZXZDNJN1NCcVlzY1BPNXRrVUZKQVN5TEFsN0M2S2tJUE1INHIvdHE2eS82d3U4Q3RFcUlXMElTKwpyakxEU1ZCcjB1UXE1SWFIRFpORzFacmR5R1c5eDNkTzBxbEswUzd3bmN1Z0g3V1Z5cWJ0MHdJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkdScGE5TSsvUU9Pc1ZReExldkxBSzRsSjhTWQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVRk42UGNpOW5iUFRjTlBOTDJVZDl3VUJKbVBOL2pTNm5TM2tzClBxdnRLNXZvWXduTzVOSjIzWjRGTi90QWdHUVlqaHAxUmVBRks0VURJQ1lBb3FUNjl5VHZjM25hVCtaNUx0NTMKT2F1Vm5tR0I1MjNac2pCa0RETFZrL3RDZy82VWlIZVlOViszVzg2THhzNDFnVUZVM2FtWHVVM0xYL3RYUC9xZApNbU1PaWs0SG9VZGlLS1RRKy9FR0gzeVVPQTVIalBEVk5UMkZibXVDVXdWdXFyMVMxN3ZIZnVUb2sxWG5tcUpMCnRDK0k3M0VrRVdna3VxRUdjRHJ2YXovQlo5elNYTGNPYlNURTFhYlI3L2FuUCtOaXhwbURxTVF4TWNCbDArYTQKUHRHSjdkYzZyWGw4SmExdnBjakEvTmliZmcxSGVQZTFUenhybytkVzB2QVVCTit2Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_sentry/templates/dapr_sentry_deployment.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dapr-trust-bundle
  labels:
    app: dapr-sentry
    app.kubernetes.io/component: sentry
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
data:
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_sidecar_injector/templates/dapr_sidecar_injector_webhook_config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dapr-sidecar-injector-cert
  labels:
    app: dapr-sidecar-injector
    app.kubernetes.io/component: sidecar-injector
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQzVENDQXNXZ0F3SUJBZ0lRUWNzc01qSFJvdDZpTEhkVEY5TG9xVEFOQmdrcWhraUc5dzBCQVFzRkFEQWoKTVNFd0h3WURWUVFERXhoa1lYQnlMWE5wWkdWallYSXRhVzVxWldOMGIzSXRZMkV3SGhjTk1qUXdPVEUyTURreApNRFUzV2hjTk16UXdPVEUwTURreE1EVTNXakFnTVI0d0hBWURWUVFERXhWa1lYQnlMWE5wWkdWallYSXRhVzVxClpXTjBiM0l3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzRJRjA3VnZSYkI4a3AKeW90UThUa3NFeGdvNTg2WkxZNVZPTUNjYW5PWUtqakQ3aXMvYU5EVkhFODg5Y1FXS0xwUFlMQmRHekk4Vmc2SQpoMHdES01odGFBVkNTbDA5M0dWSnlOZ0g1VjJ0UFdUUGdSdXpJeGJvcmd3WlM5c081MVFxcG1Id0c4aUlSN0t2Ck9vbUpPc0JYRit6eHRDQ0huUStuYTdVZmNGQ010eTNuMitpei9vUEUydCtWVGNRTHo4YUN6VTUxaDd4QTE3Q2EKMENRQ2MxQytOc3FNejhRRmlkU292L0xDdU1ydGhIWHEzZlBiUFRQbk5Wc2RBQ0lCSlgrK0I5dHRFSVcyZkNheAoyUkJFVUVMOTV6aEZud1pzL2JTcjZ3Z0lZQ1pyL0w2NDUyZ1o4VU1KZGhNSlpEa2hmOW1qb2NOVUloWmZEUGoxCm5XYWhRYUxWQWdNQkFBR2pnZ0VPTUlJQkNqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVNHU1awpNWUx4RmZTNkdLRGhYeFN0WE1FREQ0RXdnYWtHQTFVZEVRU0JvVENCbm9JZFpHRndjaTF6YVdSbFkyRnlMV2x1CmFtVmpkRzl5TG1SbFptRjFiSFNDSVdSaGNISXRjMmxrWldOaGNpMXBibXBsWTNSdmNpNWtaV1poZFd4MExuTjIKWTRJcFpHRndjaTF6YVdSbFkyRnlMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTG1Oc2RYTjBaWEtDTDJSaApjSEl0YzJsa1pXTmhjaTFwYm1wbFkzUnZjaTVrWldaaGRXeDBMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFCUTN5SlB2RnpXZkJpYjBWVC9MZGxveEdPTFRJMXJ6a256YktrcjVXcXYKeDAwTUhCMzhoUlNydUlpUktWNVFBaDFvYThIZ1Z0Sk1BbkpiRGc4OHNyVENDdjZmV0R0TnEzQU5nNWpmYzg5ZQp4VW1LMzBxcHBuTWJFSUhKdmgvWS9mUmlhdytCQ0Z0eHJxKzZDNFRveUwxTzFBKzh5SlhHQ0xNa0JSYkxPYm90Ck15ekxIZnRPajREajZnSTg2WE9uRVNKK2RucDE4dkYzYU5iRjFQWDdhai9oQ2VxTXZYY0h4d1RPTzhTN1ZKQnAKWGI4d2dENkxuNU8wRk1oKysyUXZGSXRLbm9vTFRMODR1aTlkNkgvNFEyQXJoeHk0R01sczhVQXZSVUtmeGNvMAptWFhpcFdiNjQvT0J2RlJMQXVRRGFwc2RROXQzcWxld3EvY2xaeHpIdFZIbwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  

  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdUNCZE8xYjBXd2ZKS2NxTFVQRTVMQk1ZS09mT21TMk9WVGpBbkdwem1DbzR3KzRyClAyalExUnhQUFBYRUZpaTZUMkN3WFJzeVBGWU9pSWRNQXlqSWJXZ0ZRa3BkUGR4bFNjallCK1ZkclQxa3o0RWIKc3lNVzZLNE1HVXZiRHVkVUtxWmg4QnZJaUVleXJ6cUppVHJBVnhmczhiUWdoNTBQcDJ1MUgzQlFqTGN0NTl2bwpzLzZEeE5yZmxVM0VDOC9HZ3MxT2RZZThRTmV3bXRBa0FuTlF2amJLak0vRUJZblVxTC95d3JqSzdZUjE2dDN6CjJ6MHo1elZiSFFBaUFTVi92Z2ZiYlJDRnRud21zZGtRUkZCQy9lYzRSWjhHYlAyMHErc0lDR0FtYS95K3VPZG8KR2ZGRENYWVRDV1E1SVgvWm82SERWQ0lXWHd6NDlaMW1vVUdpMVFJREFRQUJBb0lCQVFDb0NnbHNWWUJ1NzUwYwpnZGhCaDlVWXIxaDJSSkJkWmFFbmo4TGhQWm0vZnBFTjUzZ2F4NnNIUTIzaGdaNXlacnNhSkhEd21CaHh6a3czCk45c2Nhd1Q0TEYzWVVRdmxvQlhraitMdzJkaHplYnRlVVVNWmF1WEdkc2xkOE1lOFEweWlHL1QzOERORWhNTEQKZnhYMFl1VVUxeVlNdE1xWFdiVG1vN3JLTlhPZDV5YjRpb3lsK2FkRUp0WFVtSHZ0S3RBaHpPRWxsUzBBZ0cyKworUkRuU1VyZWpNL1NodFVWM1RkQW8wUzczWXFwMnlqYjBsQjhMcHBaSWxueTlTbkVRUVBQb3hjK2sxVXlTN0hhCitHVHlqQ3lBWFd2TnNjS3p0aEtjL0JnMW4zbmZPRktNbjFXLzJ2ZHVra0IyNm4wTUJZNEcvcUM3UThiYUFSWWsKOFQ4TnhSRWxBb0dCQU5GMkEzNE5iZitnNWxBam1aeDVmTXdjMDJoSVJxeDA1UVdHMm5wZFBzQldoKzk5eTNoZgpKNjFVcmRBbUE0RURxWnAwb25qUkJVaGkvUDNhZVlFV3liTEorUU1LY295T2tzQ1dZaVVQVW9YUDViY0x0SXhzCkE4RURjNmxIUlNoazduc2hMLzcxdXZ0MVQzSnBBdENvU3JHOEZvMUU5cGZTRlBmZlB1MEd1RnhIQW9HQkFPRUoKVnNxZUxzVDF1WmpabnNCb25HVHNva2F4TVZFYXhQRS8wYkZkZnEvaHhGL3I3Zm5ubUMrTUFwblgrNWFCUzhCdgo0Mi9INzRnbVVLTDhpRG5yb3BCa0J2QzVQSHc3bDZGWGViVzBrOTZKY1dySThHQ1FtemF0S0pqeHRCNytuREwwCnVHWFlUTzdtZU92MTdxeXhUUHFlUGxISVFSUWhSWng4azh3UW9BSURBb0dBVU9WU1BmbXoxUGx3V2QwVjg1L2IKK2Z6Y0RUZDB6Q0F0WDNBUXF4ZWVKNnlEdlpRSTVFbGp5b2FjeG5vWCtsak94UTlzdkZxRnZzbzBTVnA2ZU1legpTSERHMGt6VHBzTmRuREc0WC9YRitsWXJzd0U3VHN4Y3VzdTVmTlJBdW5RWXdzY3pnVFdvYkh1SEhubStFNVliCm12ODRlb0Q2OS9HMEZYTk1HMER3TFBzQ2dZRUFtVTVLY1ZpWUZoZ3M2Mk4rRWloeU94TTJiaUJ5cjRVa0hCSlYKSVpiSElyMFVraUJoakRscFpTTGw5cmE4TDhrL3VRYkFrN3RLaEo5Tm1ldWVSbzh2dlZ4WG1oRW5rcDdxYXNEMApLb1N0cEJKUVVPWTVWQi9QamMwamRpWmJoaTRBYlhwb1VRR3RUNmQxUTVMVW1aTmtGT3hQR2xucGMvUkN2eHZqCmVFYnZLczhDZ1lFQXp2ZkhCM1VST3I2S3AyN1ExL2MrRDh5Z3Z1MDhQV1NiQTkvWjlLb2ZQQzZNa1pnOVdtaVYKZkN1djZ2V1pPWmFhbk5EQ3l6cWtuMEUzNnBsSGhIeHJ3RE1zSnFGVlc5YngvL1E1MC9Kdmt3cFU4T3VpOHR2MgpJbjd0cENtUEFvaE80RUp6YXh0c1luV3lVOG5LVXVPS1ozUW5RMXhnMEc5U1JDRm43SWFyQ0o0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: amorphie/charts/amorphie-third-party/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-amorphie-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.1.0"
type: Opaque
data:
  postgres-password: "YW1vcnBoaWU="
  password: "YW1vcnBoaWU="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/charts/kibana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-amorphie-kibana-conf
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kibana
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: kibana-10.11.2
data:
  kibana.yml: |
    pid.file: /opt/bitnami/kibana/tmp/kibana.pid
    server.host: "::"
    server.port: 5601
    elasticsearch.hosts: [http://my-amorphie-elasticsearch:9200]
    server.rewriteBasePath: false
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/camunda/configmap-release.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-amorphie-camunda-platform-release
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
  annotations:
    {}
data:
  info: |-
    - name: my-amorphie
      namespace: default
      version: 9.3.2
      components:
      
      - name: Zeebe Gateway
        id: zeebeGateway
        version: 8.4.5
        url: grpc://
        readiness: http://my-amorphie-zeebe-gateway.default:9600/actuator/health/readiness
        metrics: http://my-amorphie-zeebe-gateway.default:9600/actuator/prometheus
      - name: Zeebe
        id: zeebe
        version: 8.4.5
        readiness: http://my-amorphie-zeebe.default:9600/actuator/health/readiness
        metrics: http://my-amorphie-zeebe.default:9600/actuator/prometheus
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe-gateway/configmap.yaml
kind: ConfigMap
metadata:
  name: my-amorphie-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-gateway
apiVersion: v1
data:
  gateway-log4j2.xml: |
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe/configmap.yaml
kind: ConfigMap
metadata:
  name: my-amorphie-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-broker
apiVersion: v1
data:
  startup.sh: |
    #!/usr/bin/env bash
    set -eux -o pipefail
    export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-$[${K8S_NAME##*-} * 1 + 0]}

    if [ "$(ls -A /exporters/)" ]; then
      mkdir -p /usr/local/zeebe/exporters/
      cp -a /exporters/*.jar /usr/local/zeebe/exporters/
    else
      echo "No exporters available."
    fi
    exec /usr/local/zeebe/bin/broker

  broker-log4j2.xml: |
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-amorphie-hazelcast-configuration
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
data:
  hazelcast.yaml: |-
    hazelcast:
      jet:
        enabled: ${hz.jet.enabled}
      network:
        join:
          kubernetes:
            enabled: true
            namespace: ${namespace}
            service-name: ${serviceName}
        rest-api:
          enabled: true
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/mancenter-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-amorphie-hazelcast-mancenter-configuration
  labels:
    app.kubernetes.io/name: hazelcast-mancenter
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
data:
  hazelcast-client.yaml: |-
    hazelcast-client:
      network:
        kubernetes:
          enabled: true
          namespace: ${namespace}
          service-name: ${serviceName}
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/server-config-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-amorphie-vault-config
  namespace: default
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
data:
  extraconfig-from-values.hcl: |-
    disable_mlock = true
    ui = true
    
    listener "tcp" {
      tls_disable = 1
      address = "[::]:8200"
      cluster_address = "[::]:8201"
      # Enable unauthenticated metrics access (necessary for Prometheus Operator)
      #telemetry {
      #  unauthenticated_metrics_access = "true"
      #}
    }
    storage "file" {
      path = "/vault/data"
    }
    
    # Example configuration for using auto-unseal, using Google Cloud KMS. The
    # GKMS keys must already exist, and the cluster must have a service account
    # that is authorized to access GCP KMS.
    #seal "gcpckms" {
    #   project     = "vault-helm-dev"
    #   region      = "global"
    #   key_ring    = "vault-helm-unseal-kr"
    #   crypto_key  = "vault-helm-unseal-key"
    #}
    
    # Example configuration for enabling Prometheus metrics in your config.
    #telemetry {
    #  prometheus_retention_time = "30s"
    #  disable_hostname = true
    #}
---
# Source: amorphie/charts/amorphie-third-party/templates/simple-monitor/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-amorphie-amorphie-third-party-simple-monitor-config
  namespace: default
data:

  application.yaml: |    
    zeebe:
 
      client:
        broker.gatewayAddress: my-amorphie-zeebe-gateway:26500
        security.plaintext: true
 
        worker:
          hazelcast:
            connection: my-amorphie-hazelcast:5701
            clusterName: dev
            connectionTimeout: PT30S
 
    spring:
 
      datasource:
        url: jdbc:postgresql://my-amorphie-postgresql-hl.default.svc:5432/postgres
        username: amorphie
        password: amorphie
        driverClassName: org.postgresql.Driver
 
      jpa:
        database-platform: org.hibernate.dialect.PostgreSQLDialect
        hibernate:
          ddl-auto: update
 
      mustache:
        prefix: classpath:/templates/
        suffix: .html
        expose-request-attributes: true
 
      data:
        web:
          pageable:
            default-page-size: 100
 
    server:
      port: 8082
      servlet:
        context-path: /
 
    logging:
      level:
        root: ERROR
        io.zeebe: INFO
        io.zeebe.monitor: DEBUG
        com.hazelcast: WARN
 
    white-label:
      logo.path: img/logo.png
      custom:
        title: Zeebe Simple Monitor
        css.path: css/custom.css
        js.path: js/custom.js
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/charts/kibana/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-amorphie-kibana
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kibana
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: kibana-10.11.2
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr-dashboard/templates/dapr_dashboard_serviceaccount.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-dashboard
  labels:
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: dapr-dashboard
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 0.14.0
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "namespaces"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "components", "configurations", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["dapr.io"]
  resources: ["components", "configurations"]
  verbs: ["get", "list"]
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/injector.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-injector
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules:
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list"]
  - apiGroups: ["dapr.io"]
    resources: ["configurations", "components"]
    verbs: [ "get", "list"]
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/operator.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-operator-admin
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "deployments/finalizers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments/finalizers"]
    verbs: ["update"]
  - apiGroups: ["apps"]
    resources: ["statefulsets", "statefulsets/finalizers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete", "watch"]
  - apiGroups: [""]
    resources: ["services","services/finalizers"]
    verbs: ["get", "list", "watch", "update", "create"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["delete"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["dapr.io"]
    resources: ["components", "configurations", "subscriptions", "resiliencies", "httpendpoints"]
    verbs: [ "get", "list", "watch"]
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/placement.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-placement
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules: []
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/sentry.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-sentry
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules:
  - apiGroups: ["authentication.k8s.io"]
    resources: ["tokenreviews"]
    verbs: ["create"]
  - apiGroups: ["dapr.io"]
    resources: ["configurations"]
    verbs: ["list"]
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-amorphie-hazelcast-default
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - pods
  - nodes
  - services
  verbs:
  - get
  - list
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/injector-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-amorphie-vault-agent-injector-clusterrole
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs:
    - "get"
    - "list"
    - "watch"
    - "patch"
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr-dashboard/templates/dapr_dashboard_serviceaccount.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-dashboard
  labels:
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: dapr-dashboard
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 0.14.0
subjects:
- kind: ServiceAccount
  name: dapr-dashboard
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dapr-dashboard
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/injector.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-injector
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: dapr-injector
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dapr-injector
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/operator.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-operator-admin
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: dapr-operator
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dapr-operator-admin
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/placement.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-placement
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: dapr-placement
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dapr-placement
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/sentry.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-sentry
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: dapr-sentry
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dapr-sentry
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-amorphie-hazelcast-default
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-amorphie-hazelcast-default
subjects:
- kind: ServiceAccount
  name: my-amorphie-hazelcast
  namespace: default
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/injector-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-amorphie-vault-agent-injector-binding
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-amorphie-vault-agent-injector-clusterrole
subjects:
- kind: ServiceAccount
  name: my-amorphie-vault-agent-injector
  namespace: default
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/server-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-amorphie-vault-server-binding
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: my-amorphie-vault
  namespace: default
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/injector.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-injector
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
    resourceNames: ["dapr-trust-bundle"]
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/operator.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-operator
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules:
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "watch", "update", "create"]
    resourceNames: ["operator.dapr.io", "webhooks.dapr.io"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "update", "create"]
    resourceNames: ["operator.dapr.io", "webhooks.dapr.io"]
# We cannot use resourceNames for create because Kubernetes doesn't nessarily
# know resource names at authorization time.
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["configmaps", "events"]
    verbs: ["create"]
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/secret-reader.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: default
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/sentry.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-sentry
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "update"]
    resourceNames: ["dapr-trust-bundle"]
---
# Source: amorphie/charts/amorphie-third-party/templates/vault-initializer/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-initializer-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
  resourceNames: 
  - my-amorphie-vault-0
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
  resourceNames: 
  - my-amorphie-vault-0
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/injector.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-injector
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: dapr-injector
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dapr-injector
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/operator.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-operator
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: dapr-operator
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dapr-operator
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/secret-reader.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-secret-reader
  namespace: default
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: default
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_rbac/templates/sentry.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-sentry
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
subjects:
- kind: ServiceAccount
  name: dapr-sentry
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dapr-sentry
---
# Source: amorphie/charts/amorphie-third-party/templates/vault-initializer/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-initializer-role-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: my-amorphie-vault-initializer-sa
  namespace: default
roleRef:
  kind: Role
  name: vault-initializer-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/charts/kibana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-kibana
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kibana
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: kibana-10.11.2
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 5601
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/name: kibana
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-elasticsearch-master-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.19.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-elasticsearch
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.19.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe-gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-gateway
  annotations:
spec:
  type: ClusterIP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-gateway
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26500
      protocol: TCP
      name: gateway
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-amorphie-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-broker
  annotations:
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26502
      protocol: TCP
      name: internal
    - port: 26501
      protocol: TCP
      name: command
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-broker
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr-dashboard/templates/dapr_dashboard_service.yaml
kind: Service
apiVersion: v1
metadata:
  name: dapr-dashboard
  labels:
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: dapr-dashboard
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 0.14.0
  annotations:
spec:
  selector:
    app: dapr-dashboard
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_operator/templates/dapr_operator_service.yaml
kind: Service
apiVersion: v1
metadata:
  name: dapr-api
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  selector:
    app: dapr-operator
  ports:
  - protocol: TCP
    port: 80 
    targetPort: 6500
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_operator/templates/dapr_operator_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dapr-webhook
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  ports:
  - port: 443
    targetPort: 19443
    protocol: TCP
  selector:
    app: dapr-operator
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_placement/templates/dapr_placement_service.yaml
kind: Service
apiVersion: v1
metadata:
  name: dapr-placement-server
  labels:
    app: dapr-placement-server
    app.kubernetes.io/component: placement
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  selector:
    app: dapr-placement-server
  # placement must be able to resolve pod address to join initial cluster peers
  # before POD is ready
  publishNotReadyAddresses: true
  ports:
  - name: api
    port: 50005
  - name: raft-node
    port: 8201
  clusterIP: None
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_sentry/templates/dapr_sentry_service.yaml
kind: Service
apiVersion: v1
metadata:
  name: dapr-sentry
  labels:
    app.kubernetes.io/component: sentry
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  selector:
    app: dapr-sentry
  ports:
  - protocol: TCP
    port: 80 
    targetPort: 50001
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_sidecar_injector/templates/dapr_sidecar_injector_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dapr-sidecar-injector
  labels:
    app.kubernetes.io/component: sidecar-injector
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: https
    protocol: TCP
    name: https
  selector:
    app: dapr-sidecar-injector
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/mancenter-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-hazelcast-mancenter
  labels:
    app.kubernetes.io/name: hazelcast-mancenter
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: hazelcast-mancenter
    app.kubernetes.io/instance: "my-amorphie"
    role: mancenter
  ports:
  - protocol: TCP
    port: 8080
    targetPort: mancenter
    name: http
  - protocol: TCP
    port: 443
    targetPort: mancenter
    name: https
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-hazelcast
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/name: hazelcast
    app.kubernetes.io/instance: "my-amorphie"
    role: hazelcast
  ports:
  - protocol: TCP
    port: 5701
    targetPort: hazelcast
    name: tcp-hzport
---
# Source: amorphie/charts/amorphie-third-party/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.1.0"
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/component: primary
---
# Source: amorphie/charts/amorphie-third-party/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.1.0"
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/component: primary
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/injector-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-vault-agent-injector-svc
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
  
spec:
  ports:
  - name: https
    port: 443
    targetPort: 8080
  selector:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-amorphie
    component: webhook
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/server-headless-service.yaml
# Service for Vault cluster
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-vault-internal
  namespace: default
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    vault-internal: "true"
  annotations:

spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "http"
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    component: server
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/server-service.yaml
# Service for Vault cluster
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
  annotations:

spec:
  # We want the servers to become available even if they're not ready
  # since this DNS is also used for join operations.
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    component: server
---
# Source: amorphie/charts/amorphie-third-party/templates/simple-monitor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-amorphie-amorphie-third-party-simple-monitor-svc
  namespace: default
  labels:
    helm.sh/chart: amorphie-third-party-0.1.0
    app.kubernetes.io/name: amorphie-third-party
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: simple-monitor
spec:
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: 8082
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: amorphie-third-party
    app.kubernetes.io/instance: my-amorphie
    app: simple-monitor
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/charts/kibana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-amorphie-kibana
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kibana
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: kibana-10.11.2
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-amorphie
      app.kubernetes.io/name: kibana
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-amorphie
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kibana
        app.kubernetes.io/version: 8.12.1
        helm.sh/chart: kibana-10.11.2
        app: kibana
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-amorphie
                    app.kubernetes.io/name: kibana
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-amorphie-kibana
      initContainers:
      containers:
        - name: kibana
          image: docker.io/bitnami/kibana:8.9.2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: Unconfined
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KIBANA_PORT_NUMBER
              value: "5601"
            - name: KIBANA_ELASTICSEARCH_URL
              value: "http://my-amorphie-elasticsearch:9200"
            - name: KIBANA_ELASTICSEARCH_PORT_NUMBER
              value: "9200"
            - name: KIBANA_FORCE_INITSCRIPTS
              value: "false"
            - name: KIBANA_SERVER_ENABLE_TLS
              value: "false"
            - name: KIBANA_ELASTICSEARCH_ENABLE_TLS
              value: "false"
            - name: KIBANA_ELASTICSEARCH_TLS_USE_PEM
              value: "false"
            - name: KIBANA_ELASTICSEARCH_TLS_VERIFICATION_MODE
              value: "full"
          envFrom:
          ports:
            - name: http
              containerPort: 5601
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /login
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /status
              port: http
              scheme: HTTP
          volumeMounts:
            - name: kibana-data
              mountPath: /bitnami/kibana
            - name: kibana-config
              mountPath: /bitnami/kibana/conf
      volumes:
        - name: kibana-data
          persistentVolumeClaim:
            claimName: my-amorphie-kibana
        - name: kibana-config
          configMap:
            name: my-amorphie-kibana-conf
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe-gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-amorphie-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-gateway
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: my-amorphie
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-gateway
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: my-amorphie
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-9.3.2
        app.kubernetes.io/version: "8.4.5"
        app.kubernetes.io/component: zeebe-gateway
      annotations:
        {}
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: zeebe-gateway
          image: camunda/zeebe:8.4.5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26500
              name: gateway
            - containerPort: 26502
              name: internal
          env:
            - name: ZEEBE_STANDALONE_GATEWAY
              value: "true"
            - name: ZEEBE_GATEWAY_CLUSTER_CLUSTERNAME
              value: my-amorphie-zeebe
            - name: ZEEBE_GATEWAY_CLUSTER_MEMBERID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ZEEBE_LOG_LEVEL
              value: "info"
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+ExitOnOutOfMemoryError"
            - name: ZEEBE_GATEWAY_CLUSTER_INITIALCONTACTPOINTS
              value: my-amorphie-zeebe:26502
            - name: ZEEBE_GATEWAY_NETWORK_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_NETWORK_PORT
              value: "26500"
            - name: ZEEBE_GATEWAY_CLUSTER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: ZEEBE_GATEWAY_CLUSTER_PORT
              value: "26502"
            - name: ZEEBE_GATEWAY_MONITORING_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_MONITORING_PORT
              value: "9600"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_MODE
              value: none
          volumeMounts:
            - mountPath: /tmp
              name: tmp
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 400m
              memory: 450Mi
            requests:
              cpu: 400m
              memory: 450Mi
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: my-amorphie-zeebe-gateway
            defaultMode: 484
      serviceAccountName: zeebe-gateway-sa
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
  # yamllint disable
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-gateway
            topologyKey: kubernetes.io/hostname
  # yamllint enable
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr-dashboard/templates/dapr_dashboard_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-dashboard
  labels:
    app: dapr-dashboard
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: dapr-dashboard
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 0.14.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dapr-dashboard
  template:
    metadata:
      labels:
        app: dapr-dashboard
        app.kubernetes.io/managed-by: helm
        app.kubernetes.io/name: dapr-dashboard
        app.kubernetes.io/part-of: dapr
        app.kubernetes.io/version: 0.14.0
    spec:
      serviceAccountName: dapr-dashboard
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
             nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - linux
      containers:
      - name: dapr-dashboard
        image: "docker.io/daprio/dashboard:0.14.0"
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8080
        resources:
          {}
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_operator/templates/dapr_operator_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-operator
  labels:
    app: dapr-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dapr-operator
  template:
    metadata:
      labels:
        app: dapr-operator
        app.kubernetes.io/component: operator
        app.kubernetes.io/managed-by: helm
        app.kubernetes.io/name: my-amorphie
        app.kubernetes.io/part-of: dapr
        app.kubernetes.io/version: 1.11.2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/"
    spec:
      containers:
      - name: dapr-operator
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        image: "docker.io/daprio/operator:1.11.2"
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 6500
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          {}
        volumeMounts:
          - name: credentials
            mountPath: /var/run/dapr/credentials
            readOnly: true
          - name: webhook-creds
            mountPath: /tmp/k8s-webhook-server/serving-certs
            readOnly: true
        command:
        - "/operator"
        args:
        - "--watch-interval"
        - "0"
        - "--max-pod-restarts-per-minute"
        - "20"
        - "--log-level"
        - "info"
        - "--enable-metrics"
        - "--metrics-port"
        - "9090"
      serviceAccountName: dapr-operator
      volumes:
        - name: credentials
          secret:
            secretName: dapr-trust-bundle
        - name: webhook-creds
          secret:
            secretName: dapr-webhook-cert
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
             nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - linux
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_sentry/templates/dapr_sentry_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-sentry
  labels:
    app: dapr-sentry
    app.kubernetes.io/component: sentry
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dapr-sentry
  template:
    metadata:
      labels:
        app: dapr-sentry
        app.kubernetes.io/component: sentry
        app.kubernetes.io/managed-by: helm
        app.kubernetes.io/name: my-amorphie
        app.kubernetes.io/part-of: dapr
        app.kubernetes.io/version: 1.11.2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/"
    spec:
      containers:
      - name: dapr-sentry
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        image: "docker.io/daprio/sentry:1.11.2"
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 50001
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          {}
        volumeMounts:
          - name: credentials
            mountPath: /var/run/dapr/credentials
            readOnly: true
        command:
        - "/sentry"
        args:
        - "--log-level"
        - info
        - "--enable-metrics"
        - "--metrics-port"
        - "9090"
        - "--trust-domain"
        - cluster.local
      serviceAccountName: dapr-sentry
      volumes:
        - name: credentials
          secret:
            secretName: dapr-trust-bundle
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
             nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - linux
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_sidecar_injector/templates/dapr_sidecar_injector_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-sidecar-injector
  labels:
    app: dapr-sidecar-injector
    app.kubernetes.io/component: sidecar-injector
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dapr-sidecar-injector
  template:
    metadata:
      labels:
        app: dapr-sidecar-injector
        app.kubernetes.io/component: sidecar-injector
        app.kubernetes.io/managed-by: helm
        app.kubernetes.io/name: my-amorphie
        app.kubernetes.io/part-of: dapr
        app.kubernetes.io/version: 1.11.2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/"
    spec:
      serviceAccountName: dapr-injector
      containers:
      - name: dapr-sidecar-injector
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        image: "docker.io/daprio/injector:1.11.2"
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
        command:
        - "/injector"
        args:
        - "--log-level"
        - info
        - "--enable-metrics"
        - "--metrics-port"
        - "9090"
        - "--healthz-port"
        - "8080"
        env:
        - name: TLS_CERT_FILE
          value: /dapr/cert/tls.crt
        - name: TLS_KEY_FILE
          value: /dapr/cert/tls.key
        - name: KUBE_CLUSTER_DOMAIN
          value: "cluster.local"
        - name: SIDECAR_IMAGE
          value: "docker.io/daprio/daprd:1.11.2"
        - name: SIDECAR_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: IGNORE_ENTRYPOINT_TOLERATIONS
          value: "[{\"effect\":\"NoSchedule\",\"key\":\"alibabacloud.com/eci\"},{\"effect\":\"NoSchedule\",\"key\":\"azure.com/aci\"},{\"effect\":\"NoSchedule\",\"key\":\"aws\"},{\"effect\":\"NoSchedule\",\"key\":\"huawei.com/cci\"}]"
        - name: SIDECAR_RUN_AS_NON_ROOT
          value: "true"
        - name: SIDECAR_DROP_ALL_CAPABILITIES
          value: "false"
        - name: SIDECAR_READ_ONLY_ROOT_FILESYSTEM
          value: "true"
        ports:
        - name: https
          containerPort: 4000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          {}
        volumeMounts:
        - name: cert
          mountPath: /dapr/cert
          readOnly: true
      volumes:
      - name: cert
        secret:
          secretName: dapr-sidecar-injector-cert
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
             nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - linux
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/injector-deployment.yaml
# Deployment for the injector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-amorphie-vault-agent-injector
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    component: webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vault-agent-injector
      app.kubernetes.io/instance: my-amorphie
      component: webhook
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-agent-injector
        app.kubernetes.io/instance: my-amorphie
        component: webhook
    spec:
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vault-agent-injector
                  app.kubernetes.io/instance: "my-amorphie"
                  component: webhook
              topologyKey: kubernetes.io/hostname
  
      
      
      
      serviceAccountName: "my-amorphie-vault-agent-injector"
      
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      hostNetwork: false
      containers:
        - name: sidecar-injector
          
          image: "hashicorp/vault-k8s:1.3.1"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          env:
            - name: AGENT_INJECT_LISTEN
              value: :8080
            - name: AGENT_INJECT_LOG_LEVEL
              value: info
            - name: AGENT_INJECT_VAULT_ADDR
              value: http://my-amorphie-vault.default.svc:8200
            - name: AGENT_INJECT_VAULT_AUTH_PATH
              value: auth/kubernetes
            - name: AGENT_INJECT_VAULT_IMAGE
              value: "hashicorp/vault:1.15.2"
            - name: AGENT_INJECT_TLS_AUTO
              value: my-amorphie-vault-agent-injector-cfg
            - name: AGENT_INJECT_TLS_AUTO_HOSTS
              value: my-amorphie-vault-agent-injector-svc,my-amorphie-vault-agent-injector-svc.default,my-amorphie-vault-agent-injector-svc.default.svc
            - name: AGENT_INJECT_LOG_FORMAT
              value: standard
            - name: AGENT_INJECT_REVOKE_ON_SHUTDOWN
              value: "false"
            - name: AGENT_INJECT_CPU_REQUEST
              value: "250m"
            - name: AGENT_INJECT_CPU_LIMIT
              value: "500m"
            - name: AGENT_INJECT_MEM_REQUEST
              value: "64Mi"
            - name: AGENT_INJECT_MEM_LIMIT
              value: "128Mi"
            - name: AGENT_INJECT_DEFAULT_TEMPLATE
              value: "map"
            - name: AGENT_INJECT_TEMPLATE_CONFIG_EXIT_ON_RETRY_FAILURE
              value: "true"
            
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          args:
            - agent-inject
            - 2>&1
          livenessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 12
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
---
# Source: amorphie/charts/amorphie-third-party/templates/simple-monitor/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-amorphie-amorphie-third-party-simple-monitor
  namespace: default
  labels:
    helm.sh/chart: amorphie-third-party-0.1.0
    app.kubernetes.io/name: amorphie-third-party
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: simple-monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: amorphie-third-party
      app.kubernetes.io/instance: my-amorphie
      app: simple-monitor
  template:
    metadata:
      labels:
        app.kubernetes.io/name: amorphie-third-party
        app.kubernetes.io/instance: my-amorphie
        app: simple-monitor
    spec:
      containers:
        - name: simple-monitor
          image: "ghcr.io/camunda-community-hub/zeebe-simple-monitor:2.6.2"
          env:
          - name: server.allowedOriginsUrls
            value: '""'
          ports:
            - name: http
              containerPort: 8082
              protocol: TCP
          volumeMounts:
          - mountPath: /app/resources/application.yaml
            name: config-volume
            subPath: application.yaml
      volumes:
      - configMap:
          defaultMode: 420
          name: my-amorphie-amorphie-third-party-simple-monitor-config
        name: config-volume
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-amorphie-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.19.4
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-amorphie
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: my-amorphie-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-amorphie
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.2
        helm.sh/chart: elasticsearch-19.19.4
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: my-amorphie-elasticsearch-master
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:12-debian-12-r16
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.9.2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "elastic"
            
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "1024m"
            - name: ELASTICSEARCH_ENABLE_REST_TLS
              value: "false"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 2Gi
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
            - mountPath: /tmp
              name: tmp
            - mountPath: /usr/share/elasticsearch/logs
              name: logs
            - mountPath: /usr/share/elasticsearch/config
              name: config-dir
      volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: logs
        - emptyDir: {}
          name: config-dir
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "64Gi"
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/zeebe/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-amorphie-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: zeebe-broker
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: my-amorphie
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-broker
  serviceName: "my-amorphie-zeebe"
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: my-amorphie
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-9.3.2
        app.kubernetes.io/version: "8.4.5"
        app.kubernetes.io/component: zeebe-broker
      annotations:
    spec:
      imagePullSecrets:
        []
      initContainers:
        - args:
          - wget --no-check-certificate https://github.com/camunda-community-hub/zeebe-hazelcast-exporter/releases/download/1.4.0/zeebe-hazelcast-exporter-1.4.0-jar-with-dependencies.jar
            -O            /exporters/zeebe-hazelcast-exporter-1.4.0-jar-with-dependencies.jar;
            ls -al
          command:
          - /bin/sh
          - -c
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: init-exporters-hazelcast
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /exporters
            name: exporters
      containers:
        - name: zeebe
          image: camunda/zeebe:8.4.5
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 1000
          env:
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: "my-amorphie-zeebe"
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ZEEBE_BROKER_NETWORK_ADVERTISEDHOST
              value: "$(K8S_NAME).$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc"
            - name: ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS
              value:
                $(K8S_SERVICE_NAME)-0.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
            - name: ZEEBE_BROKER_CLUSTER_CLUSTERNAME
              value: my-amorphie-zeebe
            - name: ZEEBE_LOG_LEVEL
              value: "info"
            - name: ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT
              value: "1"
            - name: ZEEBE_BROKER_CLUSTER_CLUSTERSIZE
              value: "1"
            - name: ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR
              value: "1"
            - name: ZEEBE_BROKER_THREADS_CPUTHREADCOUNT
              value: "3"
            - name: ZEEBE_BROKER_THREADS_IOTHREADCOUNT
              value: "3"
            - name: ZEEBE_BROKER_GATEWAY_ENABLE
              value: "false"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME
              value: "io.camunda.zeebe.exporter.ElasticsearchExporter"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL
              value: "http://my-amorphie-elasticsearch:9200"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_INDEX_PREFIX
              value: "zeebe-record"
            - name: ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT
              value: "26501"
            - name: ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT
              value: "26502"
            - name: ZEEBE_BROKER_NETWORK_MONITORINGAPI_PORT
              value: "9600"
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
            - name: ZEEBE_BROKER_DATA_SNAPSHOTPERIOD
              value: 5m
            - name: ZEEBE_BROKER_DATA_DISK_FREESPACE_REPLICATION
              value: 2GB
            - name: ZEEBE_BROKER_DATA_DISK_FREESPACE_PROCESSING
              value: 3GB
            - name: ZEEBE_BROKER_EXPORTERS_HAZELCAST_JARPATH
              value: exporters/zeebe-hazelcast-exporter-1.4.0-jar-with-dependencies.jar
            - name: ZEEBE_BROKER_EXPORTERS_HAZELCAST_CLASSNAME
              value: io.zeebe.hazelcast.exporter.HazelcastExporter
            - name: ZEEBE_BROKER_EXPORTERS_HAZELCAST_PORT
              value: "5701"
            - name: ZEEBE_HAZELCAST_JARPATH
              value: exporters/zeebe-hazelcast-exporter-1.4.0-jar-with-dependencies.jar
            - name: ZEEBE_HAZELCAST_CLASSNAME
              value: io.zeebe.hazelcast.exporter.HazelcastExporter
            - name: ZEEBE_HAZELCAST_PORT
              value: "5701"
            - name: ZEEBE_HAZELCAST_REMOTE_ADDRESS
              value: 'my-amorphie-hazelcast:5701'
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26501
              name: command
            - containerPort: 26502
              name: internal
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 960m
              memory: 1920Mi
            requests:
              cpu: 800m
              memory: 1200Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            - name: data
              mountPath: /usr/local/zeebe/data
            - name: exporters
              mountPath: /exporters
            - mountPath: /tmp
              name: tmp
            
            - mountPath: /usr/local/zeebe/exporters
              name: zeebe-exporters
      volumes:
        - name: config
          configMap:
            name: my-amorphie-zeebe
            defaultMode: 492
        - name: exporters
          emptyDir: {}
        - name: tmp
          emptyDir: {}
          
        - emptyDir: {}
          name: zeebe-exporters
      serviceAccountName: zeebe-sa
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
# yamllint disable
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-broker
            topologyKey: kubernetes.io/hostname
# yamllint enable
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          {}
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: "32Gi"
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_placement/templates/dapr_placement_statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dapr-placement-server
  labels:
    app: dapr-placement-server
    app.kubernetes.io/component: placement
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  replicas: 1
  serviceName: dapr-placement-server
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: dapr-placement-server
  template:
    metadata:
      labels:
        app: dapr-placement-server
        app.kubernetes.io/component: placement
        app.kubernetes.io/managed-by: helm
        app.kubernetes.io/name: my-amorphie
        app.kubernetes.io/part-of: dapr
        app.kubernetes.io/version: 1.11.2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/"
    spec:
      containers:
      - name: dapr-placement-server
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 3
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        image: "docker.io/daprio/placement:1.11.2"
        imagePullPolicy: IfNotPresent
        resources:
          {}
        volumeMounts:
          - name: credentials
            mountPath: /var/run/dapr/credentials
            readOnly: true
        ports:
          - containerPort: 50005
            name: api
          - containerPort: 8201
            name: raft-node
          - name: metrics
            containerPort: 9090
            protocol: TCP
        command:
        - "/placement"
        args:
        - "--log-level"
        - info
        - "--enable-metrics"
        - "--replicationFactor"
        - "100"
        - "--metrics-port"
        - "9090"
        - "--tls-enabled"
        securityContext:
          runAsUser: 0
        env:
          - name: PLACEMENT_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      serviceAccountName: dapr-placement
      volumes:
        - name: credentials
          secret:
            secretName: dapr-trust-bundle
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
             nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - linux
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/mancenter-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-amorphie-hazelcast-mancenter
  labels:
    app.kubernetes.io/name: hazelcast-mancenter
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
spec:
  serviceName: my-amorphie-hazelcast-mancenter
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hazelcast-mancenter
      app.kubernetes.io/instance: "my-amorphie"
      role: mancenter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hazelcast-mancenter
        helm.sh/chart: hazelcast-5.8.2
        app.kubernetes.io/instance: "my-amorphie"
        app.kubernetes.io/managed-by: "Helm"
        role: mancenter
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: my-amorphie-hazelcast-mancenter
        image: "hazelcast/management-center:5.3.2"
        imagePullPolicy: "IfNotPresent"
        resources:
          null
        ports:
        - name: mancenter
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /config
        - name: mancenter-storage
          mountPath: /data
        env:
        - name: MC_INIT_CMD
          value: "./bin/mc-conf.sh cluster add --lenient=true -H /data -cc /config/hazelcast-client.yaml; "
        - name: JAVA_OPTS
          value: " -Dhazelcast.mc.healthCheck.enable=true -DserviceName=my-amorphie-hazelcast -Dnamespace=default -Dhazelcast.mc.tls.enabled=false "
      serviceAccountName: my-amorphie-hazelcast
      automountServiceAccountToken: true
      volumes:
      - name: config
        configMap:
           name: my-amorphie-hazelcast-mancenter-configuration
      - name: mancenter-storage
    
  volumeClaimTemplates:
  - metadata:
      name: mancenter-storage
      labels:
        app.kubernetes.io/name: hazelcast-mancenter
        helm.sh/chart: "hazelcast"
        app.kubernetes.io/instance: "my-amorphie"
        app.kubernetes.io/managed-by: "Helm"
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "8Gi"
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-amorphie-hazelcast
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm" 
spec:
  serviceName: my-amorphie-hazelcast
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hazelcast
      app.kubernetes.io/instance: "my-amorphie"
      role: hazelcast
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hazelcast
        helm.sh/chart: hazelcast-5.8.2
        app.kubernetes.io/instance: "my-amorphie"
        app.kubernetes.io/managed-by: "Helm"
        role: hazelcast
      annotations:
        checksum/hazelcast-config: c4b6a3fd48054c4013ca0c642202dfc072f46a56dd9e0062a942d6a8f565cb18
    spec:
      terminationGracePeriodSeconds: 600
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: my-amorphie-hazelcast
        image: "hazelcast/hazelcast:5.3.1"
        imagePullPolicy: "IfNotPresent"
        resources:
          null
        ports:
        - name: hazelcast
          containerPort: 5701
        livenessProbe:
          httpGet:
            path: /hazelcast/health/node-state
            port: 5701
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /hazelcast/health/ready
            port: 5701
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
        - name: hazelcast-storage
          mountPath: /data/hazelcast
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: HZ_CLUSTERNAME
          value: dev
        - name: JAVA_OPTS
          value: "-Dhazelcast.config=/data/hazelcast/hazelcast.yaml -DserviceName=my-amorphie-hazelcast -Dnamespace=default -Dhz.jet.enabled=true -Dhazelcast.shutdownhook.policy=GRACEFUL -Dhazelcast.shutdownhook.enabled=true -Dhazelcast.graceful.shutdown.max.wait=600   "
      serviceAccountName: my-amorphie-hazelcast
      automountServiceAccountToken: true
      volumes:
      - name: hazelcast-storage
        configMap:
          name: my-amorphie-hazelcast-configuration
---
# Source: amorphie/charts/amorphie-third-party/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-amorphie-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.1.0"
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-amorphie-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-amorphie
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-amorphie-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.6
        app.kubernetes.io/instance: my-amorphie
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "15.1.0"
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: my-amorphie-postgresql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-amorphie
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.7.0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "amorphie"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-amorphie-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-amorphie-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "amorphie"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "amorphie" -d "dbname=amorphie" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "amorphie" -d "dbname=amorphie" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/server-statefulset.yaml
# StatefulSet to run the actual vault server cluster.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-amorphie-vault
  namespace: default
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: my-amorphie-vault-internal
  podManagementPolicy: Parallel
  replicas: 1
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: my-amorphie
      component: server
  template:
    metadata:
      labels:
        helm.sh/chart: vault-0.27.0
        app.kubernetes.io/name: vault
        app.kubernetes.io/instance: my-amorphie
        component: server
    spec:
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vault
                  app.kubernetes.io/instance: "my-amorphie"
                  component: server
              topologyKey: kubernetes.io/hostname
  
      
      
      
      terminationGracePeriodSeconds: 10
      serviceAccountName: my-amorphie-vault
      
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      hostNetwork: false
      volumes:
        
        - name: config
          configMap:
            name: my-amorphie-vault-config
  
        - name: home
          emptyDir: {}
      containers:
        - name: vault
          
          image: hashicorp/vault:1.15.2
          imagePullPolicy: IfNotPresent
          command:
          - "/bin/sh"
          - "-ec"
          args: 
          - |
            cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;
            [ -n "${HOST_IP}" ] && sed -Ei "s|HOST_IP|${HOST_IP?}|g" /tmp/storageconfig.hcl;
            [ -n "${POD_IP}" ] && sed -Ei "s|POD_IP|${POD_IP?}|g" /tmp/storageconfig.hcl;
            [ -n "${HOSTNAME}" ] && sed -Ei "s|HOSTNAME|${HOSTNAME?}|g" /tmp/storageconfig.hcl;
            [ -n "${API_ADDR}" ] && sed -Ei "s|API_ADDR|${API_ADDR?}|g" /tmp/storageconfig.hcl;
            [ -n "${TRANSIT_ADDR}" ] && sed -Ei "s|TRANSIT_ADDR|${TRANSIT_ADDR?}|g" /tmp/storageconfig.hcl;
            [ -n "${RAFT_ADDR}" ] && sed -Ei "s|RAFT_ADDR|${RAFT_ADDR?}|g" /tmp/storageconfig.hcl;
            /usr/local/bin/docker-entrypoint.sh vault server -config=/tmp/storageconfig.hcl 
   
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VAULT_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_ADDR
              value: "http://127.0.0.1:8200"
            - name: VAULT_API_ADDR
              value: "http://$(POD_IP):8200"
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_CLUSTER_ADDR
              value: "https://$(HOSTNAME).my-amorphie-vault-internal:8201"
            - name: HOME
              value: "/home/vault"
            
            
            
          volumeMounts:
          
  
    
            - name: data
              mountPath: /vault/data
    
  
  
            - name: config
              mountPath: /vault/config
  
            - name: home
              mountPath: /home/vault
          ports:
            - containerPort: 8200
              name: http
            - containerPort: 8201
              name: https-internal
            - containerPort: 8202
              name: http-rep
          readinessProbe:
            # Check status; unsealed vault servers return 0
            # The exit code reflects the seal status:
            #   0 - unsealed
            #   1 - error
            #   2 - sealed
            exec:
              command: ["/bin/sh", "-ec", "vault status -tls-skip-verify"]
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          lifecycle:
            # Vault container doesn't receive SIGTERM from Kubernetes
            # and after the grace period ends, Kube sends SIGKILL.  This
            # causes issues with graceful shutdowns such as deregistering itself
            # from Consul (zombie services).
            preStop:
              exec:
                command: [
                  "/bin/sh", "-c",
                  # Adding a sleep here to give the pod eviction a
                  # chance to propagate, so requests will not be made
                  # to this pod while it's terminating
                  "sleep 5 && kill -SIGTERM $(pidof vault)",
                ]
      
  
  volumeClaimTemplates:
    - metadata:
        name: data
      
      
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
# Source: amorphie/charts/amorphie-third-party/templates/vault-initializer/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-amorphie-vault-initializer
  namespace: default
  labels:
    helm.sh/chart: amorphie-third-party-0.1.0
    app.kubernetes.io/name: amorphie-third-party
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: vault-initializer
spec:
  template:
    spec:
      serviceAccountName: my-amorphie-vault-initializer-sa
      initContainers:
      - name: wget
        image: busybox
        command: ['wget']
        args: ['my-amorphie-vault:8200']
      containers:
      - name: vault-initializer
        image: burganbank/vault-initializer:v1
        args:
        - my-amorphie-vault-0
      restartPolicy: Never
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/charts/elasticsearch/charts/kibana/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-amorphie-kibana
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kibana
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: kibana-10.11.2
  annotations:
    route.openshift.io/termination: edge
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-amorphie-kibana
                port:
                  name: http
      host: test-helm-zeebe-kibana.example.com
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/mancenter-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "my-amorphie-hazelcast-mancenter"
  labels:
    app.kubernetes.io/name: hazelcast-mancenter
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    route.openshift.io/termination: edge
spec:
  ingressClassName: 
  rules:
    - host: "test-helm-zeebe-hazelcast-mancenter.example.com"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
                service:
                  name: my-amorphie-hazelcast-mancenter
                  port:
                    name: http
---
# Source: amorphie/charts/amorphie-third-party/templates/simple-monitor/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-amorphie-simple-monitor
  namespace: default
  labels:
    helm.sh/chart: amorphie-third-party-0.1.0
    app.kubernetes.io/name: amorphie-third-party
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    route.openshift.io/termination: edge
spec:
  rules:
    - host: "test-helm-zeebe-simple-monitor.example.com"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-amorphie-amorphie-third-party-simple-monitor-svc
                port:
                  number: 8082
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_config/templates/dapr_default_config.yaml
apiVersion: dapr.io/v1alpha1
kind: Configuration
metadata:
  name: daprsystem
  labels:
    app.kubernetes.io/component: config
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
spec:
  mtls:
    enabled: false
    workloadCertTTL: 24h
    allowedClockSkew: 15m
---
# Source: amorphie/charts/amorphie-third-party/charts/dapr/charts/dapr_sidecar_injector/templates/dapr_sidecar_injector_webhook_config.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: dapr-sidecar-injector
  labels:
    app: dapr-sidecar-injector
    app.kubernetes.io/component: sidecar-injector
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: my-amorphie
    app.kubernetes.io/part-of: dapr
    app.kubernetes.io/version: 1.11.2
webhooks:
- name: sidecar-injector.dapr.io
  reinvocationPolicy: IfNeeded
  clientConfig:
    service:
      namespace: default
      name: dapr-sidecar-injector
      path: "/mutate"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lSQUsvK3ZSaUNHdnltWEZleFdINVVhYTB3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWVpHRndjaTF6YVdSbFkyRnlMV2x1YW1WamRHOXlMV05oTUI0WERUSTBNRGt4TmpBNQpNVEExTjFvWERUTTBNRGt4TkRBNU1UQTFOMW93SXpFaE1COEdBMVVFQXhNWVpHRndjaTF6YVdSbFkyRnlMV2x1CmFtVmpkRzl5TFdOaE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBenRxcHUyZkkKWFZucGcrelR4ZmFyejkrTExDNUJadTZjc2did0tXc0hnd2M0TXAyM2NRSUxPM2VrK0Zqd2lmM0grc3VDdk1TUgpvN1lTM2M1L1hZbHgyS2VHTW45LzgrZXpzYzkxN3hZL1gzYUxIczE2MysrLzQxdjFJbmkzZzNDTU5qSjNtR1BUCkVTNkRwZ2gwK3dVKzZoV1ZEdENDdHZnUzlaYVNOVTZ5WEk2MER5cG5qL01BNE5keWpBNUFTZEZLNE5Cd2hzb2sKN0R1ejIwWXc3VHhCdlFHQ2xxSGlkQkt4MXA4ai9jY3VGUzVXT0NrbXJtSGJycm1FTGJyOVdITVpQWTFWS1Qvbgo5U3RYNWZGRW8yNVpsdjZWK1dVWG5MelRIU3lENHJHY1JaTDhSQlUxbHZ3bDN4bnBzNXQvRW5OMldUTDJQS0lCCkMyNHBhOFVCNjljVTZ3SURBUUFCbzJFd1h6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk9MdQpaREdDOFJYMHVoaWc0VjhVclZ6QkF3K0JNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNLd2swaXBBd0pQYi85CmVCNU5ZOTM4djA0d3JnWXBNa0RwR0tvMUNPMTk5Q0FQZytpRDE3TkpWYmdrUnVlMDZLOFhJOFBMeFNGU212MFgKVDVRV2JKbit2QVl1RklsL205Umd6blBRbW9jclBhMGFuaGx1cDN5S0NhNnlMeVUrOVJsd2M4dkdKSG1ROEZlegpRUHFtWHpmVzZXS3hTRW4yTy9ONHJIWkRSVU9NVm5EeXJCV2JWc0F4dWRTOEFYTUg4MHMxSTRBYk5kTWhFRys5Cm5kbnhUdGpsMDlZWmNyVkRZTENzd1JKdGJOZkFTWU1DR0pNMlQyMkI1b1pXK0Uwd3AvUnBXN2Z0N3RQV3M4TnEKTUJ4czMwVlZaeStPaXRjUm1KaVZlV1YwQktyY2tMOGZzODVBcEFSdlVneHYzc1J0WjM1UENvTnZSUFcwdHVQdgpwTkc0R3A3eAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    resources:
    - pods
    operations:
    - CREATE
  failurePolicy: Ignore
  sideEffects: None
  admissionReviewVersions: ["v1", "v1beta1"]
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/injector-mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: my-amorphie-vault-agent-injector-cfg
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: vault.hashicorp.com
    failurePolicy: Ignore
    matchPolicy: Exact
    sideEffects: None
    timeoutSeconds: 30
    admissionReviewVersions: ["v1", "v1beta1"]
    clientConfig:
      service:
        name: my-amorphie-vault-agent-injector-svc
        namespace: default
        path: "/mutate"
      caBundle: ""
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    objectSelector:
      matchExpressions:
      - key: app.kubernetes.io/name
        operator: NotIn
        values:
        - vault-agent-injector
---
# Source: amorphie/charts/amorphie-third-party/charts/camunda-platform/templates/operate/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-amorphie-operate-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-9.3.2
    app.kubernetes.io/version: "8.4.5"
    app.kubernetes.io/component: operate
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-amorphie-operate:80']
  restartPolicy: Never
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/tests/test-hazelcast.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-amorphie-hazelcast-test-vkequ"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded, hook-failed
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: "test"
    role: test
spec:
  containers:
  - name: "my-amorphie-hazelcast-test"
    image: "alpine:latest"
    command:
    - "sh"
    - "-c"
    - |
      set -ex
      # Install required test tools
      apk add -q curl
      # Get the number of Hazelcast members in the cluster
      CLUSTER_SIZE=$(curl my-amorphie-hazelcast:5701/hazelcast/health/cluster-size)
      # Test the correct number of Hazelcast members
      test ${CLUSTER_SIZE} -eq 1
    resources:
      null
  restartPolicy: Never
---
# Source: amorphie/charts/amorphie-third-party/charts/hazelcast/templates/tests/test-management-center.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-amorphie-hazelcast-mancenter-test-fcqh1"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded, hook-failed
  labels:
    app.kubernetes.io/name: hazelcast
    helm.sh/chart: hazelcast-5.8.2
    app.kubernetes.io/instance: "my-amorphie"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: "test"
    role: test
spec:
  containers:
  - name: "my-amorphie-hazelcast-mancenter-test"
    image: "alpine:latest"
    command:
    - "sh"
    - "-c"
    - |
      set -ex
      # Install required test tools
      apk add -q jq curl
      # Get the HTTP Response Code of the Health Check
      HEALTH_CHECK_HTTP_RESPONSE_CODE=$(curl --write-out %{http_code} --silent --output /dev/null my-amorphie-hazelcast-mancenter:8080/health)
      # Test the MC HTTP RESPONSE CODE
      test ${HEALTH_CHECK_HTTP_RESPONSE_CODE} -eq 200
      # Get the connected cluster count via /rest/clusters/dev/members endpoint
      CONNECTED_CLUSTER_SIZE=$(curl --silent my-amorphie-hazelcast-mancenter:8080/rest/clusters/dev/members | jq '. | length')
      # Test the correct number of Hazelcast members
      test ${CONNECTED_CLUSTER_SIZE} -eq 1
    resources:
      null
  restartPolicy: Never
---
# Source: amorphie/charts/amorphie-third-party/charts/vault/templates/tests/server-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-amorphie-vault-server-test
  namespace: default
  annotations:
    "helm.sh/hook": test
spec:
  
  containers:
    - name: my-amorphie-server-test
      image: hashicorp/vault:1.15.2
      imagePullPolicy: IfNotPresent
      env:
        - name: VAULT_ADDR
          value: http://my-amorphie-vault.default.svc:8200
        
      command:
        - /bin/sh
        - -c
        - |
          echo "Checking for sealed info in 'vault status' output"
          ATTEMPTS=10
          n=0
          until [ "$n" -ge $ATTEMPTS ]
          do
            echo "Attempt" $n...
            vault status -format yaml | grep -E '^sealed: (true|false)' && break
            n=$((n+1))
            sleep 5
          done
          if [ $n -ge $ATTEMPTS ]; then
            echo "timed out looking for sealed info in 'vault status' output"
            exit 1
          fi

          exit 0
      volumeMounts:
  volumes:
  restartPolicy: Never
---
# Source: amorphie/charts/amorphie-third-party/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-amorphie-amorphie-third-party-test-connection"
  labels:
    helm.sh/chart: amorphie-third-party-0.1.0
    app.kubernetes.io/name: amorphie-third-party
    app.kubernetes.io/instance: my-amorphie
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-amorphie-amorphie-third-party:80']
  restartPolicy: Never
