---
# Source: request-registry/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-request-registry-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-postgres-password: "TjF5M3dhUk5hVw=="
  postgresql-password: "Y2hhbmdlX21l"
---
# Source: request-registry/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-request-registry-request-registry
  labels:
    app.kubernetes.io/name: my-request-registry
    app.kubernetes.io/part-of: my-request-registry
    helm.sh/chart: request-registry-0.1.0
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  database-url: "cG9zdGdyZXNxbDovL2Zhc3RhcGk6Y2hhbmdlX21lQG15LXJlcXVlc3QtcmVnaXN0cnktcG9zdGdyZXNxbC9mYXN0YXBp"
  app_application_key: "NDVjMWE0YjYtNTlkMy00YTZlLTg2YmYtODhhODcyZjM1ODQ1"
  app_private_key: "TUlJRW93SUJBQUtDQVFFQXRiR05jeEc2cmVPYXZGQ25ZNVJZMkhIZjZKTVowd3FpWTQ5NWVjTjMwL3d3RUorTURWeDlLZTNjdlhnd3ZQK3RzclBJZEErRmkvSVNMa250ZTQ1UE1kT0tyd05tMzRCaktwTzVQQ1JwT09sOEF0YUtEdCtMTWx4dGhPZzhvMFBJK2lTbmhtUVppeXVEdTVqK0hER1UxUmJuOUNYYnlMVVU2KzI4T1dzMkhYdEYvTTd3NzZZZ0FNemZ4YTFIQzJlK1JTRGRPN1pPNDZ3Vk9tcjhOcy9JVFgrNng2c2dLYVBnUlJLU2swMDRUVWhwMDdTemNWWTMrdDVTT0JaeE56bk1XQVVwMC9NV2k0ZGNFU3QxeWs3bEczT2tnTCtHcDV4NDRrT3lTTm51RWRoVy9nYkxGcHhCc1RscndQM0RsYUZqOWZ3d3VIb3JTUGRiR3UyV1J4bUU5UUlEQVFBQkFvSUJBQ1pES0F2THQ4R2ZUUXBydkxoa2VPcEozdEtLU2RXdTUyQXFpblVaTkE2ZEROMHZVQzNQSkorVUV4aUdhMU1kejgweWZadnRXZDBOQXdXaTlXTS81bzhTWXFIMUNEQzRoNG1qbHM1aXg1TGYzb2oxZDVqbXZCaEVyUjZnVG9hK1EyQmtJREJWdTZoYVoxRTJDSXRVNktnUVBSUWw5ZGtZUXpuazlHNnVGSFVVRU96VWtVSEhSQmhiTWU2Y00zQzd0dzhJU2U4Qk96eXUyZk4rRkdodnlpRXZ2OTJ2UE9lZDlQNmhjY0FPbTBEOWUrN1ErQmsyK3h4Qi9qMk1uQXVSN3FWUkdDRnRrWldWMlBuVFg0UmZJQzdFNGRndlc3YVFJY3VuZTM5MXBkVlhWdTRuVllzZXFnbC81MXRwNVhOaHZRTmloSzFxMkE0UlA3VW1MZTNoWkpFQ2dZRUEvZ0d0N3VydmRxRWhFcC8rNk91V0JSNmNwdVA1Q2hoRXBVNzhLQlMxckdKQkllcEdjMW1YNDE4RkdWdEMzUU55emZWVlhHdXkrcXlVc1IwSWthOVZnN2ZyZVBKL29FME9lZnJCM1pOSzhVbSt1bTlkZzBBQ093VFhqaXN0a2hlYVgxTC9RdlNEQ1UwNWFZSjc5T1RkSS82ZWJzczJQNWtFN0Znanpod1gwK1VDZ1lFQXR4NlhHQmc2Q0c0LytaemtzNWNad2ZkSGpZcDl1RWhRK2ZnY1VkZ3J6Ym5TcFRYZXlvRE1jUUU0QmNpV0o2eUZLdSs5bytVbTlIRFVJcFBFL3pJQ2xGMmsyZnIwOTJsK1N6QVhmOXNBRUwwMFEreEEwU2xUczhmUklPZEM5NnRMUzJjNlRsNGc3d3R2SC9WZmJMTXp5WWRCVnRncEpuZGFWYXpaOXVrVSs5RUNnWUVBbzVDOVNtNnJDVDgxSnVNMHFSU2JwR3hULy93cHNHQjBRK2NhNVV5QXVLTUV3aXcwZGE4cDZkYVVXQUcyaXMvZnE5VGh4UVB0V3hLckpXcEd6Rm1Wdlo0LzJjQitndUZjQXh5QW5vaHM1L2ZQQkFzV3NxQVRUNklNbEpZbFlFQW12bCtaMUtuVGY3ZmswcGFkNzlNNHZDY0lLdHhjOEpNKzRsclhvNi9mZ0NrQ2dZQlBEZmpDNFNxa214d3BZZTltRE5TRTVZRlJmTGw3eGxTWEplTHIvbndpcTVkaDFaamlLYXFaR3FLWjlKZkdkdmRpcXU5ZkF6M0hCN0s5WHJnTVNBWFBFWUpxektuVzZnY281SkV3bEZZNTQ4VGRrZkFGbkdiVFZXOVdXaUNTRmJSQzBFVGVza3BiaUw4bnQrSERaclh6eWQyT1pYR1dkcTVjRUd4azZRa3pFUUtCZ0dHOXRra1cvTlZFY1cvOVJjSnRNK3RhNmhVczZBSEJ2M0h5dzlvRnZlall2Wm1RUmQwdkV4c1FxNmJKeldLckdlQzRWUDhUZ3B6czd6Um56QkNMdTZ5ZWRJbGp0bzRlTWlnUHBoRW0vWWxZL2g0NGVDNUdscjYxa1dEM0liV1Jqb0IwRkx1RTkxaUI5b2w5dFBVdkd1QjlzenlUTjdEeGNwMDVtdmJYVzQvbQ=="
  app_public_key: "TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0YkdOY3hHNnJlT2F2RkNuWTVSWTJISGY2Sk1aMHdxaVk0OTVlY04zMC93d0VKK01EVng5S2UzY3ZYZ3d2UCt0c3JQSWRBK0ZpL0lTTGtudGU0NVBNZE9LcndObTM0QmpLcE81UENScE9PbDhBdGFLRHQrTE1seHRoT2c4bzBQSStpU25obVFaaXl1RHU1aitIREdVMVJibjlDWGJ5TFVVNisyOE9XczJIWHRGL003dzc2WWdBTXpmeGExSEMyZStSU0RkTzdaTzQ2d1ZPbXI4TnMvSVRYKzZ4NnNnS2FQZ1JSS1NrMDA0VFVocDA3U3pjVlkzK3Q1U09CWnhOem5NV0FVcDAvTVdpNGRjRVN0MXlrN2xHM09rZ0wrR3A1eDQ0a095U05udUVkaFcvZ2JMRnB4QnNUbHJ3UDNEbGFGajlmd3d1SG9yU1BkYkd1MldSeG1FOVFJREFRQUI="
---
# Source: request-registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-request-registry-request-registry
  namespace: "default"
  labels:
    app.kubernetes.io/name: my-request-registry
    app.kubernetes.io/part-of: my-request-registry
    helm.sh/chart: request-registry-0.1.0
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
data:
  image: "registry.gitlab.com/open-forms/request-registry"
  version: "latest"
  app-url: http://verzoeken.openformulieren.io/
  app-domain: verzoeken.openformulieren.io
  app-env: dev
---
# Source: request-registry/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-request-registry-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-request-registry
---
# Source: request-registry/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-request-registry-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-request-registry
    role: primary
---
# Source: request-registry/templates/fast-api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-request-registry
  labels:
    app.kubernetes.io/name: my-request-registry
    app.kubernetes.io/part-of: my-request-registry
    helm.sh/chart: request-registry-0.1.0
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 80
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: my-request-registry
    app.kubernetes.io/instance: my-request-registry
---
# Source: request-registry/templates/fast-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    # add an annotation indicating the issuer to use.
    #    cert-manager.io/acme-challenge-type: http01
    #    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  name: my-request-registry
  labels:
    app.kubernetes.io/name: my-request-registry
    app.kubernetes.io/part-of: my-request-registry
    helm.sh/chart: request-registry-0.1.0
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: my-request-registry
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-request-registry
        app.kubernetes.io/part-of: my-request-registry
        helm.sh/chart: request-registry-0.1.0
        app.kubernetes.io/instance: my-request-registry
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: my-request-registry
          image: "registry.gitlab.com/open-forms/request-registry:latest"
          command: ["/bin/sh", "-c"]
          args: ["python app/main.py && alembic upgrade head"]


          env:
            # database
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: my-request-registry-request-registry
                  key: database-url
            # other secrets
            - name: APP_APPLICATION_KEY
              valueFrom:
                secretKeyRef:
                  name: my-request-registry-request-registry
                  key: app_application_key
            - name: PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: my-request-registry-request-registry
                  key: app_private_key
            - name: PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  name: my-request-registry-request-registry
                  key: app_public_key

            # settings
            - name: APP_URL
              valueFrom:
                configMapKeyRef:
                  name: my-request-registry-request-registry
                  key: app-url
            - name: APP_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: my-request-registry-request-registry
                  key: app-domain
            - name: APP_ENV
              valueFrom:
                configMapKeyRef:
                  name: my-request-registry-request-registry
                  key: app-env
---
# Source: request-registry/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-request-registry-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-request-registry
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: my-request-registry-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-request-registry
      role: primary
  template:
    metadata:
      name: my-request-registry-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.1.1
        app.kubernetes.io/instance: my-request-registry
        app.kubernetes.io/managed-by: Helm
        role: primary
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: my-request-registry-postgresql
          image: docker.io/bitnami/postgresql:11.10.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-request-registry-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "fastapi"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-request-registry-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "fastapi"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "fastapi" -d "dbname=fastapi" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "fastapi" -d "dbname=fastapi" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
