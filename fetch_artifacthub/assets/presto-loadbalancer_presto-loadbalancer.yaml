---
# Source: presto-loadbalancer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-presto-loadbalancer
  labels:
    helm.sh/chart: presto-loadbalancer-0.1.16
    app.kubernetes.io/name: presto-loadbalancer
    app.kubernetes.io/instance: my-presto-loadbalancer
    app.kubernetes.io/version: "0.1.5"
    app.kubernetes.io/managed-by: Helm
---
# Source: presto-loadbalancer/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-presto-loadbalancer-configmap
  labels:
    chart: presto-loadbalancer-0.1.16
    release: my-presto-loadbalancer
data:
  config.yml: |
      clusters:
        healthcheck:
          delay: 5s
          enabled: true
        statistics:
          delay: 5s
          enabled: true
        sync:
          delay: 600s
      discovery:
        aws:
          access_key_id: ""
          region: eu-west-1
          secret_key: ""
        enabled: true
        type: aws-emr
      persistence:
        postgres:
          db: postgres
          host: 127.0.0.1
          password: presto
          port: 5432
          ssl_mode: disable
          username: prestohub
      proxy:
        port: 8998
      routing:
        rule: round-robin
      session:
        store:
          redis:
            opts:
              max_ttl: 24h
              prefix: 'presto::'
            standalone:
              db: 0
              enabled: true
              host: 127.0.0.1:6379
              password: ""
---
# Source: presto-loadbalancer/templates/cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-presto-loadbalancer
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - namespaces
    verbs:
      - get
      - watch
      - list
---
# Source: presto-loadbalancer/templates/cluster-roles-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-presto-loadbalancer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-presto-loadbalancer
subjects:
  - kind: ServiceAccount
    name: my-presto-loadbalancer
    namespace: default
---
# Source: presto-loadbalancer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-presto-loadbalancer
  labels:
    helm.sh/chart: presto-loadbalancer-0.1.16
    app.kubernetes.io/name: presto-loadbalancer
    app.kubernetes.io/instance: my-presto-loadbalancer
    app.kubernetes.io/version: "0.1.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: presto-loadbalancer
    app.kubernetes.io/instance: my-presto-loadbalancer
---
# Source: presto-loadbalancer/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-presto-loadbalancer-proxy
  labels:
    helm.sh/chart: presto-loadbalancer-0.1.16
    app.kubernetes.io/name: presto-loadbalancer
    app.kubernetes.io/instance: my-presto-loadbalancer
    app.kubernetes.io/version: "0.1.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: presto-loadbalancer
      app.kubernetes.io/instance: my-presto-loadbalancer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: presto-loadbalancer
        app.kubernetes.io/instance: my-presto-loadbalancer
    spec:
      serviceAccountName: my-presto-loadbalancer
      securityContext:
        {}
      volumes:
        - name: config-volume
          configMap:
            name: my-presto-loadbalancer-configmap
      containers:
        - name: presto-loadbalancer
          securityContext:
            {}
          image: "garugaru/presto-loadbalancer:v0.1.5"
          imagePullPolicy: Always
          args: ["proxy", "--config", "/config/config.yml", "--static-files", "/ui"]
          volumeMounts:
            - name: config-volume
              mountPath: /config
          ports:
            - name: http
              containerPort: 8998
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            {}
