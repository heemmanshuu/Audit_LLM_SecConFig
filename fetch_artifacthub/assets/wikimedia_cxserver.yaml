---
# Source: cxserver/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cxserver-my-cxserver
  labels:
    app: cxserver
    chart: cxserver-0.2.11
    release: my-cxserver
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      app: cxserver
      release: my-cxserver
  policyTypes:
    - Ingress
  ingress:
    - ports:
      - port: 8080
        protocol: TCP
      - port: 9102
        protocol: TCP
      - port: 9090
        protocol: TCP
---
# Source: cxserver/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-my-cxserver
data:
  config.yaml: |- 
    # Number of worker processes to spawn.
    # Set to 0 to run everything in a single process without clustering.
    # Use 'ncpu' to run as many workers as there are CPU units
    num_workers: 1
    
    # Log error messages and gracefully restart a worker if v8 reports that it
    # uses more heap (note: not RSS) than this many mb.
    worker_heap_limit_mb: 300
    
    # The maximum interval in ms that can pass between two beat messages
    # sent by each worker to the master before it is killed
    worker_heartbeat_timeout: 7500
    
    # Logger info
    logging:
      name: cxserver
      streams:
        - type: stdout
          named_levels: true
    
    services:
      - name: cxserver
        module: app.js
        conf:
          cors: "*"
          port: 8080
          user_agent: CXServer/WMF
          # the template used for contacting mediawiki
          mwapi_req:
            body: '{{ request.body }}'
            query: '{{ default(request.query, {}) }}'
            headers:
              host: '{{ request.params.domain }}'
              user-agent: '{{ user-agent }}'
            method: '{{request.method}}'
            uri: http://mediawiki.svc.cluster.local/w/api.php
          # the template used for contacting MediaWiki API host
          restbase_req:
            method: '{{request.method}}'
            query: '{{ default(request.query, {}) }}'
            headers: '{{ request.headers }}'
            body: '{{ request.body }}'
            uri: http://restbase.svc.cluster.local/w/rest.php/v1/{+path}
          ratelimiter_key: X-Forwarded-For
          ratelimiter_rate: 
          languages: config/languages.yaml
          templatemapping:
            database: config/templatemapping.db
          sectionmapping:
            database: config/cx-section-titles-aligned.db
          mt:
            TestClient:
              languages: config/TestClient.yaml
            defaults: config/mt-defaults.wikimedia.yaml
---
# Source: cxserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cxserver-my-cxserver
  labels:
    app: cxserver
    chart: cxserver-0.2.11
    release: my-cxserver
    heritage: Helm
spec:
  type: NodePort
  selector:
    app: cxserver
    release: my-cxserver
    routed_via: my-cxserver
  ports:
  - name: http
    protocol: TCP
    port: 8080
---
# Source: cxserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cxserver-my-cxserver
  labels:
    app: cxserver
    chart: cxserver-0.2.11
    release: my-cxserver
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: cxserver
      release: my-cxserver
  replicas: 1
  template:
    metadata:
      labels:
        app: cxserver
        release: my-cxserver
        routed_via: my-cxserver
      annotations:
        checksum/config: 982bd7a92fce2a6db8ee2322cca4bdf9f303c8f27d62696626d32748f4d95f2d
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"        
    spec:
      containers:
        # The main application container
        - name: cxserver-my-cxserver
          image: "docker-registry.wikimedia.org/wikimedia/mediawiki-services-cxserver:latest"
          command: ["node"]
          args: ["/srv/service/server.js", "-c", "/etc/cxserver/config.yaml"]
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          livenessProbe:
            tcpSocket:
              port: 8080
          readinessProbe:
            httpGet:
              path: /_info
              port: 8080
          env:
            - name: SERVICE_IDENTIFIER
              value: cxserver-my-cxserver
          volumeMounts:
            - name: config-volume
              mountPath: /etc/cxserver
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
            limits:
              cpu: 1100m
              memory: 200Mi          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
               drop:
               - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault        
      volumes:
        - name: config-volume
          configMap:
            name: config-my-cxserver
---
# Source: cxserver/templates/tests/test-service-checker.yaml
apiVersion: v1
kind: Pod
metadata:
  name: 'cxserver-my-cxserver-service-checker'
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  containers:
  - name: 'cxserver-my-cxserver-service-checker'
    image: "docker-registry.wikimedia.org/service-checker"
    imagePullPolicy: IfNotPresent
    args: ["-t", "5", '$(CXSERVER_MY_CXSERVER_SERVICE_HOST)', 'http://cxserver-my-cxserver:8080']    
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
         drop:
         - ALL
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
  dnsPolicy: ClusterFirst
  restartPolicy: Never
