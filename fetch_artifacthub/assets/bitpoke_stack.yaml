---
# Source: stack/charts/mysql-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-stack-mysql-operator
  labels:
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: stack/charts/nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress
  namespace: default
automountServiceAccountToken: true
---
# Source: stack/charts/nginx-ingress/templates/default-backend-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
  name: my-stack-nginx-ingress-backend
  namespace: default
automountServiceAccountToken: true
---
# Source: stack/charts/wordpress-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-stack-wordpress-operator
  labels:
    helm.sh/chart: wordpress-operator-0.12.2
    app.kubernetes.io/name: wordpress-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: stack/charts/mysql-operator/templates/orchestrator-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-stack-mysql-operator-orc
  labels:
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
data:
  TOPOLOGY_USER: "b3JjaGVzdHJhdG9y"
  TOPOLOGY_PASSWORD: "dGhpcy1tdXN0LWJlLXNldC1pbi1zdG9uZS1iZWNhdXNlLW9mLW15c3FsLW9wZXJhdG9yLWJ1Zy03NQ=="
---
# Source: stack/charts/mysql-operator/templates/orchestrator-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-stack-mysql-operator-orc
  labels:
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
data:
  orchestrator.conf.json: "{\n  \"ApplyMySQLPromotionAfterMasterFailover\": true,\n  \"BackendDB\": \"sqlite\",\n  \"Debug\": false,\n  \"DetachLostReplicasAfterMasterFailover\": true,\n  \"DetectClusterAliasQuery\": \"SELECT CONCAT(SUBSTRING(@@hostname, 1, LENGTH(@@hostname) - 1 - LENGTH(SUBSTRING_INDEX(@@hostname,'-',-2))),'.',SUBSTRING_INDEX(@@report_host,'.',-1))\",\n  \"DetectInstanceAliasQuery\": \"SELECT @@hostname\",\n  \"DiscoverByShowSlaveHosts\": false,\n  \"FailMasterPromotionIfSQLThreadNotUpToDate\": true,\n  \"HTTPAdvertise\": \"http://{{ .Env.HOSTNAME }}-orc-svc:80\",\n  \"HostnameResolveMethod\": \"none\",\n  \"InstancePollSeconds\": 5,\n  \"ListenAddress\": \":3000\",\n  \"MasterFailoverLostInstancesDowntimeMinutes\": 10,\n  \"MySQLHostnameResolveMethod\": \"@@report_host\",\n  \"MySQLTopologyCredentialsConfigFile\": \"/etc/orchestrator/orc-topology.cnf\",\n  \"OnFailureDetectionProcesses\": [\n    \"/usr/local/bin/orc-helper event -w '{failureClusterAlias}' 'OrcFailureDetection' 'Failure: {failureType}, failed host: {failedHost}, lost replcas: {lostReplicas}' || true\",\n    \"/usr/local/bin/orc-helper failover-in-progress '{failureClusterAlias}' '{failureDescription}' || true\"\n  ],\n  \"PostIntermediateMasterFailoverProcesses\": [\n    \"/usr/local/bin/orc-helper event '{failureClusterAlias}' 'OrcPostIntermediateMasterFailover' 'Failure type: {failureType}, failed hosts: {failedHost}, slaves: {countSlaves}' || true\"\n  ],\n  \"PostMasterFailoverProcesses\": [\n    \"/usr/local/bin/orc-helper event '{failureClusterAlias}' 'OrcPostMasterFailover' 'Failure type: {failureType}, new master: {successorHost}, slaves: {slaveHosts}' || true\"\n  ],\n  \"PostUnsuccessfulFailoverProcesses\": [\n    \"/usr/local/bin/orc-helper event -w '{failureClusterAlias}' 'OrcPostUnsuccessfulFailover' 'Failure: {failureType}, failed host: {failedHost} with {countSlaves} slaves' || true\"\n  ],\n  \"PreFailoverProcesses\": [\n    \"/usr/local/bin/orc-helper failover-in-progress '{failureClusterAlias}' '{failureDescription}' || true\"\n  ],\n  \"ProcessesShellCommand\": \"sh\",\n  \"RaftAdvertise\": \"{{ .Env.HOSTNAME }}-orc-svc\",\n  \"RaftBind\": \"{{ .Env.HOSTNAME }}\",\n  \"RaftDataDir\": \"/var/lib/orchestrator\",\n  \"RaftEnabled\": true,\n  \"RaftNodes\": [],\n  \"RecoverIntermediateMasterClusterFilters\": [\n    \".*\"\n  ],\n  \"RecoverMasterClusterFilters\": [\n    \".*\"\n  ],\n  \"RecoveryIgnoreHostnameFilters\": [],\n  \"RecoveryPeriodBlockSeconds\": 300,\n  \"RemoveTextFromHostnameDisplay\": \":3306\",\n  \"SQLite3DataFile\": \"/var/lib/orchestrator/orc.db\",\n  \"SlaveLagQuery\": \"SELECT TIMESTAMPDIFF(SECOND,ts,UTC_TIMESTAMP()) as drift FROM sys_operator.heartbeat ORDER BY drift ASC LIMIT 1\",\n  \"UnseenInstanceForgetHours\": 1\n}"
  orc-topology.cnf: |
    [client]
    user = {{ .Env.ORC_TOPOLOGY_USER }}
    password = {{ .Env.ORC_TOPOLOGY_PASSWORD }}
---
# Source: stack/charts/nginx-ingress/templates/controller-configmap-addheaders.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress-custom-add-headers
  namespace: default
data: 
  server: nginx
---
# Source: stack/charts/nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress-controller
  namespace: default
data:
  allow-snippet-annotations: "true"
  add-headers: default/my-stack-nginx-ingress-custom-add-headers
  custom-http-errors: "502,503,504"
  hsts-preload: "true"
  proxy-buffer-size: "64k"
---
# Source: stack/charts/mysql-operator/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-stack-mysql-operator
  labels:
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - apps
  resources:
    - statefulsets
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - batch
  resources:
    - jobs
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - coordination.k8s.io
  resources:
    - leases
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - configmaps
    - events
    - jobs
    - persistentvolumeclaims
    - pods
    - secrets
    - services
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - pods/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - mysql.presslabs.org
  resources:
    - mysqlbackups
    - mysqlbackups/finalizers
    - mysqlbackups/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - mysql.presslabs.org
  resources:
    - mysqlclusters
    - mysqlclusters/finalizers
    - mysqlclusters/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - mysql.presslabs.org
  resources:
    - mysqldatabases
    - mysqldatabases/finalizers
    - mysqldatabases/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - mysql.presslabs.org
  resources:
    - mysqlusers
    - mysqlusers/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - policy
  resources:
    - poddisruptionbudgets
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
---
# Source: stack/charts/nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
  name: my-stack-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: stack/charts/wordpress-operator/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-stack-wordpress-operator
  labels:
    helm.sh/chart: wordpress-operator-0.12.2
    app.kubernetes.io/name: wordpress-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.2"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - apps
  resources:
    - deployments
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - batch
  resources:
    - cronjobs
    - jobs
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - coordination.k8s.io
  resources:
    - leases
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - events
    - persistentvolumeclaims
    - secrets
    - services
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - networking.k8s.io
  resources:
    - ingresses
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - wordpress.presslabs.org
  resources:
    - wordpresses
    - wordpresses/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
---
# Source: stack/charts/mysql-operator/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-stack-mysql-operator
  labels:
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-stack-mysql-operator
subjects:
  - name: my-stack-mysql-operator
    namespace: "default"
    kind: ServiceAccount
---
# Source: stack/charts/nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
  name: my-stack-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-stack-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: my-stack-nginx-ingress
    namespace: "default"
---
# Source: stack/charts/wordpress-operator/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-stack-wordpress-operator
  labels:
    helm.sh/chart: wordpress-operator-0.12.2
    app.kubernetes.io/name: wordpress-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.2"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-stack-wordpress-operator
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-stack-wordpress-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: stack/charts/nginx-ingress/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  # TODO(Jintao Zhang)
  # Once we release a new version of the controller,
  # we will be able to remove the configmap related permissions
  # We have used the Lease API for selection
  # ref: https://github.com/kubernetes/ingress-nginx/pull/8921
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: stack/charts/nginx-ingress/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-stack-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: my-stack-nginx-ingress
    namespace: "default"
---
# Source: stack/charts/mysql-operator/templates/orchestrator-raft-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-stack-mysql-operator-0-orc-svc
  labels:
    app.kubernetes.io/component: orchestrator-raft
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
  - name: http
    port: 80
    targetPort: 3000
  - name: raft
    port: 10008
    targetPort: 10008
  selector:
    statefulset.kubernetes.io/pod-name: my-stack-mysql-operator-0
---
# Source: stack/charts/mysql-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-stack-mysql-operator
  labels:
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      protocol: TCP
      targetPort: http
    - port: 9125
      name: prometheus
      protocol: TCP
      targetPort: prometheus
  selector:
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
---
# Source: stack/charts/nginx-ingress/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress-controller-admission
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
      appProtocol: https
  selector:
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/component: controller
---
# Source: stack/charts/nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress-controller
  namespace: default
spec:
  type: LoadBalancer
  ipFamilyPolicy: SingleStack
  ipFamilies: 
    - IPv4
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/component: controller
---
# Source: stack/charts/nginx-ingress/templates/default-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
  name: my-stack-nginx-ingress-defaultbackend
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
  selector:
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/component: default-backend
---
# Source: stack/charts/wordpress-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-stack-wordpress-operator
  labels:
    helm.sh/chart: wordpress-operator-0.12.2
    app.kubernetes.io/name: wordpress-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9125
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: wordpress-operator
    app.kubernetes.io/instance: my-stack
---
# Source: stack/charts/nginx-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-stack-nginx-ingress-controller
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress
      app.kubernetes.io/instance: my-stack
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress
        app.kubernetes.io/instance: my-stack
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: "registry.k8s.io/ingress-nginx/controller:v1.3.1@sha256:54f7fe2c6c5a9db9a0ebf1131797109bb7a4d91f56b9b362bde2abd237dd1974"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/my-stack-nginx-ingress-defaultbackend
            - --publish-service=$(POD_NAMESPACE)/my-stack-nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --controller-class=bitpoke.io/stack
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/my-stack-nginx-ingress-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
            - --default-ssl-certificate=bitpoke-stack/stack-ingress-default
            - --ingress-class=bitpoke-stack
          securityContext: 
            capabilities:
              drop:
              - ALL
              add:
              - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources: 
            requests:
              cpu: 100m
              memory: 90Mi
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: my-stack-nginx-ingress
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: my-stack-nginx-ingress-admission
---
# Source: stack/charts/nginx-ingress/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
  name: my-stack-nginx-ingress-defaultbackend
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress
      app.kubernetes.io/instance: my-stack
      app.kubernetes.io/component: default-backend
  replicas: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress
        app.kubernetes.io/instance: my-stack
        app.kubernetes.io/component: default-backend
    spec:
      containers:
        - name: nginx-ingress-default-backend
          image: "docker.io/bitpoke/stack-default-backend:latest"
          imagePullPolicy: Always
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsUser: 65534
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: my-stack-nginx-ingress-backend
      terminationGracePeriodSeconds: 60
---
# Source: stack/charts/wordpress-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-stack-wordpress-operator
  labels:
    helm.sh/chart: wordpress-operator-0.12.2
    app.kubernetes.io/name: wordpress-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: wordpress-operator
      app.kubernetes.io/instance: my-stack
  template:
    metadata:
      labels:
        app.kubernetes.io/name: wordpress-operator
        app.kubernetes.io/instance: my-stack
    spec:
      serviceAccountName: my-stack-wordpress-operator
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      containers:
        - name: wordpress-operator
          securityContext:
            {}
          image: "docker.io/bitpoke/wordpress-operator:v0.12.2"
          imagePullPolicy: IfNotPresent
          args:
            - --ingress-class=bitpoke-stack
          ports:
            - name: health
              containerPort: 8081
              protocol: TCP
            - name: prometheus
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: health
          readinessProbe:
            httpGet:
              path: /readyz
              port: health
          resources:
            {}
---
# Source: stack/charts/mysql-operator/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-stack-mysql-operator
  labels:
    helm.sh/chart: mysql-operator-0.6.3
    app.kubernetes.io/name: mysql-operator
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.6.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: my-stack-mysql-operator-orc
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql-operator
      app.kubernetes.io/instance: my-stack
  template:
    metadata:
      annotations:
        checksum/orchestrator-config: e7ee599e8641d2a9ea6efa5d4e60a2aa4744b2e077e5d0bf0d36e555c5e09415
        checksum/orchestrator-secret: 4a0ec6db6b8c873a9ebda3fcc6bb7972bc448199f22088401986baaf852374d9
      labels:
        app.kubernetes.io/name: mysql-operator
        app.kubernetes.io/instance: my-stack
    spec:
      serviceAccountName: my-stack-mysql-operator
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      containers:
        - name: operator
          securityContext:
            {}
          image: "docker.io/bitpoke/mysql-operator:v0.6.3"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: prometheus
              protocol: TCP
          env:
            - name: ORC_TOPOLOGY_USER
              valueFrom:
                secretKeyRef:
                  name: my-stack-mysql-operator-orc
                  key: TOPOLOGY_USER
            - name: ORC_TOPOLOGY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-stack-mysql-operator-orc
                  key: TOPOLOGY_PASSWORD
          args:
            - --leader-election-namespace=default
            - --orchestrator-uri=http://my-stack-mysql-operator.default/api
            - --sidecar-image=docker.io/bitpoke/mysql-operator-sidecar-5.7:v0.6.3
            - --sidecar-mysql8-image=docker.io/bitpoke/mysql-operator-sidecar-8.0:v0.6.3
            - --metrics-exporter-image=docker.io/prom/mysqld-exporter:v0.13.0
            - --failover-before-shutdown=true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
          resources:
            {}
        - name: orchestrator
          securityContext:
            {}
          image: docker.io/bitpoke/mysql-operator-orchestrator:v0.6.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
            - containerPort: 10008
              name: raft
              protocol: TCP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - prefix: ORC_
              secretRef:
                name: my-stack-mysql-operator-orc
          volumeMounts:
            - name: data
              mountPath: /var/lib/orchestrator
            - name: config
              mountPath: /usr/local/share/orchestrator/templates
          livenessProbe:
            timeoutSeconds: 10
            initialDelaySeconds: 200
            httpGet:
              path: /api/lb-check
              port: 3000
          # https://github.com/github/orchestrator/blob/master/docs/raft.md#proxy-healthy-raft-nodes
          readinessProbe:
            timeoutSeconds: 10
            httpGet:
              path: /api/raft-health
              port: 3000
          resources:
            {}

      volumes:
        - name: config
          configMap:
            name: my-stack-mysql-operator-orc
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ ReadWriteOnce ]
        resources:
          requests:
            storage: 1Gi
---
# Source: stack/charts/nginx-ingress/templates/controller-ingressclass.yaml
# We don't support namespaced ingressClass yet
# So a ClusterRole and a ClusterRoleBinding is required
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: bitpoke-stack
spec:
  controller: bitpoke.io/stack
---
# Source: stack/charts/mysql-operator/templates/clustersservicemonitor.yaml
# This is a ServicMonitor for the MySQL Clusters.
# To scrape the operator, we need https://github.com/bitpoke/mysql-operator/issues/151 first.
---
# Source: stack/charts/mysql-operator/templates/servicemonitor.yaml
# This is a ServicMonitor for the MySQL operator itself.
# To scrape the operator, we need https://github.com/bitpoke/mysql-operator/issues/151 first.
---
# Source: stack/templates/acme-issuer.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-stack-ingress-default
  labels:
    helm.sh/chart: stack-0.12.4
    app.kubernetes.io/name: stack
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.4"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: my-stack-ingress-default
  commonName: "ingress.local"
  issuerRef:
    name: my-stack-ca-issuer
    kind: Issuer
---
# Source: stack/templates/acme-issuer.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-stack-ca
  labels:
    helm.sh/chart: stack-0.12.4
    app.kubernetes.io/name: stack
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.4"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: my-stack-ca
  commonName: "Bitpoke Stack - Root CA (my-stack)"
  dnsNames:
    - stack.bitpoke.io
  duration: "87600h"
  isCA: true
  issuerRef:
    name: my-stack-ca-issuer
    kind: Issuer
---
# Source: stack/templates/acme-issuer.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: my-stack-default-certificate-issuer
  labels:
    helm.sh/chart: stack-0.12.4
    app.kubernetes.io/name: stack
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ca:
    secretName: my-stack-ca
---
# Source: stack/templates/acme-issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-stack-ca-issuer
  labels:
    helm.sh/chart: stack-0.12.4
    app.kubernetes.io/name: stack
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "v0.12.4"
    app.kubernetes.io/managed-by: Helm
spec:
  selfSigned: {}
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/validating-webhook.yaml
# before changing this value, check the required kubernetes version
# https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: my-stack-nginx-ingress-admission
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    matchPolicy: Equivalent
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
    clientConfig:
      service:
        namespace: "default"
        name: my-stack-nginx-ingress-controller-admission
        path: /networking/v1/ingresses
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-stack-nginx-ingress-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-stack-nginx-ingress-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  my-stack-nginx-ingress-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-stack-nginx-ingress-admission
subjects:
  - kind: ServiceAccount
    name: my-stack-nginx-ingress-admission
    namespace: "default"
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  my-stack-nginx-ingress-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-stack-nginx-ingress-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-stack-nginx-ingress-admission
subjects:
  - kind: ServiceAccount
    name: my-stack-nginx-ingress-admission
    namespace: "default"
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-stack-nginx-ingress-admission-create
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: my-stack-nginx-ingress-admission-create
      labels:
        helm.sh/chart: nginx-ingress-4.2.5
        app.kubernetes.io/name: nginx-ingress
        app.kubernetes.io/instance: my-stack
        app.kubernetes.io/version: "1.3.1"
        app.kubernetes.io/part-of: nginx-ingress
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.3.0@sha256:549e71a6ca248c5abd51cdb73dbc3083df62cf92ed5e6147c780e30f7e007a47"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=my-stack-nginx-ingress-controller-admission,my-stack-nginx-ingress-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=my-stack-nginx-ingress-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
      restartPolicy: OnFailure
      serviceAccountName: my-stack-nginx-ingress-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: stack/charts/nginx-ingress/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-stack-nginx-ingress-admission-patch
  namespace: default
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: nginx-ingress-4.2.5
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: my-stack
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/part-of: nginx-ingress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: my-stack-nginx-ingress-admission-patch
      labels:
        helm.sh/chart: nginx-ingress-4.2.5
        app.kubernetes.io/name: nginx-ingress
        app.kubernetes.io/instance: my-stack
        app.kubernetes.io/version: "1.3.1"
        app.kubernetes.io/part-of: nginx-ingress
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.3.0@sha256:549e71a6ca248c5abd51cdb73dbc3083df62cf92ed5e6147c780e30f7e007a47"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=my-stack-nginx-ingress-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=my-stack-nginx-ingress-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
      restartPolicy: OnFailure
      serviceAccountName: my-stack-nginx-ingress-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
