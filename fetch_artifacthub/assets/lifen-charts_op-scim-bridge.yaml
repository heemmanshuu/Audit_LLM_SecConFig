---
# Source: op-scim-bridge/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: op-scim-bridge
  namespace: default
  labels:
    helm.sh/chart: op-scim-bridge-1.0.3
    app.kubernetes.io/component: op-scim-bridge
    app.kubernetes.io/name: op-scim-bridge
    app.kubernetes.io/instance: my-op-scim-bridge
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.3.1"
---
# Source: op-scim-bridge/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-op-scim-bridge-scimsession
  namespace: default
  labels:
    helm.sh/chart: op-scim-bridge-1.0.3
    app.kubernetes.io/component: op-scim-bridge
    app.kubernetes.io/name: op-scim-bridge
    app.kubernetes.io/instance: my-op-scim-bridge
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.3.1"
type: Opaque
data:
  scim-session: YWJjZGVmZw==
---
# Source: op-scim-bridge/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-op-scim-bridge-redis
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.1
    heritage: Helm
    release: my-op-scim-bridge
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: op-scim-bridge/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-op-scim-bridge-redis-health
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.1
    heritage: Helm
    release: my-op-scim-bridge
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
     response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: op-scim-bridge/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-op-scim-bridge-redis-headless
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.1
    release: my-op-scim-bridge
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: my-op-scim-bridge
---
# Source: op-scim-bridge/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-op-scim-bridge-redis-master
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.1
    release: my-op-scim-bridge
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: my-op-scim-bridge
    role: master
---
# Source: op-scim-bridge/charts/redis/templates/redis-slave-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-op-scim-bridge-redis-slave
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.1
    release: my-op-scim-bridge
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: my-op-scim-bridge
    role: slave
---
# Source: op-scim-bridge/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-op-scim-bridge
  namespace: default
  labels:
    helm.sh/chart: op-scim-bridge-1.0.3
    app.kubernetes.io/component: op-scim-bridge
    app.kubernetes.io/name: op-scim-bridge
    app.kubernetes.io/instance: my-op-scim-bridge
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.3.1"
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/component: op-scim-bridge
    app.kubernetes.io/name: op-scim-bridge
    app.kubernetes.io/instance: my-op-scim-bridge
  type: ClusterIP
---
# Source: op-scim-bridge/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-op-scim-bridge
  namespace: default
  labels:
    helm.sh/chart: op-scim-bridge-1.0.3
    app.kubernetes.io/component: op-scim-bridge
    app.kubernetes.io/name: op-scim-bridge
    app.kubernetes.io/instance: my-op-scim-bridge
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.3.1"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: op-scim-bridge
      app.kubernetes.io/name: op-scim-bridge
      app.kubernetes.io/instance: my-op-scim-bridge
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: op-scim-bridge
        app.kubernetes.io/name: op-scim-bridge
        app.kubernetes.io/instance: my-op-scim-bridge
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: op-scim-bridge
      containers:
      - name: op-scim-bridge
        image: 1password/scim:v2.3.1
        imagePullPolicy: Always
        command: ["/op-scim/op-scim"]
        args: ["--redis-host=my-op-scim-bridge-redis-master", "--session=/secret/scimsession", "--ping-server=true", "--port=8080", "--letsencrypt-domain=example.com"]
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
        env:
        - name: "update"
          value: "1"
        - name: OP_DOMAIN
          value: example.com
        - name: OP_ONE_CLICK
          value: "true"
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 250m
            memory: 512M
          requests:
            cpu: 125m
            memory: 256M
        livenessProbe:
          httpGet:
            path: /ping
            scheme: HTTP
            port: 8080
          failureThreshold: 3
          periodSeconds: 30
          initialDelaySeconds: 15
        volumeMounts:
        - name: my-op-scim-bridge-scimsession
          mountPath: "/secret"
          readOnly: false
      volumes:
      - name: my-op-scim-bridge-scimsession
        secret:
          secretName: my-op-scim-bridge-scimsession
      tolerations:
        - effect: NoSchedule
          key: key1
          operator: Equal
          value: value1
---
# Source: op-scim-bridge/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-op-scim-bridge-redis-master
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.1
    release: my-op-scim-bridge
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: my-op-scim-bridge
      role: master
  serviceName: my-op-scim-bridge-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.7.1
        release: my-op-scim-bridge
        role: master
      annotations:
        checksum/health: 4527f6e41c5330b0eda7f29257017337dce184fcff46f4f6b921eadf1c0eb13c
        checksum/configmap: 37fe5b90954e3969fc659895ba0499b4c0739f190d9de7e08567b6be3c91d675
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.5-debian-10-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--protected-mode" "no")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
              /run.sh ${ARGS[@]}
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 5
          resources:
            null
          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: health
          configMap:
            name: my-op-scim-bridge-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-op-scim-bridge-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: my-op-scim-bridge
          heritage: Helm
          component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        
        selector:
  updateStrategy:
    type: RollingUpdate
---
# Source: op-scim-bridge/charts/redis/templates/redis-slave-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-op-scim-bridge-redis-slave
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.1
    release: my-op-scim-bridge
    heritage: Helm
spec:
  replicas: 1
  serviceName: my-op-scim-bridge-redis-headless
  selector:
    matchLabels:
      app: redis
      release: my-op-scim-bridge
      role: slave
  template:
    metadata:
      labels:
        app: redis
        release: my-op-scim-bridge
        chart: redis-10.7.1
        role: slave
      annotations:
        checksum/health: 4527f6e41c5330b0eda7f29257017337dce184fcff46f4f6b921eadf1c0eb13c
        checksum/configmap: 37fe5b90954e3969fc659895ba0499b4c0739f190d9de7e08567b6be3c91d675
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.5-debian-10-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
                export REDIS_MASTER_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
              ARGS+=("--protected-mode" "no")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
              /run.sh "${ARGS[@]}"
          env:
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: my-op-scim-bridge-redis-master-0.my-op-scim-bridge-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 5
          resources:
            null
          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: health
          configMap:
            name: my-op-scim-bridge-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-op-scim-bridge-redis
        - name: sentinel-tmp-conf
          emptyDir: {}
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: my-op-scim-bridge
          heritage: Helm
          component: slave
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        
        selector:
  updateStrategy:
    type: RollingUpdate
---
# Source: op-scim-bridge/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-op-scim-bridge
  namespace: default
  labels:
    helm.sh/chart: op-scim-bridge-1.0.3
    app.kubernetes.io/component: op-scim-bridge
    app.kubernetes.io/name: op-scim-bridge
    app.kubernetes.io/instance: my-op-scim-bridge
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.3.1"
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: "scim.example.com"
    http:
      paths:
      - path: 
        pathType: ImplementationSpecific
        backend:
          service:
            name: my-op-scim-bridge
            port: 
              number: 80
