---
# Source: metacontroller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-metacontroller
  labels:
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: metacontroller/templates/clusterrole-edit.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metacontroller-edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - metacontroller.k8s.io
    resources:
      - controllerrevisions
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
---
# Source: metacontroller/templates/clusterrole-view.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metacontroller-view
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - metacontroller.k8s.io
    resources:
      - compositecontrollers
      - controllerrevisions
      - decoratorcontrollers
    verbs:
      - get
      - list
      - watch
---
# Source: metacontroller/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-metacontroller
  labels:
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
# Source: metacontroller/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-metacontroller
  labels:
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-metacontroller
subjects:
  - kind: ServiceAccount
    name: my-metacontroller
    namespace: default
---
# Source: metacontroller/templates/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-metacontroller-metrics
  labels:
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9999
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
---
# Source: metacontroller/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-metacontroller
  labels:
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metacontroller
      app.kubernetes.io/instance: my-metacontroller
  serviceName: ""
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metacontroller
        app.kubernetes.io/instance: my-metacontroller
    spec:
      serviceAccountName: my-metacontroller
      securityContext:
        {}
      containers:
        - name: metacontroller
          securityContext:
            {}
          image: "metacontrollerio/metacontroller:v2.1.1"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/bin/metacontroller
          ports:
            - name: http-metrics
              containerPort: 9999
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: http-metrics
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /metrics
              port: http-metrics
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
---
# Source: metacontroller/templates/tests/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-metacontroller-tests
  labels:
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: tests
  annotations:
    helm.sh/hook: test
data:
  test_all.py: |
    import requests


    def test_metrics_service_connection():
        url = "http://my-metacontroller-metrics:9999/metrics"

        response = requests.get(url)

        assert response.status_code == 200
---
# Source: metacontroller/templates/tests/pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-metacontroller-tests
  labels:
    helm.sh/chart: metacontroller-1.2.2
    app.kubernetes.io/name: metacontroller
    app.kubernetes.io/instance: my-metacontroller
    app.kubernetes.io/version: "2.1.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: tests
  annotations:
    helm.sh/hook: test
spec:
  containers:
    - name: tests
      image: "ghcr.io/cowboysysop/pytest:1.0.35"
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - name: tests
          mountPath: /tests
          readOnly: true
      workingDir: /tests
  restartPolicy: Never
  volumes:
    - name: tests
      configMap:
        name: my-metacontroller-tests
