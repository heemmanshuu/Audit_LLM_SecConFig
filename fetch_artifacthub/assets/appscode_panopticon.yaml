---
# Source: panopticon/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-panopticon
  namespace: default
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
---
# Source: panopticon/templates/apiregistration.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-panopticon-apiserver-cert
  namespace: default
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lRQ2Y3SmQ0M09vbjdWb0QyTGhiQktaVEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBNU1UWXdPRFEzTXpOYUZ3MHpOREE1TVRRd09EUTNNek5hTUJneApGakFVQmdOVkJBTVREVzE1TFhCaGJtOXdkR2xqYjI0d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDWm03MHZ6T0c5US9xNUNMQlUyRm9aYlBLNFo4TlM4TDZaN3NnSVVGQk9PYVhHZTFmQ1Jia1MKRUFzUkJFWXIvQWpnalNWVU9JaHlhbFZhTW1rbHZOZWk2T1hxWHl1UFlZTkVHaGdvSnJQNlNyVU1JR3krc0tUeQpzWUk5Sm96ZDFnWW83TGtQTC9ST2pNK1JvSDdZWmRHYVMyOUlpU1daT0M0Ynl4UFdXSXJzRk9kOGgyVVF4alZmCmdRVW1HR2tJV3FrZVFZaHJJSkVoczBGZmt0Q01EL0Vwd2I4U1h1ckhJTkxDMklNWm91QXpNVm9VajJINlZ1MFEKSG05QytPNCttdU1Mck5hOU11UjNBZWtoZWFITlJmYlFUSklybEFPdHVUOWh6Q2FJSjVLakduVXNZTitteVdBWgpXT0xNcit4TGVFV3ZhUlFVTysrR25oTFZSTEMrZkIrVEFnTUJBQUdqZ1o0d2dac3dEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZERnRTU0VJWFhhdHFhV0VON0JsU0V0U1Npd2pNRHNHQTFVZEVRUTBNREtDRlcxNQpMWEJoYm05d2RHbGpiMjR1WkdWbVlYVnNkSUlaYlhrdGNHRnViM0IwYVdOdmJpNWtaV1poZFd4MExuTjJZekFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUU3UjQvVGpYb0d4RTd0OWIxOURUMVFaTzZlUlErUFM1NHVTb3VPc00KZk1LcmxZUTQyVytWa1RTcktyVFBVRkRvSjFsWFM0dEo3bUc2a0ZoaDYxSU54Y3NFc2FyZEpTaGcwUUtselI3UAoySWthZmRLY1c1R0hSZ00wWEJnckRvMFlaKzJlbmFLeUM4WUxJaGVWWkVNMmJKVUhwU3RReUVXeGFOSndWT3Y3CmhzSDQ5aFhJbmp3bzA0TlFXRXppRHF3aVY3N2JrYllCQjRUQ29IM0w1Zmt1d2RMd2xrQ2d6dElyV0grYWYrMngKUytBbHp4MUMwVHFNV3lGNVQ2UFg1WE1xR2ZLUFhsUk56QWFGQmd2VnNzU25XcHYyOGIzQitucHUzR1dobHh2NQpEWTZmcFY1QnZOV1JlbUdpeWpyNDVtNmFaSUozSE1DSjNoVVRrNitkcFdDVTh3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbVp1OUw4emh2VVA2dVFpd1ZOaGFHV3p5dUdmRFV2QyttZTdJQ0ZCUVRqbWx4bnRYCndrVzVFaEFMRVFSR0svd0k0STBsVkRpSWNtcFZXakpwSmJ6WG91amw2bDhyajJHRFJCb1lLQ2F6K2txMURDQnMKdnJDazhyR0NQU2FNM2RZR0tPeTVEeS8wVG96UGthQisyR1hSbWt0dlNJa2xtVGd1RzhzVDFsaUs3QlRuZklkbApFTVkxWDRFRkpoaHBDRnFwSGtHSWF5Q1JJYk5CWDVMUWpBL3hLY0cvRWw3cXh5RFN3dGlER2FMZ016RmFGSTloCitsYnRFQjV2UXZqdVBwcmpDNnpXdlRMa2R3SHBJWG1oelVYMjBFeVNLNVFEcmJrL1ljd21pQ2VTb3hwMUxHRGYKcHNsZ0dWaml6Sy9zUzNoRnIya1VGRHZ2aHA0UzFVU3d2bndma3dJREFRQUJBb0lCQUc0akduMEJmQUlHa2VqRgo4QmlGbitTSEYybGRETkdWU0RSNjN2WUhEKzFtckJRcUwveGRuWnJ6NGR0cm94eTZjMnIrQ1B2Z0pRVlVkS3BkClpzTG1LZjdtMnFNM1piWkNocW4zdzhaV0tjbVdjMFdrb2hQLzkrVURuWXhXN2IzSlRWVmVsam5yZWxJdjZFeFUKTlY3WGNuZ2RDa2VKL21sanZMdTAyaDVnRWd1K3ZOTHo1NTNNenVrd0h4TWpOcHZiSkdhd0NoWjNkdHVtWHFaUAowVGZsaVdQTW9JV0EybVFYaUxWRHphdTd1Q2xMQi9jalFXd2YrYzhhY3F0ZDdVMmdkZkJiT1c5ekE1bGhiQS9yCldyd2lpTjNXNTQ5QmJ1eFBMZnYyRmlqdmhyU1E2T1pzMVliSnV5Z3lmYzAxTzBGTmgzTmplY1lzaG9GYkFWdlEKRjhTbFIrRUNnWUVBd0ZIbG1iaEVTaUx3V0kzdWgvVWpqems1N1dqQ0craWZQL2htWEVWeHI0emFZNHRZV054RApQbjlyayt5ZmJkSkJqdCs3TGI1ZHdTWTlqbFlUNDVpNkZLUW8yTGJLZWZWaTRMOEs3cWkvSjRrVHNZNDMzYU1XCkdZM1NNNDNqRUVmdmpwMXB0MUVWWjdjbkx1THdpNnZvamVmbUUwcDRpV1N6TGVHcjg5VXhnNXNDZ1lFQXpIaHYKbC9rVzUvSXZFU1ZuOFo3Q3hsV3JZNVF4Rkh1WFZTSnpVQ0syUTVFZ0NWUHFqcDhwTnVHQVAyZTJrNWhJRTZGMwpORVUwbVN3UjRQM2puRTZvVUM1dnRJYzlMTjJxSGZDMExmbXdFUytKSVJYR3c2eW94NFI2cnhjaDljeE5XMEh1CndjNWJsUzB0SzRxTFRhRDJjNWsxdVFlSDNDQU9tSys2bFQ3K1Aya0NnWUVBbU13NGxFSXZsNHRjMDY2b2RrS1EKcHdrN2VlRkNYM1FabW5TYnR2SEJtazFaY2I5VFNQNXZPcWQzN0VZU2dPbU5CcHZCRmwzcUZUeHhxYlhBQlpMaApQT2NVUU9JeHltWG8wbEZXdVRrKzdvVmRMVE9tTlNTT3VXelJOZjZrQ2RwdGZTeVp3bmpjZmRPcGdQbnpUYlVlCmhpaFp4cmZqUHAzUU1rTGJJRlloQ2NNQ2dZQkNTNVpiSHY5SFN5WHBtRWhBZGlwTzVqNEF0bTdIWmw4bDBscXoKRTk0bXdDb3ovQXBrSGNUZUwzVkdtWmovOS9MK3NtNlUrdzlYem9zcGVRaFFpTXhYMndhSzhRSnJ4cDgrdittYgpzb1pjdkIzcEpVZGg4RngwL0VaTytPQWc4eEh0MGMzWTl0Q0k2TEhwbVMwYmlXSC9EeUQxRWpVQnNUOHFVR2ZkCnRpUDNhUUtCZ1FDK1pzNDJpeDllY3JMaDhORHhYeGlScEowMWZzSFZudi9CeEJmdlB1UTB1eFZFMjBBM2lMSGcKcVpLVTFjcUdLN0pzRlpsTmdyN2J5VE5XYlNvdGhUbWJVcnk0M3dHb3k4VStPY1FQWFpWUXRROU5UbGhvLzVDZQorak56a2orRGlhNHZJeC9nU2VZRGtVQ25nUTB3UVQwcWZPendRSDM0QjZtMllHRm9tTUYyclE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRV005U3VLWjdIMlZqeFNEUi94N04rVEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBNU1UWXdPRFEzTXpOYUZ3MHpOREE1TVRRd09EUTNNek5hTUEweApDekFKQmdOVkJBTVRBbU5oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEwWDFZCjhQMExFM3puUW9hT3ZVRkc5UnZUcUx0KzZScUVwZjlSN3Vsb1hwaEtlUWhDK1g3MjV0d2lDZFlhaS9ZMDdkOUoKUjExbnVmZWJqMDVpb3ovbWNCeDQyZG90VFdoVVp2WUk0azZoZ3htMTdDdmNCS01FZTVwTWQ1SVpFRUNQdkt3Qwpka2FqNUdDeDBzbktKbXRGL1AvK0o4c1VSWm1PZG9YL3VrTHVpUjQ5R0VTbXlXWC9COCtkQUlwSnNpamo5cGVuClI2UitkeGZVejVYVUtldDBLV0E5Nk54K0twZ1hsY0hhMURtdnhrdkNpNUdCaVRjYzA4aHAxSkh0ZStKbUNBbHMKKzVaZkN0clhVMERNNWlzUnNVMm9tNXNWbmk0VXZpcFdibThlZndSL3JUN1B0d0xmMWNxYVlCMWxYS2wyNDZGUAowaWVseEUwOFFqM2ttYmdEQndJREFRQUJvMkV3WHpBT0JnTlZIUThCQWY4RUJBTUNBcVF3SFFZRFZSMGxCQll3CkZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUUKRkRGdFNTRUlYWGF0cWFXRU43QmxTRXRTU2l3ak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQWZQM2pkM21ZQQpyQVMrOHJRMVVmaEdJMExUUFNxVktKUEVrcjVpTjAzeU50a0NkVGh0ZkVMdUI5S04xVm56Qk9KZWpnUkRUSDE2CnhQb0NVNXBGSmE0aWtsWEFTV3NNeXQ1dVFrL2pJdWJjRG9NY0haTVR5Q21VUHA2QjJXV0FhOUZaUTdyak1mZ0UKNmNJbTVteGh5ZG12M2RIT0xBK1N4VEtBdHdsd0IrcERBTHg5cGxiYitSalVjVSt6N01QN3haT0hQUC9ZUFR6TgpWTEtVazd6VGRFeU5NMXI0bXdWdmtVZ3FScHFZbisxTkEvdlVDUlYxaElURHZZK3NvNWtPelRkbWQxRCtkejAvCmI2YmJKNndkeGlKSzlmK1RiQ2NxdmIwVzZGOFF1eDN2Q3ZaZTNON0I0SE94YVBvTUtLVEhGNGdSbzNQMm9HeXAKY29LemxSYzdpL3hWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: panopticon/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-panopticon
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs: ["*"]
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get", "patch", "delete"]
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs: ["delete", "get", "list", "watch", "patch"]
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["*"]
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
---
# Source: panopticon/templates/apiregistration.yaml
# to delegate authentication and authorization
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-panopticon-apiserver-auth-delegator
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: my-panopticon
  namespace: default
---
# Source: panopticon/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-panopticon
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-panopticon
subjects:
- kind: ServiceAccount
  name: my-panopticon
  namespace: default
---
# Source: panopticon/templates/license-checker-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-panopticon-license-checker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-checker
subjects:
- kind: ServiceAccount
  name: my-panopticon
  namespace: default
---
# Source: panopticon/templates/license-reader-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-panopticon-license-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-reader
subjects:
- kind: ServiceAccount
  name: my-panopticon
  namespace: default
---
# Source: panopticon/templates/apiregistration.yaml
# to read the config for terminating authentication
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-panopticon-apiserver-extension-server-authentication-reader
  namespace: kube-system
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: my-panopticon
  namespace: default
---
# Source: panopticon/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-panopticon
  namespace: default
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  # Port used to expose admission webhook apiserver
  - name: api
    port: 443
    targetPort: 8443
  - name: telemetry
    port: 8081
    targetPort: 8081
  selector:
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
---
# Source: panopticon/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-panopticon
  namespace: default
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: panopticon
      app.kubernetes.io/instance: my-panopticon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: panopticon
        app.kubernetes.io/instance: my-panopticon
      annotations:
        checksum/apiregistration.yaml: 7f126208a8336f940c43a6d61359148fb4bc0698d0ca8c8840e613f793618474
    spec:
      
      serviceAccountName: my-panopticon
      containers:
      - name: operator
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        image: ghcr.io/appscode/panopticon:v0.0.14
        imagePullPolicy: IfNotPresent
        args:
        - run
        - --v=3
        - --secure-port=8443
        - --audit-log-path=-
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --authorization-always-allow-paths=/healthz
        - --authorization-always-allow-paths=/readyz
        - --authorization-always-allow-paths=/livez
        - --authorization-always-allow-paths=/metrics
        - --use-kubeapiserver-fqdn-for-aks=true
        - --enable-validating-webhook=true
        ports:
        - containerPort: 8443
        - containerPort: 8081
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          {}
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-panopticon-apiserver-cert
      securityContext:
        fsGroup: 65535
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: panopticon/templates/apiregistration.yaml
# register as aggregated apiserver
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.validators.metrics.appscode.com
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  group: validators.metrics.appscode.com
  version: v1alpha1
  service:
    namespace: default
    name: my-panopticon
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRV005U3VLWjdIMlZqeFNEUi94N04rVEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBNU1UWXdPRFEzTXpOYUZ3MHpOREE1TVRRd09EUTNNek5hTUEweApDekFKQmdOVkJBTVRBbU5oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEwWDFZCjhQMExFM3puUW9hT3ZVRkc5UnZUcUx0KzZScUVwZjlSN3Vsb1hwaEtlUWhDK1g3MjV0d2lDZFlhaS9ZMDdkOUoKUjExbnVmZWJqMDVpb3ovbWNCeDQyZG90VFdoVVp2WUk0azZoZ3htMTdDdmNCS01FZTVwTWQ1SVpFRUNQdkt3Qwpka2FqNUdDeDBzbktKbXRGL1AvK0o4c1VSWm1PZG9YL3VrTHVpUjQ5R0VTbXlXWC9COCtkQUlwSnNpamo5cGVuClI2UitkeGZVejVYVUtldDBLV0E5Nk54K0twZ1hsY0hhMURtdnhrdkNpNUdCaVRjYzA4aHAxSkh0ZStKbUNBbHMKKzVaZkN0clhVMERNNWlzUnNVMm9tNXNWbmk0VXZpcFdibThlZndSL3JUN1B0d0xmMWNxYVlCMWxYS2wyNDZGUAowaWVseEUwOFFqM2ttYmdEQndJREFRQUJvMkV3WHpBT0JnTlZIUThCQWY4RUJBTUNBcVF3SFFZRFZSMGxCQll3CkZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUUKRkRGdFNTRUlYWGF0cWFXRU43QmxTRXRTU2l3ak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQWZQM2pkM21ZQQpyQVMrOHJRMVVmaEdJMExUUFNxVktKUEVrcjVpTjAzeU50a0NkVGh0ZkVMdUI5S04xVm56Qk9KZWpnUkRUSDE2CnhQb0NVNXBGSmE0aWtsWEFTV3NNeXQ1dVFrL2pJdWJjRG9NY0haTVR5Q21VUHA2QjJXV0FhOUZaUTdyak1mZ0UKNmNJbTVteGh5ZG12M2RIT0xBK1N4VEtBdHdsd0IrcERBTHg5cGxiYitSalVjVSt6N01QN3haT0hQUC9ZUFR6TgpWTEtVazd6VGRFeU5NMXI0bXdWdmtVZ3FScHFZbisxTkEvdlVDUlYxaElURHZZK3NvNWtPelRkbWQxRCtkejAvCmI2YmJKNndkeGlKSzlmK1RiQ2NxdmIwVzZGOFF1eDN2Q3ZaZTNON0I0SE94YVBvTUtLVEhGNGdSbzNQMm9HeXAKY29LemxSYzdpL3hWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  groupPriorityMinimum: 10000
  versionPriority: 15
---
# Source: panopticon/templates/license.yaml
# if license file is provided, then create a secret for license
---
# Source: panopticon/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: my-panopticon
  namespace: default
  labels:
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/name: panopticon
    monitoring.appscode.com/prometheus: federated
spec:
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      app.kubernetes.io/name: panopticon
      app.kubernetes.io/instance: my-panopticon
  endpoints:
  - port: api
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    scheme: https
    interval: 10s
    honorLabels: true
    tlsConfig:
      ca:
        secret:
          name: my-panopticon-apiserver-cert
          key: ca.crt
      serverName: "my-panopticon.default.svc"
  - port: telemetry
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    scheme: http
    interval: 10s
    honorLabels: true
---
# Source: panopticon/templates/license-checker-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-checker
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Get cluster id
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs: ["get"]
# Issue license
- apiGroups:
  - proxyserver.licenses.appscode.com
  resources:
  - licenserequests
  verbs: ["create"]
# Detect workload/owner of operator pod
- apiGroups:
  - ""
  resources:
  - pods
  verbs: ["get"]
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs: ["get"]
# Write events in case of license verification failure
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["get", "list", "create", "patch"]
---
# Source: panopticon/templates/license-reader-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-reader
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Detect license server endpoint for kubedb addons
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get"]
- nonResourceURLs:
  - /appscode/license
  verbs: ["get"]
---
# Source: panopticon/templates/cleaner.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-panopticon-cleaner
  namespace: default
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 120
  template:
    spec:
      
      serviceAccountName: my-panopticon
      containers:
      - name: busybox
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        image: ghcr.io/appscode/kubectl:v1.22
        command:
          - sh
          - -c
          - "sleep 2; \
           kubectl delete validatingwebhookconfigurations validators.metrics.appscode.com || true; \
           kubectl delete apiservice v1alpha1.validators.metrics.appscode.com || true;"
        imagePullPolicy: IfNotPresent
      restartPolicy: Never
      securityContext:
        fsGroup: 65535
---
# Source: panopticon/templates/validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: validators.metrics.appscode.com
  labels:
    helm.sh/chart: panopticon-v2024.8.21
    app.kubernetes.io/name: panopticon
    app.kubernetes.io/instance: my-panopticon
    app.kubernetes.io/version: "v0.0.14"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
webhooks:
  - name: metricsconfigurations.validators.metrics.appscode.com
    clientConfig:
      service:
        namespace: default
        name: kubernetes
        path: /apis/validators.metrics.appscode.com/v1alpha1/metricsconfigurationwebhooks
      caBundle: dW5rbm93bg==
    rules:
      - operations:
          - CREATE
          - UPDATE
        apiGroups:
          - metrics.appscode.com
        apiVersions:
          - "*"
        resources:
          - metricsconfigurations
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Fail
    sideEffects: None
