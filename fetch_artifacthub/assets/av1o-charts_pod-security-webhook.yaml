---
# Source: pod-security-webhook/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-pod-security-webhook
  labels:
    helm.sh/chart: pod-security-webhook-0.3.2
    app.kubernetes.io/name: pod-security-webhook
    app.kubernetes.io/instance: my-pod-security-webhook
    app.kubernetes.io/version: "v1.23-beta.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: pod-security-webhook/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-pod-security-webhook
data:
  podsecurityconfiguration.yaml: |
    apiVersion: pod-security.admission.config.k8s.io/v1beta1
    kind: PodSecurityConfiguration
    defaults:
      audit: privileged
      audit-version: latest
      enforce: privileged
      enforce-version: latest
      warn: privileged
      warn-version: latest
    exemptions:
      namespaces: []
      runtimeClasses: []
      usernames: []
---
# Source: pod-security-webhook/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-pod-security-webhook
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces"]
    verbs: ["get", "watch", "list"]
---
# Source: pod-security-webhook/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-pod-security-webhook
subjects:
  - kind: ServiceAccount
    name: my-pod-security-webhook
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-pod-security-webhook
  apiGroup: rbac.authorization.k8s.io
---
# Source: pod-security-webhook/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-pod-security-webhook
  labels:
    helm.sh/chart: pod-security-webhook-0.3.2
    app.kubernetes.io/name: pod-security-webhook
    app.kubernetes.io/instance: my-pod-security-webhook
    app.kubernetes.io/version: "v1.23-beta.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: webhook
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: pod-security-webhook
    app.kubernetes.io/instance: my-pod-security-webhook
---
# Source: pod-security-webhook/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-pod-security-webhook
  labels:
    helm.sh/chart: pod-security-webhook-0.3.2
    app.kubernetes.io/name: pod-security-webhook
    app.kubernetes.io/instance: my-pod-security-webhook
    app.kubernetes.io/version: "v1.23-beta.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: pod-security-webhook
      app.kubernetes.io/instance: my-pod-security-webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pod-security-webhook
        app.kubernetes.io/instance: my-pod-security-webhook
    spec:
      serviceAccountName: my-pod-security-webhook
      priorityClassName: system-cluster-critical
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-pod-security-webhook
        - name: pki
          secret:
            secretName: 
      containers:
        - name: pod-security-webhook
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "k8s.gcr.io/sig-auth/pod-security-webhook:v1.23-beta.0"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          ports:
            - name: webhook
              containerPort: 10250
          args:
            [
                "--config",
                "/etc/config/podsecurityconfiguration.yaml",
                "--tls-cert-file",
                "/etc/pki/tls.crt",
                "--tls-private-key-file",
                "/etc/pki/tls.key",
                "--secure-port",
                "10250",
            ]
          resources:
            requests:
              cpu: 100m
          volumeMounts:
            - mountPath: /etc/config
              readOnly: true
              name: config
            - mountPath: /etc/pki
              readOnly: true
              name: pki
      nodeSelector:
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
---
# Source: pod-security-webhook/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: "pod-security-webhook.kubernetes.io"
webhooks:
  # Audit annotations will be prefixed with this name
  - name: "pod-security-webhook.kubernetes.io"
    # Fail-closed admission webhooks can present operational challenges.
    # You may want to consider using a failure policy of Ignore, but should
    # consider the security tradeoffs.
    failurePolicy: Fail
    namespaceSelector:
      # Exempt the webhook itself to avoid a circular dependency.
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["pod-security-webhook", "kube-system"]
    rules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources:
          - namespaces
          - pods
          - pods/ephemeralcontainers
    clientConfig:
      # Populate with the CA for the serving certificate
      caBundle: ""
      service:
        namespace: default
        name: my-pod-security-webhook
    admissionReviewVersions: ["v1"]
    sideEffects: None
    timeoutSeconds: 5

  # Audit annotations will be prefixed with this name
  - name: "advisory.pod-security-webhook.kubernetes.io"
    # Non-enforcing resources can safely fail-open.
    failurePolicy: Ignore
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["pod-security-webhook", "kube-system"]
    rules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources:
          - podtemplates
          - replicationcontrollers
      - apiGroups: ["apps"]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources:
          - daemonsets
          - deployments
          - replicasets
          - statefulsets
      - apiGroups: ["batch"]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources:
          - cronjobs
          - jobs
    clientConfig:
      # Populate with the CA for the serving certificate
      caBundle: ""
      service:
        namespace: default
        name: my-pod-security-webhook
    admissionReviewVersions: ["v1"]
    sideEffects: None
    timeoutSeconds: 5
