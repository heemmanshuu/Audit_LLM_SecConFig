---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/datanodes-netpol.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-gaffer-road-traffic-hdfs-datanodes
  labels:
    
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: datanode
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: hdfs
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: datanode
  policyTypes:
  - Ingress
  ingress:
  # Allow clients to access client RPC and HTTP servers
  - ports:
    - port: http
    - port: https
    - port: data-xfer
  # Allow NameNode and DataNodes to access IPC Server
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: hdfs
          app.kubernetes.io/instance: my-gaffer-road-traffic
    ports:
    - port: ipc
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/namenode-netpol.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-gaffer-road-traffic-hdfs-namenodes
  labels:
    
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: hdfs
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: namenode
  policyTypes:
  - Ingress
  ingress:
  # Allow clients to access client RPC and HTTP servers
  - ports:
    - port: http
    - port: https
    - port: client-rpc
  # Allow NameNode and DataNodes to access Service and Lifeline RPC Servers
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: hdfs
          app.kubernetes.io/instance: my-gaffer-road-traffic
    ports:
    - port: service-rpc
    - port: lifeline-rpc
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: my-gaffer-road-traffic-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.5
    release: my-gaffer-road-traffic
    heritage: Helm
    component: server
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: my-gaffer-road-traffic
      component: server
  maxUnavailable: 1
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/namenode-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-gaffer-road-traffic-hdfs-namenode
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/secrets.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Secret
metadata:
  name: my-gaffer-road-traffic-hdfs
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-gaffer-road-traffic-accumulo-config
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: accumulo-config
data:
  accumulo.properties: "aW5zdGFuY2Uudm9sdW1lcz1oZGZzOi8vbXktZ2FmZmVyLXJvYWQtdHJhZmZpYy1oZGZzLW5hbWVub2RlLTAubXktZ2FmZmVyLXJvYWQtdHJhZmZpYy1oZGZzLW5hbWVub2Rlczo4MDIwL2FjY3VtdWxvCmluc3RhbmNlLnpvb2tlZXBlci5ob3N0PW15LWdhZmZlci1yb2FkLXRyYWZmaWMtem9va2VlcGVyCgpnZW5lcmFsLnZmcy5jbGFzc3BhdGhzPSRBQ0NVTVVMT19IT01FL2xpYi9leHQvW14uXS4qLmphcgp0cmFjZS51c2VyPXRyYWNlcgp0cmFjZS50b2tlbi5wcm9wZXJ0eS5wYXNzd29yZD10cmFjZXIKaW5zdGFuY2Uuc2VjcmV0PURFRkFVTFQKdHNlcnZlci5jYWNoZS5kYXRhLnNpemU9MTVNCnRzZXJ2ZXIuY2FjaGUuaW5kZXguc2l6ZT00ME0KdHNlcnZlci5tZW1vcnkubWFwcy5tYXg9MTI4TQp0c2VydmVyLm1lbW9yeS5tYXBzLm5hdGl2ZS5lbmFibGVkPXRydWUKdHNlcnZlci5zb3J0LmJ1ZmZlci5zaXplPTUwTQp0c2VydmVyLnRvdGFsLm11dGF0aW9uLnF1ZXVlLm1heD0xNk0KdHNlcnZlci53YWxvZy5tYXguc2l6ZT0xMjhN"
  accumulo-client.properties: "YXV0aC50eXBlPXBhc3N3b3JkCmF1dGgucHJpbmNpcGFsPXJvb3QKYXV0aC50b2tlbj1yb290Cmluc3RhbmNlLm5hbWU9YWNjdW11bG8KaW5zdGFuY2Uuem9va2VlcGVycz1teS1nYWZmZXItcm9hZC10cmFmZmljLXpvb2tlZXBlcg=="
  accumulo-env.sh: "IyEgL3Vzci9iaW4vZW52IGJhc2gKCiMgQ29weXJpZ2h0IDIwMjIgQ3Jvd24gQ29weXJpZ2h0CiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKIyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiMgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIFZhcmlhYmxlcyB0aGF0IG11c3QgYmUgc2V0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiMjIEFjY3VtdWxvIGxvZ3MgZGlyZWN0b3J5LiBSZWZlcmVuY2VkIGJ5IGxvZ2dlciBjb25maWcuCmV4cG9ydCBBQ0NVTVVMT19MT0dfRElSPSIke0FDQ1VNVUxPX0xPR19ESVI6LSR7YmFzZWRpcn0vbG9nc30iCiMjIEhhZG9vcCBpbnN0YWxsYXRpb24KZXhwb3J0IEhBRE9PUF9IT01FPSIke0hBRE9PUF9IT01FOi0vcGF0aC90by9oYWRvb3B9IgojIyBIYWRvb3AgY29uZmlndXJhdGlvbgpleHBvcnQgSEFET09QX0NPTkZfRElSPSIke0hBRE9PUF9DT05GX0RJUjotJHtIQURPT1BfSE9NRX0vZXRjL2hhZG9vcH0iCiMjIFpvb2tlZXBlciBpbnN0YWxsYXRpb24KZXhwb3J0IFpPT0tFRVBFUl9IT01FPSIke1pPT0tFRVBFUl9IT01FOi0vcGF0aC90by96b29rZWVwZXJ9IgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBCdWlsZCBDTEFTU1BBVEggdmFyaWFibGUKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiMjIFZlcmlmeSB0aGF0IEhhZG9vcCAmIFpvb2tlZXBlciBpbnN0YWxsYXRpb24gZGlyZWN0b3JpZXMgZXhpc3QKaWYgW1sgISAtZCAiJFpPT0tFRVBFUl9IT01FIiBdXTsgdGhlbgogIGVjaG8gIlpPT0tFRVBFUl9IT01FPSRaT09LRUVQRVJfSE9NRSBpcyBub3Qgc2V0IHRvIGEgdmFsaWQgZGlyZWN0b3J5IGluIGFjY3VtdWxvLWVudi5zaCIKICBleGl0IDEKZmkKaWYgW1sgISAtZCAiJEhBRE9PUF9IT01FIiBdXTsgdGhlbgogIGVjaG8gIkhBRE9PUF9IT01FPSRIQURPT1BfSE9NRSBpcyBub3Qgc2V0IHRvIGEgdmFsaWQgZGlyZWN0b3J5IGluIGFjY3VtdWxvLWVudi5zaCIKICBleGl0IDEKZmkKCiMjIEJ1aWxkIHVzaW5nIGV4aXN0aW5nIENMQVNTUEFUSCwgY29uZi8gZGlyZWN0b3J5LCBkZXBlbmRlbmNpZXMgaW4gbGliLywgYW5kIGV4dGVybmFsIEhhZG9vcCAmIFpvb2tlZXBlciBkZXBlbmRlbmNpZXMKaWYgW1sgLW4gIiRDTEFTU1BBVEgiIF1dOyB0aGVuCiAgQ0xBU1NQQVRIPSIke0NMQVNTUEFUSH06JHtjb25mfSIKZWxzZQogIENMQVNTUEFUSD0iJHtjb25mfSIKZmkKQ0xBU1NQQVRIPSIke0NMQVNTUEFUSH06JHtsaWJ9Lyo6JHtIQURPT1BfQ09ORl9ESVJ9OiR7Wk9PS0VFUEVSX0hPTUV9Lyo6JHtaT09LRUVQRVJfSE9NRX0vbGliLyo6JHtIQURPT1BfSE9NRX0vc2hhcmUvaGFkb29wL2NsaWVudC8qIgpleHBvcnQgQ0xBU1NQQVRICgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBCdWlsZCBKQVZBX09QVFMgdmFyaWFibGUuIERlZmF1bHRzIGJlbG93IHdvcmsgYnV0IGNhbiBiZSBlZGl0ZWQuCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyMgSlZNIG9wdGlvbnMgc2V0IGZvciBhbGwgcHJvY2Vzc2VzLiBFeHRyYSBvcHRpb25zIGNhbiBiZSBwYXNzZWQgaW4gYnkgc2V0dGluZyBBQ0NVTVVMT19KQVZBX09QVFMgdG8gYW4gYXJyYXkgb2Ygb3B0aW9ucy4KSkFWQV9PUFRTPSgiJHtBQ0NVTVVMT19KQVZBX09QVFNbQF19IgogICctWFg6K1VzZUNvbmNNYXJrU3dlZXBHQycKICAnLVhYOkNNU0luaXRpYXRpbmdPY2N1cGFuY3lGcmFjdGlvbj03NScKICAnLVhYOitDTVNDbGFzc1VubG9hZGluZ0VuYWJsZWQnCiAgJy1YWDpPbk91dE9mTWVtb3J5RXJyb3I9a2lsbCAtOSAlcCcKICAnLVhYOi1PbWl0U3RhY2tUcmFjZUluRmFzdFRocm93JwogICctRGphdmEubmV0LnByZWZlcklQdjRTdGFjaz10cnVlJwogICItRGFjY3VtdWxvLm5hdGl2ZS5saWIucGF0aD0ke2xpYn0vbmF0aXZlIikKCiMjIE1ha2Ugc3VyZSBBY2N1bXVsbyBuYXRpdmUgbGlicmFyaWVzIGFyZSBidWlsdCBzaW5jZSB0aGV5IGFyZSBlbmFibGVkIGJ5IGRlZmF1bHQKIyAiJHtiaW59Ii9hY2N1bXVsby11dGlsIGJ1aWxkLW5hdGl2ZSAmPiAvZGV2L251bGwKCiMjIEpWTSBvcHRpb25zIHNldCBmb3IgaW5kaXZpZHVhbCBhcHBsaWNhdGlvbnMKY2FzZSAiJGNtZCIgaW4KICBtYXN0ZXIpICBKQVZBX09QVFM9KCIke0pBVkFfT1BUU1tAXX0iICctWG14NTEybScgJy1YbXM1MTJtJykgOzsKICBtb25pdG9yKSBKQVZBX09QVFM9KCIke0pBVkFfT1BUU1tAXX0iICctWG14MjU2bScgJy1YbXMyNTZtJykgOzsKICBnYykgICAgICBKQVZBX09QVFM9KCIke0pBVkFfT1BUU1tAXX0iICctWG14MjU2bScgJy1YbXMyNTZtJykgOzsKICB0c2VydmVyKSBKQVZBX09QVFM9KCIke0pBVkFfT1BUU1tAXX0iICctWG14NzY4bScgJy1YbXM3NjhtJykgOzsKICAqKSAgICAgICBKQVZBX09QVFM9KCIke0pBVkFfT1BUU1tAXX0iICctWG14MjU2bScgJy1YbXM2NG0nKSA7Owplc2FjCgojIyBKVk0gb3B0aW9ucyBzZXQgZm9yIGxvZ2dpbmcuIFJldmlldyBsb2dqNCBwcm9wZXJ0aWVzIGZpbGVzIHRvIHNlZSBob3cgdGhleSBhcmUgdXNlZC4KSkFWQV9PUFRTPSgiJHtKQVZBX09QVFNbQF19IgogICItRGFjY3VtdWxvLmxvZy5kaXI9JHtBQ0NVTVVMT19MT0dfRElSfSIKICAiLURhY2N1bXVsby5hcHBsaWNhdGlvbj0ke2NtZH0ke0FDQ1VNVUxPX1NFUlZJQ0VfSU5TVEFOQ0V9XyQoaG9zdG5hbWUpIikKCmNhc2UgIiRjbWQiIGluCiAgbW9uaXRvcikKICAgIEpBVkFfT1BUUz0oIiR7SkFWQV9PUFRTW0BdfSIgIi1EbG9nNGouY29uZmlndXJhdGlvbj1sb2c0ai1tb25pdG9yLnByb3BlcnRpZXMiKQogICAgOzsKICBnY3xtYXN0ZXJ8dHNlcnZlcnx0cmFjZXIpCiAgICBKQVZBX09QVFM9KCIke0pBVkFfT1BUU1tAXX0iICItRGxvZzRqLmNvbmZpZ3VyYXRpb249bG9nNGotc2VydmljZS5wcm9wZXJ0aWVzIikKICAgIDs7CiAgKikKICAgICMgbGV0IGxvZzRqIHVzZSBpdHMgZGVmYXVsdCBiZWhhdmlvciAobG9nNGoueG1sLCBsb2c0ai5wcm9wZXJ0aWVzKQogICAgdHJ1ZQogICAgOzsKZXNhYwoKZXhwb3J0IEpBVkFfT1BUUwoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIFZhcmlhYmxlcyBzZXQgdG8gYSBkZWZhdWx0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmV4cG9ydCBNQUxMT0NfQVJFTkFfTUFYPSR7TUFMTE9DX0FSRU5BX01BWDotMX0KIyMgQWRkIEhhZG9vcCBuYXRpdmUgbGlicmFyaWVzIHRvIHNoYXJlZCBsaWJyYXJ5IHBhdGhzIGdpdmVuIG9wZXJhdGluZyBzeXN0ZW0KY2FzZSAiJCh1bmFtZSkiIGluCiAgRGFyd2luKSBleHBvcnQgRFlMRF9MSUJSQVJZX1BBVEg9IiR7SEFET09QX0hPTUV9L2xpYi9uYXRpdmU6JHtEWUxEX0xJQlJBUllfUEFUSH0iIDs7CiAgKikgICAgICBleHBvcnQgTERfTElCUkFSWV9QQVRIPSIke0hBRE9PUF9IT01FfS9saWIvbmF0aXZlOiR7TERfTElCUkFSWV9QQVRIfSIgOzsKZXNhYwoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBWYXJpYWJsZXMgdGhhdCBhcmUgb3B0aW9uYWwuIFVuY29tbWVudCB0byBzZXQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiMjIFNwZWNpZmllcyBjb21tYW5kIHRoYXQgd2lsbCBiZSBwbGFjZWQgYmVmb3JlIGNhbGxzIHRvIEphdmEgaW4gYWNjdW11bG8gc2NyaXB0CiMgZXhwb3J0IEFDQ1VNVUxPX0pBVkFfUFJFRklYPSIiCg=="
  core-site.xml: "PCEtLQogIH4gQ29weXJpZ2h0IDIwMjAtMjAyMiBDcm93biBDb3B5cmlnaHQKICB+CiAgfiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICB+IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICB+IFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogIH4KICB+ICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICB+CiAgfiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAgfiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogIH4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgfiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgfiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICAtLT4KPGNvbmZpZ3VyYXRpb24+PC9jb25maWd1cmF0aW9uPgo="
  log4j-monitor.properties: "IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lIG9yIG1vcmUKIyBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKIyB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuCiMgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8gWW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAKIyAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aAojIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAojCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQojIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiMgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiMgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAojIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKIyMgTG9nNGogMS4yIGZpbGUgdGhhdCBjb25maWd1cmVzIGxvZ2dpbmcgZm9yIEFjY3VtdWxvIE1vbml0b3IKIyMgVGhlIHN5c3RlbSBwcm9wZXJ0aWVzIHJlZmVyZW5jZWQgYmVsb3cgYXJlIGNvbmZpZ3VyZWQgYnkgYWNjdW11bG8tZW52LnNoCgojIyBEZWZpbmUgYSBsb2cgZmlsZSBhcHBlbmRlcgpsb2c0ai5hcHBlbmRlci5maWxlPW9yZy5hcGFjaGUubG9nNGouUm9sbGluZ0ZpbGVBcHBlbmRlcgpsb2c0ai5hcHBlbmRlci5maWxlLkZpbGU9JHthY2N1bXVsby5sb2cuZGlyfS8ke2FjY3VtdWxvLmFwcGxpY2F0aW9ufS5sb2cKbG9nNGouYXBwZW5kZXIuZmlsZS5NYXhGaWxlU2l6ZT0xMDBNQgpsb2c0ai5hcHBlbmRlci5maWxlLk1heEJhY2t1cEluZGV4PTEwCmxvZzRqLmFwcGVuZGVyLmZpbGUuVGhyZXNob2xkPUFMTApsb2c0ai5hcHBlbmRlci5maWxlLmxheW91dD1vcmcuYXBhY2hlLmxvZzRqLlBhdHRlcm5MYXlvdXQKbG9nNGouYXBwZW5kZXIuZmlsZS5sYXlvdXQuQ29udmVyc2lvblBhdHRlcm49JWR7SVNPODYwMX0gWyUtOGN7Mn1dICUtNXA6ICVtJW4KCiMjIERlZmluZSBhbiBhcHBlbmRlciBmb3IgdGhlIEFjY3VtdWxvIE1vbml0b3IgdG8gbG9nIHRvIGl0cyBvd24gd2ViIEdVSQpsb2c0ai5hcHBlbmRlci5ndWk9b3JnLmFwYWNoZS5hY2N1bXVsby5zZXJ2ZXIubW9uaXRvci5Mb2dTZXJ2aWNlCmxvZzRqLmFwcGVuZGVyLmd1aS5UaHJlc2hvbGQ9V0FSTgoKIyMgQXBwZW5kIG1vbml0b3IgbG9ncyB0byBpdHMgb3duIHdlYiBHVUkKbG9nNGoubG9nZ2VyLm9yZy5hcGFjaGUuYWNjdW11bG89SU5IRVJJVEVELCBndWkKCiMjIEFwcGVuZCBtb3N0IGxvZ3MgdG8gZmlsZQpsb2c0ai5yb290TG9nZ2VyPUlORk8sIGZpbGU="
  log4j-service.properties: "IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lIG9yIG1vcmUKIyBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKIyB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuCiMgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8gWW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAKIyAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aAojIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAojCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQojIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiMgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiMgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAojIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKIyMgTG9nNGogMS4yIGZpbGUgdGhhdCBjb25maWd1cmVzIGxvZ2dpbmcgZm9yIGFsbCBBY2N1bXVsbyBzZXJ2aWNlcyAoTWFzdGVyLCBUYWJsZXRTZXJ2ZXIsIEdDLCBhbmQgVHJhY2VyKSBleGNlcHQgTW9uaXRvcgojIyBUaGUgc3lzdGVtIHByb3BlcnRpZXMgcmVmZXJlbmNlZCBiZWxvdyBhcmUgY29uZmlndXJlZCBieSBhY2N1bXVsby1lbnYuc2gKCiMjIERlZmluZSBhIGxvZyBmaWxlIGFwcGVuZGVyCmxvZzRqLmFwcGVuZGVyLmZpbGU9b3JnLmFwYWNoZS5sb2c0ai5Sb2xsaW5nRmlsZUFwcGVuZGVyCmxvZzRqLmFwcGVuZGVyLmZpbGUuRmlsZT0ke2FjY3VtdWxvLmxvZy5kaXJ9LyR7YWNjdW11bG8uYXBwbGljYXRpb259LmxvZwpsb2c0ai5hcHBlbmRlci5maWxlLk1heEZpbGVTaXplPTEwME1CCmxvZzRqLmFwcGVuZGVyLmZpbGUuTWF4QmFja3VwSW5kZXg9MTAKbG9nNGouYXBwZW5kZXIuZmlsZS5UaHJlc2hvbGQ9QUxMCmxvZzRqLmFwcGVuZGVyLmZpbGUubGF5b3V0PW9yZy5hcGFjaGUubG9nNGouUGF0dGVybkxheW91dApsb2c0ai5hcHBlbmRlci5maWxlLmxheW91dC5Db252ZXJzaW9uUGF0dGVybj0lZHtJU084NjAxfSBbJS04Y3syfV0gJS01cDogJW0lbgoKIyMgRGVmaW5lIGFuIGFwcGVuZGVyIHRvIHNlbmQgaW1wb3J0YW50IGxvZ3MgdG8gdGhlIHRoZSBwcmltYXJ5IEFjY3VtdWxvIE1vbml0b3IKIyMgVGhlIHByaW1hcnkgbW9uaXRvciBpcyB0aGUgb25lIGN1cnJlbnRseSBob2xkaW5nIGEgc2hhcmVkIGxvY2sgaW4gWm9vS2VlcGVyLAojIyBhbmQgaXMgdHlwaWNhbGx5IHRoZSBvbmUgdGhhdCBzdGFydGVkIGZpcnN0Lgpsb2c0ai5hcHBlbmRlci5tb25pdG9yPW9yZy5hcGFjaGUuYWNjdW11bG8ubW9uaXRvci51dGlsLkFjY3VtdWxvTW9uaXRvckFwcGVuZGVyCmxvZzRqLmFwcGVuZGVyLm1vbml0b3IuVGhyZXNob2xkPVdBUk4KCiMjIFVuY29tbWVudCB0byBkZWZpbmUgYSBsb2cgZmlsZSBhcHBlbmRlciBmb3IgYXVkaXQgbG9ncwojbG9nNGouYXBwZW5kZXIuYXVkaXQ9b3JnLmFwYWNoZS5sb2c0ai5EYWlseVJvbGxpbmdGaWxlQXBwZW5kZXIKI2xvZzRqLmFwcGVuZGVyLmF1ZGl0LkZpbGU9JHthY2N1bXVsby5sb2cuZGlyfS8ke2FjY3VtdWxvLmFwcGxpY2F0aW9ufS5hdWRpdAojbG9nNGouYXBwZW5kZXIuYXVkaXQuRGF0ZVBhdHRlcm49Jy4neXl5eS1NTS1kZAojbG9nNGouYXBwZW5kZXIuYXVkaXQubGF5b3V0PW9yZy5hcGFjaGUubG9nNGouUGF0dGVybkxheW91dAojbG9nNGouYXBwZW5kZXIuYXVkaXQubGF5b3V0LkNvbnZlcnNpb25QYXR0ZXJuPSVke0lTTzg2MDF9IFslY3syfV0gJS01cDogJW0lbgojbG9nNGouYWRkaXRpdml0eS5vcmcuYXBhY2hlLmFjY3VtdWxvLmF1ZGl0PWZhbHNlCgojIyBDaGFuZ2UgdGhpcyBsb2cgbGV2ZWwgZnJvbSBPRkYgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgdG8gZW5hYmxlIGF1ZGl0IGxvZ2dpbmc6CiMjICAgSU5GTwojIyAgICAgZW5hYmxlcyBhdWRpdCBsb2dnaW5nIChpbmhlcml0IGFwcGVuZGVycyBmcm9tIHJvb3QgbG9nZ2VyKQojIyAgIElORk8sIGF1ZGl0CiMjICAgICBlbmFibGVzIGF1ZGl0IGxvZ2dpbmcgdXNpbmcgdGhlIGF1ZGl0IGxvZyBhcHBlbmRlcgojIyAgICAgKHJlcXVpcmVzIGF1ZGl0IGxvZyBmaWxlIGFwcGVuZGVyIGFib3ZlIHRvIGJlIHVuY29tbWVudGVkKQpsb2c0ai5sb2dnZXIub3JnLmFwYWNoZS5hY2N1bXVsby5hdWRpdD1PRkYKCiMjIEFwcGVuZCBsb2dzIHRvIHRoZSBwcmltYXJ5IEFjY3VtdWxvIE1vbml0b3IKbG9nNGoubG9nZ2VyLm9yZy5hcGFjaGUuYWNjdW11bG89SU5IRVJJVEVELCBtb25pdG9yCgojIyBDb25zdHJhaW4gc29tZSBwYXJ0aWN1bGFybHkgc3BhbW15IGxvZ2dlcnMKbG9nNGoubG9nZ2VyLm9yZy5hcGFjaGUuYWNjdW11bG8uY29yZS5maWxlLnJmaWxlLmJjZmlsZT1JTkZPCmxvZzRqLmxvZ2dlci5vcmcuYXBhY2hlLnpvb2tlZXBlcj1FUlJPUgoKIyMgQXBwZW5kIG1vc3QgbG9ncyB0byBmaWxlCmxvZzRqLnJvb3RMb2dnZXI9SU5GTywgZmlsZQ=="
  log4j.properties: "IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lIG9yIG1vcmUKIyBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKIyB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuCiMgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8gWW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAKIyAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aAojIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgojIyBMb2c0aiAxLjIgZmlsZSB0aGF0IGNvbmZpZ3VyZXMgbG9nZ2luZyBmb3IgY2xpZW50cyBhbmQgdXRpbGl0eSBjb21tYW5kcwoKIyMgRGVmaW5lIGEgY29uc29sZSBhcHBlbmRlcgpsb2c0ai5hcHBlbmRlci5jb25zb2xlPW9yZy5hcGFjaGUubG9nNGouQ29uc29sZUFwcGVuZGVyCmxvZzRqLmFwcGVuZGVyLmNvbnNvbGUuVGFyZ2V0PVN5c3RlbS5lcnIKbG9nNGouYXBwZW5kZXIuY29uc29sZS5UaHJlc2hvbGQ9QUxMCmxvZzRqLmFwcGVuZGVyLmNvbnNvbGUubGF5b3V0LkNvbnZlcnNpb25QYXR0ZXJuPSVke0lTTzg2MDF9IFslLThjezJ9XSAlLTVwOiAlbSVuCmxvZzRqLmFwcGVuZGVyLmNvbnNvbGUubGF5b3V0PW9yZy5hcGFjaGUubG9nNGouUGF0dGVybkxheW91dAoKIyMgSGlkZSBhdWRpdCBsb2dzIGdlbmVyYXRlZCBieSB0aGUgc2hlbGwKbG9nNGoubG9nZ2VyLm9yZy5hcGFjaGUuYWNjdW11bG8uc2hlbGwuU2hlbGwuYXVkaXQ9V0FSTgoKIyMgQ29uc3RyYWluIHNvbWUgcGFydGljdWxhcmx5IHNwYW1teSBsb2dnZXJzCmxvZzRqLmxvZ2dlci5vcmcuYXBhY2hlLmFjY3VtdWxvLmNvcmUuZmlsZS5yZmlsZS5iY2ZpbGUuQ29tcHJlc3Npb249V0FSTgpsb2c0ai5sb2dnZXIub3JnLmFwYWNoZS5jb21tb25zLnZmczIuaW1wbC5EZWZhdWx0RmlsZVN5c3RlbU1hbmFnZXI9V0FSTgpsb2c0ai5sb2dnZXIub3JnLmFwYWNoZS5oYWRvb3AuaW8uY29tcHJlc3M9V0FSTgpsb2c0ai5sb2dnZXIub3JnLmFwYWNoZS56b29rZWVwZXI9RVJST1IKCiMjIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIGZvciBkZXRhaWxlZCBsb2dnaW5nIChmb3IgZXhhbXBsZSwgaW4gdGhlIFNoZWxsKQojbG9nNGoubG9nZ2VyLm9yZy5hcGFjaGUuYWNjdW11bG8uY29yZT1UUkFDRQoKIyMgQXBwZW5kIG1vc3QgbG9ncyB0byBjb25zb2xlCmxvZzRqLnJvb3RMb2dnZXI9SU5GTywgY29uc29sZQ=="
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/post-install-cmds/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-gaffer-road-traffic-accumulo-cmds
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  run.sh: IyEvYmluL2Jhc2ggLWUKCkRJUj0iJCggY2QgIiQoIGRpcm5hbWUgIiR7QkFTSF9TT1VSQ0VbMF19IiApIiAmJiBwd2QgKSIKY2QgJERJUgoKQ0xJRU5UX0NPTkZfRklMRT0iJHtBQ0NVTVVMT19DT05GX0RJUn0vYWNjdW11bG8tY2xpZW50LnByb3BlcnRpZXMiClsgLWYgIiR7QUNDVU1VTE9fQ09ORl9ESVJ9L2NsaWVudC5jb25mIiBdICYmIENMSUVOVF9DT05GX0ZJTEU9IiR7QUNDVU1VTE9fQ09ORl9ESVJ9L2NsaWVudC5jb25mIgoKVVNFUk5BTUU9JChncmVwICJhdXRoLnByaW5jaXBhbCIgIiR7Q0xJRU5UX0NPTkZfRklMRX0iIHwgZ3JlcCAtdiAiXiMiIHwgY3V0IC1kPSAtZjIpClBBU1NXT1JEPSQoZ3JlcCAiYXV0aC50b2tlbiIgIiR7Q0xJRU5UX0NPTkZfRklMRX0iIHwgZ3JlcCAtdiAiXiMiIHwgY3V0IC1kPSAtZjIpCltbIC16ICIke1VTRVJOQU1FfSIgfHwgLXogIiR7UEFTU1dPUkR9IiBdXSAmJiBlY2hvICJVbmFibGUgdG8gbG9jYXRlIEFjY3VtdWxvIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBpbiAke0NMSUVOVF9DT05GX0ZJTEV9IiAmJiBleGl0IDEKCnVudGlsIGFjY3VtdWxvIHNoZWxsIC11ICR7VVNFUk5BTUV9IC1wICR7UEFTU1dPUkR9IC1lIGluZm8gfHwgWyAkKCggQVRURU1QVFMrKyApKSAtZ3QgNjAgXTsgZG8KICBlY2hvICIkKGRhdGUpIC0gV2FpdGluZyBmb3IgQWNjdW11bG8gaW5zdGFuY2UgdG8gYmUgcmVhZHkuLi4iCiAgc2xlZXAgNQpkb25lCgphY2N1bXVsbyBzaGVsbCAtZnYgLi9jb21tYW5kcy50eHQgLXUgJHtVU0VSTkFNRX0gLXAgJHtQQVNTV09SRH0=
  accumulo-user-management.js: dmFyIGFsbFN5c3RlbVBlcm1pc3Npb25zID0gb3JnLmFwYWNoZS5hY2N1bXVsby5jb3JlLnNlY3VyaXR5LlN5c3RlbVBlcm1pc3Npb24udmFsdWVzKCk7CnZhciBhbGxUYWJsZVBlcm1pc3Npb25zID0gb3JnLmFwYWNoZS5hY2N1bXVsby5jb3JlLnNlY3VyaXR5LlRhYmxlUGVybWlzc2lvbi52YWx1ZXMoKTsKdmFyIHJldm9rZUVuYWJsZWQgPSAidHJ1ZSI7CgpmdW5jdGlvbiBwcm9jZXNzVXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBhdXRocywgc3lzdGVtUGVybWlzc2lvbnMsIHRhYmxlUGVybWlzc2lvbnMpIHsKICB2YXIgcGFzc3dvcmRUb2tlbiA9IG5ldyBvcmcuYXBhY2hlLmFjY3VtdWxvLmNvcmUuY2xpZW50LnNlY3VyaXR5LnRva2Vucy5QYXNzd29yZFRva2VuKHBhc3N3b3JkKTsKCiAgdmFyIHVzZXJFeGlzdHMgPSBjb25uZWN0aW9uLnNlY3VyaXR5T3BlcmF0aW9ucygpLmxpc3RMb2NhbFVzZXJzKCkuY29udGFpbnModXNlcm5hbWUpOwogIGlmICghdXNlckV4aXN0cykgewogICAgcHJpbnQoJ0NyZWF0aW5nIHVzZXI6ICcgKyB1c2VybmFtZSkKICAgIGNvbm5lY3Rpb24uc2VjdXJpdHlPcGVyYXRpb25zKCkuY3JlYXRlTG9jYWxVc2VyKHVzZXJuYW1lLCBwYXNzd29yZFRva2VuKTsKICB9IGVsc2UgewogICAgcHJpbnQoJ1NldHRpbmcgcGFzc3dvcmQgZm9yOiAnICsgdXNlcm5hbWUpCiAgICBjb25uZWN0aW9uLnNlY3VyaXR5T3BlcmF0aW9ucygpLmNoYW5nZUxvY2FsVXNlclBhc3N3b3JkKHVzZXJuYW1lLCBwYXNzd29yZFRva2VuKTsKICB9CgogIGlmIChhdXRocyA9PSAiIikgewogICAgcHJpbnQoJ0NsZWFyaW5nIGF1dGhvcml6YXRpb25zIGZvcjogJyArIHVzZXJuYW1lKQogICAgY29ubmVjdGlvbi5zZWN1cml0eU9wZXJhdGlvbnMoKS5jaGFuZ2VVc2VyQXV0aG9yaXphdGlvbnModXNlcm5hbWUsIG9yZy5hcGFjaGUuYWNjdW11bG8uY29yZS5zZWN1cml0eS5BdXRob3JpemF0aW9ucy5FTVBUWSk7CiAgfSBlbHNlIHsKICAgIHZhciBhdXRoU3RyaW5nTGlzdCA9IGF1dGhzLnNwbGl0KCIsIik7CiAgICB2YXIgYXV0aEJ5dGVCdWZmZXJMaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3QoKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXV0aFN0cmluZ0xpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGF1dGggPSBhdXRoU3RyaW5nTGlzdFtpXTsKICAgICAgYXV0aEJ5dGVCdWZmZXJMaXN0LmFkZChqYXZhLm5pby5CeXRlQnVmZmVyLndyYXAoYXV0aC5nZXRCeXRlcygpKSk7CiAgICB9CiAgICBwcmludCgnU2V0dGluZyBhdXRob3JpemF0aW9ucyBmb3I6ICcgKyB1c2VybmFtZSArICcgdG86ICcgKyBhdXRocykKICAgIGNvbm5lY3Rpb24uc2VjdXJpdHlPcGVyYXRpb25zKCkuY2hhbmdlVXNlckF1dGhvcml6YXRpb25zKHVzZXJuYW1lLCBuZXcgb3JnLmFwYWNoZS5hY2N1bXVsby5jb3JlLnNlY3VyaXR5LkF1dGhvcml6YXRpb25zKGF1dGhCeXRlQnVmZmVyTGlzdCkpOwogIH0KCiAgdmFyIHN5c1Blcm1pc3Npb25MaXN0ID0gc3lzdGVtUGVybWlzc2lvbnMuc3BsaXQoJywnKTsKICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFN5c3RlbVBlcm1pc3Npb25zLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgcGVybWlzc2lvbiA9IGFsbFN5c3RlbVBlcm1pc3Npb25zW2ldOwogICAgaWYgKGNvbm5lY3Rpb24uc2VjdXJpdHlPcGVyYXRpb25zKCkuaGFzU3lzdGVtUGVybWlzc2lvbih1c2VybmFtZSwgcGVybWlzc2lvbikpIHsKICAgICAgaWYgKHJldm9rZUVuYWJsZWQgPT0gJ3RydWUnICYmIHN5c1Blcm1pc3Npb25MaXN0LmluZGV4T2YocGVybWlzc2lvbi50b1N0cmluZygpKSA9PSAtMSkgewogICAgICAgIHByaW50KCdSZXZva2luZyBTeXN0ZW0uJyArIHBlcm1pc3Npb24gKyAnIGZyb206ICcgKyB1c2VybmFtZSkKICAgICAgICBjb25uZWN0aW9uLnNlY3VyaXR5T3BlcmF0aW9ucygpLnJldm9rZVN5c3RlbVBlcm1pc3Npb24odXNlcm5hbWUsIHBlcm1pc3Npb24pOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAoc3lzUGVybWlzc2lvbkxpc3QuaW5kZXhPZihwZXJtaXNzaW9uLnRvU3RyaW5nKCkpICE9IC0xKSB7CiAgICAgICAgcHJpbnQoJ0dyYW50aW5nIFN5c3RlbS4nICsgcGVybWlzc2lvbiArICcgdG86ICcgKyB1c2VybmFtZSkKICAgICAgICBjb25uZWN0aW9uLnNlY3VyaXR5T3BlcmF0aW9ucygpLmdyYW50U3lzdGVtUGVybWlzc2lvbih1c2VybmFtZSwgcGVybWlzc2lvbik7CiAgICAgIH0KICAgIH0KICB9CgogIGZvciAodmFyIHRhYmxlTmFtZSBpbiB0YWJsZVBlcm1pc3Npb25zKSB7CiAgICBpZiAoY29ubmVjdGlvbi50YWJsZU9wZXJhdGlvbnMoKS5leGlzdHModGFibGVOYW1lKSkgewogICAgICB2YXIgdGJsUGVybWlzc2lvbkxpc3QgPSB0YWJsZVBlcm1pc3Npb25zW3RhYmxlTmFtZV0uc3BsaXQoJywnKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxUYWJsZVBlcm1pc3Npb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHBlcm1pc3Npb24gPSBhbGxUYWJsZVBlcm1pc3Npb25zW2ldOwogICAgICAgIGlmIChjb25uZWN0aW9uLnNlY3VyaXR5T3BlcmF0aW9ucygpLmhhc1RhYmxlUGVybWlzc2lvbih1c2VybmFtZSwgdGFibGVOYW1lLCBwZXJtaXNzaW9uKSkgewogICAgICAgICAgaWYgKHJldm9rZUVuYWJsZWQgPT0gJ3RydWUnICYmIHRibFBlcm1pc3Npb25MaXN0LmluZGV4T2YocGVybWlzc2lvbi50b1N0cmluZygpKSA9PSAtMSkgewogICAgICAgICAgICBwcmludCgnUmV2b2tpbmcgVGFibGUuJyArIHBlcm1pc3Npb24gKyAnIG9uOiAnICsgdGFibGVOYW1lICsgJyBmcm9tOiAnICsgdXNlcm5hbWUpCiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VjdXJpdHlPcGVyYXRpb25zKCkucmV2b2tlVGFibGVQZXJtaXNzaW9uKHVzZXJuYW1lLCB0YWJsZU5hbWUsIHBlcm1pc3Npb24pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAodGJsUGVybWlzc2lvbkxpc3QuaW5kZXhPZihwZXJtaXNzaW9uLnRvU3RyaW5nKCkpICE9IC0xKSB7CiAgICAgICAgICAgIHByaW50KCdHcmFudGluZyBUYWJsZS4nICsgcGVybWlzc2lvbiArICcgb246ICcgKyB0YWJsZU5hbWUgKyAnIHRvOiAnICsgdXNlcm5hbWUpCiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VjdXJpdHlPcGVyYXRpb25zKCkuZ3JhbnRUYWJsZVBlcm1pc3Npb24odXNlcm5hbWUsIHRhYmxlTmFtZSwgcGVybWlzc2lvbik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9CnByb2Nlc3NVc2VyKCJnYWZmZXIiLCJnYWZmZXIiLCIiLCJDUkVBVEVfVEFCTEUiLHsicm9hZFRyYWZmaWMiOiAiUkVBRCxXUklURSxCVUxLX0lNUE9SVCxBTFRFUl9UQUJMRSIsInNpbXBsZUdyYXBoIjogIlJFQUQsV1JJVEUsQlVMS19JTVBPUlQsQUxURVJfVEFCTEUiLH0pOwpwcm9jZXNzVXNlcigidHJhY2VyIiwidHJhY2VyIiwiIiwiQ1JFQVRFX1RBQkxFIix7InRyYWNlIjogIlJFQUQsV1JJVEUiLH0pOwoKaWYgKHJldm9rZUVuYWJsZWQgPT0gJ3RydWUnKSB7CiAgdmFyIGRlc2lyZWRVc2VycyA9ICJnYWZmZXIsdHJhY2VyIi5zcGxpdCgiLCIpOwogIHZhciBkYlVzZXJzID0gY29ubmVjdGlvbi5zZWN1cml0eU9wZXJhdGlvbnMoKS5saXN0TG9jYWxVc2VycygpLnRvQXJyYXkoKTsKICBmb3IgKHZhciBpID0gMDsgaSA8IGRiVXNlcnMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkYlVzZXIgPSBkYlVzZXJzW2ldOwogICAgaWYgKGRiVXNlciAhPSAncm9vdCcgJiYgZGVzaXJlZFVzZXJzLmluZGV4T2YoZGJVc2VyKSA9PSAtMSkgewogICAgICBwcmludCgnRGVsZXRpbmcgdXNlcjogJyArIGRiVXNlcik7CiAgICAgIGNvbm5lY3Rpb24uc2VjdXJpdHlPcGVyYXRpb25zKCkuZHJvcExvY2FsVXNlcihkYlVzZXIpOwogICAgfQogIH0KfQ==
  commands.txt: c2NyaXB0IC1lIGpzIC1mIC4vYWNjdW11bG8tdXNlci1tYW5hZ2VtZW50LmpzCnVzZXJzCnVzZXJwZXJtaXNzaW9ucyAtdSBnYWZmZXIKZ2V0YXV0aHMgLXUgZ2FmZmVyCmV4aXQ=
---
# Source: gaffer-road-traffic/charts/gaffer/templates/api/config/store-properties.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-gaffer-road-traffic-store-properties
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: store-properties
type: Opaque
data:
  store.properties: "CmdhZmZlci5zdG9yZS5jbGFzcz11ay5nb3YuZ2NocS5nYWZmZXIuYWNjdW11bG9zdG9yZS5BY2N1bXVsb1N0b3JlCmdhZmZlci5zdG9yZS5wcm9wZXJ0aWVzLmNsYXNzPXVrLmdvdi5nY2hxLmdhZmZlci5hY2N1bXVsb3N0b3JlLkFjY3VtdWxvUHJvcGVydGllcwphY2N1bXVsby5pbnN0YW5jZT1hY2N1bXVsbwphY2N1bXVsby56b29rZWVwZXJzPW15LWdhZmZlci1yb2FkLXRyYWZmaWMtem9va2VlcGVyCmFjY3VtdWxvLnVzZXI9Z2FmZmVyCmFjY3VtdWxvLnBhc3N3b3JkPWdhZmZlcgpnYWZmZXIuY2FjaGUuc2VydmljZS5jbGFzcz11ay5nb3YuZ2NocS5nYWZmZXIuY2FjaGUuaW1wbC5IYXNoTWFwQ2FjaGVTZXJ2aWNlCmdhZmZlci5zdG9yZS5qb2IudHJhY2tlci5lbmFibGVkPXRydWU="
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/config.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-hdfs
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
data:
  core-site.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
        <name>fs.defaultFS</name>
        <value>hdfs://my-gaffer-road-traffic-hdfs-namenode-0.my-gaffer-road-traffic-hdfs-namenodes:8020</value>
      </property>
    </configuration>

  hdfs-site.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
        <name>dfs.namenode.name.dir</name>
        <value>/data0/dfs/name</value>
      </property>
      <property>
        <name>dfs.datanode.data.dir</name>
        <value>/data0/dfs/data</value>
      </property>
      <property>
        <name>dfs.datanode.synconclose</name>
        <value>true</value>
      </property>
      <property>
        <name>dfs.replication</name>
        <value>3</value>
      </property>
      <property>
        <name>hadoop.security.authorization</name>
        <value>true</value>
      </property>
      <property>
        <name>net.topology.script.file.name</name>
        <value>/scripts/resolve-rack.sh</value>
      </property>
      <property>
        <name>net.topology.script.number.args</name>
        <value>1</value>
      </property>
      <property>
        <name>dfs.namenode.rpc-address</name>
        <value>my-gaffer-road-traffic-hdfs-namenode-0.my-gaffer-road-traffic-hdfs-namenodes:8020</value>
      </property>
      <property>
        <name>dfs.namenode.rpc-bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <property>
        <name>dfs.namenode.servicerpc-address</name>
        <value>my-gaffer-road-traffic-hdfs-namenode-0.my-gaffer-road-traffic-hdfs-namenodes:8021</value>
      </property>
      <property>
        <name>dfs.namenode.servicerpc-bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <property>
        <name>dfs.namenode.lifeline.rpc-address</name>
        <value>my-gaffer-road-traffic-hdfs-namenode-0.my-gaffer-road-traffic-hdfs-namenodes:8022</value>
      </property>
      <property>
        <name>dfs.namenode.lifeline.rpc-bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <property>
        <name>dfs.namenode.http-address</name>
        <value>0.0.0.0:9870</value>
      </property>
      <property>
        <name>dfs.namenode.https-address</name>
        <value>0.0.0.0:9871</value>
      </property>
      <property>
        <name>dfs.datanode.http.address</name>
        <value>0.0.0.0:9864</value>
      </property>
      <property>
        <name>dfs.datanode.https.address</name>
        <value>0.0.0.0:9865</value>
      </property>
      <property>
        <name>dfs.datanode.address</name>
        <value>0.0.0.0:9866</value>
      </property>
      <property>
        <name>dfs.datanode.ipc.address</name>
        <value>0.0.0.0:9867</value>
      </property>
    </configuration>

  hadoop-policy.xml: |-
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
        <name>security.client.protocol.acl</name>
        <value>*</value>
        <description>ACL for ClientProtocol, which is used by user code
        via the DistributedFileSystem.
        The ACL is a comma-separated list of user and group names. The user and
        group list is separated by a blank. For e.g. "alice,bob users,wheel".
        A special value of "*" means all users are allowed.</description>
      </property>

      <property>
        <name>security.client.datanode.protocol.acl</name>
        <value>*</value>
        <description>ACL for ClientDatanodeProtocol, the client-to-datanode protocol
        for block recovery.
        The ACL is a comma-separated list of user and group names. The user and
        group list is separated by a blank. For e.g. "alice,bob users,wheel".
        A special value of "*" means all users are allowed.</description>
      </property>

      <property>
        <name>security.datanode.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for DatanodeProtocol, which is used by datanodes to
        communicate with the namenode.
        The ACL is a comma-separated list of user and group names. The user and
        group list is separated by a blank. For e.g. "alice,bob users,wheel".
        A special value of "*" means all users are allowed.</description>
      </property>

      <property>
        <name>security.inter.datanode.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for InterDatanodeProtocol, the inter-datanode protocol
        for updating generation timestamp.
        The ACL is a comma-separated list of user and group names. The user and
        group list is separated by a blank. For e.g. "alice,bob users,wheel".
        A special value of "*" means all users are allowed.</description>
      </property>

      <property>
        <name>security.namenode.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for NamenodeProtocol, the protocol used by the secondary
        namenode to communicate with the namenode.
        The ACL is a comma-separated list of user and group names. The user and
        group list is separated by a blank. For e.g. "alice,bob users,wheel".
        A special value of "*" means all users are allowed.</description>
      </property>

     <property>
        <name>security.admin.operations.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for AdminOperationsProtocol. Used for admin commands.
        The ACL is a comma-separated list of user and group names. The user and
        group list is separated by a blank. For e.g. "alice,bob users,wheel".
        A special value of "*" means all users are allowed.</description>
      </property>

      <property>
        <name>security.refresh.user.mappings.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for RefreshUserMappingsProtocol. Used to refresh
        users mappings. The ACL is a comma-separated list of user and
        group names. The user and group list is separated by a blank. For
        e.g. "alice,bob users,wheel".  A special value of "*" means all
        users are allowed.</description>
      </property>

      <property>
        <name>security.refresh.policy.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for RefreshAuthorizationPolicyProtocol, used by the
        dfsadmin and mradmin commands to refresh the security policy in-effect.
        The ACL is a comma-separated list of user and group names. The user and
        group list is separated by a blank. For e.g. "alice,bob users,wheel".
        A special value of "*" means all users are allowed.</description>
      </property>

      <property>
        <name>security.ha.service.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for HAService protocol used by HAAdmin to manage the
          active and stand-by states of namenode.</description>
      </property>

      <property>
        <name>security.zkfc.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for access to the ZK Failover Controller
        </description>
      </property>

      <property>
        <name>security.qjournal.service.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for QJournalProtocol, used by the NN to communicate with
        JNs when using the QuorumJournalManager for edit logs.</description>
      </property>

      <property>
        <name>security.interqjournal.service.protocol.acl</name>
        <value>hadoop</value>
        <description>ACL for InterQJournalProtocol, used by the JN to
        communicate with other JN
        </description>
      </property>

    </configuration>

  log4j.properties: |-
    # Define some default values that can be overridden by system properties
    hadoop.root.logger=INFO,console
    hadoop.log.dir=.
    hadoop.log.file=hadoop.log

    # Define the root logger to the system property "hadoop.root.logger"
    log4j.rootLogger=${hadoop.root.logger}, EventCounter
    # Logging Threshold
    log4j.threshold=ALL

    # Null Appender
    log4j.appender.NullAppender=org.apache.log4j.varia.NullAppender

    # Console Appender
    log4j.appender.console=org.apache.log4j.ConsoleAppender
    log4j.appender.console.target=System.err
    log4j.appender.console.layout=org.apache.log4j.PatternLayout
    log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n

    # HDFS block state change log from block manager
    # Uncomment the following to log normal block state change
    # messages from BlockManager in NameNode.
    #log4j.logger.BlockStateChange=DEBUG

    # Security appender
    hadoop.security.logger=INFO,RFAS
    hadoop.security.log.maxfilesize=256MB
    hadoop.security.log.maxbackupindex=20
    log4j.category.SecurityLogger=${hadoop.security.logger}
    hadoop.security.log.file=security.audit
    log4j.appender.RFAS=org.apache.log4j.RollingFileAppender
    log4j.appender.RFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}
    log4j.appender.RFAS.layout=org.apache.log4j.PatternLayout
    log4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n
    log4j.appender.RFAS.MaxFileSize=${hadoop.security.log.maxfilesize}
    log4j.appender.RFAS.MaxBackupIndex=${hadoop.security.log.maxbackupindex}

    # hdfs audit logging
    hdfs.audit.logger=INFO,RFAAUDIT
    hdfs.audit.log.maxfilesize=256MB
    hdfs.audit.log.maxbackupindex=20
    log4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=${hdfs.audit.logger}
    log4j.additivity.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=false
    log4j.appender.RFAAUDIT=org.apache.log4j.RollingFileAppender
    log4j.appender.RFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log
    log4j.appender.RFAAUDIT.layout=org.apache.log4j.PatternLayout
    log4j.appender.RFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n
    log4j.appender.RFAAUDIT.MaxFileSize=${hdfs.audit.log.maxfilesize}
    log4j.appender.RFAAUDIT.MaxBackupIndex=${hdfs.audit.log.maxbackupindex}

    # NameNode metrics logging.
    # The default is to retain two namenode-metrics.log files up to 64MB each.
    namenode.metrics.logger=INFO,NNMETRICSRFA
    log4j.logger.NameNodeMetricsLog=${namenode.metrics.logger}
    log4j.additivity.NameNodeMetricsLog=false
    log4j.appender.NNMETRICSRFA=org.apache.log4j.RollingFileAppender
    log4j.appender.NNMETRICSRFA.File=${hadoop.log.dir}/namenode-metrics.log
    log4j.appender.NNMETRICSRFA.layout=org.apache.log4j.PatternLayout
    log4j.appender.NNMETRICSRFA.layout.ConversionPattern=%d{ISO8601} %m%n
    log4j.appender.NNMETRICSRFA.MaxBackupIndex=1
    log4j.appender.NNMETRICSRFA.MaxFileSize=64MB

    # DataNode metrics logging.
    # The default is to retain two datanode-metrics.log files up to 64MB each.
    datanode.metrics.logger=INFO,DNMETRICSRFA
    log4j.logger.DataNodeMetricsLog=${datanode.metrics.logger}
    log4j.additivity.DataNodeMetricsLog=false
    log4j.appender.DNMETRICSRFA=org.apache.log4j.RollingFileAppender
    log4j.appender.DNMETRICSRFA.File=${hadoop.log.dir}/datanode-metrics.log
    log4j.appender.DNMETRICSRFA.layout=org.apache.log4j.PatternLayout
    log4j.appender.DNMETRICSRFA.layout.ConversionPattern=%d{ISO8601} %m%n
    log4j.appender.DNMETRICSRFA.MaxBackupIndex=1
    log4j.appender.DNMETRICSRFA.MaxFileSize=64MB

    # Custom Logging levels
    #log4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=DEBUG

    # AWS SDK & S3A FileSystem
    #log4j.logger.com.amazonaws=ERROR
    log4j.logger.com.amazonaws.http.AmazonHttpClient=ERROR
    #log4j.logger.org.apache.hadoop.fs.s3a.S3AFileSystem=WARN

    # Event Counter Appender
    # Sends counts of logging messages at different severity levels to Hadoop Metrics.
    log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter

    # Log levels of third-party libraries
    log4j.logger.org.apache.commons.beanutils=WARN

    log4j.logger.org.apache.hadoop.security.ForwardAuthentication=DEBUG
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/rack-awareness-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-hdfs-rack-awareness
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
data:
  resolve-rack.sh: |
    #!/bin/bash
    POD_IP=$1

    API_SERVER="kubernetes.default.svc"
    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"

    POD_RESPONSE=$(curl --cacert $CA_CERT --header "Authorization: Bearer $TOKEN" https://$API_SERVER/api/v1/namespaces/$NAMESPACE/pods?fieldSelector=status.podIP%3D$POD_IP)
    NODE_NAME=$(echo $POD_RESPONSE | jq -r '.items[0] | .spec.nodeName')

    NODE_RESPONSE=$(curl --cacert $CA_CERT  --header "Authorization: Bearer $TOKEN" https://$API_SERVER/api/v1/nodes/$NODE_NAME)
    NODE_ZONE=$(echo $NODE_RESPONSE | jq -r '.metadata.labels."topology.kubernetes.io/zone"')

    if [ -z "$NODE_ZONE" ] || [[ "$NODE_ZONE" == "null" ]]; then
      NODE_ZONE="default-rack"
    fi

    echo "/$NODE_ZONE"
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/zookeeper/templates/config-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.5
    release: my-gaffer-road-traffic
    heritage: Helm
    component: server
data:
    ok: |
      #!/bin/sh
      zkServer.sh status

    ready: |
      #!/bin/sh
      echo ruok | nc 127.0.0.1 ${1:-2181}

    run: |
      #!/bin/bash

      set -a
      ROOT=$(echo /apache-zookeeper-*)

      ZK_USER=${ZK_USER:-"zookeeper"}
      ZK_LOG_LEVEL=${ZK_LOG_LEVEL:-"INFO"}
      ZK_DATA_DIR=${ZK_DATA_DIR:-"/data"}
      ZK_DATA_LOG_DIR=${ZK_DATA_LOG_DIR:-"/data/log"}
      ZK_CONF_DIR=${ZK_CONF_DIR:-"/conf"}
      ZK_CLIENT_PORT=${ZK_CLIENT_PORT:-2181}
      ZK_SERVER_PORT=${ZK_SERVER_PORT:-2888}
      ZK_ELECTION_PORT=${ZK_ELECTION_PORT:-3888}
      ZK_TICK_TIME=${ZK_TICK_TIME:-2000}
      ZK_INIT_LIMIT=${ZK_INIT_LIMIT:-10}
      ZK_SYNC_LIMIT=${ZK_SYNC_LIMIT:-5}
      ZK_HEAP_SIZE=${ZK_HEAP_SIZE:-2G}
      ZK_MAX_CLIENT_CNXNS=${ZK_MAX_CLIENT_CNXNS:-60}
      ZK_MIN_SESSION_TIMEOUT=${ZK_MIN_SESSION_TIMEOUT:- $((ZK_TICK_TIME*2))}
      ZK_MAX_SESSION_TIMEOUT=${ZK_MAX_SESSION_TIMEOUT:- $((ZK_TICK_TIME*20))}
      ZK_SNAP_RETAIN_COUNT=${ZK_SNAP_RETAIN_COUNT:-3}
      ZK_PURGE_INTERVAL=${ZK_PURGE_INTERVAL:-0}
      ID_FILE="$ZK_DATA_DIR/myid"
      ZK_CONFIG_FILE="$ZK_CONF_DIR/zoo.cfg"
      LOG4J_PROPERTIES="$ZK_CONF_DIR/log4j.properties"
      HOST=$(hostname)
      DOMAIN=`hostname -d`
      JVMFLAGS="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE"

      APPJAR=$(echo $ROOT/*jar)
      CLASSPATH="${ROOT}/lib/*:${APPJAR}:${ZK_CONF_DIR}:"

      if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
          NAME=${BASH_REMATCH[1]}
          ORD=${BASH_REMATCH[2]}
          MY_ID=$((ORD+1))
      else
          echo "Failed to extract ordinal from hostname $HOST"
          exit 1
      fi

      mkdir -p $ZK_DATA_DIR
      mkdir -p $ZK_DATA_LOG_DIR
      echo $MY_ID >> $ID_FILE

      echo "clientPort=$ZK_CLIENT_PORT" >> $ZK_CONFIG_FILE
      echo "dataDir=$ZK_DATA_DIR" >> $ZK_CONFIG_FILE
      echo "dataLogDir=$ZK_DATA_LOG_DIR" >> $ZK_CONFIG_FILE
      echo "tickTime=$ZK_TICK_TIME" >> $ZK_CONFIG_FILE
      echo "initLimit=$ZK_INIT_LIMIT" >> $ZK_CONFIG_FILE
      echo "syncLimit=$ZK_SYNC_LIMIT" >> $ZK_CONFIG_FILE
      echo "maxClientCnxns=$ZK_MAX_CLIENT_CNXNS" >> $ZK_CONFIG_FILE
      echo "minSessionTimeout=$ZK_MIN_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
      echo "maxSessionTimeout=$ZK_MAX_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
      echo "autopurge.snapRetainCount=$ZK_SNAP_RETAIN_COUNT" >> $ZK_CONFIG_FILE
      echo "autopurge.purgeInterval=$ZK_PURGE_INTERVAL" >> $ZK_CONFIG_FILE
      echo "4lw.commands.whitelist=*" >> $ZK_CONFIG_FILE

      for (( i=1; i<=$ZK_REPLICAS; i++ ))
      do
          echo "server.$i=$NAME-$((i-1)).$DOMAIN:$ZK_SERVER_PORT:$ZK_ELECTION_PORT" >> $ZK_CONFIG_FILE
      done

      rm -f $LOG4J_PROPERTIES

      echo "zookeeper.root.logger=$ZK_LOG_LEVEL, CONSOLE" >> $LOG4J_PROPERTIES
      echo "zookeeper.console.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.file=zookeeper.log" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.maxfilesize=256MB" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.maxbackupindex=10" >> $LOG4J_PROPERTIES
      echo "zookeeper.tracelog.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
      echo "zookeeper.tracelog.file=zookeeper_trace.log" >> $LOG4J_PROPERTIES
      echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOG4J_PROPERTIES

      if [ -n "$JMXDISABLE" ]
      then
          MAIN=org.apache.zookeeper.server.quorum.QuorumPeerMain
      else
          MAIN="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$JMXPORT -Dcom.sun.management.jmxremote.authenticate=$JMXAUTH -Dcom.sun.management.jmxremote.ssl=$JMXSSL -Dzookeeper.jmx.log4j.disable=$JMXLOG4J org.apache.zookeeper.server.quorum.QuorumPeerMain"
      fi

      set -x
      exec java -cp "$CLASSPATH" $JVMFLAGS $MAIN $ZK_CONFIG_FILE
---
# Source: gaffer-road-traffic/charts/gaffer/templates/api/config/application-properties.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-application-properties
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: application-properties
data:
  application.properties: "gaffer.storeProperties=/gaffer/store/store.properties\ngaffer.schemas=/gaffer/schema\ngaffer.graph.config=/gaffer/graph/graphConfig.json\nserver.context-path=/rest"
---
# Source: gaffer-road-traffic/charts/gaffer/templates/api/config/graph-config.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-graph-config
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: graph-config
data:
  graphConfig.json: "{\"description\":\"A graph containing sample GB road traffic data from the Department of Transport\",\"graphId\":\"roadTraffic\",\"hooks\":[]}"
---
# Source: gaffer-road-traffic/charts/gaffer/templates/api/config/schema.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-schema
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: schema
data:
  elements.json: "{\n  \"edges\": {\n    \"RoadUse\": {\n      \"description\": \"A directed edge representing vehicles moving from junction A to junction B.\",\n      \"source\": \"junction\",\n      \"destination\": \"junction\",\n      \"directed\": \"true\",\n      \"properties\": {\n        \"startDate\": \"date.earliest\",\n        \"endDate\": \"date.latest\",\n        \"count\": \"count.long\",\n        \"countByVehicleType\": \"counts.freqmap\"\n      },\n      \"groupBy\": [\n        \"startDate\",\n        \"endDate\"\n      ]\n    },\n    \"RoadHasJunction\": {\n      \"description\": \"A directed edge from each road to all the junctions on that road.\",\n      \"source\": \"road\",\n      \"destination\": \"junction\",\n      \"directed\": \"true\"\n    },\n    \"RegionContainsLocation\": {\n      \"description\": \"A directed edge from each region to location.\",\n      \"source\": \"region\",\n      \"destination\": \"location\",\n      \"directed\": \"true\"\n    },\n    \"LocationContainsRoad\": {\n      \"description\": \"A directed edge from each location to road.\",\n      \"source\": \"location\",\n      \"destination\": \"road\",\n      \"directed\": \"true\"\n    },\n    \"JunctionLocatedAt\": {\n      \"description\": \"A directed edge from each junction to its coordinates\",\n      \"source\": \"junction\",\n      \"destination\": \"coordinates\",\n      \"directed\": \"true\"\n    }\n  },\n  \"entities\": {\n    \"Cardinality\": {\n      \"description\": \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n      \"vertex\": \"anyVertex\",\n      \"properties\": {\n        \"edgeGroup\": \"set\",\n        \"hllp\": \"hllp\",\n        \"count\": \"count.long\"\n      },\n      \"groupBy\": [\n        \"edgeGroup\"\n      ]\n    },\n    \"JunctionUse\": {\n      \"description\": \"An entity on the junction vertex representing the counts of vehicles moving from junction A to junction B.\",\n      \"vertex\": \"junction\",\n      \"properties\": {\n        \"startDate\": \"date.earliest\",\n        \"endDate\": \"date.latest\",\n        \"count\": \"count.long\",\n        \"countByVehicleType\": \"counts.freqmap\"\n      },\n      \"groupBy\": [\n        \"startDate\",\n        \"endDate\"\n      ]\n    }\n  }\n}"
  types.json: "{\n  \"types\": {\n    \"junction\": {\n      \"description\": \"A road junction represented by a String.\",\n      \"class\": \"java.lang.String\"\n    },\n    \"road\": {\n      \"description\": \"A road represented by a String.\",\n      \"class\": \"java.lang.String\"\n    },\n    \"location\": {\n      \"description\": \"A location represented by a String.\",\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"anyVertex\": {\n      \"description\": \"An String vertex - used for cardinalities\",\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"coordinates\": {\n      \"description\": \"Coordinates represented by a String in the format 'Eastings,Northings'.\",\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"region\": {\n      \"description\": \"A region represented by a String.\",\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"count.long\": {\n      \"description\": \"A long count that must be greater than or equal to 0.\",\n      \"class\": \"java.lang.Long\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n          \"orEqualTo\": true,\n          \"value\": {\n            \"java.lang.Long\": 0\n          }\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n      }\n    },\n    \"true\": {\n      \"description\": \"A simple boolean that must always be true.\",\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n        }\n      ]\n    },\n    \"date.earliest\": {\n      \"description\": \"A Date that when aggregated together will be the earliest date.\",\n      \"class\": \"java.util.Date\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n      }\n    },\n    \"date.latest\": {\n      \"description\": \"A Date that when aggregated together will be the latest date.\",\n      \"class\": \"java.util.Date\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n      }\n    },\n    \"set\": {\n      \"class\": \"java.util.TreeSet\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n      }\n    },\n    \"hllp\": {\n      \"class\": \"org.apache.datasketches.hll.HllSketch\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n      }\n    },\n    \"counts.freqmap\": {\n      \"class\": \"uk.gov.gchq.gaffer.types.FreqMap\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.types.function.FreqMapAggregator\"\n      }\n    }\n  }\n}"
---
# Source: gaffer-road-traffic/templates/tests/integration/hdfs/hdfs-setup-files.yaml
# Copyright 2020-2023 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-hdfs-setup-files
  labels:
    helm.sh/chart: gaffer-road-traffic-2.2.1
    app.kubernetes.io/name: gaffer-road-traffic
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
data:
  elements.json: "{\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\", \"source\": \"West Virginia\", \"destination\": \"Country road\", \"group\": \"LocationContainsRoad\"}"
  operation.json: "{\n    \"class\": \"uk.gov.gchq.gaffer.hdfs.operation.AddElementsFromHdfs\",\n    \"inputMapperPairs\": {\n        \"/test/input\": \"uk.gov.gchq.gaffer.hdfs.operation.mapper.generator.JsonMapperGenerator\"\n    },\n    \"outputPath\": \"/test/output\",\n    \"failurePath\": \"/test/failure\",\n    \"workingPath\": \"/test/tmp/workingDir\",\n    \"splitsFilePath\": \"/test/tmp/splits\",\n    \"useProvidedSplits\": false,\n    \"jobInitialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.hdfs.operation.handler.job.initialiser.TextJobInitialiser\"\n    }\n}"

  populate-hdfs.sh: |
    #!/bin/bash
    set -e

    echo "Removing any existing volume"
    hadoop fs -rm -r -f /test

    # Create Directories
    hadoop fs -mkdir -p /test
    hadoop fs -mkdir -p /test/input
    hadoop fs -mkdir -p /test/output
    hadoop fs -mkdir -p /test/failure

    # Populate input
    hadoop fs -put -f ./elements.json /test/input

    hadoop fs -chown -R accumulo /test
    hadoop fs -chmod -R u+rwX,g+rwX,o-rwx /test
    echo "Elements successfully added to HDFS"

  run-operation.sh: |
    #!/bin/bash
    set -e

    curl -s -XPOST -H "Content-Type: application/json" -d "@operation.json" http://my-gaffer-road-traffic-api:80/rest/graph/operations/execute
---
# Source: gaffer-road-traffic/templates/tests/integration/hdfs/hdfs-test-files.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-hdfs-test-files
  labels:
    helm.sh/chart: gaffer-road-traffic-2.2.1
    app.kubernetes.io/name: gaffer-road-traffic
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
data:
  query.json: "{\n    \"class\":\"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\":[\n        {\n            \"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n            \"input\":[\n                {\n                    \"class\":\"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n                    \"vertex\":\"West Virginia\"\n                }\n            ]\n        },\n        {\n            \"class\":\"uk.gov.gchq.gaffer.operation.impl.Count\"\n        }\n    ]\n}"
  result.json: "1"

  check-elements-exist.sh: |
    #!/bin/sh
    set -e

    expectedResult=$(cat ./result.json)
    actualResult=$(curl -s -XPOST -H "Content-Type: application/json" -d "@query.json" http://my-gaffer-road-traffic-api:80/rest/graph/operations/execute)

    echo "  Expected Result:"
    echo "    ${expectedResult}"
    echo "  Actual Result:"
    echo "    ${actualResult}"

    if [ "${expectedResult}" = "${actualResult}" ]; then
      echo "  PASS"
    else
      echo "  FAIL!"
      rc=1
    fi
---
# Source: gaffer-road-traffic/templates/tests/queries.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-gaffer-road-traffic-test-queries
  labels:
    helm.sh/chart: gaffer-road-traffic-2.2.1
    app.kubernetes.io/name: gaffer-road-traffic
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
data:
  count.json: "{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.operation.impl.Count\"\n        }\n    ]\n}\n"
  query1.json: "{\n    \"class\":\"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\":[\n        {\n            \"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n            \"input\":[\n                {\n                    \"class\":\"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n                    \"vertex\":\"M4\"\n                }\n            ],\n            \"view\":{\n                \"entities\":{},\n                \"edges\":{\n                    \"RoadHasJunction\":{}\n                },\n                \"globalElements\":[\n                    {\"groupBy\":[]}\n                ]\n            }\n        },\n        {\n            \"class\":\"uk.gov.gchq.gaffer.operation.impl.Count\"\n        }\n    ]\n}\n"
  query2.json: "{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n            \"input\": [\n                {\n                    \"class\": \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n                    \"vertex\": \"South West\"\n                }\n            ],\n            \"view\": {\n                \"edges\": {\n                    \"RegionContainsLocation\": {}\n                }\n            }\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n            \"view\": {\n                \"edges\": {\n                    \"LocationContainsRoad\": {}\n                }\n            }\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n            \"view\": {\n                \"edges\": {\n                    \"RoadHasJunction\": {}\n                }\n            }\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n            \"includeIncomingOutGoing\": \"OUTGOING\",\n            \"view\": {\n                \"entities\": {\n                    \"JunctionUse\": {\n                        \"preAggregationFilterFunctions\": [\n                            {\n                                \"predicate\": {\n                                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                                    \"orEqualTo\": true,\n                                    \"value\": {\n                                        \"java.util.Date\": 946684800000\n                                    }\n                                },\n                                \"selection\": [\n                                    \"startDate\"\n                                ]\n                            },\n                            {\n                                \"predicate\": {\n                                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\",\n                                    \"value\": {\n                                        \"java.util.Date\": 978307200000\n                                    }\n                                },\n                                \"selection\": [\n                                    \"endDate\"\n                                ]\n                            }\n                        ],\n                        \"postAggregationFilterFunctions\": [\n                            {\n                                \"predicate\": {\n                                    \"class\": \"uk.gov.gchq.koryphe.predicate.PredicateMap\",\n                                    \"key\": {\n                                        \"java.lang.String\": \"BUS\"\n                                    },\n                                    \"predicate\": {\n                                        \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                                        \"value\": {\n                                            \"java.lang.Long\": 1000\n                                        }\n                                    }\n                                },\n                                \"selection\": [\n                                    \"countByVehicleType\"\n                                ]\n                            }\n                        ],\n                        \"transientProperties\": {\n                            \"busCount\": \"java.lang.Long\"\n                        },\n                        \"transformFunctions\": [\n                            {\n                                \"selection\": [\"countByVehicleType\"],\n                                \"function\": {\n                                    \"class\": \"uk.gov.gchq.gaffer.types.function.FreqMapExtractor\",\n                                    \"key\" : \"BUS\"\n                                },\n                                \"projection\": [\"busCount\"]\n                            }\n                        ]\n                    }\n                },\n                \"globalElements\": [\n                    {\n                        \"groupBy\": []\n                    }\n                ]\n            }\n        },\n        {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToCsv\",\n            \"includeHeader\" : false,\n            \"csvGenerator\" : {\n                \"class\" : \"uk.gov.gchq.gaffer.data.generator.CsvGenerator\",\n                \"fields\" : {\n                    \"VERTEX\" : \"Junction\",\n                    \"busCount\" : \"Bus Count\"\n                },\n                \"quoted\" : false\n            }\n        }\n    ]\n}\n"
  result1.json: "14"
  result2.json: "[\"M32:2,1411\",\"M4:LA Boundary,1958\",\"M5:LA Boundary,1067\"]"

  run-tests.sh: |
    #!/bin/sh -e

    idx=1
    rc=0
    while [ -f "query${idx}.json" ]; do
      expectedResult=$(cat ./result${idx}.json)
      actualResult=$(curl -s -XPOST -H "Content-Type: application/json" -d "@query${idx}.json" http://my-gaffer-road-traffic-api:80/rest/graph/operations/execute)

      echo "query${idx}:"
      echo "  Expected Result:"
      echo "    ${expectedResult}"
      echo "  Actual Result:"
      echo "    ${actualResult}"

      if [ "${expectedResult}" = "${actualResult}" ]; then
        echo "  PASS"
      else
        echo "  FAIL!"
        rc=1
      fi

      idx=`expr $idx + 1`
    done

    exit ${rc}

  check-data-loaded.sh: |
    #!/bin/sh -e

    until [ $(( ATTEMPTS++ )) -gt 300 ]; do
      sleep 1
      result=$(curl -f -s -H "Content-Type: application/json" -H "Accept: application/json" -d "@count.json" http://my-gaffer-road-traffic-api:80/rest/graph/operations/execute)
      rc=$?
      echo "$(date) - rc: ${rc} result: ${result}"
      if [ ! -z "${result}" ] && [ "${result}" != "0" ]; then
        exit 0
      fi
    done
    exit 1
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/rack-awareness-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-gaffer-road-traffic-hdfs-namenode
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get"]
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/rack-awareness-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-gaffer-road-traffic-hdfs-namenode
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-gaffer-road-traffic-hdfs-namenode
subjects:
- kind: ServiceAccount
  name: my-gaffer-road-traffic-hdfs-namenode
  namespace: default
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/rack-awareness-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-gaffer-road-traffic-hdfs-namenode
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/rack-awareness-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-gaffer-road-traffic-hdfs-namenode
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-gaffer-road-traffic-hdfs-namenode
subjects:
- kind: ServiceAccount
  name: my-gaffer-road-traffic-hdfs-namenode
  namespace: default
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/datanodes-service.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-hdfs-datanodes
  labels:
    
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: datanode
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/component: datanode
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: http
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/namenode-service.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-hdfs-namenodes
  labels:
    
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/component: namenode
  ports:
  - name: http
    protocol: TCP
    port: 9870
    targetPort: http
  - name: client-rpc
    protocol: TCP
    port: 8020
    targetPort: client-rpc
  - name: service-rpc
    protocol: TCP
    port: 8021
    targetPort: service-rpc
  - name: lifeline-rpc
    protocol: TCP
    port: 8022
    targetPort: lifeline-rpc
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/zookeeper/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-zookeeper-headless
  labels:
    app: zookeeper
    chart: zookeeper-2.1.5
    release: my-gaffer-road-traffic
    heritage: Helm
spec:
  clusterIP: None
  ports:
    - name: client
      port: 2181
      targetPort: client
      protocol: TCP
    - name: election
      port: 3888
      targetPort: election
      protocol: TCP
    - name: server
      port: 2888
      targetPort: server
      protocol: TCP
  selector:
    app: zookeeper
    release: my-gaffer-road-traffic
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.5
    release: my-gaffer-road-traffic
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: client
  selector:
    app: zookeeper
    release: my-gaffer-road-traffic
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/master/service.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-accumulo-masters
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  selector:
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/component: master
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/monitor/service.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-accumulo-monitor
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: monitor
spec:
  selector:
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/component: monitor
  type: ClusterIP
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: http
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/tserver/service.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-accumulo-tservers
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: tserver
spec:
  selector:
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/component: tserver
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
---
# Source: gaffer-road-traffic/charts/gaffer/templates/api/service.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: my-gaffer-road-traffic-api
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
spec:
  selector:
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/component: api
  type: ClusterIP
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: http
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/shell.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-gaffer-road-traffic-hdfs-shell
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: shell
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hdfs
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: shell
  template:
    metadata:
      annotations:
        checksum/config: 15f57d0af14b0f8642939aadeb09144df1eeaad12da782c8b23be319fc08af22
        checksum/secrets: 8655d88f36b88e00436f6ae7092038d9b1c071a1f6afb6565495145e90c2d3ba
      labels:
        helm.sh/chart: hdfs-2.2.1
        app.kubernetes.io/name: hdfs
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "3.3.3"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: shell
    spec:
      containers:
      - name: shell
        image: gchq/hdfs:3.3.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        stdin: true
        tty: true
        env:
        - name: HADOOP_CONF_DIR
          value: /etc/hadoop/conf
        volumeMounts:
        - name: config
          mountPath: /etc/hadoop/conf
          readOnly: true
        - name: secrets
          mountPath: /etc/hadoop/secrets
          readOnly: true
        resources:
          {}
      volumes:
      - name: config
        configMap:
          name: my-gaffer-road-traffic-hdfs
          optional: false
      - name: secrets
        secret:
          secretName: my-gaffer-road-traffic-hdfs
          optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/gc/deployment.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-gaffer-road-traffic-accumulo-gc
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gc
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: accumulo
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: gc
  template:
    metadata:
      labels:
        helm.sh/chart: accumulo-2.2.1
        app.kubernetes.io/name: accumulo
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "2.0.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: gc
      annotations:
        checksum/config: 4d40e010642496e368117b87cbcd5cdd28ce2132a18244517fd3e65c15e3f781
    spec:
      containers:
      - name: accumulo-gc
        image: gchq/gaffer:2.2.1-accumulo-2.0.1
        imagePullPolicy: IfNotPresent
        args:
        - gc
        env:
        - name: ACCUMULO_CONF_DIR
          value: /etc/accumulo/conf
        volumeMounts:
        - name: config
          mountPath: /etc/accumulo/conf
          readOnly: true
        resources:
          {}
      volumes:
      - name: config
        secret:
          secretName: my-gaffer-road-traffic-accumulo-config
          optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/monitor/deployment.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-gaffer-road-traffic-accumulo-monitor
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: accumulo
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: monitor
  template:
    metadata:
      labels:
        helm.sh/chart: accumulo-2.2.1
        app.kubernetes.io/name: accumulo
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "2.0.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: monitor
      annotations:
        checksum/config: 4d40e010642496e368117b87cbcd5cdd28ce2132a18244517fd3e65c15e3f781
    spec:
      containers:
      - name: accumulo-monitor
        image: gchq/gaffer:2.2.1-accumulo-2.0.1
        imagePullPolicy: IfNotPresent
        args:
        - monitor
        env:
        - name: ACCUMULO_CONF_DIR
          value: /etc/accumulo/conf
        volumeMounts:
        - name: config
          mountPath: /etc/accumulo/conf
          readOnly: true
        ports:
        - name: http
          protocol: TCP
          containerPort: 9995
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: http
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: http
        resources:
          {}
      volumes:
      - name: config
        secret:
          secretName: my-gaffer-road-traffic-accumulo-config
          optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/templates/api/deployment.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-gaffer-road-traffic-api
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gaffer
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        helm.sh/chart: gaffer-2.2.1
        app.kubernetes.io/name: gaffer
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "2.2.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: api
      annotations:
        checksum/graph-config: 667a890fe37be6df9331329a10f402aedaa643a416763332bc38fc306c3b7d33
        checksum/schema: 43108151f3f967fd6a8b1b0dc388b459e0f68f288e28fa7ce34ac3f06c395470
        checksum/store-properties: 604346b49cfab49a488372395385b298cb72b7e07149bf07c500effafb16b840
        checksum/application-properties: 83960fe03fde8b53a93bbd3f8dcc5c01448912382c3cea985a8e8141a2ef8c91
    spec:
      containers:
      - name: gaffer-rest
        image: gchq/gaffer-rest:2.2.1-accumulo-2.0.1
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: graph-config
          mountPath: /gaffer/graph/
          readOnly: true
        - name: schema
          mountPath: /gaffer/schema/
          readOnly: true
        - name: store-properties
          mountPath: /gaffer/store/
          readOnly: true
        - name: application-properties
          mountPath: /gaffer/config

        ports:
        - name: http
          protocol: TCP
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /rest
            port: http
        readinessProbe:
          httpGet:
            path: /rest/graph/status
            port: http
        startupProbe:
          httpGet:
            path: /rest
            port: http
          failureThreshold: 30
          periodSeconds: 10
        resources:
          {}
      volumes:
      - name: graph-config
        configMap:
          name: my-gaffer-road-traffic-graph-config
          optional: false
      - name: schema
        configMap:
          name: my-gaffer-road-traffic-schema
          optional: false
      - name: store-properties
        secret:
          secretName: my-gaffer-road-traffic-store-properties
          optional: false
      - name: application-properties
        configMap:
          name: my-gaffer-road-traffic-application-properties
          optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/datanodes.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-gaffer-road-traffic-hdfs-datanode
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: datanode
spec:
  podManagementPolicy: Parallel
  replicas: 3
  serviceName: my-gaffer-road-traffic-hdfs-datanodes
  selector:
    matchLabels:
      app.kubernetes.io/name: hdfs
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: datanode
  volumeClaimTemplates:
  - metadata:
      name: data0
      labels:
        helm.sh/chart: hdfs-2.2.1
        app.kubernetes.io/name: hdfs
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "3.3.3"
        app.kubernetes.io/managed-by: Helm
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
  template:
    metadata:
      annotations:
        checksum/config: 15f57d0af14b0f8642939aadeb09144df1eeaad12da782c8b23be319fc08af22
        checksum/secrets: 8655d88f36b88e00436f6ae7092038d9b1c071a1f6afb6565495145e90c2d3ba
      labels:
        helm.sh/chart: hdfs-2.2.1
        app.kubernetes.io/name: hdfs
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "3.3.3"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: datanode
    spec:
      initContainers:
      - name: wait-for-namenode-startup
        image: alpine:3.10.2
        imagePullPolicy: IfNotPresent
        command: [
          "/bin/sh",
          "-c",
          'for i in $(seq 1 300); do nc -z -w3 my-gaffer-road-traffic-hdfs-namenode-0.my-gaffer-road-traffic-hdfs-namenodes:8021 && exit 0 || sleep 1; done; exit 1'
        ]
      containers:
      - name: datanode
        image: gchq/hdfs:3.3.3
        imagePullPolicy: IfNotPresent
        args:
        - datanode
        env:
        - name: HADOOP_CONF_DIR
          value: /etc/hadoop/conf
        volumeMounts:
        - name: config
          mountPath: /etc/hadoop/conf
          readOnly: true
        - name: secrets
          mountPath: /etc/hadoop/secrets
          readOnly: true
        - name: data0
          mountPath: /data0
        ports:
        - name: http
          containerPort: 9864
        - name: https
          containerPort: 9865
        - name: data-xfer
          containerPort: 9866
        - name: ipc
          containerPort: 9867
        livenessProbe:
          httpGet:
            scheme: HTTP
            port: http
            path: /
          initialDelaySeconds: 30
        readinessProbe:
          httpGet:
            scheme: HTTP
            port: http
            path: /
          initialDelaySeconds: 30
        resources:
          {}
      volumes:
      - name: config
        configMap:
          name: my-gaffer-road-traffic-hdfs
          optional: false
      - name: secrets
        secret:
          secretName: my-gaffer-road-traffic-hdfs
          optional: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/namenode.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-gaffer-road-traffic-hdfs-namenode
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: my-gaffer-road-traffic-hdfs-namenodes
  selector:
    matchLabels:
      app.kubernetes.io/name: hdfs
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: namenode
  volumeClaimTemplates:
  - metadata:
      name: data0
      labels:
        helm.sh/chart: hdfs-2.2.1
        app.kubernetes.io/name: hdfs
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "3.3.3"
        app.kubernetes.io/managed-by: Helm
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
  template:
    metadata:
      annotations:
        checksum/config: 15f57d0af14b0f8642939aadeb09144df1eeaad12da782c8b23be319fc08af22
        checksum/secrets: 8655d88f36b88e00436f6ae7092038d9b1c071a1f6afb6565495145e90c2d3ba
      labels:
        helm.sh/chart: hdfs-2.2.1
        app.kubernetes.io/name: hdfs
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "3.3.3"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: namenode
    spec:
      serviceAccountName: my-gaffer-road-traffic-hdfs-namenode
      containers:
      - name: namenode
        image: gchq/hdfs:3.3.3
        imagePullPolicy: IfNotPresent
        args:
        - namenode
        env:
        - name: HADOOP_CONF_DIR
          value: /etc/hadoop/conf
        volumeMounts:
        - name: config
          mountPath: /etc/hadoop/conf
          readOnly: true
        - name: secrets
          mountPath: /etc/hadoop/secrets
          readOnly: true
        - name: rack-awareness
          mountPath: /scripts/resolve-rack.sh
          subPath: resolve-rack.sh
        - name: data0
          mountPath: /data0
        ports:
        - name: http
          containerPort: 9870
        - name: https
          containerPort: 9871
        - name: client-rpc
          containerPort: 8020
        - name: service-rpc
          containerPort: 8021
        - name: lifeline-rpc
          containerPort: 8022
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - hdfs dfsadmin -fs hdfs://localhost -safemode get
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 2
        resources:
          {}
      volumes:
      - name: config
        configMap:
          name: my-gaffer-road-traffic-hdfs
          optional: false
      - name: secrets
        secret:
          secretName: my-gaffer-road-traffic-hdfs
          optional: false
      - name: rack-awareness
        configMap:
          name: my-gaffer-road-traffic-hdfs-rack-awareness
          defaultMode: 0755
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-gaffer-road-traffic-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.5
    release: my-gaffer-road-traffic
    heritage: Helm
    component: server
spec:
  serviceName: my-gaffer-road-traffic-zookeeper-headless
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
      release: my-gaffer-road-traffic
      component: server
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: zookeeper
        release: my-gaffer-road-traffic
        component: server
    spec:
      terminationGracePeriodSeconds: 1800
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:

        - name: zookeeper
          image: "zookeeper:3.5.5"
          imagePullPolicy: IfNotPresent
          command: 
             - "/bin/bash"
             - "-xec"
             - "/config-scripts/run"
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
            - name: election
              containerPort: 3888
              protocol: TCP
            - name: server
              containerPort: 2888
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - sh
                - /config-scripts/ok
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - sh
                - /config-scripts/ready
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
            successThreshold: 1
          env:
            - name: ZK_REPLICAS
              value: "1"
            - name: JMXAUTH
              value: "false"
            - name: JMXDISABLE
              value: "false"
            - name: JMXPORT
              value: "1099"
            - name: JMXSSL
              value: "false"
            - name: ZK_SYNC_LIMIT
              value: "10"
            - name: ZK_TICK_TIME
              value: "2000"
            - name: ZOO_AUTOPURGE_PURGEINTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_SNAPRETAINCOUNT
              value: "3"
            - name: ZOO_INIT_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_PORT
              value: "2181"
            - name: ZOO_STANDALONE_ENABLED
              value: "false"
            - name: ZOO_TICK_TIME
              value: "2000"
          resources:
            {}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config-scripts
      volumes:
        - name: config
          configMap:
            name: my-gaffer-road-traffic-zookeeper
            defaultMode: 0555
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/master/statefulset.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-gaffer-road-traffic-accumulo-masters
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: my-gaffer-road-traffic-accumulo-masters
  selector:
    matchLabels:
      app.kubernetes.io/name: accumulo
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: master
  template:
    metadata:
      labels:
        helm.sh/chart: accumulo-2.2.1
        app.kubernetes.io/name: accumulo
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "2.0.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/config: 4d40e010642496e368117b87cbcd5cdd28ce2132a18244517fd3e65c15e3f781
    spec:
      containers:
      - name: accumulo-master
        image: gchq/gaffer:2.2.1-accumulo-2.0.1
        imagePullPolicy: IfNotPresent
        args:
        - master
        env:
        - name: ACCUMULO_CONF_DIR
          value: /etc/accumulo/conf
        - name: ACCUMULO_INSTANCE_NAME
          value: accumulo
        volumeMounts:
        - name: config
          mountPath: /etc/accumulo/conf
          readOnly: true
        resources:
          {}
        livenessProbe:
          httpGet:
            path: /
            port: 9999
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 9999
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: config
        secret:
          secretName: my-gaffer-road-traffic-accumulo-config
          optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/tserver/statefulset.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-gaffer-road-traffic-accumulo-tservers
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: tserver
spec:
  podManagementPolicy: Parallel
  replicas: 3
  serviceName: my-gaffer-road-traffic-accumulo-tservers
  selector:
    matchLabels:
      app.kubernetes.io/name: accumulo
      app.kubernetes.io/instance: my-gaffer-road-traffic
      app.kubernetes.io/component: tserver
  template:
    metadata:
      labels:
        helm.sh/chart: accumulo-2.2.1
        app.kubernetes.io/name: accumulo
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "2.0.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: tserver
      annotations:
        checksum/config: 4d40e010642496e368117b87cbcd5cdd28ce2132a18244517fd3e65c15e3f781
    spec:
      containers:
      - name: accumulo-tserver
        image: gchq/gaffer:2.2.1-accumulo-2.0.1
        imagePullPolicy: IfNotPresent
        args:
        - tserver
        env:
        - name: ACCUMULO_CONF_DIR
          value: /etc/accumulo/conf
        volumeMounts:
        - name: config
          mountPath: /etc/accumulo/conf
          readOnly: true
        resources:
          {}
      volumes:
      - name: config
        secret:
          secretName: my-gaffer-road-traffic-accumulo-config
          optional: false
---
# Source: gaffer-road-traffic/templates/data-loader-job.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: batch/v1
kind: Job
metadata:
  name: my-gaffer-road-traffic-data-loader
  labels:
    helm.sh/chart: gaffer-road-traffic-2.2.1
    app.kubernetes.io/name: gaffer-road-traffic
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      labels:
        helm.sh/chart: gaffer-road-traffic-2.2.1
        app.kubernetes.io/name: gaffer-road-traffic
        app.kubernetes.io/instance: my-gaffer-road-traffic
        app.kubernetes.io/version: "2.2.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: loader
    spec:
      initContainers:
        - name: check-accumulo-ready
          image: busybox:1.28
          command: [ "sh", "-c", "until nslookup gaffer-accumulo-masters; do echo Waiting on Accumulo master; sleep 2; done" ]
      restartPolicy: OnFailure
      containers:
      - name: data-loader
        image: gchq/gaffer-road-traffic-loader:2.2.1
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: graph-config
          mountPath: /gaffer/graph/
          readOnly: true
        - name: schema
          mountPath: /gaffer/schema/
          readOnly: true
        - name: store-properties
          mountPath: /gaffer/store/
          readOnly: true
        resources:
          {}
      volumes:
      - name: graph-config
        configMap:
          name: my-gaffer-road-traffic-graph-config
          optional: false
      - name: schema
        configMap:
          name: my-gaffer-road-traffic-schema
          optional: false
      - name: store-properties
        secret:
          secretName: my-gaffer-road-traffic-store-properties
          optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: my-gaffer-road-traffic-hdfs
  labels:
    
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: namenode
  annotations:
    traefik.ingress.kubernetes.io/rule-type: PathPrefixStrip
spec:
  rules:
  - http:
      paths:
      - path: /hdfs/(.*)
        backend:
          serviceName: my-gaffer-road-traffic-hdfs-namenodes
          servicePort: 9870
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/monitor/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: my-gaffer-road-traffic-accumulo-monitor
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: monitor
  annotations:
    traefik.ingress.kubernetes.io/rule-type: PathPrefixStrip
spec:
  rules:
  - http:
      paths:
      - path: /accumulo/(.*)
        backend:
          serviceName: my-gaffer-road-traffic-accumulo-monitor
          servicePort: http
---
# Source: gaffer-road-traffic/charts/gaffer/templates/ingress.yaml
# Copyright 2020-2023 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: my-gaffer-road-traffic-app
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gaffer-app
  annotations:
    traefik.ingress.kubernetes.io/rule-type: PathPrefixStrip
spec:
  rules:
  - http:
      paths:
      - path: /rest/(.*)
        backend:
          serviceName: my-gaffer-road-traffic-api
          servicePort: http
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/post-install-cmds.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-hdfs-post-install-cmds
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "10"
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hook
spec:
  restartPolicy: OnFailure
  containers:
  - name: cmds
    image: gchq/hdfs:3.3.3
    imagePullPolicy: IfNotPresent
    command: ["/bin/bash", "-c", "until hadoop fs -ls / >/dev/null 2>&1 || [ $(( ATTEMPTS++ )) -gt 300 ]; do echo \"$(date) - Waiting for HDFS instance to be ready...\" && sleep 10; done && hadoop fs -mkdir -p /accumulo && hadoop fs -chown accumulo /accumulo && hadoop fs -chmod 700 /accumulo && hadoop fs -ls /"]
    env:
    - name: HADOOP_CONF_DIR
      value: /etc/hadoop/conf
    volumeMounts:
    - name: config
      mountPath: /etc/hadoop/conf
      readOnly: true
  volumes:
  - name: config
    configMap:
      name: my-gaffer-road-traffic-hdfs
      optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/tests/auth-test.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-hdfs-auth-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
spec:
  restartPolicy: Never
  containers:
  - name: test
    image: gchq/hdfs:3.3.3
    imagePullPolicy: IfNotPresent
    command: ["/bin/sh", "-c", "hadoop fs -put -f /opt/hadoop/LICENSE.txt / && hadoop fs -ls / && hadoop fs -rm /LICENSE.txt; rc=$?; echo $rc; [ $rc = 0 ]"]
    env:
    - name: HADOOP_CONF_DIR
      value: /etc/hadoop/conf
    volumeMounts:
    - name: config
      mountPath: /etc/hadoop/conf
      readOnly: true
  volumes:
  - name: config
    configMap:
      name: my-gaffer-road-traffic-hdfs
      optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/tests/rack-awareness-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-hdfs-rack-awareness-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
spec:
  restartPolicy: Never
  containers:
  - name: test
    image: gchq/hdfs:3.3.3
    imagePullPolicy: IfNotPresent
    command: ["/bin/sh", "-c", "hdfs dfsadmin -printTopology | grep Rack: | grep -v /default-rack"]
    env:
    - name: HADOOP_CONF_DIR
      value: /etc/hadoop/conf
    volumeMounts:
    - name: config
      mountPath: /etc/hadoop/conf
      readOnly: true
  volumes:
  - name: config
    configMap:
      name: my-gaffer-road-traffic-hdfs
      optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/charts/hdfs/templates/tests/webhdfs-test.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-hdfs-webhdfs-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
  labels:
    helm.sh/chart: hdfs-2.2.1
    app.kubernetes.io/name: hdfs
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "3.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
spec:
  restartPolicy: Never
  containers:
  - name: test
    image: alpine:3.10.2
    imagePullPolicy: IfNotPresent
    command: ["/bin/sh", "-c", "apk update && apk add curl && statusCode=$(curl -f -s -o /dev/null -w \"%{http_code}\" http://my-gaffer-road-traffic-hdfs-namenodes:9870/webhdfs/v1?op=LISTSTATUS) && echo \"${statusCode}\" && [ \"${statusCode}\" = \"200\" ]"]
---
# Source: gaffer-road-traffic/charts/gaffer/charts/accumulo/templates/post-install-cmds/hook.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-accumulo-post-install-cmds
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "20"
  labels:
    helm.sh/chart: accumulo-2.2.1
    app.kubernetes.io/name: accumulo
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hook
spec:
  restartPolicy: Never
  containers:
  - name: cmds
    image: gchq/gaffer:2.2.1-accumulo-2.0.1
    imagePullPolicy: IfNotPresent
    command: ["/bin/bash", "/cmds/run.sh"]
    env:
    - name: ACCUMULO_CONF_DIR
      value: /etc/accumulo/conf
    volumeMounts:
    - name: config
      mountPath: /etc/accumulo/conf
      readOnly: true
    - name: cmds
      mountPath: /cmds
      readOnly: true
    resources:
      {}
  volumes:
  - name: config
    secret:
      secretName: my-gaffer-road-traffic-accumulo-config
      optional: false
  - name: cmds
    secret:
      secretName: my-gaffer-road-traffic-accumulo-cmds
      optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/templates/graph-status-check-hook.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-gaffer-road-traffic-graph-status-check"
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hook
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "30"
spec:
  containers:
  - name: curl
    image: curlimages/curl:7.67.0
    command: ["/bin/sh", "-c", "statusCode=-1 && until [ \"${statusCode}\" = \"200\" ] || [ $(( ATTEMPTS++ )) -gt 300 ]; do sleep 1; statusCode=$(curl -f -s -o /dev/null -w \"%{http_code}\" http://my-gaffer-road-traffic-api:80/rest/graph/status); echo \"$(date) - http://my-gaffer-road-traffic-api:80/rest/graph/status : ${statusCode}\"; done; [ \"${statusCode}\" != \"200\" ] && exit 1; exit 0"]
  restartPolicy: Never
---
# Source: gaffer-road-traffic/charts/gaffer/templates/graph-upgrade-hook.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-graph-upgrade
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hook
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "35"
spec:
  restartPolicy: Never
  containers:
  - name: iterator-upgrade
    image: gchq/gaffer:2.2.1-accumulo-2.0.1
    imagePullPolicy: IfNotPresent
    args:
    - uk.gov.gchq.gaffer.accumulostore.utils.AddUpdateTableIterator
    - roadTraffic
    - /gaffer/schema/
    - /gaffer/store/store.properties
    - update
    env:
    - name: ACCUMULO_CONF_DIR
      value: /etc/accumulo/conf
    volumeMounts:
    - name: config
      mountPath: /etc/accumulo/conf
      readOnly: true
    - name: schema
      mountPath: /gaffer/schema/
      readOnly: true
    - name: store-properties
      mountPath: /gaffer/store/
      readOnly: true
    resources:
      {}
  volumes:
  - name: config
    secret:
      secretName: my-gaffer-road-traffic-accumulo-accumulo-config
      optional: false
  - name: schema
    configMap:
      name: my-gaffer-road-traffic-schema
      optional: false
  - name: store-properties
    secret:
      secretName: my-gaffer-road-traffic-store-properties
      optional: false
---
# Source: gaffer-road-traffic/charts/gaffer/templates/tests/test-graph-status.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Pod
metadata:
  name: "my-gaffer-road-traffic-test-graph-status"
  labels:
    helm.sh/chart: gaffer-2.2.1
    app.kubernetes.io/name: gaffer
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  containers:
  - name: curl
    image: curlimages/curl:7.67.0
    args:
    - -D-
    - -f
    - http://my-gaffer-road-traffic-api:80/rest/graph/status
  restartPolicy: Never
---
# Source: gaffer-road-traffic/templates/check-data-loaded-hook.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-data-load-check
  labels:
    helm.sh/chart: gaffer-road-traffic-2.2.1
    app.kubernetes.io/name: gaffer-road-traffic
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hook
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "40"
spec:
  containers:
  - name: check
    image: curlimages/curl:7.67.0
    workingDir: /gaffer/tests/
    command:
    - /bin/sh
    - -c
    - . ./check-data-loaded.sh
    volumeMounts:
    - name: test-queries
      mountPath: /gaffer/tests/
      readOnly: true
  volumes:
  - name: test-queries
    configMap:
      name: my-gaffer-road-traffic-test-queries
      optional: false
  restartPolicy: Never
---
# Source: gaffer-road-traffic/templates/tests/integration/hdfs/hdfs-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-hdfs-integration-test
  labels:
    helm.sh/chart: gaffer-road-traffic-2.2.1
    app.kubernetes.io/name: gaffer-road-traffic
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  restartPolicy: Never
  initContainers:
  - name: populate-hdfs
    image: gchq/hdfs:3.3.3
    imagePullPolicy: IfNotPresent
    workingDir: /setup
    command: [
      "/bin/bash",
      "-c",
      ". ./populate-hdfs.sh"
    ]
    env:
    - name: HADOOP_CONF_DIR
      value: /etc/hadoop/conf
    volumeMounts:
    - name: hdfs-setup-files
      mountPath: /setup
      readOnly: true
    - name: hdfs-config
      mountPath: /etc/hadoop/conf
      readOnly: true
    - name: hdfs-secrets
      mountPath: /etc/hadoop/secrets
      readOnly: true

  - name: add-elements-from-hdfs
    image: curlimages/curl:7.67.0
    workingDir: /setup
    command:
    - /bin/sh
    - -c
    - . ./run-operation.sh
    volumeMounts:
    - name: hdfs-setup-files
      mountPath: /setup
      readOnly: true

  containers:
  - name: hdfs-test
    image: curlimages/curl:7.67.0
    workingDir: /gaffer/tests/
    command:
    - /bin/sh
    - -c
    - . ./check-elements-exist.sh
    volumeMounts:
    - name: hdfs-test-files
      mountPath: /gaffer/tests/
      readOnly: true
  volumes:
  - name: hdfs-setup-files
    configMap:
      name: my-gaffer-road-traffic-hdfs-setup-files
      optional: false
  - name: hdfs-test-files
    configMap:
      name: my-gaffer-road-traffic-hdfs-test-files
      optional: false
  - name: store-properties
    secret:
      secretName: my-gaffer-road-traffic-store-properties
      optional: false
  - name: schema
    configMap:
      name: my-gaffer-road-traffic-schema
      optional: false
  - name: accumulo-config
    secret:
      secretName: my-gaffer-road-traffic-accumulo-config
      optional: false
  - name: hdfs-config
    configMap:
      name: my-gaffer-road-traffic-hdfs
      optional: false
  - name: hdfs-secrets
    secret:
      secretName: my-gaffer-road-traffic-hdfs
      optional: false
---
# Source: gaffer-road-traffic/templates/tests/test-queries.yaml
# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Pod
metadata:
  name: my-gaffer-road-traffic-test-queries
  labels:
    helm.sh/chart: gaffer-road-traffic-2.2.1
    app.kubernetes.io/name: gaffer-road-traffic
    app.kubernetes.io/instance: my-gaffer-road-traffic
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  restartPolicy: Never
  containers:
  - name: tests
    image: curlimages/curl:7.67.0
    workingDir: /gaffer/tests/
    command:
    - /bin/sh
    - -c
    - . ./run-tests.sh
    volumeMounts:
    - name: test-queries
      mountPath: /gaffer/tests/
      readOnly: true
  volumes:
  - name: test-queries
    configMap:
      name: my-gaffer-road-traffic-test-queries
      optional: false
