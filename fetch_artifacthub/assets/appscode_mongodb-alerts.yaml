---
# Source: mongodb-alerts/templates/configmap.yaml
# templates/configmap.yaml
---
# Source: mongodb-alerts/templates/job.yaml
# templates/job.yaml
---
# Source: mongodb-alerts/templates/alert.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: my-mongodb-alerts
  namespace: default
  labels:
    helm.sh/chart: mongodb-alerts-v2023.05.09
    app.kubernetes.io/name: mongodb-alerts
    app.kubernetes.io/instance: my-mongodb-alerts
    app.kubernetes.io/version: "v0.2.0"
    app.kubernetes.io/managed-by: Helm
    release: kube-prometheus-stack
spec:
  groups:
  - name: mongodb.database.default.my-mongodb-alerts.rules
    rules:
    - alert: MongodbVirtualMemoryUsage
      expr: sum(mongodb_ss_mem_virtual{job="my-mongodb-alerts-stats",namespace="default"}) BY (job) > 2.097152e+06
      for: 1m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB virtual memory usage (instance {{ $labels.instance }})
        description: "High memory usage\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongodbReplicationLag
      expr: mongodb_mongod_replset_member_replication_lag{job="my-mongodb-alerts-stats",namespace="default"} > 10
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB database has replication lag (instance {{ $labels.instance }})
        description: "Mongodb replication lag is more than 10\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongodbNumberCursorsOpen
      expr: mongodb_ss_metrics_cursor_open{csr_type="total",job="my-mongodb-alerts-stats",namespace="default"} > 10000
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB number cursors open (instance {{ $labels.instance }})
        description: "Too many cursors opened by MongoDB for clients (> 10k)\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongodbCursorsTimeouts
      expr: increase(mongodb_ss_metrics_cursor_timedOut{job="my-mongodb-alerts-stats",namespace="default"}[1m]) > 100
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB cursors timeouts (instance {{ $labels.instance }})
        description: "Too many cursors are timing out\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongodbTooManyConnections
      expr: avg by(instance) (rate(mongodb_ss_connections{conn_type="current",job="my-mongodb-alerts-stats",namespace="default"}[1m])) / avg by(instance) (sum (mongodb_ss_connections) by (instance)) * 100 > 80
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB too many connections (instance {{ $labels.instance }})
        description: "Too many connections (> 80%)\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBPhaseCritical
      expr: kubedb_com_mongodb_status_phase{app="my-mongodb-alerts", namespace="default",phase="Critical"} >= 1
      for: 3m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB database is in Critical state (instance {{ $labels.instance }})
        description: "Database in Critical state, one or more database nodes are not working properly.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBDown
      expr: kubedb_com_mongodb_status_phase{app="my-mongodb-alerts", namespace="default",phase="NotReady"} >= 1
      for: 30s
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB database is in NotReady state (instance {{ $labels.instance }})
        description: "Database in NotReady state, database read/write is failing.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBHighLatency
      expr: |
        rate(mongodb_ss_opLatencies_latency{job="my-mongodb-alerts-stats",namespace="default"}[5m]) /
        rate(mongodb_ss_opLatencies_ops{job="my-mongodb-alerts-stats",namespace="default"}[5m]) > 250000
      for: 10m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: High latency in mongodb instances {{ $labels.instance }}
        description: "High latency in instances\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBHighTicketUtilization
      expr: |
        (mongodb_ss_wt_concurrentTransactions_out{job="my-mongodb-alerts-stats",namespace="default"} /
        mongodb_ss_wt_concurrentTransactions_totalTickets{job="my-mongodb-alerts-stats",namespace="default"}) * 100
        > 75
      for: 10m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: Ticket usage over 75% {{ $labels.instance }}
        description: "Ticket usage over 75%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBRecurrentCursorTimeout
      expr: rate(mongodb_ss_metrics_cursor_timedOut{job="my-mongodb-alerts-stats",namespace="default"}[5m]) > 0
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: Recurrent cursors timeout in instance {{ $labels.instance }}
        description: "Recurrent cursors timeout\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBRecurrentMemoryPageFaults
      expr: rate(mongodb_ss_extra_info_page_faults{job="my-mongodb-alerts-stats",namespace="default"}[5m]) > 0
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: Recurrent memory page faults in instance {{ $labels.instance }}
        description: "Recurrent memory page faults\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mongodb.provisioner.default.my-mongodb-alerts.rules
    rules:
    - alert: KubeDBMongoDBPhaseNotReady
      expr: kubedb_com_mongodb_status_phase{phase="NotReady",app="my-mongodb-alerts",namespace="default"} == 1
      for: 1m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: KubeDB MongoDB Phase NotReady (mongodb {{ $labels.mongodb }})
        description: "KubeDB MongoDB Phase not ready on {{ $labels.mongodb }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMongoDBPhaseCritical
      expr: kubedb_com_mongodb_status_phase{phase="Critical",app="my-mongodb-alerts",namespace="default"} == 1
      for: 15m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: KubeDB MongoDB Phase Critical (mongodb {{ $labels.mongodb }})
        description: "KubeDB MongoDB Phase Critical {{ $labels.mongodb }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mongodb.opsManager.default.my-mongodb-alerts.rules
    rules:
    - alert: KubeDBMongoDBOpsRequestStatusProgressingToLong
      expr: ops_kubedb_com_mongodbopsrequest_status_phase{phase="Progressing",app="my-mongodb-alerts",namespace="default"} == 1
      for: 30m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDBOpsRequest is in progressing status for too long (mongodbopsrequest {{ $labels.mongodbopsrequest }})
        description: "MongoDBOpsRequest {{ $labels.mongodbopsrequest }} is in progressing status for too long\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMongoDBOpsRequestFailed
      expr: ops_kubedb_com_mongodbopsrequest_status_phase{phase="Failed",app="my-mongodb-alerts",namespace="default"} == 1
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDBOpsRequest failed (mongodbopsrequest {{ $labels.mongodbopsrequest }})
        description: "MongoDBOpsRequest {{ $labels.mongodbopsrequest }} failed \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mongodb.stash.default.my-mongodb-alerts.rules
    rules:
    - alert: MongoDBStashBackupSessionFailed
      expr: stash_backup_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-mongodb-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB Stash backup session failed (invoker_name {{ $labels.invoker_name }})
        description: "MongoDB Stash backupsession failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBStashRestoreSessionFailed
      expr: stash_restore_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_restoresession_info{target_name="my-mongodb-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB Stash restore session failed (invoker_name {{ $labels.invoker_name }})
        description: "MongoDB Stash restore session failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBStashNoBackupSessionForTooLong
      expr: time() - stash_backup_last_success_time_seconds + on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-mongodb-alerts", target_kind="AppBinding", namespace="default"} - 1 > 18000
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB Stash no backup for last 18000 second (invoker_name {{ $labels.invoker_name }})
        description: "MongoDB Stash no backup for too long {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBStashRepositoryCorrupted
      expr: stash_repository_integrity * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-mongodb-alerts", target_kind="AppBinding", namespace="default"}
      for: 5m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB Stash repository corrupted (invoker_name {{ $labels.invoker_name }})
        description: "MongoDB Stash repository corrupted {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBStashRepositoryStorageRunningLow
      expr: stash_repository_size_bytes * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-mongodb-alerts", target_kind="AppBinding", namespace="default"} > 1.073741824e+10
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: MongoDB Stash Repository storage more than 1.073741824e+10 byte. (invoker_name {{ $labels.invoker_name }})
        description: "MongoDB Stash Repository storage running low {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBStashBackupSessionPeriodTooLong
      expr: stash_backup_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-mongodb-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary:  MongoDB Stash backup session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "MongoDB Stash backup session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: MongoDBStashRestoreSessionPeriodTooLong
      expr: stash_restore_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_restoresession_info{target_name="my-mongodb-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary:  MongoDB Stash restore session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "MongoDB Stash restore session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: mongodb.schemaManager.default.my-mongodb-alerts.rules
    rules:
    - alert: KubeDBMongoDBSchemaPendingForTooLong
      expr: schema_kubedb_com_mongodbdatabase_status_phase{phase="Pending",app="my-mongodb-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema pending for too long for (mongodbdatabase {{ $labels.mongodbdatabase }})
        description: "KubeDB schema pending for too long.\n {{ $labels.mongodbdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMongoDBSchemaInProgressForTooLong
      expr: schema_kubedb_com_mongodbdatabase_status_phase{phase="InProgress",app="my-mongodb-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema is in progress for too long for (mongodbdatabase {{ $labels.mongodbdatabase }})
        description: "KubeDB schema is in progress for too long.\n {{ $labels.mongodbdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMongoDBSchemaTerminatingForTooLong
      expr: schema_kubedb_com_mongodbdatabase_status_phase{phase="Terminating",app="my-mongodb-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema terminating for too long for (mongodbdatabase {{ $labels.mongodbdatabase }})
        description: "KubeDB schema terminating for too long.\n {{ $labels.mongodbdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMongoDBSchemaFailed
      expr: schema_kubedb_com_mongodbdatabase_status_phase{phase="Failed",app="my-mongodb-alerts",app_namespace="default"} == 1
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema failed for (mongodbdatabase {{ $labels.mongodbdatabase }})
        description: "KubeDB schema failed.\n {{ $labels.mongodbdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBMongoDBSchemaExpired
      expr: schema_kubedb_com_mongodbdatabase_status_phase{phase="Expired",app="my-mongodb-alerts",app_namespace="default"} == 1
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: MongoDB
        k8s_resource: mongodbs
        app: my-mongodb-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema expired for (mongodbdatabase {{ $labels.mongodbdatabase }})
        description: "KubeDB schema expired.\n {{ $labels.mongodbdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
