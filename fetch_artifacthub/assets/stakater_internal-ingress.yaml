---
# Source: internal-ingress/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
    version: "0.12.0"
    chart: "internal-ingress-1.0.8"
    release: "my-internal-ingress"
    heritage: "Helm"
  name: internal-ingress-serviceaccount
  namespace: internal-ingress
---
# Source: internal-ingress/templates/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: internal-ingress
  labels:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
    version: "0.12.0"
    chart: "internal-ingress-1.0.8"
    release: "my-internal-ingress"
    heritage: "Helm"
data:
  enable-vts-status: 'true'
  use-proxy-protocol: "false"
---
# Source: internal-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: internal-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
        - events
    verbs:
        - create
        - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: internal-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
    version: "0.12.0"
    chart: "internal-ingress-1.0.8"
    release: "my-internal-ingress"
    heritage: "Helm"
  name: internal-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: internal-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: internal-ingress-serviceaccount
    namespace: internal-ingress
---
# Source: internal-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
    version: "0.12.0"
    chart: "internal-ingress-1.0.8"
    release: "my-internal-ingress"
    heritage: "Helm"
  name: internal-ingress-role
  namespace: internal-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-internal-ingress"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
# Source: internal-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
    version: "0.12.0"
    chart: "internal-ingress-1.0.8"
    release: "my-internal-ingress"
    heritage: "Helm"
  name: internal-ingress-role-nisa-binding
  namespace: internal-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: internal-ingress-role
subjects:
  - kind: ServiceAccount
    name: internal-ingress-serviceaccount
    namespace: internal-ingress
---
# Source: internal-ingress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: internal-ingress
  labels:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
    version: "0.12.0"
    chart: "internal-ingress-1.0.8"
    release: "my-internal-ingress"
    heritage: "Helm"
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
    # https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/providers/aws/aws.go
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-west-2:449074299682:certificate/b4d21f5a-0ef8-417e-b39d-30e9f6c50820
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 80
  selector:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
  loadBalancerSourceRanges:
    - 125.209.127.26/32
---
# Source: internal-ingress/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: internal-ingress
    group: com.stakater.platform
    provider: stakater
    version: "0.12.0"
    chart: "internal-ingress-1.0.8"
    release: "my-internal-ingress"
    heritage: "Helm"
  name: internal-ingress
spec:
  replicas: 2
  revisionHistoryLimit: 3
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: "true"
      labels:
        app: internal-ingress
        group: com.stakater.platform
        provider: stakater
    spec:
      terminationGracePeriodSeconds: 60
      serviceAccount: internal-ingress-serviceaccount
      containers:
        - name: internal-ingress-controller
          image: "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.12.0"
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 5
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-backend
            - --configmap=$(POD_NAMESPACE)/internal-ingress
            - --publish-service=$(POD_NAMESPACE)/internal-ingress
            - --ingress-class=internal-ingress
            - --annotations-prefix=ingress.kubernetes.io
          # Use downward API
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 80
            - containerPort: 443
