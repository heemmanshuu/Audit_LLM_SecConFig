---
# Source: cluster-presets/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-cluster-presets
  namespace: default
  labels:
    helm.sh/chart: cluster-presets-v2024.8.21
    app.kubernetes.io/name: cluster-presets
    app.kubernetes.io/instance: my-cluster-presets
    app.kubernetes.io/version: "v0.0.3"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: cluster-presets/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-cluster-presets
  labels:
    helm.sh/chart: cluster-presets-v2024.8.21
    app.kubernetes.io/name: cluster-presets
    app.kubernetes.io/instance: my-cluster-presets
    app.kubernetes.io/version: "v0.0.3"
    app.kubernetes.io/managed-by: Helm
rules:
# Get cluster id
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs: ["get"]
# Get Cluster Topology
- apiGroups:
  - ""
  resources:
  - nodes
  verbs: ["get", "list", "watch"]
# chart presets
- apiGroups:
  - charts.x-helm.dev
  resources:
  - chartpresets
  - clusterchartpresets
  verbs: ["*"]
# kubedb
- apiGroups:
  - kubedb.com
  - ops.kubedb.com
  - autoscaling.kubedb.com
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups:
  - archiver.kubedb.com
  resources: ["*"]
  verbs: ["*"]
# petset
- apiGroups:
  - apps.k8s.appscode.com
  resources:
  - placementpolicies
  verbs: ["*"]
# node topologies
- apiGroups:
  - node.k8s.appscode.com
  resources:
  - nodetopologies
  verbs: ["*"]
# kubestash
- apiGroups:
  - storage.kubestash.com
  resources:
  - backupstorages
  - repositories
  verbs: ["get", "list", "watch"]
# capi
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinepools
  verbs: ["*"]
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  verbs: ["get", "list", "watch"]
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - azuremachinepools
  - azuremanagedmachinepools
  - gcpmachinepools
  - gcpmanagedmachinepools
  verbs: ["*"]
# karpenter aws
- apiGroups:
  - karpenter.sh
  resources:
  - nodepools
  verbs: ["*"]
- apiGroups:
  - karpenter.k8s.aws
  resources:
  - ec2nodeclasses
  verbs: ["*"]
# storage class
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshotclasses
  verbs: ["get", "list", "watch"]
# crd watcher
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs: ["get", "list", "watch"]
---
# Source: cluster-presets/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-cluster-presets
  labels:
    helm.sh/chart: cluster-presets-v2024.8.21
    app.kubernetes.io/name: cluster-presets
    app.kubernetes.io/instance: my-cluster-presets
    app.kubernetes.io/version: "v0.0.3"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-cluster-presets
subjects:
- kind: ServiceAccount
  name: my-cluster-presets
  namespace: default
---
# Source: cluster-presets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-cluster-presets
  namespace: default
  labels:
    helm.sh/chart: cluster-presets-v2024.8.21
    app.kubernetes.io/name: cluster-presets
    app.kubernetes.io/instance: my-cluster-presets
    app.kubernetes.io/version: "v0.0.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cluster-presets
      app.kubernetes.io/instance: my-cluster-presets
  template:
    metadata:
      labels:
        helm.sh/chart: cluster-presets-v2024.8.21
        app.kubernetes.io/name: cluster-presets
        app.kubernetes.io/instance: my-cluster-presets
        app.kubernetes.io/version: "v0.0.3"
        app.kubernetes.io/managed-by: Helm
    spec:
      
      serviceAccountName: my-cluster-presets
      securityContext:
        {}
      containers:
        - name: cluster-presets
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/appscode/cluster-presets:v0.0.3"
          imagePullPolicy: IfNotPresent
          args:
            - generate
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
