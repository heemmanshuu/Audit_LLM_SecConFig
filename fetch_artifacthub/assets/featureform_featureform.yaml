---
# Source: featureform/charts/etcd/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: featureform-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.2.4
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/managed-by: Helm
spec:
  minAvailable: 51%
  selector:
    matchLabels:
      app.kubernetes.io/name: etcd
      app.kubernetes.io/instance: my-featureform
---
# Source: featureform/charts/ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-featureform-ingress-nginx
  namespace: default
automountServiceAccountToken: true
---
# Source: featureform/charts/meilisearch/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: featureform-search
  labels:
    helm.sh/chart: meilisearch-0.1.49
    app.kubernetes.io/name: meilisearch
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: search-engine
    app.kubernetes.io/part-of: meilisearch
    app.kubernetes.io/managed-by: Helm
---
# Source: featureform/templates/coordinator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ff-coordinator-sa
---
# Source: featureform/templates/dashboard-metadata/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ff-dashboard-metadata-sa
---
# Source: featureform/templates/prometheus/clusterrole.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: featureform-prometheus
---
# Source: featureform/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ff-sa
---
# Source: featureform/charts/etcd/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: featureform-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.2.4
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  etcd-root-password: "c2VjcmV0cGFzc3dvcmQ="
---
# Source: featureform/charts/etcd/templates/token-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: featureform-etcd-jwt-token
  namespace: "default"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.2.4
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  jwt-token.pem: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBdjBtSzh5ajIvME8vWDcrbURBSjJITlpmZnJxVGlLcGw3eFk1VTNkVG1hN3p4L29jCkQ3Uno4MlU4azczRkJjd243SzBkYmpFdFdRTFR1dXNZeVNZWmpaSlE3c3pYemNKOFdTYlFxait0eXBhRjB4aE4Kb0lFclJmbzZDK1lLR1l1dDAveG12VVFWbGFEL0FUbHRyb2t5TFBHNVNXVHp3NTZBZ3l5QkxqRjdBdEtMa1RwbQowYm5ENmdQdjR0QTZxajJtTXFrakZUVkEzTHMxSHFwVzhQWXNNS015TndEelNGZnJUVW44RlluQldHNFI2NGhrCkY2OHBYRFRtOVFLaTNzZXBuWUxCTTVNNUFDOHB6UFpiTHB6WGtISjl5d2xoRGxzamRodUVqVDVld3NUTEd5QmcKRkxUSndFQmxGVmRUQ0NyNTB5ZENyR0R4Myt0UkdTWHdOcFEveUt5cHZ3dmloUE1TeER4ZDBtL3ZlUnlJMEFjQQpxV3pXZDFlUmlSQWpNSFV5OWE5WmdBZERtdCswVGdnVS9qTGRVRDIvazdGMkdkYWc5Um9QcUpKY1J3UGdPUldZCktZMUd5TzBvR1pTSjlVV05KWFc0bGF5TlVUeC9ydVZUT0RPWG9vakdTSmZFam81RW1uRXZCZ2tlRFZNNVFTTnkKRCtUVU5LR082MVNMYWNFUXQrNnNFRjJ0WGFqWmwwekJtOC9VVGJsY205Rzl6NDVGM2h6U2x1SEc4N2Q1OU5vNgp2eWsxNTB6OVJ2QWErMDhRaXNFSDk4M1Q2MVN1U2svODMwdFIxT2M3NXk3VktiWGNrYzh3d0hNaS9JTmZ5NkthCjBKWTFuY0p4eWlPdTN6NGM1cFI2UlBsaStKTVlvWit0UVNIR1kxQTc2UDdwZHF5ckltMFptVVZ4b2hzQ0F3RUEKQVFLQ0FnQitIM1JoVFZKR0RwcEEvSEQwSEM5YVpqSkNzYXdUQVI4Q25DbWlFZHhxU1VOdFNFaDJSbW5wUW9mRgpkZXRSSGtINHVFL2VWc2hxbHdXWmllY213VnM1MEE1UzFYYzRzSklpaWdndEtKMWpKUW9KbkUyYWxYQTl6SFczCllLNnFGMEcrc3YzZXJ1UjRhdFdZTGhCV2N4bEZMd0FYRjF2dVVEUzF5SU5JUE5HNWs2NzRTNFI5cGJrNk0reFkKSlNsNUUvcmdEa3NXY2ExWm5JbXl0V2RycXpTSndTQ2J5YUdld25GZjNYYzdrRCtPR2N6dytsWGNrOTUyY0Y4VApqdkJxYVVVNW1IdmdrS0tWcjRNbEpBNE0xdGIrNDY1elQ3VFJyVi9kUU5tTjgyQ3hsT1hCOWYvRHgwdjYyYnFNCmJxNU5oV0NCUzdLWFM3aFBCcTNMSWd1WFFQb29KMGlHVmF2MkVBblY2czVwdDRJYnVuN3p0WGF2RCtPMDd2WEcKTUE5aVdDMGNESE42ZndKWU1oaGZMUmxDeXdDRlNUckRuVGZJd0N3aUxHNEJ5K1FUUG01dzNIamMrWXA2OFBpOAp3YTR3QnBSdjd3SVdXdkRDcFRWaXhDZUo3a3hQSm9VK1VqWTdkUTNuSWt6VlkrS3I3SVJ6Qjg4QzdzLzcwSGJOCjZSNEI5VTQrdTBSRlJTOTRSVXNYUWxEc3Q1N2hrTjdvMUpNOVJlNkNTcmt4WUlFVzVQZi9FQ2lyMmpKSHBZQjcKZkwxNDBJZCs0K0hXWkc2dWpndU1zcW9iVkcxZi91dUlQM1ZUaFpVZEQzanN2ZDFMUHFhOXhEb2oxb0pTODUwQQpwSitXYlYwYjhvQ3lpYzZpT3NDa1hROHRTdGNDUTNjS25nYnFHSUtWdEFjTUVSQVNZUUtDQVFFQTVVaUpjNnhaCjlDZzh2U1NIeEtYYWRBVHlFdmNFU25hdVh6dXhkLzFheGFGRXdUK0ViYnExY0tGWG9WWjltNnZzK1JNcVVsUlQKMDRCMVdCMVpsNDZJdFhmdXdoVGt3bmdraVJRZ2FFbWU2TUVIdUg1RkxmVnR2RFVCMEY2c0VIYUt4aTl0aGlhZwpHekhJQ2xXVDZTM1ZPWm5yNzV6ZVlscGhyNHFHWTg1NldNY1h1b0VCODJEckEyU1BReWxVc29SUTN4cnZJVzUyCkdPWlY0NkdLdVZGd2xCUm1yMkgxV3hYcVQzRkhRMjRUZEhDQnBOdFVPZVFZcHhhay81SVZoWUxlRktBbFdOL2EKTFY0V3VZRjVCWlR5aFRHd0xMN3gzb3NxblkyQktXTWlCMWVxVmFEem4vbTg4K0NpQzVmQ21MY01MSGtYOUdMcAppWlQwQ2hwZ3FJQW5VUUtDQVFFQTFaT1h4ZG4vV0R1Mk94dmJKM3owRkMvMjFWZElDK0x0MG1pdjFpZkFkNWV2CmNKSmlremhqV3RJd2NpejV2azNYVGkwTEljdEllVng1emwvMzJBN0g1UmpJYlk3aVJFcGsrcTI1dFVENUZ2L0EKRnRvdFAvN0h6ZjhGZlIzWEVIWEREY1lUQkMxVDkvZkpvMm8zZVlWbkxLUzdqcDVKbE9VMzEyczEyUC9XMUw2bApDUHFySFFXbCtoUlM2R2s4Mnltc1kzc2pJMzM0TnM2RFRnVGJUcDJOazZXMGFodjlLS2U2dTZlY3pQT3VjTUtICjdvdk9wQkFJdW1tRkQzSDVlcForKzFqMjIvOXNmSUZWSXFXN3gyRngveEdnU1RnTU1INU1YUDJGaFlTdkwycEMKRlZhdklyN1ZwNDRlOUxoSWlNTU5FZCtWeGRpNmFqU0s1aGFJZmNldnF3S0NBUUIydkpqSitZQmdDNUpnMVJFbQpTa21WK1pXdk1wTGJTUmpHSXJDbUZlTXpJMi9xcjgwUjBqWHlET3ZIbG5YWDd6SDZUdTJFMHp6Ujg5MVE4Mm9aCkxXd29wZUpVU2VPcHZmUVZ0UUdQWUVqVitsallOelAyTi9wTEZCeExYeXUySHQyQkFzQ3lUMEJzdE53R1Zna1MKSVhVaHJrOWJ1QjRHU3czNWpVQkpZWDFFaWw0RWJKaXBCQkRRb2Z2NjZPVit5VHprUFJ1SGNaL2hCeStGZ1h2SQp1cDhWWUhkSTdlN1U2OFY2dkl3T0pHd1l5Y2FwckJlekh5ZVJLQTNzZUNlREM2R2NoczZ3ZHNTUzUvM1d0WEVKCjdmZWwrSFJteDcrVDR2Zi92VzhkRXNSbGp3V2I4STBaMUlnQXQ5elRLaFZSWnNIOEtmMjR4cHh3YmwzdStYZ0MKNnRMeEFvSUJBRThwUkhEMkN4bkdFQlk2amZGRjlDWGpYVWJYOGdGTjNENUh4UnpJWVNNeW1ybEwyTE9laTl6bQoyVVFJZll6V3h6M1huaStwYkRSblhWSnI2YTR3VkZFSzdZY0dGY0dnSFd0NHBzT1MwSUNBek03cmtTZ09KRHFyCkVucThhN0ZUSkxmZk9iOHJtZHJvQWRuTERjTEIrbXJtcUFvRmkxcGYxMkhHQUJCdFMxQlJWVlJOck15MkFqMzkKK0hqaVFNY3UzQkdIVzQvVktnSU9hMGFvc0N5a1l3eGR0OUE0alkzYkZYQm1nTXpLYVZhc0U3d01IOHhaa1JLZQo5ODJ3dmZwOCs1WG45Sis0UFpxc1NVVHRUdnRvbDlzbHlsWTVLdk55YkpWdTltVjF0NFVJaW5Qa1RFZkJtZWxmCjJRTjFwcFRpVHQ3WUUyaGdteit3TitkdVpLclNMNzhDZ2dFQkFJTEpCaUdRMk5JUWVvVE5RZFIrbGRETHNuaHUKMjcvM0pxeUVOTlkwb0JSc0Z3U0V5R0hjVXVRdzBBQ0ZXSU1POS8xUzVMVFBMNmJvWjNoOFE4WERSaUJzUmpuOAp4RXdXMk5BdTFhNG4yMHp1d25NdUNYcHcvSWkrekV0dmRlUXlTY0lOOHRDcktYZXUwblFFV0p6RGlpR00xandmCjJHU3BId1h5QzhlS2xFLzlFRlZIUzVZaU1ma3RiR1U2SG1ROERJMjNqVU00dDc2MzlGejhqWTBMZ0xTdWM4UGoKeVZEOUZEc2RvQVhNdjdWa0hFcWVmelJsVHN5YXlvRE5KZFhlTnYzTkRoamx6UzhlMWN0ZmJrWExZbjBSZHdsVgpGY1V4SlptbXhDYzNacDJVVEYra29Od3JnL0hwby83Uk41Rnd0eEQrbk8yUzRkZTRvOWhHdTVGWkx6Zz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
---
# Source: featureform/charts/ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-featureform-ingress-nginx-controller
  namespace: default
data:
  allow-snippet-annotations: "true"
---
# Source: featureform/charts/meilisearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: featureform-search-environment
  labels:
    helm.sh/chart: meilisearch-0.1.49
    app.kubernetes.io/name: meilisearch
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: search-engine
    app.kubernetes.io/part-of: meilisearch
    app.kubernetes.io/managed-by: Helm
data:
  MEILI_ENV: "development"
  MEILI_NO_ANALYTICS: "true"
---
# Source: featureform/templates/dashboard/configmap.yaml
apiVersion: v1
data:
  REACT_APP_API_URL: featureform-metadata-server
kind: ConfigMap
metadata:
  name: featureform-env
---
# Source: featureform/templates/etcd-upgrade-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: etcd-upgrade-configmap
data:
  ETCD_INITIAL_CLUSTER_STATE: "new"
---
# Source: featureform/templates/prometheus/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: featureform-prometheus-server-conf
  labels:
    name: featureform-prometheus-server-conf
data:
  prometheus.rules: |-
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    rule_files:
      - /etc/prometheus/prometheus.rules
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager.monitoring.svc:9093"
    scrape_configs:
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:9090']
      - job_name: 'featureform-service-monitoring'
        scrape_interval: 10s
        metrics_path: /metrics
        static_configs:
          - targets: ["featureform-feature-server:2112"]
---
# Source: featureform/charts/ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: my-featureform-ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: featureform/charts/ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: my-featureform-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-featureform-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: my-featureform-ingress-nginx
    namespace: "default"
---
# Source: featureform/charts/ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-featureform-ingress-nginx
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: featureform/templates/coordinator/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-featureform-coordinator
rules:
  - apiGroups: ["", "extensions", "apps", "batch"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: featureform/templates/prometheus/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: featureform-prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
---
# Source: featureform/charts/ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-featureform-ingress-nginx
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-featureform-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: my-featureform-ingress-nginx
    namespace: "default"
---
# Source: featureform/templates/coordinator/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-featureform-coordinator-binding
subjects:
  - kind: ServiceAccount
    name: my-featureform-coordinator
    apiGroup: ""
  - kind: ServiceAccount
    name: default
    apiGroup: ""
roleRef:
  kind: Role
  name: my-featureform-coordinator
  apiGroup: ""
---
# Source: featureform/templates/prometheus/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: featureform-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: featureform-prometheus
subjects:
  - kind: ServiceAccount
    name: default
---
# Source: featureform/charts/etcd/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-etcd-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.2.4
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/managed-by: Helm
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2379
      targetPort: client
    - name: peer
      port: 2380
      targetPort: peer
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: my-featureform
---
# Source: featureform/charts/etcd/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.2.4
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "client"
      port: 2379
      targetPort: client
      nodePort: null
    - name: "peer"
      port: 2380
      targetPort: peer
      nodePort: null
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: my-featureform
---
# Source: featureform/charts/ingress-nginx/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-featureform-ingress-nginx-controller-admission
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/component: controller
---
# Source: featureform/charts/ingress-nginx/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "4000"
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-featureform-ingress-nginx-controller
  namespace: default
spec:
  type: LoadBalancer
  ipFamilyPolicy: SingleStack
  ipFamilies: 
    - IPv4
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/component: controller
---
# Source: featureform/charts/meilisearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-search
  labels:
    helm.sh/chart: meilisearch-0.1.49
    app.kubernetes.io/name: meilisearch
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: search-engine
    app.kubernetes.io/part-of: meilisearch
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7700
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: meilisearch
    app.kubernetes.io/instance: my-featureform
---
# Source: featureform/templates/api-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-api-server
  labels:
    app: featureform-api-server
spec:
  ports:
    - port: 7878
      protocol: TCP
      targetPort: 7878
  type: ClusterIP
  selector:
    app: featureform-api-server
---
# Source: featureform/templates/coordinator/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-coordinator
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
---
# Source: featureform/templates/dashboard-metadata/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-dashboard-metadata
spec:
  type: ClusterIP
  selector:
    app: featureform-dashboard-metadata
  ports:
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: http
---
# Source: featureform/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-dashboard
spec:
  type: ClusterIP
  selector:
    app: featureform-dashboard
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
---
# Source: featureform/templates/feature-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-feature-server
spec:
  ports:
    - name: grpc
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: featureform-feature-server
---
# Source: featureform/templates/metadata/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-metadata-server
spec:
  ports:
    - name: grpc
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: featureform-metadata-server
---
# Source: featureform/templates/prometheus/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: featureform-prometheus-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"

spec:
  selector:
    app: featureform-prometheus-server
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
---
# Source: featureform/charts/ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-featureform-ingress-nginx-controller
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: my-featureform
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: my-featureform
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: "k8s.gcr.io/ingress-nginx/controller:v1.2.0@sha256:d8196e3bc1e72547c5dec66d6556c0ff92a23f6d0919b206be170bc90d5f9185"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/my-featureform-ingress-nginx-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/my-featureform-ingress-nginx-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
          securityContext: 
            capabilities:
              drop:
              - ALL
              add:
              - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources: 
            requests:
              cpu: 100m
              memory: 90Mi
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: my-featureform-ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: my-featureform-ingress-nginx-admission
---
# Source: featureform/templates/api-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: featureform-api-server
    chart: featureform
  name: featureform-api-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: featureform-api-server
  strategy: {}
  template:
    metadata:
      labels:
        app: featureform-api-server
      
    spec:
      containers:
        - image: "featureformcom/api-server:0.12.5"
          imagePullPolicy: Always
          name: featureform-api-server
          ports:
            - containerPort: 7878
              protocol: TCP
          env:
            - name: API_PORT
              value: "7878"
            - name: METADATA_HOST
              value: featureform-metadata-server
            - name: METADATA_PORT
              value: "8080"
            - name: SERVING_HOST
              value: featureform-feature-server
            - name: SERVING_PORT
              value: "8080"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          livenessProbe:
            httpGet:
              path: /_ah/
              port: 8443
            initialDelaySeconds: 300
            periodSeconds: 3
---
# Source: featureform/templates/coordinator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: featureform-coordinator
  labels:
    chart: featureform
spec:
  selector:
    matchLabels:
      chart: featureform
      app: featureform-coordinator
  template:
    metadata:
      labels:
        chart: featureform
        app: featureform-coordinator
      
    spec:
      serviceAccountName: ff-coordinator-sa

      containers:
        - name: "featureform-coordinator"
          image: "featureformcom/coordinator:0.12.5"
          imagePullPolicy: Always
          env:
            - name: ETCD_PORT
              value: "2379"
            - name: ETCD_HOST
              value: featureform-etcd
            - name: METADATA_PORT
              value: "8080"
            - name: METADATA_HOST
              value: featureform-metadata-server
            - name: K8S_RUNNER_ENABLE
              value: "false"
            - name: WORKER_IMAGE
              value: "featureformcom/worker:0.12.5"
            - name: PANDAS_RUNNER_IMAGE
              value: "featureformcom/k8s_runner:0.12.5"
            - name: DEBUG
              value: "false"


          ports:
            - name: http
              containerPort: 80
              protocol: TCP
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
            limits:
              cpu: 1
            requests:
              cpu: 1
---
# Source: featureform/templates/dashboard-metadata/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: featureform-dashboard-metadata
  labels:
    chart: featureform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: featureform-dashboard-metadata
  template:
    metadata:
      labels:
        app: featureform-dashboard-metadata
      
    spec:
      serviceAccountName: ff-dashboard-metadata-sa
      containers:
        - name: featureform
          image: "featureformcom/metadata-dashboard:0.12.5"
          imagePullPolicy: Always
          env:
            - name: METADATA_HOST
              value: featureform-metadata-server
            - name: METADATA_PORT
              value: "8080"
            - name: METADATA_HTTP_PORT
              value: "3001"
            - name: MEILISEARCH_PORT
              value: "7700"
            - name: MEILISEARCH_HOST
              value: featureform-search
            - name: MEILISEARCH_APIKEY
              value: ""
            - name: FEATUREFORM_VERSION
              value: 0.12.5
            - name: ETCD_HOST
              value: featureform-etcd
            - name: ETCD_PORT
              value: "2379"
          ports:
            - name: http
              containerPort: 3001
              protocol: TCP
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
            limits:
              cpu: 1
            requests:
              cpu: 1
---
# Source: featureform/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: featureform-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: featureform-dashboard
  template:
    metadata:
      labels:
        chart: featureform
        app: featureform-dashboard
      
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: featureform-dashboard
          image: "featureformcom/dashboard:0.12.5"
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: REACT_APP_API_URL
              valueFrom:
                configMapKeyRef:
                  key: REACT_APP_API_URL
                  name: featureform-env
---
# Source: featureform/templates/feature-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: featureform
    run: featureform-feature-server
    app: featureform-feature-server
  name: featureform-feature-server
spec:
  replicas: 1
  selector:
    matchLabels:
      run: featureform-feature-server
      app: featureform-feature-server
  strategy: {}
  template:
    metadata:
      labels:
        chart: featureform
        run: featureform-feature-server
        app: featureform-feature-server
      
    spec:
      containers:
        - image: "featureformcom/serving:0.12.5"
          imagePullPolicy: Always
          name: featureform-feature-server
          ports:
            - containerPort: 8080
            - containerPort: 9090
          env:
            - name: SERVING_PORT
              value: "8080"
            - name: METRICS_PORT
              value: "0.0.0.0:9090"
            - name: METADATA_HOST
              value: featureform-metadata-server
            - name: METADATA_PORT
              value: "8080"
---
# Source: featureform/templates/metadata/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: featureform
    run: featureform-metadata-server
    app: featureform-metadata-server
  name: featureform-metadata-server
spec:
  replicas: 1
  selector:
    matchLabels:
      chart: featureform
      run: featureform-metadata-server
      app: featureform-metadata-server
  strategy: {}
  template:
    metadata:
      labels:
        chart: featureform
        run: featureform-metadata-server
        app: featureform-metadata-server
      
    spec:
      containers:
        - image: "featureformcom/metadata:0.12.5"
          name: featureform-metadata-server
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources: {}
          env:
            - name: MEILISEARCH_PORT
              value: "7700"
            - name: MEILISEARCH_HOST
              value: featureform-search
            - name: MEILISEARCH_APIKEY
              value: ""
            - name: ETCD_HOST
              value: featureform-etcd
            - name: ETCD_PORT
              value: "2379"
---
# Source: featureform/templates/prometheus/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: featureform-prometheus-deployment
  labels:
    app: featureform-prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: featureform-prometheus-server
  template:
    metadata:
      labels:
        app: featureform-prometheus-server
      
    spec:
      containers:
        - name: featureform-prometheus
          image: prom/prometheus
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.route-prefix=/prometheus"
            - "--web.external-url=http://my-featureform-featureform.featureform.com/prometheus"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: featureform-prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: featureform-prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: featureform-prometheus-config-volume
          configMap:
            defaultMode: 420
            name: featureform-prometheus-server-conf

        - name: featureform-prometheus-storage-volume
          emptyDir: {}
---
# Source: featureform/templates/coordinator/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: featureform-coordinator
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: featureform-coordinator
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: featureform/charts/etcd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: featureform-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.2.4
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: etcd
      app.kubernetes.io/instance: my-featureform
  serviceName: featureform-etcd-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: etcd
        helm.sh/chart: etcd-8.2.4
        app.kubernetes.io/instance: my-featureform
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/token-secret: 1052852819ca4ac4451fdb67455815d2ebc45161abc0cb3c26e38a19147cdb10
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: etcd
                    app.kubernetes.io/instance: my-featureform
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
        - name: etcd
          image: docker.io/bitnami/etcd:3.5.4-debian-10-r25
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_STS_NAME
              value: "featureform-etcd"
            - name: ETCDCTL_API
              value: "3"
            - name: ETCD_ON_K8S
              value: "yes"
            - name: ETCD_START_FROM_SNAPSHOT
              value: "no"
            - name: ETCD_DISASTER_RECOVERY
              value: "no"
            - name: ETCD_NAME
              value: "$(MY_POD_NAME)"
            - name: ETCD_DATA_DIR
              value: "/bitnami/etcd/data"
            - name: ETCD_LOG_LEVEL
              value: "info"
            - name: ALLOW_NONE_AUTHENTICATION
              value: "no"
            - name: ETCD_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: featureform-etcd
                  key: etcd-root-password
            - name: ETCD_AUTH_TOKEN
              value: "jwt,priv-key=/opt/bitnami/etcd/certs/token/jwt-token.pem,sign-method=RS256,ttl=100h"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://$(MY_POD_NAME).featureform-etcd-headless.default.svc.cluster.local:2379,http://featureform-etcd.default.svc.cluster.local:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: "http://$(MY_POD_NAME).featureform-etcd-headless.default.svc.cluster.local:2380"
            - name: ETCD_LISTEN_PEER_URLS
              value: "http://0.0.0.0:2380"
            - name: ETCD_INITIAL_CLUSTER_TOKEN
              value: "etcd-cluster-k8s"
            - name: ETCD_INITIAL_CLUSTER_STATE
              value: "new"
            - name: ETCD_INITIAL_CLUSTER
              value: "featureform-etcd-0=http://featureform-etcd-0.featureform-etcd-headless.default.svc.cluster.local:2380,featureform-etcd-1=http://featureform-etcd-1.featureform-etcd-headless.default.svc.cluster.local:2380,featureform-etcd-2=http://featureform-etcd-2.featureform-etcd-headless.default.svc.cluster.local:2380"
            - name: ETCD_CLUSTER_DOMAIN
              value: "featureform-etcd-headless.default.svc.cluster.local"
          envFrom:
            - configMapRef:
                name: etcd-upgrade-configmap
          ports:
            - name: client
              containerPort: 2379
              protocol: TCP
            - name: peer
              containerPort: 2380
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/etcd
            - name: etcd-jwt-token
              mountPath: /opt/bitnami/etcd/certs/token/
              readOnly: true
      volumes:
        - name: etcd-jwt-token
          secret:
            secretName: featureform-etcd-jwt-token
            defaultMode: 256
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: featureform/charts/meilisearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: featureform-search
  labels:
    helm.sh/chart: meilisearch-0.1.49
    app.kubernetes.io/name: meilisearch
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: search-engine
    app.kubernetes.io/part-of: meilisearch
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: featureform-search
  selector:
    matchLabels:
      app.kubernetes.io/name: meilisearch
      app.kubernetes.io/instance: my-featureform
  template:
    metadata:
      labels:
        helm.sh/chart: meilisearch-0.1.49
        app.kubernetes.io/name: meilisearch
        app.kubernetes.io/instance: my-featureform
        app.kubernetes.io/version: "v1.0.0"
        app.kubernetes.io/component: search-engine
        app.kubernetes.io/part-of: meilisearch
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: featureform-search
      containers:
        - name: meilisearch
          image: "getmeili/meilisearch:v1.0.0"
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: featureform-search-environment
          ports:
            - name: http
              containerPort: 7700
              protocol: TCP
          startupProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 1
            initialDelaySeconds: 1
            failureThreshold: 60
          livenessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 10
            initialDelaySeconds: 0
          readinessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 10
            initialDelaySeconds: 0
          resources:
            {}
---
# Source: featureform/charts/ingress-nginx/templates/controller-ingressclass.yaml
# We don't support namespaced ingressClass yet
# So a ClusterRole and a ClusterRoleBinding is required
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: nginx
spec:
  controller: k8s.io/ingress-nginx
---
# Source: featureform/templates/ingress/grpc-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    allowed-values: CN=client
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "false"
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    nginx.ingress.kubernetes.io/proxy-body-size: 64ms
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/server-snippet: "grpc_read_timeout 3600s; grpc_send_timeout 3600s; client_body_timeout 3600s;"
    cert-manager.io/issuer: letsencrypt-prod
    
    kots.io/exclude: "true"
    
  name: grpc-ingress
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /featureform.serving.metadata.proto.Api/
            pathType: Prefix
            backend:
              service:
                name: featureform-api-server
                port:
                  number: 7878

          - path: /featureform.serving.proto.Feature/
            pathType: Prefix
            backend:
              service:
                name: featureform-api-server
                port:
                  number: 7878



  tls:
    - hosts:
        -  localhost
      secretName: featureform-ca-secret
---
# Source: featureform/templates/ingress/http-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    allowed-values: CN=client
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "false"
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/proxy-body-size: 64ms
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    cert-manager.io/issuer: letsencrypt-prod
    
    kots.io/exclude: "true"
    
  name: http-ingress
spec:
  defaultBackend:
    service:
      name: featureform-dashboard
      port:
        number: 80
  rules:
    - host: localhost
      http:
        paths:
          - path: /data/
            pathType: Prefix
            backend:
              service:
                name: featureform-dashboard-metadata
                port:
                  number: 3001
          - path: /search/
            pathType: Prefix
            backend:
              service:
                name: featureform-dashboard-metadata
                port:
                  number: 3001
          - path: /prometheus/
            pathType: Prefix
            backend:
              service:
                name: featureform-prometheus-service
                port:
                  number: 9090
          - path: /
            pathType: Prefix
            backend:
              service:
                name: featureform-dashboard
                port:
                  number: 80
---
# Source: featureform/templates/ingress/localhostcert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: featureform-ca-cert
spec:
  secretName: featureform-ca
  dnsNames:
    - localhost
  issuerRef:
    name: letsencrypt-prod
---
# Source: featureform/templates/ingress/localhostcert.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-prod
spec:
  selfSigned: {}
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
# before changing this value, check the required kubernetes version
# https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: my-featureform-ingress-nginx-admission
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    matchPolicy: Equivalent
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
    clientConfig:
      service:
        namespace: "default"
        name: my-featureform-ingress-nginx-controller-admission
        path: /networking/v1/ingresses
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-featureform-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-featureform-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  my-featureform-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-featureform-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: my-featureform-ingress-nginx-admission
    namespace: "default"
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  my-featureform-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-featureform-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-featureform-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: my-featureform-ingress-nginx-admission
    namespace: "default"
---
# Source: featureform/charts/meilisearch/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: featureform-search-test-connection
  labels:
    app.kubernetes.io/name: meilisearch
    helm.sh/chart: meilisearch-0.1.49
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['featureform-search:7700']
  restartPolicy: Never
---
# Source: featureform/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-featureform-test-connection"
  labels:
    helm.sh/chart: featureform-0.12.5
    app.kubernetes.io/name: featureform
    app.kubernetes.io/instance: featureform
    app.kubernetes.io/version: "0.12.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-featureform:3001']
  restartPolicy: Never
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-featureform-ingress-nginx-admission-create
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: my-featureform-ingress-nginx-admission-create
      labels:
        helm.sh/chart: ingress-nginx-4.1.0
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: my-featureform
        app.kubernetes.io/version: "1.2.0"
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: "k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=my-featureform-ingress-nginx-controller-admission,my-featureform-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=my-featureform-ingress-nginx-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
      restartPolicy: OnFailure
      serviceAccountName: my-featureform-ingress-nginx-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000
---
# Source: featureform/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-featureform-ingress-nginx-admission-patch
  namespace: default
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.1.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-featureform
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: my-featureform-ingress-nginx-admission-patch
      labels:
        helm.sh/chart: ingress-nginx-4.1.0
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: my-featureform
        app.kubernetes.io/version: "1.2.0"
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: "k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=my-featureform-ingress-nginx-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=my-featureform-ingress-nginx-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
      restartPolicy: OnFailure
      serviceAccountName: my-featureform-ingress-nginx-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000
