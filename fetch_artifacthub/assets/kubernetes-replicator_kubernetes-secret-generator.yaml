---
# Source: kubernetes-secret-generator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-kubernetes-secret-generator
  labels:
  
    helm.sh/chart: kubernetes-secret-generator-3.4.0
    name: kubernetes-secret-generator
    app.kubernetes.io/name: kubernetes-secret-generator
    app.kubernetes.io/instance: my-kubernetes-secret-generator
    app.kubernetes.io/version: "v3.4.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kubernetes-secret-generator/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "mittwald:my-kubernetes-secret-generator"
  labels:
  
    helm.sh/chart: kubernetes-secret-generator-3.4.0
    name: kubernetes-secret-generator
    app.kubernetes.io/name: kubernetes-secret-generator
    app.kubernetes.io/instance: my-kubernetes-secret-generator
    app.kubernetes.io/version: "v3.4.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # actual operator functionality
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - list
      - watch
      - update
  - apiGroups:
        - secretgenerator.mittwald.de
    resources:
      - basicauths
      - basicauths/status
      - sshkeypairs
      - sshkeypairs/status
      - stringsecrets
      - stringsecrets/status
    verbs:
      - get
      - list
      - watch
      - update
---
# Source: kubernetes-secret-generator/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "mittwald:my-kubernetes-secret-generator"
  labels:
  
    helm.sh/chart: kubernetes-secret-generator-3.4.0
    name: kubernetes-secret-generator
    app.kubernetes.io/name: kubernetes-secret-generator
    app.kubernetes.io/instance: my-kubernetes-secret-generator
    app.kubernetes.io/version: "v3.4.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: "mittwald:my-kubernetes-secret-generator"
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    namespace: "default"
    name: my-kubernetes-secret-generator
---
# Source: kubernetes-secret-generator/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "mittwald:my-kubernetes-secret-generator"
  labels:
  
    helm.sh/chart: kubernetes-secret-generator-3.4.0
    name: kubernetes-secret-generator
    app.kubernetes.io/name: kubernetes-secret-generator
    app.kubernetes.io/instance: my-kubernetes-secret-generator
    app.kubernetes.io/version: "v3.4.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # leader election
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - delete
      - get
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - get
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - "get"
      - "create"
---
# Source: kubernetes-secret-generator/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "mittwald:my-kubernetes-secret-generator"
  labels:
  
    helm.sh/chart: kubernetes-secret-generator-3.4.0
    name: kubernetes-secret-generator
    app.kubernetes.io/name: kubernetes-secret-generator
    app.kubernetes.io/instance: my-kubernetes-secret-generator
    app.kubernetes.io/version: "v3.4.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  name: "mittwald:my-kubernetes-secret-generator"
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    namespace: "default"
    name: my-kubernetes-secret-generator
---
# Source: kubernetes-secret-generator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-kubernetes-secret-generator
  labels:
    helm.sh/chart: kubernetes-secret-generator-3.4.0
    name: kubernetes-secret-generator
    app.kubernetes.io/name: kubernetes-secret-generator
    app.kubernetes.io/instance: my-kubernetes-secret-generator
    app.kubernetes.io/version: "v3.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      name: kubernetes-secret-generator
      app.kubernetes.io/name: kubernetes-secret-generator
      app.kubernetes.io/instance: my-kubernetes-secret-generator
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: kubernetes-secret-generator
        app.kubernetes.io/name: kubernetes-secret-generator
        app.kubernetes.io/instance: my-kubernetes-secret-generator
    spec:
      
      serviceAccountName: my-kubernetes-secret-generator
      securityContext:
        {}
      containers:
        - name: kubernetes-secret-generator
          securityContext:
            {}
          image: quay.io/mittwald/kubernetes-secret-generator:v3.4.0
          imagePullPolicy: Always
          args:
            []
          ports:
            - containerPort: 8080
              name: healthcheck
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthcheck
            initialDelaySeconds: 6
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthcheck
            initialDelaySeconds: 6
            periodSeconds: 3
          env:
            - name: WATCH_NAMESPACE
              value: 
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: "kubernetes-secret-generator"
            - name: REGENERATE_INSECURE
              value: "true"
            - name: SECRET_LENGTH
              value: "40"
            - name: USE_METRICS_SERVICE
              value: "false"
          resources:
            {}
