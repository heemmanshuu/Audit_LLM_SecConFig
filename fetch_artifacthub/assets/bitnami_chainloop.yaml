---
# Source: chainloop/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-chainloop-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.30
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: chainloop/charts/vault/templates/injector/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-chainloop-vault-injector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: vault
      app.kubernetes.io/part-of: vault
      app.kubernetes.io/component: injector
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: chainloop/charts/vault/templates/server/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-chainloop-vault-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: vault
      app.kubernetes.io/part-of: vault
      app.kubernetes.io/component: server
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8200
        - port: 8200
        - port: 8200
        - port: 8201
        - port: 8201
        - port: 8201
---
# Source: chainloop/templates/cas/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-chainloop-cas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: chainloop
      app.kubernetes.io/component: cas
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9000
      from:
        - podSelector:
            matchLabels: 
              app.kubernetes.io/instance: my-chainloop
              app.kubernetes.io/name: chainloop
              app.kubernetes.io/component: controlplane
    - ports:
        - port: 8000
---
# Source: chainloop/templates/controlplane/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-chainloop-controlplane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: chainloop
      app.kubernetes.io/component: controlplane
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8000
        - port: 9000
        - port: 5000
---
# Source: chainloop/templates/dex/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-chainloop-dex
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: dex
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: chainloop
      app.kubernetes.io/component: dex
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5556
        - port: 5557
        - port: 5558
---
# Source: chainloop/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-chainloop-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.30
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: chainloop/charts/vault/templates/injector/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-chainloop-vault-injector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: vault
      app.kubernetes.io/part-of: vault
      app.kubernetes.io/component: injector
---
# Source: chainloop/charts/vault/templates/server/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-chainloop-vault-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: vault
      app.kubernetes.io/part-of: vault
      app.kubernetes.io/component: server
---
# Source: chainloop/templates/dex/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-chainloop-dex
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: dex
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: chainloop
      app.kubernetes.io/component: dex
---
# Source: chainloop/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-chainloop-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.30
automountServiceAccountToken: false
---
# Source: chainloop/charts/vault/templates/injector/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-chainloop-vault-injector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
automountServiceAccountToken: false
---
# Source: chainloop/charts/vault/templates/server/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-chainloop-vault-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
automountServiceAccountToken: false
---
# Source: chainloop/templates/cas/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-chainloop-cas
  namespace: "default"
  labels: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
automountServiceAccountToken: false
---
# Source: chainloop/templates/controlplane/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-chainloop-controlplane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
automountServiceAccountToken: false
---
# Source: chainloop/templates/dex/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-chainloop-dex
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 2.41.1
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: dex
automountServiceAccountToken: false
---
# Source: chainloop/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chainloop-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.30
type: Opaque
data:
  password: "Y2hhaW5sb29wcHdk"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: chainloop/templates/cas/secret-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chainloop-cas
  namespace: "default"
  labels: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
type: Opaque
stringData:
  config.secret.yaml: |
    credentials_service:      
      secretPrefix: "chainloop"
      vault:
        address: "http://my-chainloop-vault-server:8200"
        token: "notasecret"
    auth:
      public_key_path: "/tmp/cas.public.pem"
      # Deprecated, use public_key_path instead. Remove option once release of the app 0.15+ is out.
      robot_account_public_key_path: "/tmp/cas.public.pem"
    # TODO: add observability
---
# Source: chainloop/templates/cas/secret-jwt-public-key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chainloop-cas-jwt-public-key
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
type: Opaque
data:
  cas.public.pem: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHYk1CQUdCeXFHU000OUFnRUdCU3VCQkFBakE0R0dBQVFCY3p6SEREVkp6NkF1Mi9yUHZ6c3NVUXUxZi9ucApiWVkrZ3F2T1ZnbzlDbWRxZzc1bmVFTEdKN0V5RU96VE94UHZWczdYVDZ5UVdqSFgycmpHcXk1WE8vd0FCNnFHCnRKYit4elNHdEQ2YnFXUStGVjVweUh2MlpJUjd5anJzTkFYYUt0ZzlnZDFOdWJNcFVFTGFONTJlQ0twN0Y1cTcKV0JpQlNQYUp0ejZKWWsvZnllND0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t"
---
# Source: chainloop/templates/controlplane/secret-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chainloop-controlplane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
type: Opaque
data:
  # We store it also as a different key so it can be reused during upgrades by the common.secrets.passwords.manage helper
  generated_jws_hmac_secret: "UkxudmszelVJVQ=="
  db_migrate_source: "cG9zdGdyZXM6Ly9jaGFpbmxvb3A6Y2hhaW5sb29wcHdkQG15LWNoYWlubG9vcC1wb3N0Z3Jlc3FsOjU0MzIvY2hhaW5sb29wLWNwP3NzbG1vZGU9ZGlzYWJsZQ=="
stringData:  
  config.secret.yaml: |
    data:
      database:
        driver: pgx
        source: postgresql://chainloop:chainlooppwd@my-chainloop-postgresql:5432/chainloop-cp

    credentials_service:      
      secretPrefix: "chainloop"
      vault:
        address: "http://my-chainloop-vault-server:8200"
        token: "notasecret"

    auth:
      oidc:    
        domain: "http://my-chainloop-dex:5556/dex"
        client_id: "chainloop-dev"
        client_secret: "ZXhhbXBsZS1hcHAtc2VjcmV0"

      # HMAC key used to sign the JWTs generated by the controlplane
      # The helper returns the base64 quoted value of the secret
      # We need to remove the quotes and then decoding it so it's compatible with the stringData stanza
      generated_jws_hmac_secret: "RLnvk3zUIU"

      # Private key used to sign the JWTs meant to be consumed by the CAS
      cas_robot_account_private_key_path: "/secrets/cas.private.key"
---
# Source: chainloop/templates/controlplane/secret-jwt-cas-private-key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chainloop-controlplane-jwt-cas
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
type: Opaque
data:
  cas.private.key: "LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JSGNBZ0VCQkVJQTc2Mk1iSks5SUJuYXFHMHNkOXVGUk0rWjdZK0FxNVVmbWJXZjArYWNLTVlwWW95LzhrQkUKdEk2Y3BjQTJLdm1XNXF1ck9qSU1oNUlTcitQMkdtelNaWCtnQndZRks0RUVBQ09oZ1lrRGdZWUFCQUZ6UE1jTQpOVW5Qb0M3YitzKy9PeXhSQzdWLytlbHRoajZDcTg1V0NqMEtaMnFEdm1kNFFzWW5zVElRN05NN0UrOVd6dGRQCnJKQmFNZGZhdU1hckxsYzcvQUFIcW9hMGx2N0hOSWEwUHB1cFpENFZYbW5JZS9aa2hIdktPdXcwQmRvcTJEMkIKM1UyNXN5bFFRdG8zblo0SXFuc1htcnRZR0lGSTlvbTNQb2xpVDkvSjdnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQ=="
---
# Source: chainloop/templates/dex/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chainloop-dex-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: dex
type: Opaque
stringData:
  config.yaml: |
    issuer: http://my-chainloop-dex:5556/dex

    storage:
      type: memory

    web:
      http: 0.0.0.0:5556

    staticClients:
      - id: chainloop-dev
        name: "Chainloop Dev"
        secret: ZXhhbXBsZS1hcHAtc2VjcmV0
        redirectURIs:
          - "http://0.0.0.0:8000/auth/callback"
          - "http://localhost:8000/auth/callback"
          # required to enable static passwords
    enablePasswordDB: true

    staticPasswords:
      - email: john@chainloop.local
        hash: $2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W
      - email: sarah@chainloop.local
        hash: $2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W
---
# Source: chainloop/charts/vault/templates/server/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-chainloop-vault-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
data:
  config.hcl: |
    storage "inmem" {}
    disable_mlock = true
    ui = true
    service_registration "kubernetes" {}
---
# Source: chainloop/templates/cas/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-chainloop-cas
  namespace: "default"
  labels: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
data:
  server.yaml: |
    server:
      http:
        addr: "0.0.0.0:8000"
        # Timeouts for http downloads
        # grpc downloads/uploads don't require this because they don't have timeouts
        timeout: 300s
      grpc:
        addr: "0.0.0.0:9000"
        # Some unary RPCs are slow, so we need to increase the timeout
        timeout: 5s
      http_metrics:
        addr: "0.0.0.0:5000"
---
# Source: chainloop/templates/controlplane/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-chainloop-controlplane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
data:
  config.yaml: |
    server:
      http:
        addr: "0.0.0.0:8000"
        timeout: 10s
        external_url: null
      http_metrics:
        addr: "0.0.0.0:5000"
      grpc:
        addr: "0.0.0.0:9000"
        timeout: 10s
    cas_server:
      grpc:
        addr: my-chainloop-cas-api:80
      insecure: true
      download_url: /download
    plugins_dir: /plugins
    referrer_shared_index:
      allowedOrgs: []
      enabled: false
---
# Source: chainloop/charts/vault/templates/injector/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-default-injector
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
rules:
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    verbs:
      - "get"
      - "list"
      - "watch"
      - "patch"
---
# Source: chainloop/charts/vault/templates/injector/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-default-injector
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-chainloop-vault-default-injector
subjects:
  - kind: ServiceAccount
    name: my-chainloop-vault-injector
    namespace: "default"
---
# Source: chainloop/charts/vault/templates/server/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-default-server
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: my-chainloop-vault-server
    namespace: "default"
---
# Source: chainloop/charts/vault/templates/injector/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-default-injector-leader-election
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
# Source: chainloop/charts/vault/templates/server/roles.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-server-leader-election
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
# Source: chainloop/charts/vault/templates/server/roles.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-server-discovery
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list", "update", "patch"]
---
# Source: chainloop/charts/vault/templates/injector/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-default-injector-leader-election
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-chainloop-vault-default-injector-leader-election
subjects:
  - kind: ServiceAccount
    name: my-chainloop-vault-injector
    namespace: "default"
---
# Source: chainloop/charts/vault/templates/server/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-server-leader-election
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
  namespace: "default"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-chainloop-vault-server-leader-election
subjects:
  - kind: ServiceAccount
    name: my-chainloop-vault-server
    namespace: "default"
---
# Source: chainloop/charts/vault/templates/server/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-chainloop-vault-server-discovery
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
  namespace: "default"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-chainloop-vault-server-discovery
subjects:
  - kind: ServiceAccount
    name: my-chainloop-vault-server
    namespace: "default"
---
# Source: chainloop/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.30
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: chainloop/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.30
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: chainloop/charts/vault/templates/injector/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-vault-injector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: https
      port: 443
      protocol: TCP
      nodePort: null
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: vault
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
---
# Source: chainloop/charts/vault/templates/server/active-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-vault-server-active
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8200
      protocol: TCP
      nodePort: null
      targetPort: http
    - name: https-internal
      port: 8201
      protocol: TCP
      nodePort: null
      targetPort: https-internal
  selector:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: vault
    vault-active: "true"
---
# Source: chainloop/charts/vault/templates/server/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-vault-server-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8200
      targetPort: http
    - name: https-internal
      port: 8201
      targetPort: https-internal
  selector:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: vault
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
---
# Source: chainloop/charts/vault/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-vault-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8200
      protocol: TCP
      nodePort: null
      targetPort: http
    - name: https-internal
      port: 8201
      protocol: TCP
      nodePort: null
      targetPort: https-internal
  selector:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: vault
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
---
# Source: chainloop/templates/cas/service-grpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-cas-api
  namespace: "default"
  labels: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
  annotations:
    traefik.ingress.kubernetes.io/service.serversscheme: h2c
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: grpc
      port: 80
      targetPort: 9000
      protocol: TCP
      nodePort: null
  selector: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/component: cas
---
# Source: chainloop/templates/cas/service-http.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-cas
  namespace: "default"
  labels: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
      nodePort: null
  selector: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/component: cas
---
# Source: chainloop/templates/controlplane/service-grpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-controlplane-api
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
  annotations:
    traefik.ingress.kubernetes.io/service.serversscheme: h2c
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: grpc
      port: 80
      targetPort: 9000
      protocol: TCP
      nodePort: null
  selector: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/component: controlplane
---
# Source: chainloop/templates/controlplane/service-http.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-controlplane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
      nodePort: null
  selector: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/component: controlplane
---
# Source: chainloop/templates/dex/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chainloop-dex
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 2.41.1
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: dex
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 5556
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 5557
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/component: dex
---
# Source: chainloop/charts/vault/templates/injector/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-chainloop-vault-injector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: vault
      app.kubernetes.io/part-of: vault
      app.kubernetes.io/component: injector
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-chainloop
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: vault
        app.kubernetes.io/version: 1.4.2
        helm.sh/chart: vault-1.4.22
        app.kubernetes.io/part-of: vault
        app.kubernetes.io/component: injector
    spec:
      serviceAccountName: my-chainloop-vault-injector
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-chainloop
                    app.kubernetes.io/name: vault
                    app.kubernetes.io/component: injector
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: sidecar-injector
          image: docker.io/bitnami/vault-k8s:1.4.2-debian-12-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          args:
            - agent-inject
            - 2>&1
          env:
            - name: AGENT_INJECT_LISTEN
              value: :8080
            - name: AGENT_INJECT_VAULT_ADDR
              value: http://my-chainloop-vault-server.default.svc:8200
            - name: AGENT_INJECT_VAULT_AUTH_PATH
              value: auth/kubernetes
            - name: AGENT_INJECT_VAULT_IMAGE
              value: "docker.io/bitnami/vault:1.17.5-debian-12-r3"
            - name: AGENT_INJECT_TLS_AUTO
              value: "my-chainloop-vault-default-injector"
            - name: AGENT_INJECT_TLS_AUTO_HOSTS
              value: my-chainloop-vault-injector,my-chainloop-vault-injector.default,my-chainloop-vault-injector.default.svc
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: https
              containerPort: 8080
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: https
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /health/ready
              port: https
              scheme: HTTPS
          volumeMounts:
      volumes:
---
# Source: chainloop/templates/cas/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-chainloop-cas
  namespace: "default"
  labels: 
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: cas
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels: 
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: chainloop
      app.kubernetes.io/component: cas
  template:
    metadata:
      annotations:
        checksum/config: ff3220a5795afb50315a7e0afb365a763c0cc67b426eaf6bf178cd8531c5b74e
        checksum/config-secret: 34b95603002143350db9419dc094f8186013501e5b5a0bbbb921a5eb2337717e
        checksum/public-key-secret: b5898c4978b65b3218afd16f6437bc398ba64ac92ae8d6ecf998e4b58d0a6142
      labels: 
        app.kubernetes.io/instance: my-chainloop
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: chainloop
        app.kubernetes.io/version: 0.96.8
        helm.sh/chart: chainloop-1.0.8
        app.kubernetes.io/component: cas
    spec:
      
      serviceAccountName: my-chainloop-cas
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-chainloop
                    app.kubernetes.io/name: chainloop
                    app.kubernetes.io/component: cas
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: cas
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          image: docker.io/bitnami/chainloop-artifact-cas:0.96.8-debian-12-r0
          imagePullPolicy: IfNotPresent
          command: [ "./artifact-cas" ]
          args: [ "--conf", "/data/conf" ]
          ports:
            - name: http
              containerPort: 8000
            - name: metrics
              containerPort: 5000
            - name: grpc
              containerPort: 9000
          startupProbe:
            httpGet:
              path: /statusz
              port: http
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /statusz
              port: http
          readinessProbe:
            httpGet:
              path: /statusz?readiness=1
              port: http
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          env:
          envFrom:
          volumeMounts:
            - name: config
              mountPath: "/data/conf"
            - name: jwt-public-key
              mountPath: "/tmp"
      volumes:
        - name: config
          projected:
            sources:
            - configMap:
               name: my-chainloop-cas
            - secret:
               name: my-chainloop-cas
        - name: jwt-public-key
          secret:
            secretName: my-chainloop-cas-jwt-public-key
---
# Source: chainloop/templates/controlplane/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-chainloop-controlplane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 0.96.8
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: controlplane
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels: 
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: chainloop
      app.kubernetes.io/component: controlplane
  template:
    metadata:
      annotations:
        checksum/config: 5d842370cde4abb321591aac8f2bee447bf3ebc320de98546c5e2d828f6b972e
        checksum/secret-config: 90bb542bc31730a7f62f326d0e4d88764baaf64b621786f06a4261711749957c
        checksum/cas-private-key: 983b57eeefdc1a0a9184919cf931b4a1b46f564a6e69dd21c8d5b2585628088f
        kubectl.kubernetes.io/default-container: controlplane
      labels:
        app.kubernetes.io/instance: my-chainloop
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: chainloop
        app.kubernetes.io/version: 0.96.8
        helm.sh/chart: chainloop-1.0.8
        app.kubernetes.io/component: controlplane
    spec:
      
      serviceAccountName: my-chainloop-controlplane
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-chainloop
                    app.kubernetes.io/name: chainloop
                    app.kubernetes.io/component: controlplane
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: migrate
          image: docker.io/bitnami/chainloop-control-plane-migrations:0.96.8-debian-12-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command: [ "./atlas" ]
          args:
            - migrate
            - apply
            - --url
            - $(CONNECTION_STRING)
            - --dir
            - file:///migrations
          env:
            - name: CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: my-chainloop-controlplane
                  key: db_migrate_source
      containers:
        - name: controlplane
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          image: docker.io/bitnami/chainloop-control-plane:0.96.8-debian-12-r0
          imagePullPolicy: IfNotPresent
          command: [ "./control-plane" ]
          args: [ "--conf", "/data/conf" ]
          ports:
            - name: http
              containerPort: 8000
            - name: metrics
              containerPort: 5000
            - name: grpc
              containerPort: 9000
          startupProbe:
            httpGet:
              path: /statusz
              port: http
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /statusz
              port: http
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /statusz?readiness=1
              port: http
            periodSeconds: 5
          env:
          envFrom:
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /data/conf
            - name: tmp
              mountPath: /tmp
            - name: jwt-cas-private-key
              mountPath: /secrets
      volumes:
        - name: config
          projected:
            sources:
            - secret:
                name: my-chainloop-controlplane
            - configMap:
               name: my-chainloop-controlplane
        # required for the plugins to store the socket files
        - name: tmp
          emptyDir: {}
        - name: jwt-cas-private-key
          secret:
            secretName: my-chainloop-controlplane-jwt-cas
---
# Source: chainloop/templates/dex/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-chainloop-dex
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: chainloop
    app.kubernetes.io/version: 2.41.1
    helm.sh/chart: chainloop-1.0.8
    app.kubernetes.io/component: dex
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: chainloop
      app.kubernetes.io/component: dex
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-chainloop
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: chainloop
        app.kubernetes.io/version: 2.41.1
        helm.sh/chart: chainloop-1.0.8
        app.kubernetes.io/component: dex
    spec:
      serviceAccountName: my-chainloop-dex
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-chainloop
                    app.kubernetes.io/name: chainloop
                    app.kubernetes.io/component: dex
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: dex
          image: docker.io/bitnami/dex:2.41.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /opt/bitnami/dex/bin/dex
            - serve
          args:
            - /data/conf/config.yaml
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
            - name: grpc
              containerPort: 5557
              protocol: TCP
            - name: metrics
              containerPort: 5558
              protocol: TCP
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          startupProbe:
            httpGet:
              path: /dex/.well-known/openid-configuration
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /dex/.well-known/openid-configuration
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /dex/.well-known/openid-configuration
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: empty-dir
              mountPath: /shared
              subPath: app-static-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: config
              mountPath: /data/conf
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          secret:
            secretName: my-chainloop-dex-config
---
# Source: chainloop/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-chainloop-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.30
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-chainloop-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-chainloop-postgresql
      labels:
        app.kubernetes.io/instance: my-chainloop
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.4.0
        helm.sh/chart: postgresql-15.5.30
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-chainloop-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-chainloop
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "chainloop"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-chainloop-postgresql
                  key: password
            - name: POSTGRES_DATABASE
              value: "chainloop-cp"
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "chainloop" -d "dbname=chainloop-cp" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "chainloop" -d "dbname=chainloop-cp" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: chainloop/charts/vault/templates/server/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-chainloop-vault-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.17.5
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: server
spec:
  replicas: 1
  serviceName: my-chainloop-vault-server-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-chainloop
      app.kubernetes.io/name: vault
      app.kubernetes.io/part-of: vault
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-chainloop
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: vault
        app.kubernetes.io/version: 1.17.5
        helm.sh/chart: vault-1.4.22
        app.kubernetes.io/part-of: vault
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: my-chainloop-vault-server
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-chainloop
                    app.kubernetes.io/name: vault
                    app.kubernetes.io/component: server
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: server
          image: docker.io/bitnami/vault:1.17.5-debian-12-r3
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          args:
            - server
            - -dev
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VAULT_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_ADDR
              value: "http://127.0.0.1:8200"
            - name: VAULT_API_ADDR
              value: "http://$(POD_IP):8200"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_CLUSTER_ADDR
              value: "https://$(HOSTNAME).my-chainloop-vault-server-headless:8201"
            - name: HOME
              value: "/bitnami/vault/home"
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: notasecret
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: '[::]:8200'
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8200
            - name: https-internal
              containerPort: 8201
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - vault
                - status
                - -tls-skip-verify
          lifecycle:
            # From upstream Vault helm chart:
            # Vault container doesn't receive SIGTERM from Kubernetes
            # and after the grace period ends, Kube sends SIGKILL.  This
            # causes issues with graceful shutdowns such as deregistering itself
            # from Consul (zombie services).
            preStop:
              exec:
                command: [
                  "/bin/sh", "-ec",
                  # Adding a sleep here to give the pod eviction a
                  # chance to propagate, so requests will not be made
                  # to this pod while it's terminating
                  "sleep 5 && kill -SIGTERM $(pidof vault)",
                  ]
          volumeMounts:
            - name: data
              mountPath: /bitnami/vault/data
            - name: config
              mountPath: /bitnami/vault/config
            - name: home
              mountPath: /bitnami/vault/home
      volumes:
        - name: config
          configMap:
            name: my-chainloop-vault-server
        - name: home
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
---
# Source: chainloop/charts/vault/templates/injector/mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: my-chainloop-vault-default-injector
  labels:
    app.kubernetes.io/instance: my-chainloop
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    app.kubernetes.io/version: 1.4.2
    helm.sh/chart: vault-1.4.22
    app.kubernetes.io/part-of: vault
    app.kubernetes.io/component: injector
webhooks:
  - name: vault.hashicorp.com
    failurePolicy: Ignore
    matchPolicy: Exact
    sideEffects: None
    timeoutSeconds: 30
    admissionReviewVersions: ["v1", "v1beta1"]
    clientConfig:
      service:
        name: my-chainloop-vault-injector
        namespace: "default"
        path: "/mutate"
      caBundle: ""
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/component
          operator: NotIn
          values:
            - injector
