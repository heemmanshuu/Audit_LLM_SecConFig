---
# Source: policy-reporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-policy-reporter
  namespace: default
  labels:
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
---
# Source: policy-reporter/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-policy-reporter-config
  namespace: default
  labels:
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
type: Opaque
data:
  config.yaml: bG9raToKICBob3N0OiAiIgogIGNlcnRpZmljYXRlOiAiIgogIHNraXBUTFM6IGZhbHNlCiAgcGF0aDogIiIKICBzZWNyZXRSZWY6ICIiCiAgbW91bnRlZFNlY3JldDogIiIKICBtaW5pbXVtUHJpb3JpdHk6ICIiCiAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCiAgdXNlcm5hbWU6ICIiCiAgcGFzc3dvcmQ6ICIiCgplbGFzdGljc2VhcmNoOgogIGhvc3Q6ICIiCiAgY2VydGlmaWNhdGU6ICIiCiAgc2tpcFRMUzogZmFsc2UKICB1c2VybmFtZTogIiIKICBwYXNzd29yZDogIiIKICBhcGlLZXk6ICIiCiAgc2VjcmV0UmVmOiAiIgogIG1vdW50ZWRTZWNyZXQ6ICIiCiAgaW5kZXg6ICJwb2xpY3ktcmVwb3J0ZXIiCiAgcm90YXRpb246ICJkYWlseSIKICBtaW5pbXVtUHJpb3JpdHk6ICIiCiAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCiAgdHlwZWxlc3NBcGk6IGZhbHNlCgpzbGFjazoKICB3ZWJob29rOiAiIgogIGNoYW5uZWw6ICIiCiAgc2VjcmV0UmVmOiAiIgogIG1vdW50ZWRTZWNyZXQ6ICIiCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKZGlzY29yZDoKICB3ZWJob29rOiAiIgogIHNlY3JldFJlZjogIiIKICBtb3VudGVkU2VjcmV0OiAiIgogIG1pbmltdW1Qcmlvcml0eTogIiIKICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCnRlYW1zOgogIHdlYmhvb2s6ICIiCiAgY2VydGlmaWNhdGU6ICIiCiAgc2tpcFRMUzogZmFsc2UKICBzZWNyZXRSZWY6ICIiCiAgbW91bnRlZFNlY3JldDogIiIKICBtaW5pbXVtUHJpb3JpdHk6ICIiCiAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgp3ZWJob29rOgogIGhvc3Q6ICIiCiAgY2VydGlmaWNhdGU6ICIiCiAgc2tpcFRMUzogZmFsc2UKICBzZWNyZXRSZWY6ICIiCiAgbW91bnRlZFNlY3JldDogIiIKICBtaW5pbXVtUHJpb3JpdHk6ICIiCiAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgp0ZWxlZ3JhbToKICB0b2tlbjogIiIKICBjaGF0SUQ6ICIiCiAgaG9zdDogIiIKICBjZXJ0aWZpY2F0ZTogIiIKICBza2lwVExTOiBmYWxzZQogIHNlY3JldFJlZjogIiIKICBtb3VudGVkU2VjcmV0OiAiIgogIG1pbmltdW1Qcmlvcml0eTogIiIKICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCmdvb2dsZUNoYXQ6CiAgd2ViaG9vazogIiIKICBjZXJ0aWZpY2F0ZTogIiIKICBza2lwVExTOiBmYWxzZQogIHNlY3JldFJlZjogIiIKICBtb3VudGVkU2VjcmV0OiAiIgogIG1pbmltdW1Qcmlvcml0eTogIiIKICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCnVpOgogIGhvc3Q6IAogIGNlcnRpZmljYXRlOiAiIgogIHNraXBUTFM6IGZhbHNlCiAgbWluaW11bVByaW9yaXR5OiAid2FybmluZyIKICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCnMzOgogIGFjY2Vzc0tleUlEOiAKICBzZWNyZXRBY2Nlc3NLZXk6ICAKICBzZWNyZXRSZWY6ICIiCiAgbW91bnRlZFNlY3JldDogCiAgcmVnaW9uOiAKICBlbmRwb2ludDogCiAgYnVja2V0OiAKICBidWNrZXRLZXlFbmFibGVkOiBmYWxzZQogIGttc0tleUlkOiAKICBzZXJ2ZXJTaWRlRW5jcnlwdGlvbjogCiAgcGF0aFN0eWxlOiBmYWxzZQogIHByZWZpeDogCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKa2luZXNpczoKICBhY2Nlc3NLZXlJRDogCiAgc2VjcmV0QWNjZXNzS2V5OiAgCiAgc2VjcmV0UmVmOiAiIgogIG1vdW50ZWRTZWNyZXQ6ICIiCiAgcmVnaW9uOiAKICBlbmRwb2ludDogCiAgc3RyZWFtTmFtZTogCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKc2VjdXJpdHlIdWI6CiAgYWNjb3VudElEOiAKICBhY2Nlc3NLZXlJRDogCiAgc2VjcmV0QWNjZXNzS2V5OiAgCiAgZGVsYXlJblNlY29uZHM6IDIKICBjbGVhbnVwOiBmYWxzZQogIHNlY3JldFJlZjogIiIKICBtb3VudGVkU2VjcmV0OiAiIgogIHByb2R1Y3ROYW1lOiAiIgogIGNvbXBhbnlOYW1lOiAgCiAgcmVnaW9uOiAKICBlbmRwb2ludDogCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKZ2NzOgogIGNyZWRlbnRpYWxzOiAKICBzZWNyZXRSZWY6ICIiCiAgbW91bnRlZFNlY3JldDogIiIKICBidWNrZXQ6IAogIHByZWZpeDogCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKd29ya2VyOiA1CgptZXRyaWNzOgogIG1vZGU6IGRldGFpbGVkCgpyZXBvcnRGaWx0ZXI6CiAgbmFtZXNwYWNlczoKICBjbHVzdGVyUmVwb3J0czoKICAgIGRpc2FibGVkOiBmYWxzZQoKbGVhZGVyRWxlY3Rpb246CiAgZW5hYmxlZDogZmFsc2UKICByZWxlYXNlT25DYW5jZWw6IHRydWUKICBsZWFzZUR1cmF0aW9uOiAxNQogIHJlbmV3RGVhZGxpbmU6IDEwCiAgcmV0cnlQZXJpb2Q6IDIKcmVkaXM6CiAgYWRkcmVzczogIiIKICBkYXRhYmFzZTogMAogIGVuYWJsZWQ6IGZhbHNlCiAgcGFzc3dvcmQ6ICIiCiAgcHJlZml4OiBwb2xpY3ktcmVwb3J0ZXIKICB1c2VybmFtZTogIiIKCgpsb2dnaW5nOgogIGVuY29kaW5nOiBjb25zb2xlCiAgbG9nTGV2ZWw6IDAKICBkZXZlbG9wbWVudDogZmFsc2UKCmFwaToKICBsb2dnaW5nOiBmYWxzZQogIGJhc2ljQXV0aDoKICAgIHVzZXJuYW1lOiAKICAgIHBhc3N3b3JkOiAKICAgIHNlY3JldFJlZjogCgpkYXRhYmFzZToKICB0eXBlOiAKICBkYXRhYmFzZTogCiAgdXNlcm5hbWU6IAogIHBhc3N3b3JkOiAKICBob3N0OiAKICBlbmFibGVTU0w6IGZhbHNlCiAgZHNuOiAKICBzZWNyZXRSZWY6IAogIG1vdW50ZWRTZWNyZXQ6IAo=
---
# Source: policy-reporter/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
  name: my-policy-reporter
rules:
- apiGroups:
  - '*'
  resources:
  - policyreports
  - policyreports/status
  - clusterpolicyreports
  - clusterpolicyreports/status
  verbs:
  - get
  - list
  - watch
---
# Source: policy-reporter/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-policy-reporter
  labels:
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: ClusterRole
  name: my-policy-reporter
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: my-policy-reporter
  namespace: default
---
# Source: policy-reporter/templates/secret-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
  name: my-policy-reporter-secret-reader
  namespace: default
rules:
- apiGroups: ['']
  resources:
  - secrets
  verbs:
  - get
---
# Source: policy-reporter/templates/secret-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-policy-reporter-secret-reader
  namespace: default
  labels:
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: Role
  name: my-policy-reporter-secret-reader
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: my-policy-reporter
  namespace: default
---
# Source: policy-reporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-policy-reporter
  namespace: default
  labels:
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
---
# Source: policy-reporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-policy-reporter
  namespace: default
  labels:
    helm.sh/chart: policy-reporter-2.24.1
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: my-policy-reporter
    app.kubernetes.io/version: "2.20.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: policy-reporter
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter
      app.kubernetes.io/instance: my-policy-reporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: policy-reporter
        app.kubernetes.io/instance: my-policy-reporter
        helm.sh/chart: policy-reporter-2.24.1
        app.kubernetes.io/version: "2.20.1"
        app.kubernetes.io/part-of: policy-reporter
      annotations:
        checksum/secret: "83aab8c18a0cefa8f226c3b65cc2e315e22d6cd30b4238ed7493246a96942216"
    spec:
      serviceAccountName: my-policy-reporter
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 1234
      containers:
        - name: policy-reporter
          image: "ghcr.io/kyverno/policy-reporter:2.20.1"
          imagePullPolicy: IfNotPresent
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1234
            seccompProfile:
              type: RuntimeDefault
          args:
            - --port=8080
            - --config=/app/config.yaml
            - --dbfile=/sqlite/database.db
            - --metrics-enabled=false
            - --rest-enabled=false
            - --profile=false
            - --lease-name=my-policy-reporter
            - --template-dir=/app/templates
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /ready
              port: http
          resources:
            {}
          volumeMounts:
          - name: sqlite
            mountPath: /sqlite
          - name: config-file
            mountPath: /app/config.yaml
            subPath: config.yaml
            readOnly: true
          - name: tmp
            mountPath: /tmp
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      volumes:
      - name: sqlite
        emptyDir: {}
      - name: config-file
        secret:
          secretName: my-policy-reporter-config
          optional: true
      - name: tmp
        emptyDir: {}
