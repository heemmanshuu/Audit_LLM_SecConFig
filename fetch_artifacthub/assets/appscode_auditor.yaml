---
# Source: auditor/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-auditor
  namespace: default
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: auditor/templates/apiregistration.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-auditor-apiserver-cert
  namespace: default
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURSVENDQWkyZ0F3SUJBZ0lRUm5rNml5dlc5OXdhNmtMN1hYUEhpakFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBNU1UWXdPRFEwTlRaYUZ3MHpOREE1TVRRd09EUTBOVFphTUJVeApFekFSQmdOVkJBTVRDbTE1TFdGMVpHbDBiM0l3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURVL2FmUExkRWEvZjlVZ3VlZkkzSFVhVmNCbXZ3WHlZa3dvYWxISzE1ZWJFNm5ZQ29qM1hJV2dSZm8KMXA5TG5sRVZqTjNlczFqVThDUXVZZHExTTgwd3BxWDNYUS9rd2FQWktKV2Z5cGNleXFLZHN4ZVZpcTVDU1RvMwpxaThxUFI0dVNtNHZjdytSS1prZlJKRzN0aWJZcGxjb1dhN0tlcFQ4OExRQ2RLbFJ6TmRUWDBVcnJwSTlNR25nCnVzNlJMUzhqNVVSRWEzcHVIVjZZTlZwOEczRSs3MXp3VnJRUFk0aWhKK2gxYk1pTTAwVGNQKzQ3VWhITGlaaXUKTERTWEJmcXQwc3BEbXphVzBDdHRid1ZleXVXMGlKU2p1YVU1SUl5WW1DTXo2Q3dTU213QVZKbGgzSlp1NUYzNword3FneXp6VVFGbEFQd3JVOHgvbmVmeGV1WWpwQWdNQkFBR2pnWmd3Z1pVd0RnWURWUjBQQVFIL0JBUURBZ1dnCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEcKQTFVZEl3UVlNQmFBRkJCZ3dZbWUwc1NDdkdkY1VySXkzUFBQLzJrOU1EVUdBMVVkRVFRdU1DeUNFbTE1TFdGMQpaR2wwYjNJdVpHVm1ZWFZzZElJV2JYa3RZWFZrYVhSdmNpNWtaV1poZFd4MExuTjJZekFOQmdrcWhraUc5dzBCCkFRc0ZBQU9DQVFFQWhuTGRRdFVYdGVaY1NEN1JlZ0tCNXVpdG1aUWRlNHUrbHF4bUhyMTlSYTJzM0hqMU1wdUEKOWNKYStVbmh3TWx3aDkwNWp1QjYxV1BpcndONXZUNTh5QWsxNlpDbjlCQmxEUnRjbzFUQjd3WE40bDdhbXgwNwpNUlA5WVFqYjBQRXFnM1Z5VmdCQUNESjluc0xaR1UyL05CK0Y0eWVpTHAyQzBmcUhOVE1wZjA4MExPM3lMbVJICmU3eGkzNHlmN2JoaUxnT2xuNUE4WmtmWENiUGhSeEdseHFPOThjR1NnazRaUDBTcDB2L3NPbnRKLzhIME5GancKUE9YQngyaXNLUzB3Vk11ZkxoRDRlTXhzY0l6WDdJWHZrU2xrb3ZYbjZhYllQNy9RMkNEK1VLNFNzQTN4ZjQzRApNcm14aW5lKzltN2YrZDhWcGxockZscUVJSGVzd05EalNRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBMVAybnp5M1JHdjMvVklMbm55TngxR2xYQVpyOEY4bUpNS0dwUnl0ZVhteE9wMkFxCkk5MXlGb0VYNk5hZlM1NVJGWXpkM3JOWTFQQWtMbUhhdFRQTk1LYWw5MTBQNU1HajJTaVZuOHFYSHNxaW5iTVgKbFlxdVFrazZONm92S2owZUxrcHVMM01Qa1NtWkgwU1J0N1ltMktaWEtGbXV5bnFVL1BDMEFuU3BVY3pYVTE5RgpLNjZTUFRCcDRMck9rUzB2SStWRVJHdDZiaDFlbURWYWZCdHhQdTljOEZhMEQyT0lvU2ZvZFd6SWpOTkUzRC91Ck8xSVJ5NG1Zcml3MGx3WDZyZExLUTVzMmx0QXJiVzhGWHNybHRJaVVvN21sT1NDTW1KZ2pNK2dzRWtwc0FGU1oKWWR5V2J1UmQrL3NLb01zODFFQlpRRDhLMVBNZjUzbjhYcm1JNlFJREFRQUJBb0lCQVFDcGpWK24rdllxUWFhZgoxVEdqcXFpMENrTjhBSy9NRStDRmVUdnpidC9KMVBoc0g0Nk1USDNFMG5HQkpsRmE5aVhnUE9wbW5Xa0s0anc3ClBDVEorUG5RVCtsdzJJR05mbVQ3dTJZWTlVS0YvWk9rYkd4SzNFSktmRmErOTFoaWpKTFpFT0ZVSG9sMjZxRjkKbGExV2pNZXgwZ0V5R3VxZFB5WVprVmdMV0dsdHRtbllMWDFBcVBFK25hbXlaR2JubzBRa2FkYW14YUp6Q3pxOQpVTkFhb2xkeHRvSnBvcG1RUkt5eTIvWGlPYVlMTTRxR2VJcmw0QThYc05DdHgwTnpIWHQxVUNuTmhpYXRFeGt2Ckk4TVF1QmhTTCs3d3YrWThCYWk3THo1YVhaVjE3T29kSFVWdis4NjFlbjRMWUYzTzU0Y2VuUkl3K0wvVWRjQUEKWjB2N0t1MkJBb0dCQU5wRFhCcElGd09ldVU4cWIrNlVxN0J0eGVnQmJxNzZDMlBIZTdISjRjNDhKSFF1ZVVKKwpjYSs0UTY5VHBsT0I1WGY3akRNcVcrbmtkaTRKQU9pbVlPZFVPVzN4M3h4Unp0SzYxaW1IV3ZTUXlnUFFSTUNVClFIdE84QmZqMW9NNDBXWFVPS1h0TXVKRmJjQ3FWYjlhRityaG1oZWd0UTE1azJmVDhHRUVFc1B4QW9HQkFQblEKNzlvSllTRTUwSVdoRDBZVys1dzBKY1lBMUtqbnU3b0MrRGNxd2MzUm5FNndQbjg4MGFjczNuZjFvVGpWMC9uMgpjSUk4cHpWUWhZUVBhMTJOMkFxSnd6WWJCY29HZG1aNFl1YXA5WDUwQm80SkZ4dGJXR1JQRzdBMllhZERGb0NhCjhMdWREUHpHQWl1V0pRR08wTzJ3UkhVQ0t6Zk9zR2JQelBlcWhheDVBb0dCQUxmS1ZQcEVqaXljTVlyNlB6cjEKc2dWa3ltdnRHTmo2OFRCYVFFeWJwU3RXOVpObnR2QkpMVTQ4cWJJdmpEVnhnbHNnVlJTWXJNRXRnbDZOY2xoMgpFYzk1MnNvOERCWDZ4V0FwdUVGTUcwa3B5eEtmQStYdWNNWGsyTVFsTlBOV211MVdZVVZIa2J0N24wbkhwV0QyCmFvRjg2NWJOMnVlMzRtcGh5MTdHWVU3aEFvR0JBTDRONGR3TVZMUFZhem11blpNaU93dk1kSXhkNTJ3VTJMSWMKUGtDaUs4MXMwYkRmenJ3NFJmd2NXNmdCM0VVRUVIL1RxQ2E5QkN6QWRNTlNnOGtwOTVtVTAwbmZaeGthcjRzbgp2WDVsQVJyU0pJWjhqZkxISE1rN2tnSU9iVjYxNEhHNDdycWRNZHRBdlRmeHczZWE4b0pTSHRLeDhyVkRidHJZCjdzUGhIRTlwQW9HQkFLTTA3aWtsMHZzbWVRbnFTNzB4Mno0VDlnOWs2VXNzR1RSVmdyMitrZldQckJYY2dDUU4KSXdkSkNwNzhQQm1aZHA0c2pvYkRDU3F0R2gzOWNtNUVrRit3ZW5UTEg4SUFoQUJGL3lSRE9MZUZQaitmZmpJUwozMGIveGEzZTVsUE90ZXpXMmcxSkFFVEQrWW92bVp0ck5ER0hlTVRYZGpuK0Q1dDUwYjNqWlRnWQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: auditor/templates/policy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-auditor-policy
  namespace: default
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  "default.yaml": YXBpVmVyc2lvbjogYXVkaXRvci5rdWJlb3BzLnRvb2xzL3YxYWxwaGExCmtpbmQ6IEF1ZGl0UmVnaXN0cmF0aW9uCnJlc291cmNlczoKLSBncm91cDogYXBwcwogIHJlc291cmNlczoKICAtIGRlcGxveW1lbnRzCi0gZ3JvdXA6ICIiCiAgcmVzb3VyY2VzOgogIC0gcG9kcwogIC0gbmFtZXNwYWNlcwogIC0gc2VjcmV0cwotIGdyb3VwOiBhcHBjYXRhbG9nLmFwcHNjb2RlLmNvbQogIHJlc291cmNlczoKICAtIGFwcGJpbmRpbmdzCi0gZ3JvdXA6IGNhdGFsb2cua3ViZWRiLmNvbQogIHJlc291cmNlczoKICAtIGV0Y2R2ZXJzaW9ucwogIC0gbXlzcWx2ZXJzaW9ucwogIC0gcmVkaXN2ZXJzaW9ucwogIC0gbW9uZ29kYnZlcnNpb25zCiAgLSBwb3N0Z3Jlc3ZlcnNpb25zCiAgLSBtZW1jYWNoZWR2ZXJzaW9ucwogIC0gZWxhc3RpY3NlYXJjaHZlcnNpb25zCi0gZ3JvdXA6IGNsb3VkLmJ5dGVidWlsZGVycy5kZXYKICByZXNvdXJjZXM6CiAgLSBjcmVkZW50aWFscwogIC0gbWFjaGluZXR5cGVzCiAgLSBjbG91ZHByb3ZpZGVycwogIC0gY2x1c3RlcmluZm9zCiAgLSBjbHVzdGVydXNlcmF1dGhzCiAgLSBjbHVzdGVyYXV0aGluZm90ZW1wbGF0ZXMKLSBncm91cDoga3ViZWRiLmNvbQogIHJlc291cmNlczoKICAtIGV0Y2RzCiAgLSBteXNxbHMKICAtIHJlZGlzZXMKICAtIG1vbmdvZGJzCiAgLSBzbmFwc2hvdHMKICAtIG1lbWNhY2hlZHMKICAtIHBvc3RncmVzZXMKICAtIGVsYXN0aWNzZWFyY2hlcwogIC0gZG9ybWFudGRhdGFiYXNlcwotIGdyb3VwOiBrdWJlcGFjay5jb20KICByZXNvdXJjZXM6CiAgLSBwbGFucwogIC0gcHJvZHVjdHMKLSBncm91cDogbW9uaXRvcmluZy5hcHBzY29kZS5jb20KICByZXNvdXJjZXM6CiAgLSBpbmNpZGVudHMKICAtIHBvZGFsZXJ0cwogIC0gbm9kZWFsZXJ0cwogIC0gY2x1c3RlcmFsZXJ0cwogIC0gc2VhcmNobGlnaHRwbHVnaW5zCi0gZ3JvdXA6IHN0YXNoLmFwcHNjb2RlLmNvbQogIHJlc291cmNlczoKICAtIHRhc2tzCiAgLSByZXN0aWNzCiAgLSBmdW5jdGlvbnMKICAtIHJlY292ZXJpZXMKICAtIHJlcG9zaXRvcmllcwogIC0gYmFja3VwYmF0Y2hlcwogIC0gYmFja3Vwc2Vzc2lvbnMKICAtIHJlc3RvcmVzZXNzaW9ucwogIC0gYmFja3VwYmx1ZXByaW50cwogIC0gYmFja3VwY29uZmlndXJhdGlvbnMKLSBncm91cDogdm95YWdlci5hcHBzY29kZS5jb20KICByZXNvdXJjZXM6CiAgLSBpbmdyZXNzZXMKICAtIGNlcnRpZmljYXRlcw==
---
# Source: auditor/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-auditor
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
---
# Source: auditor/templates/apiregistration.yaml
# to delegate authentication and authorization
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-auditor-apiserver-auth-delegator
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: my-auditor
  namespace: default
---
# Source: auditor/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-auditor
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-auditor
subjects:
- kind: ServiceAccount
  name: my-auditor
  namespace: default
---
# Source: auditor/templates/license-checker-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-auditor-license-checker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-checker
subjects:
- kind: ServiceAccount
  name: my-auditor
  namespace: default
---
# Source: auditor/templates/license-reader-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-auditor-license-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-reader
subjects:
- kind: ServiceAccount
  name: my-auditor
  namespace: default
---
# Source: auditor/templates/apiregistration.yaml
# to read the config for terminating authentication
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-auditor-apiserver-extension-server-authentication-reader
  namespace: kube-system
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: my-auditor
  namespace: default
---
# Source: auditor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-auditor
  namespace: default
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  # Port used to expose admission webhook apiserver
  - name: api
    port: 443
    targetPort: 8443
  selector:
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
---
# Source: auditor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-auditor
  namespace: default
  labels:
    helm.sh/chart: auditor-v2023.10.1
    app.kubernetes.io/name: auditor
    app.kubernetes.io/instance: my-auditor
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: auditor
      app.kubernetes.io/instance: my-auditor
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auditor
        app.kubernetes.io/instance: my-auditor
      annotations:
        checksum/apiregistration.yaml: 08125502880fcf07b41557e56b6b4410d01fde3595a3daed30c30e4b73f59d9d
    spec:
      
      serviceAccountName: my-auditor
      containers:
      - name: operator
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        image: ghcr.io/appscode/auditor:v0.0.1
        imagePullPolicy: IfNotPresent
        args:
        - run
        - --v=3
        - --secure-port=8443
        - --audit-log-path=-
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=true
        - --policy-file=/var/policy/default.yaml
        ports:
        - containerPort: 8443
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          {}
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        - name: policy-file
          mountPath: /var/policy
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-auditor-apiserver-cert
      - name: policy-file
        secret:
          defaultMode: 420
          secretName: my-auditor-policy
      securityContext:
        fsGroup: 65535
      nodeSelector:
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
---
# Source: auditor/templates/license.yaml
# if license file is provided, then create a secret for license
---
# Source: auditor/templates/license-checker-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-checker
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Get cluster id
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs: ["get"]
# Issue license
- apiGroups:
  - proxyserver.licenses.appscode.com
  resources:
  - licenserequests
  verbs: ["create"]
# Detect workload/owner of operator pod
- apiGroups:
  - ""
  resources:
  - pods
  verbs: ["get"]
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs: ["get"]
# Write events in case of license verification failure
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["get", "list", "create", "patch"]
---
# Source: auditor/templates/license-reader-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-reader
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Detect license server endpoint for kubedb addons
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get"]
- nonResourceURLs:
  - /appscode/license
  verbs: ["get"]
