---
# Source: open-notificaties/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-open-notificaties-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: my-open-notificaties-rabbitmq
---
# Source: open-notificaties/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-open-notificaties
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties
    app.kubernetes.io/instance: my-open-notificaties
---
# Source: open-notificaties/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-open-notificaties-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.12.9
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "U1VQRVItU0VDUkVU"
---
# Source: open-notificaties/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-open-notificaties-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: "Z3Vlc3Q="
  rabbitmq-erlang-cookie: "U1VQRVItU0VDUkVU"
---
# Source: open-notificaties/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-open-notificaties
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties
    app.kubernetes.io/instance: my-open-notificaties
type: Opaque
data:
  CELERY_BROKER_URL: "YW1xcDovL2d1ZXN0Omd1ZXN0QG9wZW4tbm90aWZpY2F0aWVzLXJhYmJpdG1xOjU2NzIvLw=="
  CELERY_RESULT_BACKEND: "cmVkaXM6Ly9vcGVuLW5vdGlmaWNhdGllcy1yZWRpcy1tYXN0ZXI6NjM3OS8x"
  DB_PASSWORD: "U1VQRVItU0VDUkVU"
  PUBLISHER_BROKER_URL: "YW1xcDovL2d1ZXN0Omd1ZXN0QG9wZW4tbm90aWZpY2F0aWVzLXJhYmJpdG1xOjU2NzIvJTJG"
  SECRET_KEY: "U09NRS1SQU5ET00tU0VDUkVU"
  FLOWER_BASIC_AUTH: ""
---
# Source: open-notificaties/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-open-notificaties-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    ##
    default_user = guest
    default_pass = CHANGEME
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = default-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
---
# Source: open-notificaties/charts/redis/templates/configmap-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-open-notificaties-redis-scripts
  namespace: "default"
  labels:
    app: redis
    chart: redis-13.0.1
    heritage: Helm
    release: my-open-notificaties
data:
  start-master.sh: |
    #!/bin/bash
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec /run.sh "${ARGS[@]}"
---
# Source: open-notificaties/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-open-notificaties-redis
  namespace: "default"
  labels:
    app: redis
    chart: redis-13.0.1
    heritage: Helm
    release: my-open-notificaties
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: open-notificaties/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-open-notificaties-redis-health
  namespace: "default"
  labels:
    app: redis
    chart: redis-13.0.1
    heritage: Helm
    release: my-open-notificaties
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: open-notificaties/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-open-notificaties
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties
    app.kubernetes.io/instance: my-open-notificaties
data:
  ALLOWED_HOSTS: "my-open-notificaties,open-notificaties.gemeente.nl"
  CACHE_AXES: "open-notificaties-redis-master:6379/0"
  CACHE_DEFAULT: "open-notificaties-redis-master:6379/0"
  DB_NAME: "open-notificaties"
  DB_HOST: "open-notificaties-postgresql"
  DB_PORT: "5432"
  DB_USER: "postgres"
  PGSSLMODE: "prefer"
  DEBUG: "False"
  NUM_PROXIES: "0"
  EMAIL_HOST: "localhost"
  IS_HTTPS: "True"
  RABBITMQ_HOST: open-notificaties-rabbitmq
---
# Source: open-notificaties/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-open-notificaties-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: open-notificaties/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-open-notificaties-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-open-notificaties-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-open-notificaties-rabbitmq-endpoint-reader
---
# Source: open-notificaties/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.12.9
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-open-notificaties
---
# Source: open-notificaties/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.12.9
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-open-notificaties
    role: primary
---
# Source: open-notificaties/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-open-notificaties
---
# Source: open-notificaties/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-open-notificaties
---
# Source: open-notificaties/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties-redis-headless
  namespace: "default"
  labels:
    app: redis
    chart: redis-13.0.1
    release: my-open-notificaties
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: my-open-notificaties
---
# Source: open-notificaties/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties-redis-master
  namespace: "default"
  labels:
    app: redis
    chart: redis-13.0.1
    release: my-open-notificaties
    heritage: Helm
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: my-open-notificaties
    role: master
---
# Source: open-notificaties/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties
    app.kubernetes.io/instance: my-open-notificaties
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: open-notificaties
    app.kubernetes.io/instance: my-open-notificaties
---
# Source: open-notificaties/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-open-notificaties-flower
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties-flower
    app.kubernetes.io/instance: my-open-notificaties
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 5555
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: open-notificaties-flower
    app.kubernetes.io/instance: my-open-notificaties
---
# Source: open-notificaties/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-open-notificaties
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties
    app.kubernetes.io/instance: my-open-notificaties
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: open-notificaties
      app.kubernetes.io/instance: my-open-notificaties
  template:
    metadata:
      annotations:
        checksum/configmap: 7e3ccf0e05f2a7ca2ba1c23abd3f9a6e39f1793237e8d7ee84ad4815003ea1f2
        checksum/secret: ac4e38d729efbd9ee109de9db5397dca66a99b3ebbcb05edb90dd09cdfecc808
      labels:
        app.kubernetes.io/name: open-notificaties
        app.kubernetes.io/instance: my-open-notificaties
    spec:
      serviceAccountName: my-open-notificaties
      securityContext:
        runAsUser: 1000
      containers:
        - name: open-notificaties
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "openzaak/open-notificaties:1.3.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: my-open-notificaties
            - configMapRef:
                name: my-open-notificaties
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
                - name: Host
                  value: "my-open-notificaties"
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
                - name: Host
                  value: "my-open-notificaties"
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {}
---
# Source: open-notificaties/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-open-notificaties-worker
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties-worker
    app.kubernetes.io/instance: my-open-notificaties
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: open-notificaties-worker
      app.kubernetes.io/instance: my-open-notificaties
  template:
    metadata:
      annotations:
        checksum/configmap: 7e3ccf0e05f2a7ca2ba1c23abd3f9a6e39f1793237e8d7ee84ad4815003ea1f2
        checksum/secret: ac4e38d729efbd9ee109de9db5397dca66a99b3ebbcb05edb90dd09cdfecc808
      labels:
        app.kubernetes.io/name: open-notificaties-worker
        app.kubernetes.io/instance: my-open-notificaties
    spec:
      serviceAccountName: my-open-notificaties
      securityContext:
        runAsUser: 1000
      containers:
        - name: open-notificaties-worker
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "openzaak/open-notificaties:1.3.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: my-open-notificaties
            - configMapRef:
                name: my-open-notificaties
          resources:
            {}
          command:
            - /celery_worker.sh
---
# Source: open-notificaties/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-open-notificaties-flower
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties-flower
    app.kubernetes.io/instance: my-open-notificaties
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: open-notificaties-flower
      app.kubernetes.io/instance: my-open-notificaties
  template:
    metadata:
      annotations:
        checksum/configmap: 7e3ccf0e05f2a7ca2ba1c23abd3f9a6e39f1793237e8d7ee84ad4815003ea1f2
        checksum/secret: ac4e38d729efbd9ee109de9db5397dca66a99b3ebbcb05edb90dd09cdfecc808
      labels:
        app.kubernetes.io/name: open-notificaties-flower
        app.kubernetes.io/instance: my-open-notificaties
    spec:
      serviceAccountName: my-open-notificaties
      securityContext:
        runAsUser: 1000
      containers:
        - name: open-notificaties-flower
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "openzaak/open-notificaties:1.3.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: my-open-notificaties
            - configMapRef:
                name: my-open-notificaties
          ports:
            - name: http
              containerPort: 5555
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5555
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 5555
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {}
          command:
            - /celery_flower.sh
---
# Source: open-notificaties/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-open-notificaties-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.12.9
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: my-open-notificaties-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-open-notificaties
      role: primary
  template:
    metadata:
      name: my-open-notificaties-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.12.9
        app.kubernetes.io/instance: my-open-notificaties
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-open-notificaties
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: my-open-notificaties-postgresql
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r73
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-open-notificaties-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "open-notificaties"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=open-notificaties" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=open-notificaties" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: open-notificaties/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-open-notificaties-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.23.4
    app.kubernetes.io/instance: my-open-notificaties
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: my-open-notificaties-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: my-open-notificaties
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.23.4
        app.kubernetes.io/instance: my-open-notificaties
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 84bf8c066647b3dc08355d22d71e9d6e4e56f1e6d7cf38337e5a5f2646ffcdc6
        checksum/secret: 3ed280fa1f504a9f2969f029dea827b60b7b88180eb01c164cd8f7aebb007aa0
    spec:
      
      serviceAccountName: my-open-notificaties-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: my-open-notificaties
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.8-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "my-open-notificaties-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: my-open-notificaties-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "guest"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-open-notificaties-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: my-open-notificaties-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: data
          emptyDir: {}
---
# Source: open-notificaties/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-open-notificaties-redis-master
  namespace: "default"
  labels:
    app: redis
    chart: redis-13.0.1
    release: my-open-notificaties
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: my-open-notificaties
      role: master
  serviceName: my-open-notificaties-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-13.0.1
        release: my-open-notificaties
        role: master
      annotations:
        checksum/health: 24e0682d491b9f2333fc67d35ba8c6f3a216e9070acaa1774f10e77266e22552
        checksum/configmap: 9491eedf97f04c0286e3d5b1a1e984d9607570a1586027c2de29a6673677b5d8
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.1-debian-10-r36
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            null
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-open-notificaties-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-open-notificaties-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-open-notificaties-redis
        - name: "redis-data"
          emptyDir: {}
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  updateStrategy:
    type: RollingUpdate
---
# Source: open-notificaties/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-open-notificaties-test-connection"
  labels:
    helm.sh/chart: open-notificaties-0.7.0
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: open-notificaties
    app.kubernetes.io/instance: my-open-notificaties
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-open-notificaties:80']
  restartPolicy: Never
