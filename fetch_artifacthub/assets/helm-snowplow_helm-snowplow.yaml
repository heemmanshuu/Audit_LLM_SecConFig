---
# Source: helm-snowplow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-helm-snowplow-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgres
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-helm-snowplow
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  password: "aWdsdQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: helm-snowplow/templates/collector-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: collector-serviceaccount-creds
  namespace: default
type: Opaque
data:
  sa_json: |
    ZW1wdHkK
---
# Source: helm-snowplow/templates/enrich-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: enrich-serviceaccount-creds
  namespace: default
type: Opaque
data:
  sa_json: |
    ZW1wdHkK
---
# Source: helm-snowplow/templates/iglu-secret.yaml
apiVersion: v1
data:
  password: aWdsdQ==
  username: aWdsdQ==
kind: Secret
metadata:
  name: iglu-postgre-app
  namespace: default
type: Opaque
---
# Source: helm-snowplow/templates/iglu-secret.yaml
apiVersion: v1
data:
  username: cG9zdGdyZXM=
  password: cG9zdGdyZXM=
kind: Secret
metadata:
  name: iglu-postgre-master
  namespace: default
type: Opaque
---
# Source: helm-snowplow/templates/streamloader-postgre-secret.yaml
apiVersion: v1
data:
  password: c3RyZWFtbG9hZGVy
  username: c3RyZWFtbG9hZGVy
kind: Secret
metadata:
  name: streamloader-postgre-app
  namespace: default
type: Opaque
---
# Source: helm-snowplow/templates/streamloader-postgre-secret.yaml
apiVersion: v1
data:
  username: cG9zdGdyZXM=
  password: cG9zdGdyZXM=
kind: Secret
metadata:
  name: streamloader-postgre-master
  namespace: default
type: Opaque
---
# Source: helm-snowplow/templates/streamloader-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: bqloader-serviceaccount-creds
  namespace: default
type: Opaque
data:
  sa_json: |
    ZW1wdHkK
---
# Source: helm-snowplow/templates/akhq-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: akhq-config
  namespace: default
data:
  application.yml: |
    akhq:
      connections:
        snowplow:
          properties:
            bootstrap.servers: "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
---
# Source: helm-snowplow/templates/collector-cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: collector-configmap
  namespace: default
data:
  config.hocon: |
    collector {
      interface = "0.0.0.0"
      port = 8080
      ssl {
        enable = false
        redirect = false
        port = 8443
      }
      paths {
        "/customdtsp/tp2" = "/com.snowplowanalytics.snowplow/tp2"
      }
      p3p {
        policyRef = "/w3c/p3p.xml"
        CP = "NOI DSP COR NID PSA OUR IND COM NAV STA"
      }
      crossDomain {
        enabled = false
        domains = [ "*" ]
        secure = true
      }
      cookie {
        enabled = true
        expiration = "365 days"
        name = sp
        domains = []
        fallbackDomain = ""
        secure = true
        httpOnly = false
        sameSite = "None"
      }
      doNotTrackCookie {
        enabled = false
        name = ""
        value = ""
      }
      cookieBounce {
        enabled = false
        name = "n3pc"
        fallbackNetworkUserId = "00000000-0000-4000-A000-000000000000"
        forwardedProtocolHeader = "X-Forwarded-Proto"
      }
      enableDefaultRedirect = false
      redirectMacro {
        enabled = false
        placeholder = "[TOKEN]"
      }
      rootResponse {
        enabled = false
        statusCode = 302
        headers = {}
        body = "302, redirecting"
      }
      cors {
        accessControlMaxAge = "5 seconds"
      }
      prometheusMetrics {
        enabled = false
      }
      streams {
        good = collector-payloads
        bad = spprefix-bad-1-topic
        sink {
          host  = snowplow-kafka-bootstrap.snowplow.svc.cluster.local
          port = 9092
          brokers = "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
          backoffPolicy {
            minBackoff = 1000
            maxBackoff = 1000
            totalBackoff = 10000
            multiplier = 1
          }
        }
        buffer {
          byteLimit = 1000000
          recordLimit = 500
          timeLimit = 500
        }
      }
      telemetry {
        disable = false
        url = "telemetry-g.snowplowanalytics.com"
        userProvidedId = ""
        moduleName = "collector-pubsub-ce"
        moduleVersion = "0.2.2"
        autoGeneratedId = "329042380932sdjfiosdfo"
      }
    }
    akka {

      loglevel = DEBUG
      loggers = ["akka.event.slf4j.Slf4jLogger"]
      http.server {
        remote-address-header = on
        raw-request-uri-header = on
        parsing {
          max-uri-length = 32768
          uri-parsing-mode = relaxed
        }
        max-connections = 2048
      }
    }
---
# Source: helm-snowplow/templates/enrich-cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: enrich-configmap
  namespace: default
data:
  enrichment_campaigns.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/campaign_attribution/jsonschema/1-0-1",
      "data": {
        "name": "campaign_attribution",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "mapping": "static",
          "fields": {
            "mktMedium": ["utm_medium", "medium"],
            "mktSource": ["utm_source", "source"],
            "mktTerm": ["utm_term", "legacy_term"],
            "mktContent": ["utm_content"],
            "mktCampaign": ["utm_campaign", "cid", "legacy_campaign"]
          }
        }
      }
    }

  enrichment_pii.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow.enrichments/pii_enrichment_config/jsonschema/2-0-0",
      "data": {
        "vendor": "com.snowplowanalytics.snowplow.enrichments",
        "name": "pii_enrichment_config",
        "emitEvent": true,
        "enabled": true,
        "parameters": {
          "pii": [
            {
              "pojo": {
                "field": "user_ipaddress"
              }
            }
          ],
          "strategy": {
            "pseudonymize": {
              "hashFunction": "MD5",
              "salt": "empty"
            }
          }
        }
      }
    }

  enrichment_event_fingerprint.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/event_fingerprint_config/jsonschema/1-0-1",
      "data": {
        "name": "event_fingerprint_config",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "excludeParameters": ["cv", "eid", "nuid", "stm"],
          "hashAlgorithm": "MD5"
        }
      }
    }

  enrichment_referrer_parser.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/referer_parser/jsonschema/2-0-0",
      "data": {
        "name": "referer_parser",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "database": "referers-latest.json",
          "uri": "https://s3-eu-west-1.amazonaws.com/snowplow-hosted-assets/third-party/referer-parser/",
          "internalDomains": []
        }
      }
    }

  enrichment_ua_parser.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow/ua_parser_config/jsonschema/1-0-1",
      "data": {
        "name": "ua_parser_config",
        "vendor": "com.snowplowanalytics.snowplow",
        "enabled": true,
        "parameters": {
          "uri": "https://s3-eu-west-1.amazonaws.com/snowplow-hosted-assets/third-party/ua-parser",
          "database": "regexes-latest.yaml"
        }
      }
    }

  enrichment_yauaa.json: |
    {
      "schema": "iglu:com.snowplowanalytics.snowplow.enrichments/yauaa_enrichment_config/jsonschema/1-0-0",
      "data": {
        "enabled": true,
        "vendor": "com.snowplowanalytics.snowplow.enrichments",
        "name": "yauaa_enrichment_config"
      }
    }

  config.hocon: |
    {
      "input": {
        "topicName": "collector-payloads"
          "bootstrapServers": "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
      }

      "output": {
        "good": {
          "topicName": "enriched"
            "bootstrapServers": "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
        }

        "bad": {
          "topicName": "bad"
            "bootstrapServers": "snowplow-kafka-bootstrap.snowplow.svc.cluster.local:9092"
        }
      }
    }

  iglu-config.json: |
    {
      "schema": "iglu:com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-3",
      "data": {
        "cacheSize": 500,
        "cacheTtl": 600,
        "repositories": [
          {
            "connection": {
              "http": {
                "uri": "http://iglucentral.com"
              }
            },
            "name": "Iglu Central",
            "priority": 10,
            "vendorPrefixes": []
          },
          {
            "connection": {
              "http": {
                "uri": "http://mirror01.iglucentral.com"
              }
            },
            "name": "Iglu Central - Mirror 01",
            "priority": 20,
            "vendorPrefixes": []
          },
          {
            "connection": {
              "http": {
                "apikey": "5B2B71B8-B1D7-46DA-BA39-54D583558E23",
                "uri": "http://iglu-server.default:8080/api"
              }
            },
            "name": "Iglu Server",
            "priority": 0,
            "vendorPrefixes": []
          }
        ]
      }
    }
---
# Source: helm-snowplow/templates/iglu-cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: iglu
  namespace: default
data:
  iglu-server.hocon: |
    {
      "repoServer": {
        "interface": "0.0.0.0",
        "port": 8080,
        "threadPool": "cached",
        "maxConnections": 2048
      },
      "database": {
        "type": "postgres",
        "host": "snowplow-postgres.snowplow",
        "port": 5432,
        "dbname": "iglu",
        "username": "iglu",
        "password": "iglu",
        "driver": "org.postgresql.Driver",
        "pool": {
          "type": "hikari",
          "maximumPoolSize": 5
        },
        "connectionPool": {
          "type": "fixed",
          "size": 4
        },
        "transactionPool": "cached"
      },
      "debug": false,
      "patchesAllowed": true,
      "superApiKey": "5B2B71B8-B1D7-46DA-BA39-54D583558E23"
    }
---
# Source: helm-snowplow/templates/streamloader-cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: streamloader-configmap
  namespace: default
data:
  config.hocon: |
    {
      "input": {
        "type": "PubSub"
        "projectId": "my-project"
        "subscriptionId": "my-subscription"
      }

      "output" : {
        "good": {
          "type": "Postgres"
          "host": "snowplow-postgres.snowplow"
          "database": "streamloader_db"
          "username": "streamloader"
          "password": streamloader
          "schema": "public"
          
          "sslMode": "disable"
          
        }
      }
    }
  iglu-config.json: |
    {
      "schema": "iglu:com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-3",
      "data": {
        "cacheSize": 500,
        "cacheTtl": 600,
        "repositories": [
          {
            "connection": {
              "http": {
                "uri": "http://iglucentral.com"
              }
            },
            "name": "Iglu Central",
            "priority": 10,
            "vendorPrefixes": []
          },
          {
            "connection": {
              "http": {
                "uri": "http://mirror01.iglucentral.com"
              }
            },
            "name": "Iglu Central - Mirror 01",
            "priority": 20,
            "vendorPrefixes": []
          },
          {
            "connection": {
              "http": {
                "apikey": "5B2B71B8-B1D7-46DA-BA39-54D583558E23",
                "uri": "http://iglu-server.snowplow.svc.cluster.local/api"
              }
            },
            "name": "Iglu Server",
            "priority": 0,
            "vendorPrefixes": []
          }
        ]
      }
    }
---
# Source: helm-snowplow/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-helm-snowplow-postgres-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgres
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-helm-snowplow
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: my-helm-snowplow
    app.kubernetes.io/component: primary
---
# Source: helm-snowplow/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-helm-snowplow-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgres
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-helm-snowplow
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: NodePort
  externalTrafficPolicy: "Cluster"
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: my-helm-snowplow
    app.kubernetes.io/component: primary
---
# Source: helm-snowplow/templates/akhq-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: akhq
  namespace: default
spec:
  selector:
    app: akhq
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: helm-snowplow/templates/collector-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: default
  annotations:
    cloud.google.com/backend-config: '{"default": "collector-backendconfig"}' # this is only required, if you run on GKE. See note in the step above.
spec:
  selector:
    app: collector
  type: NodePort
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: helm-snowplow/templates/iglu-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: iglu-server
  namespace: default
spec:
  selector:
    app: iglu
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Source: helm-snowplow/templates/streamloader-postgre-pgadmin-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: streamloader-postgre-pgamin
  namespace: default
spec:
  selector:
    app: streamloader-postgre-pgamin
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: helm-snowplow/templates/zookeper-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: default
spec:
  ports:
    - port: 2181
      name: client
  clusterIP: None
  selector:
    app: zookeeper
---
# Source: helm-snowplow/templates/akhq-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: akhq
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: akhq
  template:
    metadata:
      labels:
        app: akhq
        checksum-config: a13dbd032ef5c7435db0a1f8337ffbc6c06f7b587a81935d8778294e094ebfd
    spec:
      containers:
        - name: akhq
          image: tchiotludo/akhq
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: akhq-config-volume
              mountPath: /app/application.yml
              subPath: application.yml
      volumes:
        - name: akhq-config-volume
          configMap:
            name: akhq-config
---
# Source: helm-snowplow/templates/collector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collector-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: collector
  template:
    metadata:
      labels:
        app: collector
        checksum-config: 5eaa63cbde2f953bad6942894bc3906cf5cd603ae1eed55efa86e3057f6773a
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - collector
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: collector-server
          image: snowplow/scala-stream-collector-kafka:2.10.0
          command:
            - "/home/snowplow/bin/snowplow-stream-collector"
            - "--config"
            - "/snowplow/config/config.hocon"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: JAVA_OPTS
              value: -Dorg.slf4j.simpleLogger.defaultLogLevel=info
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcp/sa_credentials.json
          volumeMounts:
            - name: collector-config-volume
              mountPath: /snowplow/config
            - name: service-account-credentials-volume
              mountPath: /etc/gcp
              readOnly: true
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
      volumes:
        - name: collector-config-volume
          configMap:
            name: collector-configmap
            items:
              - key: config.hocon
                path: config.hocon
        - name: service-account-credentials-volume
          secret:
            secretName: collector-serviceaccount-creds
            items:
              - key: sa_json
                path: sa_credentials.json
---
# Source: helm-snowplow/templates/enrich-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enrich-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enrich
  template:
    metadata:
      labels:
        app: enrich
        checksum-config: c19cdb457af95e5ff4aff7d9a92d576381c8464013ac62b13d5acc3e695c2f2
    spec:
      containers:
        - name: enrich-server
          image: snowplow/snowplow-enrich-kafka:3.9.0
          command:
            - "/home/snowplow/bin/snowplow-enrich-kafka"
            - "--config"
            - "/snowplow/config/config.hocon"
            - "--iglu-config"
            - "/snowplow/config/iglu-config.json"
            - "--enrichments"
            - "/snowplow/config/enrichments"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: -Dorg.slf4j.simpleLogger.defaultLogLevel=info -Dorg.slf4j.simpleLogger.log.InvalidEnriched=debug
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcp/sa_credentials.json
          volumeMounts:
            - name: enrich-config-volume
              mountPath: /snowplow/config
            - name: service-account-credentials-volume
              mountPath: /etc/gcp
              readOnly: true
          resources:
            requests:
              memory: "256Mi"
              cpu: "350m"
            limits:
              memory: "1.5Gi"
      volumes:
        - name: enrich-config-volume
          configMap:
            name: enrich-configmap
            items:
              - key: iglu-config.json
                path: iglu-config.json
              - key: config.hocon
                path: config.hocon
              - key: enrichment_campaigns.json
                path: enrichments/enrichment_campaigns.json
              - key: enrichment_pii.json
                path: enrichments/enrichment_pii.json
              - key: enrichment_event_fingerprint.json
                path: enrichments/enrichment_event_fingerprint.json
              - key: enrichment_referrer_parser.json
                path: enrichments/enrichment_referrer_parser.json
              - key: enrichment_ua_parser.json
                path: enrichments/enrichment_ua_parser.json
        - name: service-account-credentials-volume
          secret:
            secretName: enrich-serviceaccount-creds
            items:
              - key: sa_json
                path: sa_credentials.json
---
# Source: helm-snowplow/templates/iglu-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: iglu-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: iglu
  template:
    metadata:
      labels:
        app: iglu
        checksum-config: 5a1fe41d6ab7bbbafc1e5a1dbc528efca6614d9c59e98b887b3d79fb144f6f4
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
      containers:
        - name: iglu-server
          image: snowplow/iglu-server:0.9.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          command: ["/home/snowplow/bin/iglu-server", "--config", "/snowplow/config/iglu-server.hocon"]
          env:
            - name: JAVA_OPTS
              value: -Dorg.slf4j.simpleLogger.defaultLogLevel=info
          volumeMounts:
            - name: iglu-config-volume
              mountPath: /snowplow/config
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1.5Gi"
      volumes:
        - name: iglu-config-volume
          configMap:
            name: iglu
            items:
              - key: iglu-server.hocon
                path: iglu-server.hocon
---
# Source: helm-snowplow/templates/streamloader-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streamloader-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: streamloader
  template:
    metadata:
      labels:
        app: streamloader
        checksum-config: 00900bb9984048ce1c434f7d4f58c2c28dc840a501c643caee6ee295a777384
    spec:
      containers:
        - name: streamloader-server
          image: snowplow/snowplow-postgres-loader:0.3.3
          command:
            - "/opt/snowplow/bin/snowplow-postgres-loader"
            - "--config"
            - "/snowplow/config/config.hocon"
            - "--resolver"
            - "/snowplow/config/iglu-config.json"
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: -Dorg.slf4j.simpleLogger.defaultLogLevel=debug
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcp/sa_credentials.json
          volumeMounts:
            - name: streamloader-config-volume
              mountPath: /snowplow/config
            - name: service-account-credentials-volume
              mountPath: /etc/gcp
              readOnly: true
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
      volumes:
        - name: streamloader-config-volume
          configMap:
            name: streamloader-configmap
            items:
              - key: iglu-config.json
                path: iglu-config.json
              - key: config.hocon
                path: config.hocon
        - name: service-account-credentials-volume
          secret:
            secretName: bqloader-serviceaccount-creds
            items:
              - key: sa_json
                path: sa_credentials.json
---
# Source: helm-snowplow/templates/streamloader-postgre-pgadmin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streamloader-postgre-pgamin
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: streamloader-postgre-pgamin
  template:
    metadata:
      labels:
        app: streamloader-postgre-pgamin
    spec:
      containers:
        - name: streamloader-postgre-pgamin
          image: dpage/pgadmin4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              value: postgres@email.com
            - name: PGADMIN_DEFAULT_PASSWORD
              value: postgres
---
# Source: helm-snowplow/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-helm-snowplow-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgres
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-helm-snowplow
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-helm-snowplow-postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: my-helm-snowplow
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-helm-snowplow-postgres
      labels:
        app.kubernetes.io/name: postgres
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: my-helm-snowplow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgres
                    app.kubernetes.io/instance: my-helm-snowplow
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r35
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "iglu"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-helm-snowplow-postgres
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-helm-snowplow-postgres
                  key: password
            - name: POSTGRES_DB
              value: "iglu"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "iglu" -d "dbname=iglu" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "iglu" -d "dbname=iglu" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 1000m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 128Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
---
# Source: helm-snowplow/templates/zookeeper-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: default
spec:
  serviceName: "zookeeper"
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper:3.4.9
          ports:
            - containerPort: 2181
              name: client
---
# Source: helm-snowplow/templates/akhq-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: akhq
  namespace: default
spec:
  tls:
    - hosts:
        - akhq.com
  rules:
    - host: akhq.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: akhq
                port:
                  number: 8080
---
# Source: helm-snowplow/templates/collector-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: snowplow
  namespace: default
spec:
  tls:
    - hosts:
        - snowplow.com
  rules:
    - host: snowplow.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: collector
                port:
                  number: 8080
---
# Source: helm-snowplow/templates/streamloader-postgre-pgadmin-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamloader-postgre-pgamin
  namespace: default
spec:
  tls:
    - hosts:
        - postgre.snowplow.com
  rules:
    - host: postgre.snowplow.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: streamloader-postgre-pgamin
                port:
                  number: 80
