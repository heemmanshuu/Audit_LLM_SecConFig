---
# Source: k8s-mutating-admission-webhook/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-k8s-mutating-admission-webhook
  labels:
    helm.sh/chart: k8s-mutating-admission-webhook-1.3.2
    app.kubernetes.io/name: k8s-mutating-admission-webhook
    app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-mutating-admission-webhook/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-k8s-mutating-admission-webhook
data:
  AUTOMEMLIMIT_DEBUG: "true"
  DEBUG: "true"
  RULES: /etc/webhook/rules.yaml
---
# Source: k8s-mutating-admission-webhook/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-k8s-mutating-admission-webhook-config
data:
  rules.yaml: |
    # these fields match with regexp.
    # be careful about using them as literals,
    # since the expression "key" matches "my-key1".
    #
    # restrict_tolerations[].toleration.key
    # restrict_tolerations[].toleration.operator
    # restrict_tolerations[].toleration.value
    # restrict_tolerations[].toleration.effect
    # restrict_tolerations[].allowed_pods.namespace
    # restrict_tolerations[].allowed_pods.name
    # place_pods[].pod.namespace
    # place_pods[].pod.name
  
    restrict_tolerations:
  
      # if a toleration is unmatched, it is allowed for all PODs.
      # if a toleration is matched, only matched PODs can have it.
      #
      # the empty expression matches anything.
      # the underscore (_) in the beginning of the expression negates it.
      # "" matches anything.
      # "_" negates the empty string, hence it matches nothing.
  
      # remove key1 from any pod
      - toleration:
          # exactly match key1 regardless of other fields
          key: ^key1$    # exact match
          #operator: ""  # empty string matches anything
          #value: ""     # empty string matches anything
          #effect: ""    # empty string matches anything
        allowed_pods:
          # match NO pod
          - namespace: _ # negated empty string matches nothing
            name: _      # negated empty string matches nothing
  
      # remove exactly Exists from all pods except pods prefixed with "^daemonset-"
      - toleration:
          # match exactly Exists
          key: ^$             # match only the empty string
          operator: ^Exists$  # exact match
          value: ^$           # match only the empty string
          effect: ^$          # match only the empty string
        allowed_pods:
          # match only POD prefixed as daemonset-
          - #namespace: ""    # empty string matches anything
            name: ^daemonset- # match prefix
  
    # if the pod matches multiple place_pods rules,
    # it will receive tolerations and node_selectors
    # only from the FIRST matching rule.
  
    place_pods:
      - pods:
          - labels:
              color: red
          - namespace: ^default$
            labels:
              color: blue
        add:
          node_selector:
            node: alpha
      - pods:
          - # match only POD prefixed as coredns-
            #namespace: ""    # empty string matches anything
            name: ^coredns-   # match prefix
        add:
          tolerations:
            - key: key1
              operator: Equal
              value: value1
              effect: NoSchedule
            - key: key2
              operator: Equal
              value: value2
              effect: NoSchedule
          node_selector:
            key1: value1
            key2: value2
---
# Source: k8s-mutating-admission-webhook/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-k8s-mutating-admission-webhook
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - '*'
---
# Source: k8s-mutating-admission-webhook/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-k8s-mutating-admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-k8s-mutating-admission-webhook
subjects:
- kind: ServiceAccount
  namespace: default
  name: my-k8s-mutating-admission-webhook
---
# Source: k8s-mutating-admission-webhook/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8s-mutating-admission-webhook
  labels:
    helm.sh/chart: k8s-mutating-admission-webhook-1.3.2
    app.kubernetes.io/name: k8s-mutating-admission-webhook
    app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: 8443
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: k8s-mutating-admission-webhook
    app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
---
# Source: k8s-mutating-admission-webhook/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-k8s-mutating-admission-webhook
  labels:
    helm.sh/chart: k8s-mutating-admission-webhook-1.3.2
    app.kubernetes.io/name: k8s-mutating-admission-webhook
    app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-mutating-admission-webhook
      app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
  template:
    metadata:
      annotations:
        rollme: "SljW4"
      labels:
        app.kubernetes.io/name: k8s-mutating-admission-webhook
        app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
        app: k8s-mutating-admission-webhook
    spec:
      priorityClassName: system-node-critical
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
      serviceAccountName: my-k8s-mutating-admission-webhook
      securityContext:
        {}
      volumes:
      - name: config
        configMap:
          name: my-k8s-mutating-admission-webhook-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: my-k8s-mutating-admission-webhook
          securityContext:
            {}
          image: "udhos/k8s-mutating-admission-webhook:1.3.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
          envFrom:
          - configMapRef:
              name: my-k8s-mutating-admission-webhook
          volumeMounts:
          - name: config
            mountPath: /etc/webhook
          startupProbe:
            # must initialize within 3*100=300 seconds
            httpGet:
              path: /health
              port: 8443
              scheme: HTTPS
            periodSeconds: 3
            failureThreshold: 100
          readinessProbe:
            # not ready after 10*6=60 seconds without success
            httpGet:
              path: /health
              port: 8443
              scheme: HTTPS
            periodSeconds: 10
            failureThreshold: 6
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            # kill after 20*6=120 seconds without success
            httpGet:
              path: /health
              port: 8443
              scheme: HTTPS
            periodSeconds: 20
            failureThreshold: 6
            successThreshold: 1
            timeoutSeconds: 10            
          resources:
            limits:
              cpu: 2000m
              ephemeral-storage: 200Mi
              memory: 300Mi
            requests:
              cpu: 100m
              ephemeral-storage: 200Mi
              memory: 300Mi
---
# Source: k8s-mutating-admission-webhook/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-k8s-mutating-admission-webhook-test-connection"
  labels:
    helm.sh/chart: k8s-mutating-admission-webhook-1.3.2
    app.kubernetes.io/name: k8s-mutating-admission-webhook
    app.kubernetes.io/instance: my-k8s-mutating-admission-webhook
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-k8s-mutating-admission-webhook:443']
  restartPolicy: Never
