---
# Source: net-exporter/templates/np.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: default
  name: net-exporter
  labels:
    app: "net-exporter"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "net-exporter"
    app.kubernetes.io/instance: "my-net-exporter"
    app.kubernetes.io/version: "1.10.3"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: "net-exporter-1.10.4"
spec:
  podSelector:
    matchLabels:
      app: "net-exporter"
      
  policyTypes:
    - Ingress
    - Egress
  ingress:
  - ports:
    - port: 8000
      protocol: TCP
    from:
    - podSelector:
        matchLabels:
          app: "net-exporter"
          
    - podSelector:
        matchLabels:
          app: prometheus
    
    
    - ipBlock:
        cidr: 10.0.0.0/8
    
    - ipBlock:
        cidr: 172.16.0.0/12
    
    - ipBlock:
        cidr: 192.168.0.0/16
    
    - ipBlock:
        cidr: 100.64.0.0/10
    
  egress:
  - ports:
    - port: 8000
      protocol: TCP
    to:
    - podSelector:
        matchLabels:
          app: "net-exporter"
          
  - ports:
    - port: 123
      protocol: UDP
    to:
    - ipBlock:
        cidr: 0.0.0.0/0
  - ports:
    - port: 1053
      protocol: UDP
    - port: 1053
      protocol: TCP
    # legacy port kept for compatibility
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
    - podSelector:
        matchLabels:
          k8s-app: coredns
      namespaceSelector:
        matchLabels:
          name: kube-system
  - ports:
    - port: 443
      protocol: TCP
    # legacy port kept for compatibility
    - port: 6443
      protocol: TCP
    to:
    - ipBlock:
        cidr: 10.0.0.0/8
    - ipBlock:
        cidr: 172.16.0.0/12
    - ipBlock:
        cidr: 192.168.0.0/16
    - ipBlock:
        cidr: 100.64.0.0/10
---
# Source: net-exporter/templates/psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: net-exporter
  labels:
    app: "net-exporter"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "net-exporter"
    app.kubernetes.io/instance: "my-net-exporter"
    app.kubernetes.io/version: "1.10.3"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: "net-exporter-1.10.4"
spec:
  privileged: false
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  hostPID: false
  hostIPC: false
  hostNetwork: false
  volumes:
    - 'secret'
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: net-exporter/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: net-exporter
  namespace: default
  labels:
    app: "net-exporter"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "net-exporter"
    app.kubernetes.io/instance: "my-net-exporter"
    app.kubernetes.io/version: "1.10.3"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: "net-exporter-1.10.4"
---
# Source: net-exporter/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: net-exporter
  labels:
    app: "net-exporter"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "net-exporter"
    app.kubernetes.io/instance: "my-net-exporter"
    app.kubernetes.io/version: "1.10.3"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: "net-exporter-1.10.4"
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  resourceNames:
  - net-exporter
  - coredns
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - namespaces
  resourceNames:
  - kube-system
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - net-exporter
  verbs:
  - "use"
---
# Source: net-exporter/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: net-exporter
  labels:
    app: "net-exporter"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "net-exporter"
    app.kubernetes.io/instance: "my-net-exporter"
    app.kubernetes.io/version: "1.10.3"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: "net-exporter-1.10.4"
subjects:
- kind: ServiceAccount
  name: net-exporter
  namespace: default
roleRef:
  kind: ClusterRole
  name: net-exporter
  apiGroup: rbac.authorization.k8s.io
---
# Source: net-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: net-exporter
  namespace: default
  labels:
    app: "net-exporter"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "net-exporter"
    app.kubernetes.io/instance: "my-net-exporter"
    app.kubernetes.io/version: "1.10.3"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: "net-exporter-1.10.4"
    giantswarm.io/monitoring: "true"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/scheme: "http"
spec:
  ports:
    - port: 8000
  selector:
    app: "net-exporter"
---
# Source: net-exporter/templates/daemonset.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: net-exporter
  namespace: default
  labels:
    app: "net-exporter"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "net-exporter"
    app.kubernetes.io/instance: "my-net-exporter"
    app.kubernetes.io/version: "1.10.3"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: "net-exporter-1.10.4"
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: "net-exporter"
      
  template:
    metadata:
      labels:
        app: "net-exporter"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "net-exporter"
        app.kubernetes.io/instance: "my-net-exporter"
        app.kubernetes.io/version: "1.10.3"
        giantswarm.io/service-type: "managed"
        helm.sh/chart: "net-exporter-1.10.4"
      annotations:
        releaseRevision: "1"
    spec:
      initContainers:
      - name: label-kube-system-namespace
        image: "docker.io/giantswarm/docker-kubectl:1.18.8"
        args:
        - label
        - namespace
        - kube-system
        - name=kube-system
        - --overwrite=true
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
      ## In our Control Plane net-exporter runs on monitoring ns
      ## By design Kubernetes does not allow to run critical pods
      ## having Priority Class like system-node-critical out of
      ## the namespace kube-system
      ##
      ## In the TC, net-exporter runs on kube-system and so this is fine
      priorityClassName: system-node-critical
      containers:
      - name: net-exporter
        image: "docker.io/giantswarm/net-exporter:[[ .Version ]]"
        args:
          - "-namespace=default"
          - "-timeout=5s"
          - "-dns-service=coredns"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
        resources:
          # cpu limits removed so that throttling doesn't cause any unwanted
          # side-effects to measurements.
          requests:
            cpu: 50m
            memory: 75Mi
          limits:
            memory: 150Mi
      serviceAccountName: net-exporter
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      tolerations:
      # Tolerate all taints for observability
      - operator: "Exists"
