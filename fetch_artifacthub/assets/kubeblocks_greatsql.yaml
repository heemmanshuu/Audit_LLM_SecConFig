---
# Source: greatsql/templates/clusterdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: greatsql
spec:
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_greatsql)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_greatsql)"
  componentDefs:
    - name: greatsql-compdef
      characterType: greatsql
      workloadType: Stateful
      service:
        ports:
          - name: greatsql
            port: 3306
            targetPort: greatsql
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: greatsql-container
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /data/GreatSQL
                name: data
            ports:
              - containerPort: 3306
                name: greatsql
            env:
              - name: MYSQL_ROOT_HOST
                value: "%"
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
          - name: mysql-exporter
            ports:
              - name: metrics
                containerPort: 9104
                protocol: TCP
            env:
              - name: "GREATSQL_MONITOR_USER"
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: "GREATSQL_MONITOR_PASSWORD"
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: "DATA_SOURCE_NAME"
                value: "$(GREATSQL_MONITOR_USER):$(GREATSQL_MONITOR_PASSWORD)@(localhost:3306)/"
---
# Source: greatsql/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: greatsql-8.0.32
spec:
  clusterDefinitionRef: greatsql
  componentVersions:
  - componentDefRef: greatsql-compdef
    versionsContext:
      containers:
      - name: greatsql-container
        image: docker.io/greatsql/greatsql:8.0.32-25
        imagePullPolicy: IfNotPresent
      - name: mysql-exporter
        image: prom/mysqld-exporter:v0.14.0
        imagePullPolicy: IfNotPresent
---
# Source: greatsql/templates/grafana/configmap-dashboards.yaml
apiVersion: v1
kind: ConfigMapList
items:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: greatsql-grafana-greatsql
      labels:
        grafana_dashboard: "1"
        app: greatsql-grafana
        helm.sh/chart: greatsql-0.1.0
        app.kubernetes.io/name: greatsql
        app.kubernetes.io/instance: my-greatsql
        app.kubernetes.io/version: "GreatSQL8.0.32-25"
        app.kubernetes.io/managed-by: Helm
    data:
      greatsql.json: ""
