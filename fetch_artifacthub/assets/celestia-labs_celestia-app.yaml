---
# Source: celestia-app/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-celestia-app
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-celestia-app
      app.kubernetes.io/name: celestia-app
      app.kubernetes.io/component: app
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 
        - port:
---
# Source: celestia-app/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-celestia-app
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
automountServiceAccountToken: true
---
# Source: celestia-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-celestia-app-apptoml
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
data:
  app.toml: |
    minimum-gas-prices = "0.002utia"
    pruning = "default"
    pruning-keep-recent = "0"
    pruning-interval = "0"
    halt-height = 0
    halt-time = 0
    min-retain-blocks = 0
    inter-block-cache = true
    index-events = []
    iavl-cache-size = 781250
    iavl-disable-fastnode = false
    iavl-lazy-loading = false
    app-db-backend = ""
    [telemetry]
    service-name = ""
    enabled = false
    enable-hostname = false
    enable-hostname-label = false
    enable-service-label = false
    prometheus-retention-time = 0
    global-labels = []
    [api]
    enable = false
    swagger = false
    address = "tcp://0.0.0.0:1317"
    max-open-connections = 1000
    rpc-read-timeout = 10
    rpc-write-timeout = 0
    rpc-max-body-bytes = 1000000
    enabled-unsafe-cors = false
    [rosetta]
    enable = false
    address = ":8080"
    blockchain = "app"
    network = "network"
    retries = 3
    offline = false
    enable-fee-suggestion = false
    gas-to-suggest = 210000
    denom-to-suggest = "uatom"
    [grpc]
    enable = false
    address = "0.0.0.0:9090"
    max-recv-msg-size = "10485760"
    max-send-msg-size = "2147483647"
    [grpc_web]
    enable = false
    address = "0.0.0.0:9091"
    enable-unsafe-cors = false
    [state_sync]
    snapshot-interval = 1500
    snapshot-keep-recent = 2
    [store]
    streamers = []
    [streamers]
    [streamers.file]
    keys = ["*"]
    write_dir = ""
    prefix = ""
    output-metadata = "true"
    stop-node-on-error = "true"
    fsync = "false"
---
# Source: celestia-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-celestia-app-clienttoml
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
data:
  client.toml: |
    chain-id = "celestia"
    keyring-backend = "test"
    output = "text"
    node = "tcp://localhost:26657"
    broadcast-mode = "sync"
---
# Source: celestia-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-celestia-app-configtoml
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
data:
  config.toml: |
    proxy_app = "tcp://127.0.0.1:26658"
    moniker = "app"
    fast_sync = true
    db_backend = "goleveldb"
    db_dir = "data"
    log_level = "info"
    log_format = "plain"
    genesis_file = "config/genesis.json"
    priv_validator_key_file = "config/priv_validator_key.json"
    priv_validator_state_file = "data/priv_validator_state.json"
    priv_validator_laddr = ""
    node_key_file = "config/node_key.json"
    abci = "socket"
    filter_peers = false
    [rpc]
    laddr = "tcp://127.0.0.1:26657"
    cors_allowed_origins = []
    cors_allowed_methods = ["HEAD", "GET", "POST"]
    cors_allowed_headers = ["Origin", "Accept", "Content-Type", "X-Requested-With", "X-Server-Time"]
    grpc_laddr = ""
    grpc_max_open_connections = 900
    unsafe = false
    max_open_connections = 900
    max_subscription_clients = 100
    max_subscriptions_per_client = 5
    experimental_subscription_buffer_size = 200
    experimental_websocket_write_buffer_size = 200
    experimental_close_on_slow_client = false
    timeout_broadcast_tx_commit = "50s"
    max_body_bytes = 8388608
    max_header_bytes = 1048576
    tls_cert_file = ""
    tls_key_file = ""
    pprof_laddr = "localhost:6060"
    [p2p]
    laddr = "tcp://0.0.0.0:26656"
    external_address = ""
    seeds = ""
    persistent_peers = ""
    upnp = false
    addr_book_file = "config/addrbook.json"
    addr_book_strict = true
    max_num_inbound_peers = 40
    max_num_outbound_peers = 10
    unconditional_peer_ids = ""
    persistent_peers_max_dial_period = "0s"
    flush_throttle_timeout = "100ms"
    max_packet_msg_payload_size = 1024
    send_rate = 5120000
    recv_rate = 5120000
    pex = true
    seed_mode = false
    private_peer_ids = ""
    allow_duplicate_ip = false
    handshake_timeout = "20s"
    dial_timeout = "3s"
    [mempool]
    version = "v1"
    recheck = true
    broadcast = true
    wal_dir = ""
    size = 5000
    max_txs_bytes = 39485440
    cache_size = 10000
    keep-invalid-txs-in-cache = false
    max_tx_bytes = 7897088
    max_batch_bytes = 0
    ttl-duration = "1m15s"
    ttl-num-blocks = 5
    max-gossip-delay = "0s"
    [statesync]
    enable = false
    rpc_servers = ""
    trust_height = 0
    trust_hash = ""
    trust_period = "168h0m0s"
    discovery_time = "15s"
    temp_dir = ""
    chunk_request_timeout = "10s"
    chunk_fetchers = "4"
    [fastsync]
    version = "v0"
    [consensus]
    only_internal_wal = "true"
    wal_file = "data/cs.wal/wal"
    timeout_propose = "10s"
    timeout_propose_delta = "500ms"
    timeout_prevote = "1s"
    timeout_prevote_delta = "500ms"
    timeout_precommit = "1s"
    timeout_precommit_delta = "500ms"
    timeout_commit = "11s"
    double_sign_check_height = 0
    skip_timeout_commit = false
    create_empty_blocks = true
    create_empty_blocks_interval = "0s"
    peer_gossip_sleep_duration = "100ms"
    peer_query_maj23_sleep_duration = "2s"
    [storage]
    discard_abci_responses = true
    [tx_index]
    indexer = "null"
    psql-conn = ""
    [instrumentation]
    prometheus = false
    prometheus_listen_addr = ":26660"
    max_open_connections = 3
    namespace = "cometbft"
    trace_push_config = ""
    trace_pull_address = ""
    trace_type = "noop"
    trace_push_batch_size = 1000
    tracing_tables = "mempool_tx,mempool_peer_state,consensus_round_state,consensus_block_parts,consensus_block,consensus_vote"
    pyroscope_url = ""
    pyroscope_trace = false
    pyroscope_profile_types = ["cpu", "alloc_objects", "inuse_objects", "goroutines", "mutex_count", "mutex_duration", "block_count", "block_duration"]
---
# Source: celestia-app/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-celestia-app
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-celestia-app
subjects:
  - kind: ServiceAccount
    name: my-celestia-app
    namespace: "default"
---
# Source: celestia-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-celestia-app-external
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: api
      port: 1317
      protocol: TCP
    - name: grpc
      port: 9090
      protocol: TCP
    - name: p2p
      port: 26656
      protocol: TCP
    - name: rpc
      port: 26657
      protocol: TCP
  selector:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/component: app
---
# Source: celestia-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-celestia-app-internal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: api
      port: 1317
      protocol: TCP
    - name: grpc
      port: 9090
      protocol: TCP
    - name: p2p
      port: 26656
      protocol: TCP
    - name: rpc
      port: 26657
      protocol: TCP
    - name: prometheus
      port: 26660
      protocol: TCP
    - name: tracing
      port: 26661
      protocol: TCP
  selector:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/component: app
---
# Source: celestia-app/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-celestia-app
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-celestia-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: celestia-app
    app.kubernetes.io/version: v1.11.0
    helm.sh/chart: celestia-app-0.1.2
    app.kubernetes.io/component: app
spec:
  replicas: 1
  podManagementPolicy: "OrderedReady"
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-celestia-app
      app.kubernetes.io/name: celestia-app
      app.kubernetes.io/component: app
  serviceName: my-celestia-app
  updateStrategy:
    type: RollingUpdate
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: "Retain"
    whenScaled: "Retain"
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-celestia-app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: celestia-app
        app.kubernetes.io/version: v1.11.0
        helm.sh/chart: celestia-app-0.1.2
        app.kubernetes.io/component: app
    spec:
      
      serviceAccountName: my-celestia-app
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-celestia-app
                    app.kubernetes.io/name: celestia-app
                    app.kubernetes.io/component: app
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 10001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: create-priv-validator-state
          image: busybox
          imagePullPolicy: IfNotPresent
          env:
            - name: CELESTIA_HOME
              value: /home/celestia
          command:
            - sh
            - -c
            - |
              if [[ ! -f ${CELESTIA_HOME}/data/priv_validator_state.json ]]
              then
                  mkdir -p ${CELESTIA_HOME}/data
                  cat <<EOF > ${CELESTIA_HOME}/data/priv_validator_state.json
              {
                "height": "0",
                "round": 0,
                "step": 0
              }
              EOF
              fi
          volumeMounts:
            - name: data
              mountPath: /home/celestia/data
        - name: download-genesis
          image: busybox
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              mkdir -p /genesis
              wget -O /genesis/genesis.json 
              if ! command -v jq &> /dev/null; then
                echo "jq not found, installing..."
                wget -O /bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                chmod +x /bin/jq
              fi
              if jq -e '.result.genesis' /genesis/genesis.json > /dev/null; then
                jq '.result.genesis' /genesis/genesis.json > /genesis/genesis.json.tmp
                mv /genesis/genesis.json.tmp /genesis/genesis.json
              fi
          volumeMounts:
            - name: genesis
              mountPath: /genesis
      containers:
        - name: app
          image: ghcr.io/celestiaorg/celestia-app:v1.11.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - celestia-appd
          args:
            - start
            - --home
            - $(CELESTIA_HOME)
          env:
            - name: CELESTIA_HOME
              value: /home/celestia
          envFrom:
          resources:
            limits:
              cpu: 2
              memory: 8Gi
            requests:
              cpu: 2
              memory: 8Gi
          ports:
            - name: api
              containerPort: 1317
            - name: grpc
              containerPort: 9090
            - name: p2p
              containerPort: 26656
            - name: rpc
              containerPort: 26657
            - name: prometheus
              containerPort: 26660
            - name: tracing
              containerPort: 26661
          volumeMounts:
            - name: data
              mountPath: /home/celestia/data
              readOnly: false
            - name: genesis
              mountPath: /home/celestia/config/genesis.json
              subPath: genesis.json
            - name: config-dir # This is needed so that the process has permissions to create files in the config directory
              mountPath: /home/celestia/config
            - name: apptoml
              mountPath: /home/celestia/config/app.toml
              subPath: app.toml
            - name: configtoml
              mountPath: /home/celestia/config/config.toml
              subPath: config.toml
            - name: clienttoml
              mountPath: /home/celestia/config/client.toml
              subPath: client.toml
      volumes:
        - name: genesis
          emptyDir: {}
        - name: config-dir
          emptyDir: {}
        - name: apptoml
          configMap:
            name: my-celestia-app-apptoml
        - name: clienttoml
          configMap:
            name: my-celestia-app-clienttoml
        - name: configtoml
          configMap:
            name: my-celestia-app-configtoml
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "250Gi"
