---
# Source: dragonfly-stack/charts/dragonfly/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-dragonfly-stack-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.6
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: my-dragonfly-stack-mysql
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-dragonfly-stack-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
---
# Source: dragonfly-stack/charts/nydus-snapshotter/templates/nydus-snapshotter/snapshotter-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-dragonfly-stack-nydus-snapshotter-sa
  namespace: default
---
# Source: dragonfly-stack/charts/dragonfly/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-dragonfly-stack-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.6
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "ZHJhZ29uZmx5LXJvb3Q="
  mysql-password: "ZHJhZ29uZmx5"
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-dragonfly-stack-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "ZHJhZ29uZmx5"
---
# Source: dragonfly-stack/charts/dragonfly/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.6
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: dragonfly-stack/charts/dragonfly/templates/client/client-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-client
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: client
data:
  dfdaemon.yaml: |-
    host:
      idc: ""
      location: ""
    server:
      cacheDir: /var/cache/dragonfly/dfdaemon/
      pluginDir: /var/lib/dragonfly/plugins/dfdaemon/
    download:
      concurrentPieceCount: 16
      pieceTimeout: 30s
      rateLimit: 20000000000
      server:
        socketPath: /var/run/dragonfly/dfdaemon.sock
    upload:
      rateLimit: 20000000000
      server:
        port: 4000
    manager:
      addrs:
      - http://my-dragonfly-stack-manager.default.svc.cluster.local:65003
    scheduler:
      announceInterval: 5m
      enableBackToSource: true
      maxScheduleCount: 5
      scheduleTimeout: 30s
    dynconfig:
      refreshInterval: 5m
    storage:
      dir: /var/lib/dragonfly/
      keep: false
      readBufferSize: 131072
      writeBufferSize: 131072
    gc:
      interval: 900s
      policy:
        distHighThresholdPercent: 80
        distLowThresholdPercent: 60
        taskTTL: 168h
    proxy:
      disableBackToSource: false
      prefetch: false
      readBufferSize: 32768
      registryMirror:
        addr: https://index.docker.io
      rules:
      - regex: blobs/sha256.*
      server:
        port: 4001
    security:
      enable: false
    health:
      server:
        port: 4003
    metrics:
      server:
        port: 4002
    stats:
      server:
        port: 4004
---
# Source: dragonfly-stack/charts/dragonfly/templates/manager/manager-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-manager
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: manager
data:
  manager.yaml: |-
    server:
      rest:
        addr: :8080
      grpc:
        advertiseIP: 
        port:
          start: 65003
          end: 65003
      workHome: 
      logDir: 
      cacheDir: 
      pluginDir: 
    auth:
      jwt:
        key: ZHJhZ29uZmx5Cg==
        maxRefresh: 48h
        realm: Dragonfly
        timeout: 48h
    database:
      mysql:
        user: dragonfly
        password: dragonfly
        host: my-dragonfly-stack-mysql.default.svc.cluster.local
        port: 3306
        dbname: manager
        migrate: true
      redis:
        addrs:
        - my-dragonfly-stack-redis-headless.default.svc.cluster.local:6379
        password: dragonfly
    cache:
      local:
        size: 200000
        ttl: 3m
      redis:
        ttl: 5m
    job:
      preheat:
        registryTimeout: 1m
      syncPeers:
        interval: 24h
        timeout: 10m
    objectStorage:
      accessKey: ""
      enable: false
      endpoint: ""
      name: s3
      region: ""
      s3ForcePathStyle: true
      secretKey: ""
    security:
      autoIssueCert: false
      caCert: ""
      caKey: ""
      certSpec:
        dnsNames:
        - dragonfly-manager
        - dragonfly-manager.dragonfly-system.svc
        - dragonfly-manager.dragonfly-system.svc.cluster.local
        validityPeriod: 87600h
      tlsPolicy: prefer
    network:
      enableIPv6: false
    metrics:
      enable: false
      addr: ":8000"
    console: false
    verbose: false
---
# Source: dragonfly-stack/charts/dragonfly/templates/scheduler/scheduler-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-scheduler
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: scheduler
data:
  scheduler.yaml: |-
    server:
      advertiseIP: ""
      advertisePort: 8002
      cacheDir: ""
      dataDir: ""
      listenIP: 0.0.0.0
      logDir: ""
      pluginDir: ""
      port: 8002
      workHome: ""
    scheduler:
      algorithm: default
      backToSourceCount: 200
      gc:
        hostGCInterval: 6h
        hostTTL: 1h
        peerGCInterval: 10s
        peerTTL: 24h
        pieceDownloadTimeout: 30m
        taskGCInterval: 30m
      networkTopology:
        cache:
          interval: 5m
          ttl: 5m
        collectInterval: 2h
        probe:
          count: 10
          queueLength: 5
      retryBackToSourceLimit: 5
      retryInterval: 700ms
      retryLimit: 7
    database:
      redis:
        addrs:
        - my-dragonfly-stack-redis-headless.default.svc.cluster.local:6379
        password: dragonfly
    resource:
      task:
        downloadTiny:
          scheme: http
          timeout: 1m
          tls:
            insecureSkipVerify: true
    dynconfig:
      refreshInterval: 1m
      type: manager
    host:
      idc: ""
      location: ""
    manager:
      addr: my-dragonfly-stack-manager.default.svc.cluster.local:65003
      schedulerClusterID: 1
      keepAlive:
        interval: 5s
    seedPeer:
      enable: true
    job:
      redis:
        addrs:
        - my-dragonfly-stack-redis-headless.default.svc.cluster.local:6379
        password: dragonfly
    storage:
      bufferSize: 100
      maxBackups: 10
      maxSize: 100
    security:
      autoIssueCert: false
      caCert: ""
      certSpec:
        dnsNames:
        - dragonfly-scheduler
        - dragonfly-scheduler.dragonfly-system.svc
        - dragonfly-scheduler.dragonfly-system.svc.cluster.local
        validityPeriod: 4320h
      tlsPolicy: prefer
      tlsVerify: false
    network:
      enableIPv6: false
    metrics:
      enable: false
      addr: ":8000"
      enableHost: false
    console: false
    verbose: false
---
# Source: dragonfly-stack/charts/dragonfly/templates/seed-client/seed-client-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-seed-client
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: seed-client
data:
  dfdaemon.yaml: |-
    host:
      idc: ""
      location: ""
    server:
      cacheDir: /var/cache/dragonfly/dfdaemon/
      pluginDir: /var/lib/dragonfly/plugins/dfdaemon/
    download:
      concurrentPieceCount: 16
      pieceTimeout: 30s
      rateLimit: 20000000000
      server:
        socketPath: /var/run/dragonfly/dfdaemon.sock
    upload:
      rateLimit: 20000000000
      server:
        port: 4000
    manager:
      addrs:
      - http://my-dragonfly-stack-manager.default.svc.cluster.local:65003
    scheduler:
      announceInterval: 1m
      maxScheduleCount: 5
      scheduleTimeout: 30s
    seedPeer:
      clusterID: 1
      enable: true
      keepaliveInterval: 15s
      type: super
    dynconfig:
      refreshInterval: 1m
    storage:
      dir: /var/lib/dragonfly/
      keep: false
      readBufferSize: 131072
      writeBufferSize: 131072
    gc:
      interval: 900s
      policy:
        distHighThresholdPercent: 80
        distLowThresholdPercent: 60
        taskTTL: 168h
    proxy:
      disableBackToSource: false
      prefetch: false
      readBufferSize: 32768
      registryMirror:
        addr: https://index.docker.io
      rules:
      - regex: blobs/sha256.*
      server:
        port: 4001
    security:
      enable: false
    health:
      server:
        port: 4003
    metrics:
      server:
        port: 4002
    stats:
      server:
        port: 4004
---
# Source: dragonfly-stack/charts/nydus-snapshotter/templates/nydus-snapshotter/snapshotter-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-dragonfly-stack-nydus-snapshotter
  labels:
    app: my-dragonfly-stack-nydus-snapshotter
    chart: nydus-snapshotter-0.0.10
    release: my-dragonfly-stack
    heritage: Helm
    component: nydus-snapshotter
data:
  config.json: |-
    {
      "device": {
        "backend": {
          "type": "registry",
          "config": {
            "mirrors": [{"auth_through":false,"headers":{"X-Dragonfly-Registry":"https://index.docker.io"},"host":"http://127.0.0.1:4001","ping_url":"http://127.0.0.1:4003/healthy"}],
            "timeout": 5,
            "connect_timeout": 5,
            "retry_limit": 2
          }
        },
        "cache": {
          "type": "blobcache",
          "config": {
            "work_dir": "/var/lib/nydus/cache/"
          }
        }
      },
      "mode": "direct",
      "digest_validate": false,
      "iostats_files": false,
      "enable_xattr": true,
      "fs_prefetch": {
        "enable": true,
        "threads_count": 8,
        "merging_size": 1048576,
        "prefetch_all": true
      }
    }
---
# Source: dragonfly-stack/charts/nydus-snapshotter/templates/nydus-snapshotter/snapshotter-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-dragonfly-stack-nydus-snapshotter-role
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: dragonfly-stack/charts/nydus-snapshotter/templates/nydus-snapshotter/snapshotter-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-dragonfly-stack-nydus-snapshotter-role-binding
roleRef:
  kind: ClusterRole
  name: my-dragonfly-stack-nydus-snapshotter-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: my-dragonfly-stack-nydus-snapshotter-sa
  namespace: default
---
# Source: dragonfly-stack/charts/dragonfly/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.6
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/component: primary
---
# Source: dragonfly-stack/charts/dragonfly/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.6
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/component: primary
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-dragonfly-stack
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/component: master
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/component: replica
---
# Source: dragonfly-stack/charts/dragonfly/templates/manager/manager-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-manager
  labels:
    app: dragonfly
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: manager
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: http-rest
      protocol: TCP
      targetPort: 8080
    - port: 65003
      name: http-grpc
      protocol: TCP
      targetPort: 65003
  selector:
    app: my-dragonfly-stack
    release: my-dragonfly-stack
    component: manager
---
# Source: dragonfly-stack/charts/dragonfly/templates/scheduler/scheduler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-scheduler
  labels:
    app: dragonfly
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: scheduler
spec:
  type: ClusterIP
  ports:
    - port: 8002
      name: http-grpc
      protocol: TCP
      targetPort: 8002
  selector:
    app: my-dragonfly-stack
    release: my-dragonfly-stack
    component: scheduler
---
# Source: dragonfly-stack/charts/dragonfly/templates/seed-client/seed-client-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-dragonfly-stack-seed-client
  labels:
    app: dragonfly
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: seed-client
spec:
  type: ClusterIP
  ports:
    - port: 4001
      name: http-proxy
      protocol: TCP
      targetPort: 4001
    - port: 4003
      name: http-health
      protocol: TCP
      targetPort: 4003
    - port: 4004
      name: http-stats
      protocol: TCP
      targetPort: 4004
  selector:
    app: my-dragonfly-stack
    release: my-dragonfly-stack
    component: seed-client
---
# Source: dragonfly-stack/charts/dragonfly/templates/client/client-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-dragonfly-stack-client
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: client
  annotations:
spec:
  selector:
    matchLabels:
      app: my-dragonfly-stack
      component: "client"
      release: my-dragonfly-stack
  template:
    metadata:
      labels:
        app: my-dragonfly-stack
        component: "client"
        release: my-dragonfly-stack
      annotations:
        checksum/config: b089f515a401e2e6dceb5371988ae7719b9f18671bcef72b8008b058a9fa98e8
    spec:
      hostNetwork: true
      dnsPolicy: "ClusterFirstWithHostNet"
      hostPID: true
      hostIPC: true
      initContainers:
      - name: wait-for-scheduler
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nslookup my-dragonfly-stack-scheduler.default.svc.cluster.local && nc -vz my-dragonfly-stack-scheduler.default.svc.cluster.local 8002; do echo waiting for scheduler; sleep 2; done;']
      containers:
      - name: client
        image: docker.io/dragonflyoss/client:v0.1.82
        imagePullPolicy: "IfNotPresent"
        args:
        - --log-level=info
        resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "0"
              memory: "0"
        env:
        ports:
        - containerPort: 4000
          protocol: TCP
        - containerPort: 4003
          protocol: TCP
        - containerPort: 4002
          protocol: TCP
        - containerPort: 4004
          protocol: TCP
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:4000"]
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:4000"]
          initialDelaySeconds: 15
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: "/etc/dragonfly"
        - mountPath: /var/lib/dragonfly/
          name: storage
        - mountPath: /var/log/dragonfly/dfdaemon/
          name: logs
      volumes:
      - name: config
        configMap:
          name: my-dragonfly-stack-client
      - hostPath:
          path: /var/lib/dragonfly/
          type: DirectoryOrCreate
        name: storage
      - emptyDir: {}
        name: logs
---
# Source: dragonfly-stack/charts/nydus-snapshotter/templates/nydus-snapshotter/snapshotter-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-dragonfly-stack-nydus-snapshotter
  labels:
    app: my-dragonfly-stack-nydus-snapshotter
    chart: nydus-snapshotter-0.0.10
    release: my-dragonfly-stack
    heritage: Helm
    component: "nydus-snapshotter"
  annotations:
spec:
  selector:
    matchLabels:
      app: my-dragonfly-stack-nydus-snapshotter
      component: "nydus-snapshotter"
      release: my-dragonfly-stack
  template:
    metadata:
      labels:
        app: my-dragonfly-stack-nydus-snapshotter
        component: "nydus-snapshotter"
        release: my-dragonfly-stack
    spec:
      serviceAccountName: my-dragonfly-stack-nydus-snapshotter-sa
      hostNetwork: true
      hostPID: true
      dnsPolicy: "ClusterFirstWithHostNet"
      containers:
      - name: nydus-snapshotter
        image: ghcr.io/containerd/nydus-snapshotter:v0.9.0
        imagePullPolicy: Always
        env:
        - name: ENABLE_NYDUS_OVERLAY
          value: "false"
        resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: "0"
              memory: "0"
        volumeMounts:
        - name: config
          mountPath: "/etc/nydus/"
        - name: nydus-lib
          mountPath: "/var/lib/containerd-nydus"
          mountPropagation: Bidirectional
        - name: nydus-run
          mountPath: "/run/containerd-nydus"
          mountPropagation: Bidirectional
        - name: fuse
          mountPath: "/dev/fuse"

        securityContext:
          privileged: true

      initContainers:

      volumes:
      - name: config
        configMap:
          name: my-dragonfly-stack-nydus-snapshotter
      - name: nydus-run
        hostPath:
          path: /run/containerd-nydus
          type: DirectoryOrCreate
      - name: nydus-lib
        hostPath:
          path: /var/lib/containerd-nydus
          type: DirectoryOrCreate
      - name: fuse
        hostPath:
          path: /dev/fuse
---
# Source: dragonfly-stack/charts/dragonfly/templates/manager/manager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: manager
  name: my-dragonfly-stack-manager
  annotations:
spec:
  strategy:
    type: RollingUpdate
  replicas: 3
  selector:
    matchLabels:
      app: my-dragonfly-stack
      component: manager
      release: my-dragonfly-stack
  template:
    metadata:
      labels:
        app: my-dragonfly-stack
        component: manager
        release: my-dragonfly-stack
      annotations:
        checksum/config: 06147a4ec4bfed08ca8c2af91a6f769b36b1d1e5bb1965c84b5b5dd9ba9a27f3
    spec:
      initContainers:
      - name: wait-for-redis
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nslookup my-dragonfly-stack-redis-headless.default.svc.cluster.local && nc -vz my-dragonfly-stack-redis-headless.default.svc.cluster.local 6379; do echo waiting for redis; sleep 2; done;']
      - name: wait-for-mysql
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nslookup my-dragonfly-stack-mysql.default.svc.cluster.local && nc -vz my-dragonfly-stack-mysql.default.svc.cluster.local 3306; do echo waiting for mysql; sleep 2; done;']
      containers:
      - name: manager
        image: docker.io/dragonflyoss/manager:v2.1.49
        imagePullPolicy: "IfNotPresent"
        resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "0"
              memory: "0"
        env:
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 65003
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: "/etc/dragonfly"
        - mountPath: /var/log/dragonfly/manager
          name: logs
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:65003"]
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:65003"]
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: my-dragonfly-stack-manager
          items:
          - key: manager.yaml
            path: manager.yaml
      - emptyDir: {}
        name: logs
---
# Source: dragonfly-stack/charts/dragonfly/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-dragonfly-stack-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.6
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: my-dragonfly-stack
      app.kubernetes.io/component: primary
  serviceName: my-dragonfly-stack-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: d70babfd9edd3ade19606b852155c1aab60f6339a38a02bc3ee11654edf2cf8f
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-9.4.6
        app.kubernetes.io/instance: my-dragonfly-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-dragonfly-stack-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: my-dragonfly-stack
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.31-debian-11-r30
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-dragonfly-stack-mysql
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "dragonfly"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-dragonfly-stack-mysql
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: "manager"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: my-dragonfly-stack-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: my-dragonfly-stack
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-dragonfly-stack-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-dragonfly-stack
      app.kubernetes.io/component: master
  serviceName: my-dragonfly-stack-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.4.3
        app.kubernetes.io/instance: my-dragonfly-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: a2aa0d2109001f8d2d383d055affd030f4fae741149ad47a9728d229759b7711
        checksum/health: cf89f35bd7f8de182d5fea3bf9efdd26c99c67c145392d739aa66e1808c734d1
        checksum/scripts: fc04fbb1735d7279cf6bec12a38f887d3be0a8b7e979276b1efce3e283c51dea
        checksum/secret: c67a93e01b1eb2f0fe93d7cda74c4a1c4c0213413418dfb478c13ad40d3f3223
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-dragonfly-stack-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-dragonfly-stack
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.8-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-dragonfly-stack-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-dragonfly-stack-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-dragonfly-stack-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-dragonfly-stack-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-dragonfly-stack
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dragonfly-stack/charts/dragonfly/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-dragonfly-stack-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.3
    app.kubernetes.io/instance: my-dragonfly-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-dragonfly-stack
      app.kubernetes.io/component: replica
  serviceName: my-dragonfly-stack-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.4.3
        app.kubernetes.io/instance: my-dragonfly-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: a2aa0d2109001f8d2d383d055affd030f4fae741149ad47a9728d229759b7711
        checksum/health: cf89f35bd7f8de182d5fea3bf9efdd26c99c67c145392d739aa66e1808c734d1
        checksum/scripts: fc04fbb1735d7279cf6bec12a38f887d3be0a8b7e979276b1efce3e283c51dea
        checksum/secret: c67a93e01b1eb2f0fe93d7cda74c4a1c4c0213413418dfb478c13ad40d3f3223
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-dragonfly-stack-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-dragonfly-stack
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.8-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: my-dragonfly-stack-redis-master-0.my-dragonfly-stack-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-dragonfly-stack-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-dragonfly-stack-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: my-dragonfly-stack-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-dragonfly-stack-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-dragonfly-stack-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-dragonfly-stack
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dragonfly-stack/charts/dragonfly/templates/scheduler/scheduler-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-dragonfly-stack-scheduler
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: scheduler
  annotations:
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-dragonfly-stack
      release: my-dragonfly-stack
      component: scheduler
  serviceName: scheduler
  template:
    metadata:
      labels:
        app: my-dragonfly-stack
        release: my-dragonfly-stack
        component: scheduler
      annotations:
        checksum/config: 633b4c98694a4ba0454a95807a2244b5685b365b053d9309cb7d64be87e51925
    spec:
      initContainers:
      - name: wait-for-manager
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nslookup my-dragonfly-stack-manager.default.svc.cluster.local && nc -vz my-dragonfly-stack-manager.default.svc.cluster.local 8080; do echo waiting for manager; sleep 2; done;']
      containers:
      - name: scheduler
        image: docker.io/dragonflyoss/scheduler:v2.1.49
        imagePullPolicy: "IfNotPresent"
        resources:
            limits:
              cpu: "4"
              memory: 8Gi
            requests:
              cpu: "0"
              memory: "0"
        env:
        ports:
        - containerPort: 8002
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: "/etc/dragonfly"
        - mountPath: /var/log/dragonfly/scheduler
          name: logs
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8002"]
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8002"]
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: my-dragonfly-stack-scheduler
          items:
          - key: scheduler.yaml
            path: scheduler.yaml
      - emptyDir: {}
        name: logs
---
# Source: dragonfly-stack/charts/dragonfly/templates/seed-client/seed-client-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: my-dragonfly-stack
    chart: dragonfly-1.1.67
    release: my-dragonfly-stack
    heritage: Helm
    component: seed-client
  name: my-dragonfly-stack-seed-client
  annotations:
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-dragonfly-stack
      component: seed-client
      release: my-dragonfly-stack
  serviceName: seed-client
  template:
    metadata:
      labels:
        app: my-dragonfly-stack
        component: seed-client
        release: my-dragonfly-stack
      annotations:
        checksum/config: 90070a172a690e163764e0431bfe0f0827f3c25cde75eca9d3e4105980760ca7
    spec:
      initContainers:
      - name: wait-for-manager
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nslookup my-dragonfly-stack-manager.default.svc.cluster.local && nc -vz my-dragonfly-stack-manager.default.svc.cluster.local 8080; do echo waiting for manager; sleep 2; done;']
      containers:
      - name: seed-client
        image: docker.io/dragonflyoss/client:v0.1.82
        imagePullPolicy: "IfNotPresent"
        args:
        - --log-level=info
        resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "0"
              memory: "0"
        env:
        ports:
        - containerPort: 4000
          protocol: TCP
        - containerPort: 4001
          protocol: TCP
        - containerPort: 4003
          protocol: TCP
        - containerPort: 4002
          protocol: TCP
        - containerPort: 4004
          protocol: TCP
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:4000"]
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:4000"]
          initialDelaySeconds: 15
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: "/etc/dragonfly"
        - name: storage
          mountPath: /var/lib/dragonfly/
        - mountPath: /var/log/dragonfly/dfdaemon/
          name: logs
      volumes:
      - name: config
        configMap:
          name: my-dragonfly-stack-seed-client
      - emptyDir: {}
        name: logs
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
