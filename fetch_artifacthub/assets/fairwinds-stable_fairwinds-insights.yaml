---
# Source: fairwinds-insights/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-fairwinds-insights-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.18
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: fairwinds-insights/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-fairwinds-insights-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.18
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: fairwinds-insights/templates/pdb-reportjob.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-fairwinds-insight-reportjob-pdb
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: reportjob
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fairwinds-insights
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/component: reportjob
---
# Source: fairwinds-insights/templates/pdb-timescale.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-fairwinds-insight-timescale-pdb
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: timescaledb
---
# Source: fairwinds-insights/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "minio-sa"
---
# Source: fairwinds-insights/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-fairwinds-insights-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.18
automountServiceAccountToken: false
---
# Source: fairwinds-insights/charts/timescale/templates/serviceaccount-timescaledb.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: timescale
  namespace: default
  labels:
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: rbac
---
# Source: fairwinds-insights/templates/cronjob-executor.rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-fairwinds-insight-cronjob-executor
  labels:
    app: fairwinds-insights
---
# Source: fairwinds-insights/templates/rbac-automated-pr-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-fairwinds-insight-automated-pr-job
  labels:
    app: my-fairwinds-insight-automated-pr-job
---
# Source: fairwinds-insights/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-fairwinds-insight-insights
---
# Source: fairwinds-insights/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-fairwinds-insights-fw-minio
  labels:
    app: fw-minio
    chart: minio-5.0.10
    release: my-fairwinds-insights
    heritage: Helm
type: Opaque
data:
  rootUser: "WTZuTVRlM0ZaZkZSMU1DU1NqYlU="
  rootPassword: "SDNDWFVvNFRBdGZ2Vzd4eHRpaGZORHk3aUxBQ1Vxc0VFeXhvdVFTNg=="
---
# Source: fairwinds-insights/templates/secret.yml
apiVersion: v1
data:
    postgresql-password: NXduenk5QWFJRVduSnJMTWVTWE03TU1vM3FEek5HODk=
kind: Secret
metadata:
    name: fwinsights-postgresql
type: Opaque
---
# Source: fairwinds-insights/templates/secret.yml
apiVersion: v1
kind: Secret
metadata:
    name: fwinsights-timescale
type: Opaque
stringData:
    PATRONI_SUPERUSER_PASSWORD: postgres
    PATRONI_REPLICATION_PASSWORD: postgres
    PATRONI_admin_PASSWORD: postgres
---
# Source: fairwinds-insights/templates/secret.yml
apiVersion: v1
kind: Secret
metadata:
    name: fwinsights-timescale-ca
type: kubernetes.io/tls
stringData:
    tls.crt: "-----BEGIN CERTIFICATE-----\nMIIDEzCCAfugAwIBAgIQHpRA9et1+ySgHHbPjoT90DANBgkqhkiG9w0BAQsFADAU\nMRIwEAYDVQQDEwl0aW1lc2NhbGUwHhcNMjQwOTE2MDg0MzIxWhcNMjkwOTE2MDg0\nMzIxWjAUMRIwEAYDVQQDEwl0aW1lc2NhbGUwggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDlsKsogUIPQysIyrud5EX67efD71+I+VsFwqBV9VSYJRwSTTf0\nl37A5sRZ0/YAB2js3rAtMvcPb0ouGLRgtnPuweHNC+NkYcdyhRK/0o3PIUz7LGMf\n9AgtTNQwGWtJ7cKqC214jLmQUzaE9DwKPAh/L/eBLDzxeGGsYLx1yv2jC+TQqVE8\nYWbHmtj3HvVdENqRaq8emor8b9e7n/+bbZtALSpnmNQNybZzjFfTqn09VMCXJzWo\nSBoV5rouDg2NBS/6VLsWvrpeff3byOUFwOI5ifo88NudwfPYdbJ9dXfr4bCtUYm8\nu9PDfQ46fF+O7pWEpECwWeuGk7W80hUDvPEbAgMBAAGjYTBfMA4GA1UdDwEB/wQE\nAwICpDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDwYDVR0TAQH/BAUw\nAwEB/zAdBgNVHQ4EFgQUZ+r6icQ1MvR2LSDY6ZMIl/3daF4wDQYJKoZIhvcNAQEL\nBQADggEBAA3s0sKdUbxmLoStxkHJDz9EK2Si5A5in1TWx4wiakHgJGGGln1jdesT\nj+o9C8yS4+DGgjrfZ8LWOcQZPoOwkWhkFCjglOSsBdI1HYIKyC/bnZHfnPiYkIDN\nrmB7NGdSroOxiO8qvVR9R14Cak2sr9wYcxiovKSufAZEKQDMdCEsACEJbmsPLc8a\nSEKCM92pbVIkhUaGpqYsYJHgm3LdF0pCY7UwH8E8Vkcbp5+ZIEWcojSElW7Gixo3\nwQJ9kg8K+u7QbraopAXr3mR08/iUnK0ThpdeABXV9S5kUMAthzQ2aVnTuFXua2oP\nUYcjmUrk1Spc6d9oqL/WD4OBcEfJExg=\n-----END CERTIFICATE-----\n"
    tls.key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA5bCrKIFCD0MrCMq7neRF+u3nw+9fiPlbBcKgVfVUmCUcEk03\n9Jd+wObEWdP2AAdo7N6wLTL3D29KLhi0YLZz7sHhzQvjZGHHcoUSv9KNzyFM+yxj\nH/QILUzUMBlrSe3CqgtteIy5kFM2hPQ8CjwIfy/3gSw88XhhrGC8dcr9owvk0KlR\nPGFmx5rY9x71XRDakWqvHpqK/G/Xu5//m22bQC0qZ5jUDcm2c4xX06p9PVTAlyc1\nqEgaFea6Lg4NjQUv+lS7Fr66Xn3928jlBcDiOYn6PPDbncHz2HWyfXV36+GwrVGJ\nvLvTw30OOnxfju6VhKRAsFnrhpO1vNIVA7zxGwIDAQABAoIBACB0MfrrKJZXe0Em\nxBOvKWQnMVQyAmGsOfw6X8VFgMpuk+TSHFHnBfXjpWK73EpswZqWbHY2eUopA2Y3\n/2Sa4w6dPnZmc56/YhsASoHoEjluDx5+SxM8u9sKvAB/1vT/Lz4vlywtVhraZx2q\nFMGtcdXmxSXvRj0oMUTV9kr+f5AF3ZNUjLAuoywhmeFW1/vJsBuT87H3DlDHx2Dh\ns5wRIaooMZbqofzM/6d0jJ/kmDNH39sLapLct9O2FYl2OlaJ1F8luIJtnV5qfLaG\nawUl2JbYpnUxpLDPiU25vHvun/LEuxaDEvT/JvPghwqmVO6K0YZ9Lhr+HAmbdbL+\no4CFDqECgYEA/8UyebKOXW8lsvZDWoaLMrQLiQJcitWNZtgDyUwb4vp1Y8jFyN31\n31aQiZkaC0TBP0M2sOaP73qcJe7CKAnLTEp2p0fRdMq2C4fMPQEpok8Rg8OTfxf/\nhjbfAGCB3U5QXAAct1ppiOqfMWF0e3JAGI0bZWkYoHuE5CRGQ6HXfl8CgYEA5eV5\nt3LzyXZnfbmfTOoo4Ryfo5G3TXQ8HpjTfXn73AKnMgVwfTa2MQE4vBS2Cnf3Rmq9\nYmm2/HtHq18morL+ULHpJSpuU/PFbWEPTVoMMtkTIfAEgtO23oBwtGOji4mk2kgv\nJDaxgYCGa9rDHrJrB9K/Bp9F9uWx1mTIriEwjsUCgYEAqLuMQBLWrrcblMO3zWnD\nPPDgR0PCj2iwvy802ECYiRYYCXszV/9uLCesdMoHD3YNUtHhq7R/Mkqd5rxrZASK\nFMtvGY5clQMCM/sjdv9kWwp0kIueq5LGZOGgHlyMb9YxV3BPgXpo8wVtfiM/uAy4\nUjoM38sEjyLNmcCAhi+nvVsCgYBi+2dphdPTBOjQJ/CflB4ftkxBh8atUYNlBRXh\n63h2JKpKDi99qeXNuaHs0NoELdzIc8KwsaV4lbeo4GHpIToAEmm4d8li2g1B581H\n16Jy7iWfshCvJ2qP6Cseb9wFgzD4TqYFaIsKoATAQUNLXzRX/PQEbOUZxZHJJkGF\nP4MBpQKBgQCUC5vCMJlReMP1kGCa3wieIYk37XPUavU2OxgFepNh8CdmnInu2cd6\nKpRBSskQEifSSFhxBtKzEru4V0zWyKd3DVPBwnWm7YEuTggYgudprX/6Ajv1UuYi\nygr2Zqhf5A2LnWpb9bPQjaVUqkrI/t1plzWwyBpnF6jolp5qLS8vlA==\n-----END RSA PRIVATE KEY-----\n"
---
# Source: fairwinds-insights/templates/secret.yml
apiVersion: v1
kind: Secret
metadata:
    name: fwinsights-postgresql-ca
type: kubernetes.io/tls
stringData:
    tls.crt: "-----BEGIN CERTIFICATE-----\nMIIDFDCCAfygAwIBAgIRANBG4SkfLLXxdIkoQBcQHcAwDQYJKoZIhvcNAQELBQAw\nFDESMBAGA1UEAxMJdGltZXNjYWxlMB4XDTI0MDkxNjA4NDMyMVoXDTI5MDkxNjA4\nNDMyMVowFDESMBAGA1UEAxMJdGltZXNjYWxlMIIBIjANBgkqhkiG9w0BAQEFAAOC\nAQ8AMIIBCgKCAQEA9Yi/nAZtZPRQ0TPlzs5JHVUeMQ6lqsR60cPCLw6YHE5WCGhW\nmyxMxnxr3sLLPWroChlWyYnXXhgrmDJN0C9ppsyFiZxkQssL0yOEvGTRAu1yFWSu\nQGFopuvTkgM0e99Fc6a99XYB0mZ+VyE+e1YnFPZxV8yg+KpbtzS5lfUNhWIMsZX4\nF5lHQ5qZHoBZEkllet7F3JAbdX0vzSVNV3cJ9kHgD5WxJHaagScrG3QHKKfGXGuB\nq9L87zgHuQs/4jPFul5Tm/vA4Thgn/kgK2c/JHJ+eHcLlJmxgYXlzW4mtUCpjCDl\nBB/y/lJ8tf4nOgTRI6rRA3qy0bit0DVAJ+gHRQIDAQABo2EwXzAOBgNVHQ8BAf8E\nBAMCAqQwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMA8GA1UdEwEB/wQF\nMAMBAf8wHQYDVR0OBBYEFA7Wbgk2DVa/abH9Ieub13ZGBeOOMA0GCSqGSIb3DQEB\nCwUAA4IBAQAc/AhikVz0x6DBuLebHrRWEIVlKbv02oLoASbN44Tx4h8AdkeL4KFm\ngrT2Ji2+qQ427zS1d7VTI/qtOOoCWLVBfUMqHYo0GpJIiQfmSzS1AbL60cxEScK6\nBOt3hib0/UypJL1OzbyYJBPU7eCRDvMgTJed1ejQYVVyv4w1jCB5CM1Ainc2jKXm\nIFAZZckL/aE3d9xRaF30BThI3ds3g29GlsW2FCkKCavr9sxaidgZGl4ngpEvr80P\nNpUGaUz5FZ0vyICnzDvvKL4pw3zXMiN/uwuWvNc8hzrVnduKXOie3wykelzhbhQj\nekLgxn6Qgwdvc0r83dC2maqkHCSbAMZ9\n-----END CERTIFICATE-----\n"
    tls.key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA9Yi/nAZtZPRQ0TPlzs5JHVUeMQ6lqsR60cPCLw6YHE5WCGhW\nmyxMxnxr3sLLPWroChlWyYnXXhgrmDJN0C9ppsyFiZxkQssL0yOEvGTRAu1yFWSu\nQGFopuvTkgM0e99Fc6a99XYB0mZ+VyE+e1YnFPZxV8yg+KpbtzS5lfUNhWIMsZX4\nF5lHQ5qZHoBZEkllet7F3JAbdX0vzSVNV3cJ9kHgD5WxJHaagScrG3QHKKfGXGuB\nq9L87zgHuQs/4jPFul5Tm/vA4Thgn/kgK2c/JHJ+eHcLlJmxgYXlzW4mtUCpjCDl\nBB/y/lJ8tf4nOgTRI6rRA3qy0bit0DVAJ+gHRQIDAQABAoIBAFw4U3dftqDPXrdk\nnbDyK+X3fVKBpNmh2FuHAh04hwtCpO+deMHpfqCiRMWzNjDIQYThhYZG3nw56c3N\nPwqtdCow8QsBkWrA5p0T3xv/Zb2Kv2mnmgcWTv863gkeaQ0JjAVnIDvcaczDsDo7\ng0NB1YX7FhEbC266VZ5XEElxc/WfZLy4XWF1SXKduNZgUSRM+aMVNLZV2ZaR1aMh\nVCd1CtWMpiZdX5Ak/SwLTiwo3dk7K3tXzrVwsCfepsaEMAp38zfvAywJ2R7zQWnD\njj2kfsBx9jUEHBABKLmHg1WpZGKfgA/Lx/wlAWijhO5oLW/SwVGJk0DtWSU8llqg\nysFfcjUCgYEA+O2wRMtoWftGkHbOcxqEEA3RW1+hNZ9dcV5s3+SD/wbhJXGROCS3\nLo3ZD8DLd21S53ykwGZNdiQX2B7aIm94z1/S5faAMicGCJ2lOpk0z8ytxjSGAKhy\nYPp2lSf09DFijiep1/6Mse05LRzrPnErARyG4BEJ9BPqSu4Acl4k3mMCgYEA/IJg\nC/327RipnK328InUWihPGFow2JUOYkRBxOVUDWogPZ4YYRq9pn4ZyAiZywr5zKMm\nnNunehQjCg5Ustb076LqvqRxQnxfyelWIfvK6FlveShOF5QKhPKYVAOjq804nMxv\n5dha+8jcLuk3ZQuzeeQFKK0gocKvyGhjPJGmwDcCgYBkRltbWxUOKkqipzlC5MuO\nLALJ7Bvkne3mXUM+ba8+bGcFzlnRY/jmp/1oeyF7Wm6rEWrMlmldzexNAyCb/ouL\n/e3W9RVvHokvr1F/6Xd8vdbCoSXZ3gE1T6+1JgNm2v34hcHFYKUMh6MgqSWaYbwR\nFoy+dh6sU9ltlbJYX9Q6QQKBgGZKloglIMPZytQq8S9uVnUTgT83QjRq5cHPLumJ\nkWxBwr/TbMLhp1RsHxuWyF6lmp5YtYqzvPvKbotjVNKCHAV79Sa3zR4G7nMIMJlh\nvEg1+t+VAVWx5jUHZcgbFVHCuB1lACuXYvw+2VuzpHotrE5DngdlYyPEj5tbFmBy\nDKAvAoGBAITHyemXW7QfQBqE0xNKF6MmiLwIeBHUWlVhYtEJDddhOCiEa4g3JB7b\no5GypC/uktfLilXeOHwJrUidVGM/FRMqgIax42ujNEIYE78J64MP2RzsL/bVG60R\nl8gKriDUNRKRyxiO0R1rGmfSp9dIKSZrk/Va2LAyH+SjX9aRvjzC\n-----END RSA PRIVATE KEY-----\n"
---
# Source: fairwinds-insights/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-fairwinds-insights-fw-minio
  labels:
    app: fw-minio
    chart: minio-5.0.10
    release: my-fairwinds-insights
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} stat myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
      OBJECTLOCKING=$5
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
    # Create the bucket if it does not exist and set objectlocking if enabled (NOTE: versioning will be not changed if OBJECTLOCKING is set because it enables versioning to the Buckets created)
    if ! checkBucketExists $BUCKET ; then
        if [ ! -z $OBJECTLOCKING ] ; then
          if [ $OBJECTLOCKING = true ] ; then
              echo "Creating bucket with OBJECTLOCKING '$BUCKET'"
              ${MC} mb --with-lock myminio/$BUCKET
          elif [ $OBJECTLOCKING = false ] ; then
                echo "Creating bucket '$BUCKET'"
                ${MC} mb myminio/$BUCKET
          fi
      elif [ -z $OBJECTLOCKING ] ; then
            echo "Creating bucket '$BUCKET'"
            ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."  
      fi
      fi
    
    
      # set versioning for bucket if objectlocking is disabled or not set
      if [ -z $OBJECTLOCKING ] ; then
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi
    
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} anonymous set $POLICY myminio/$BUCKET
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
    # Create the buckets
    createBucket reports "none" false false false
    
  add-user: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # AccessKey and secretkey credentials file are added to prevent shell execution errors caused by special characters.
    # Special characters for example : ',",<,>,{,}
    MINIO_ACCESSKEY_SECRETKEY_TMP="/tmp/accessKey_and_secretKey_tmp"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkUserExists ()
    # Check if the user exists, by using the exit code of `mc admin user info`
    checkUserExists() {
      CMD=$(${MC} admin user info myminio $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) > /dev/null 2>&1)
      return $?
    }
    
    # createUser ($policy)
    createUser() {
      POLICY=$1
      #check accessKey_and_secretKey_tmp file
      if [[ ! -f $MINIO_ACCESSKEY_SECRETKEY_TMP ]];then
        echo "credentials file does not exist"
        return 1
      fi
      if [[ $(cat $MINIO_ACCESSKEY_SECRETKEY_TMP|wc -l) -ne 2 ]];then
        echo "credentials file is invalid"
        rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
        return 1
      fi
      USER=$(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP)
      # Create the user if it does not exist
      if ! checkUserExists ; then
        echo "Creating user '$USER'"
        cat $MINIO_ACCESSKEY_SECRETKEY_TMP | ${MC} admin user add myminio
      else
        echo "User '$USER' already exists."
      fi
      #clean up credentials files.
      rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
    
      # set policy for user
      if [ ! -z $POLICY -a $POLICY != " " ] ; then
          echo "Adding policy '$POLICY' for '$USER'"
          set +e ; # policy already attach errors out, allow it.
          ${MC} admin policy attach myminio $POLICY --user=$USER
          set -e
      else
          echo "User '$USER' has no policy attached."
      fi
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
    # Create the users
    echo console > $MINIO_ACCESSKEY_SECRETKEY_TMP
    echo console123 >> $MINIO_ACCESSKEY_SECRETKEY_TMP
    createUser consoleAdmin
    
  add-policy: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkPolicyExists ($policy)
    # Check if the policy exists, by using the exit code of `mc admin policy info`
    checkPolicyExists() {
      POLICY=$1
      CMD=$(${MC} admin policy info myminio $POLICY > /dev/null 2>&1)
      return $?
    }
    
    # createPolicy($name, $filename)
    createPolicy () {
      NAME=$1
      FILENAME=$2
    
      # Create the name if it does not exist
      echo "Checking policy: $NAME (in /config/$FILENAME.json)"
      if ! checkPolicyExists $NAME ; then
        echo "Creating policy '$NAME'"
      else
        echo "Policy '$NAME' already exists."
      fi
      ${MC} admin policy create myminio $NAME /config/$FILENAME.json
    
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
  add-svcacct: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # AccessKey and secretkey credentials file are added to prevent shell execution errors caused by special characters.
    # Special characters for example : ',",<,>,{,}
    MINIO_ACCESSKEY_SECRETKEY_TMP="/tmp/accessKey_and_secretKey_svcacct_tmp"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 2 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkSvcacctExists ()
    # Check if the svcacct exists, by using the exit code of `mc admin user svcacct info`
    checkSvcacctExists() {
      CMD=$(${MC} admin user svcacct info myminio $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) > /dev/null 2>&1)
      return $?
    }
    
    # createSvcacct ($user)
    createSvcacct () {
      USER=$1
      FILENAME=$2
      #check accessKey_and_secretKey_tmp file
      if [[ ! -f $MINIO_ACCESSKEY_SECRETKEY_TMP ]];then
        echo "credentials file does not exist"
        return 1
      fi
      if [[ $(cat $MINIO_ACCESSKEY_SECRETKEY_TMP|wc -l) -ne 2 ]];then
        echo "credentials file is invalid"
        rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
        return 1
      fi
      SVCACCT=$(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP)
      # Create the svcacct if it does not exist
      if ! checkSvcacctExists ; then
        echo "Creating svcacct '$SVCACCT'"
        # Check if policy file is define
        if [ -z $FILENAME ]; then
          ${MC} admin user svcacct add --access-key $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) --secret-key $(tail -n1 $MINIO_ACCESSKEY_SECRETKEY_TMP) myminio $USER
        else
          ${MC} admin user svcacct add --access-key $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) --secret-key $(tail -n1 $MINIO_ACCESSKEY_SECRETKEY_TMP) --policy /config/$FILENAME.json myminio $USER
        fi
      else
        echo "Svcacct '$SVCACCT' already exists."
      fi
      #clean up credentials files.
      rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
  custom-command: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # runCommand ($@)
    # Run custom mc command
    runCommand() {
      ${MC} "$@"
      return $?
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
---
# Source: fairwinds-insights/charts/timescale/templates/configmap-patroni.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.---
apiVersion: v1
kind: ConfigMap
metadata:
  name: timescale-patroni
  namespace: default
  labels:
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: patroni
data:
  patroni.yaml: |
    bootstrap:
      dcs:
        loop_wait: 10
        maximum_lag_on_failover: 33554432
        postgresql:
          parameters:
            archive_command: /etc/timescaledb/scripts/pgbackrest_archive.sh %p
            archive_mode: "on"
            archive_timeout: 1800s
            autovacuum_analyze_scale_factor: 0.02
            autovacuum_max_workers: 10
            autovacuum_naptime: 5s
            autovacuum_vacuum_cost_limit: 500
            autovacuum_vacuum_scale_factor: 0.05
            hot_standby: "on"
            log_autovacuum_min_duration: 1min
            log_checkpoints: "on"
            log_connections: "on"
            log_disconnections: "on"
            log_line_prefix: '%t [%p]: [%c-%l] %u@%d,app=%a [%e] '
            log_lock_waits: "on"
            log_min_duration_statement: 1s
            log_statement: ddl
            max_connections: 100
            max_prepared_transactions: 150
            shared_preload_libraries: timescaledb,pg_stat_statements
            ssl: "on"
            ssl_cert_file: /etc/certificate/tls.crt
            ssl_key_file: /etc/certificate/tls.key
            tcp_keepalives_idle: 900
            tcp_keepalives_interval: 100
            temp_file_limit: 1GB
            timescaledb.passfile: ../.pgpass
            unix_socket_directories: /var/run/postgresql
            unix_socket_permissions: "0750"
            wal_level: hot_standby
            wal_log_hints: "on"
          use_pg_rewind: true
          use_slots: true
        retry_timeout: 10
        ttl: 30
      method: restore_or_initdb
      post_init: /etc/timescaledb/scripts/post_init.sh
      restore_or_initdb:
        command: |
          /etc/timescaledb/scripts/restore_or_initdb.sh --encoding=UTF8 --locale=C.UTF-8
        keep_existing_recovery_conf: true
    kubernetes:
      role_label: role
      scope_label: cluster-name
      use_endpoints: true
    log:
      level: DEBUG
    postgresql:
      authentication:
        replication:
          username: standby
        superuser:
          username: postgres
      basebackup:
      - waldir: /var/lib/postgresql/wal/pg_wal
      callbacks:
        on_reload: /etc/timescaledb/scripts/patroni_callback.sh
        on_restart: /etc/timescaledb/scripts/patroni_callback.sh
        on_role_change: /etc/timescaledb/scripts/patroni_callback.sh
        on_start: /etc/timescaledb/scripts/patroni_callback.sh
        on_stop: /etc/timescaledb/scripts/patroni_callback.sh
      create_replica_methods: []
      listen: 0.0.0.0:5432
      pg_hba:
      - local     all             postgres                              peer
      - local     all             all                                   md5
      - hostnossl all,replication all                all                reject
      - hostssl   all             all                127.0.0.1/32       md5
      - hostssl   all             all                ::1/128            md5
      - hostssl   replication     standby            all                md5
      - hostssl   all             all                all                md5
      pgbackrest:
        command: /etc/timescaledb/scripts/pgbackrest_restore.sh
        keep_data: true
        no_master: true
        no_params: true
      recovery_conf:
        restore_command: /etc/timescaledb/scripts/pgbackrest_archive_get.sh %f "%p"
      use_unix_socket: true
    restapi:
      listen: 0.0.0.0:8008
...
---
# Source: fairwinds-insights/charts/timescale/templates/configmap-pgbackrest.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: timescale-pgbackrest
  namespace: default
  labels:
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: pgbackrest
data:
  pgbackrest.conf: |
    [global]
    compress-level=3
    compress-type=lz4
    process-max=4
    repo1-cipher-type=none
    repo1-path=/default/timescale/
    repo1-retention-diff=2
    repo1-retention-full=2
    spool-path=/var/run/postgresql
    start-fast=y

    [poddb]
    pg1-port=5432
    pg1-host-user=postgres
    pg1-path=/var/lib/postgresql/data
    pg1-socket-path=/var/run/postgresql

    link-all=y

    [global:archive-push]

    [global:archive-get]
...
---
# Source: fairwinds-insights/charts/timescale/templates/configmap-scripts.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.---
apiVersion: v1
kind: ConfigMap
metadata:
  name: timescale-scripts
  namespace: default
  labels:
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: scripts
data:
  tstune.sh: |-
    #!/bin/sh
    
    set -eu
    
    # Exit if required variable is not set externally
    : "$TSTUNE_FILE"
    : "$WAL_VOLUME_SIZE"
    : "$DATA_VOLUME_SIZE"
    : "$RESOURCES_CPU_REQUESTS"
    : "$RESOURCES_MEMORY_REQUESTS"
    : "$RESOURCES_CPU_LIMIT"
    : "$RESOURCES_MEMORY_LIMIT"
    
    # Figure out how many cores are available
    CPUS="$RESOURCES_CPU_REQUESTS"
    if [ "$RESOURCES_CPU_REQUESTS" -eq 0 ]; then
        CPUS="${RESOURCES_CPU_LIMIT}"
    fi
    # Figure out how much memory is available
    MEMORY="$RESOURCES_MEMORY_REQUESTS"
    if [ "$RESOURCES_MEMORY_REQUESTS" -eq 0 ]; then
        MEMORY="${RESOURCES_MEMORY_LIMIT}"
    fi
    
    # Ensure tstune config file exists
    touch "${TSTUNE_FILE}"
    
    # Ensure tstune-generated config is included in postgresql.conf
    if [ -f "${PGDATA}/postgresql.base.conf" ] && ! grep "include_if_exists = '${TSTUNE_FILE}'" postgresql.base.conf -qxF; then
        echo "include_if_exists = '${TSTUNE_FILE}'" >> "${PGDATA}/postgresql.base.conf"
    fi
    
    # If there is a dedicated WAL Volume, we want to set max_wal_size to 60% of that volume
    # If there isn't a dedicated WAL Volume, we set it to 20% of the data volume
    if [ "${WAL_VOLUME_SIZE}" = "0" ]; then
        WALMAX="${DATA_VOLUME_SIZE}"
        WALPERCENT=20
    else
        WALMAX="${WAL_VOLUME_SIZE}"
        WALPERCENT=60
    fi
    
    WALMAX=$(numfmt --from=auto "${WALMAX}")
    
    # Wal segments are 16MB in size, in this way we get a "nice" number of the nearest
    # 16MB
    # walmax / 100 * walpercent / 16MB # below is a refactored with increased precision
    WALMAX=$(( WALMAX * WALPERCENT * 16 / 16777216 / 100  ))
    WALMIN=$(( WALMAX / 2 ))
    
    echo "max_wal_size=${WALMAX}MB" >> "${TSTUNE_FILE}"
    echo "min_wal_size=${WALMIN}MB" >> "${TSTUNE_FILE}"
    
    # Run tstune
    timescaledb-tune -quiet -conf-path "${TSTUNE_FILE}" -cpus "${CPUS}" -memory "${MEMORY}MB" -yes "$@"
    
  pgbackrest_archive.sh: |-
    #!/bin/sh
    
    # If no backup is configured, archive_command would normally fail. A failing archive_command on a cluster
    # is going to cause WAL to be kept around forever, meaning we'll fill up Volumes we have quite quickly.
    #
    # Therefore, if the backup is disabled, we always return exitcode 0 when archiving
    
    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - archive - $1"
    }
    
    [ -z "$1" ] && log "Usage: $0 <WALFILE or DIRECTORY>" && exit 1
    
    : "${ENV_FILE:=${HOME}/.pgbackrest_environment}"
    if [ -f "${ENV_FILE}" ]; then
        echo "Sourcing ${ENV_FILE}"
        . "${ENV_FILE}"
    fi
    
    
    # PGBACKREST_BACKUP_ENABLED variable is passed in StatefulSet template
    [ "${PGBACKREST_BACKUP_ENABLED}" = "true" ] || exit 0
    
    exec pgbackrest --stanza=poddb archive-push "$@"
    
  pgbackrest_archive_get.sh: |-
    #!/bin/sh
    
    : "${ENV_FILE:=${HOME}/.pgbackrest_environment}"
    if [ -f "${ENV_FILE}" ]; then
    echo "Sourcing ${ENV_FILE}"
    . "${ENV_FILE}"
    fi
    
    
    # PGBACKREST_BACKUP_ENABLED variable is passed in StatefulSet template
    [ "${PGBACKREST_BACKUP_ENABLED}" = "true" ] || exit 1
    
    exec pgbackrest --stanza=poddb archive-get "${1}" "${2}"
    
  pgbackrest_bootstrap.sh: |-
    #!/bin/sh
    set -e
    
    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - bootstrap - $1"
    }
    
    terminate() {
        log "Stopping"
        exit 1
    }
    # If we don't catch these signals, and we're still waiting for PostgreSQL
    # to be ready, we will not respond at all to a regular shutdown request,
    # therefore, we explicitly terminate if we receive these signals.
    trap terminate TERM QUIT
    
    while ! pg_isready -q; do
        log "Waiting for PostgreSQL to become available"
        sleep 3
    done
    
    # We'll be lazy; we wait for another while to allow the database to promote
    # to primary if it's the only one running
    sleep 10
    
    # If we are the primary, we want to create/validate the backup stanza
    if [ "$(psql -c "SELECT pg_is_in_recovery()::text" -AtXq)" = "false" ]; then
        pgbackrest check || {
            log "Creating pgBackrest stanza"
            pgbackrest --stanza=poddb stanza-create --log-level-stderr=info || exit 1
            log "Creating initial backup"
            pgbackrest --type=full backup || exit 1
        }
    fi
    
    log "Starting pgBackrest api to listen for backup requests"
    exec python3 /scripts/pgbackrest-rest.py --stanza=poddb --loglevel=debug
    
  pgbackrest_restore.sh: |
    #!/bin/sh
    
    : "${ENV_FILE:=${HOME}/.pod_environment}"
    if [ -f "${ENV_FILE}" ]; then
    echo "Sourcing ${ENV_FILE}"
    . "${ENV_FILE}"
    fi
    
    # PGBACKREST_BACKUP_ENABLED variable is passed in StatefulSet template
    [ "${PGBACKREST_BACKUP_ENABLED}" = "true" ] || exit 1
    
    # PGDATA and WALDIR are set in the StatefulSet template and are sourced from the ENV_FILE
    # PGDATA=
    # WALDIR=
    
    # A missing PGDATA points to Patroni removing a botched PGDATA, or manual
    # intervention. In this scenario, we need to recreate the DATA and WALDIRs
    # to keep pgBackRest happy
    [ -d "${PGDATA}" ] || install -o postgres -g postgres -d -m 0700 "${PGDATA}"
    [ -d "${WALDIR}" ] || install -o postgres -g postgres -d -m 0700 "${WALDIR}"
    
    exec pgbackrest --force --delta --log-level-console=detail restore
    
  restore_or_initdb.sh: |
    #!/bin/sh
    
    : "${ENV_FILE:=${HOME}/.pod_environment}"
    if [ -f "${ENV_FILE}" ]; then
        echo "Sourcing ${ENV_FILE}"
        . "${ENV_FILE}"
    fi
    
    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - restore_or_initdb - $1"
    }
    
    # PGDATA and WALDIR are set in the StatefulSet template and are sourced from the ENV_FILE
    # PGDATA=
    # WALDIR=
    
    # A missing PGDATA points to Patroni removing a botched PGDATA, or manual
    # intervention. In this scenario, we need to recreate the DATA and WALDIRs
    # to keep pgBackRest happy
    [ -d "${PGDATA}" ] || install -o postgres -g postgres -d -m 0700 "${PGDATA}"
    [ -d "${WALDIR}" ] || install -o postgres -g postgres -d -m 0700 "${WALDIR}"
    
    if [ "${BOOTSTRAP_FROM_BACKUP}" = "1" ]; then
        log "Attempting restore from backup"
        # we want to override the environment with the environment
        # shellcheck disable=SC2046
        export $(env -i envdir /etc/pgbackrest/bootstrap env) > /dev/null
        # PGBACKREST_REPO1_PATH is set in the StatefulSet template and sourced from the ENV_FILE
    
        if [ -z "${PGBACKREST_REPO1_PATH}" ]; then
            log "Unconfigured repository path"
            cat << "__EOT__"
    
    TimescaleDB Single Helm Chart error:
    
    You should configure the bootstrapFromBackup in your Helm Chart section by explicitly setting
    the repo1-path to point to the backups.
    
    For more information, consult the admin guide:
    https://github.com/timescale/helm-charts/blob/main/charts/timescaledb-single/docs/admin-guide.md#bootstrap-from-backup
    
    __EOT__
    
            exit 1
        fi
    
        log "Listing available backup information"
        pgbackrest info
        EXITCODE=$?
        if [ ${EXITCODE} -ne 0 ]; then
            exit $EXITCODE
        fi
    
        pgbackrest --log-level-console=detail restore
        EXITCODE=$?
        if [ ${EXITCODE} -eq 0 ]; then
            log "pgBackRest restore finished succesfully, starting instance in recovery"
            # We want to ensure we do not overwrite a current backup repository with archives, therefore
            # we block archiving from succeeding until Patroni can takeover
            touch "${PGDATA}/recovery.signal"
            pg_ctl -D "${PGDATA}" start -o '--archive-command=/bin/false'
    
            while ! pg_isready -q; do
                log "Waiting for PostgreSQL to become available"
                sleep 3
            done
    
            # It is not trivial to figure out to what point we should restore, pgBackRest
            # should be fetching WAL segments until the WAL is exhausted. We'll ask pgBackRest
            # what the Maximum Wal is that it currently has; as soon as we see that, we can consider
            # the restore to be done
            while true; do
                MAX_BACKUP_WAL="$(pgbackrest info --output=json | python3 -c "import json,sys;obj=json.load(sys.stdin); print(obj[0]['archive'][0]['max']);")"
                log "Testing whether WAL file ${MAX_BACKUP_WAL} has been restored ..."
                [ -f "${PGDATA}/pg_wal/${MAX_BACKUP_WAL}" ] && break
                sleep 30;
            done
    
            # At this point we know the final WAL archive has been restored, we should be done.
            log "The WAL file ${MAX_BACKUP_WAL} has been successully restored, shutting down instance"
            pg_ctl -D "${PGDATA}" promote
            pg_ctl -D "${PGDATA}" stop -m fast
            log "Handing over control to Patroni ..."
        else
            log "Bootstrap from backup failed"
            exit 1
        fi
    else
        # Patroni attaches --scope and --datadir to the arguments, we need to strip them off as
        # initdb has no business with these parameters
        initdb_args=""
        for value in "$@"
        do
            case $value in
                "--scope"*)
                    ;;
                "--datadir"*)
                    ;;
                *)
                    initdb_args="${initdb_args} $value"
                    ;;
            esac
        done
    
        log "Invoking initdb"
        # shellcheck disable=SC2086
        initdb --auth-local=peer --auth-host=md5 --pgdata="${PGDATA}" --waldir="${WALDIR}" ${initdb_args}
    fi
    
    echo "include_if_exists = '${TSTUNE_FILE}'" >> "${PGDATA}/postgresql.conf"
    
  post_init.sh: |-
    #!/bin/sh
    : "${ENV_FILE:=${HOME}/.pod_environment}"
    if [ -f "${ENV_FILE}" ]; then
        echo "Sourcing ${ENV_FILE}"
        . "${ENV_FILE}"
    fi
    
    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - post_init - $1"
    }
    
    log "Creating extension TimescaleDB in template1 and postgres databases"
    psql -d "$URL" <<__SQL__
        \connect template1
        -- As we're still only initializing, we cannot have synchronous_commit enabled just yet.
        SET synchronous_commit to 'off';
        CREATE EXTENSION timescaledb;
    
        \connect postgres
        SET synchronous_commit to 'off';
        CREATE EXTENSION timescaledb;
    __SQL__
    
    # POSTGRES_TABLESPACES is a comma-separated list of tablespaces to create
    # variable is passed in StatefulSet template
    : "${POSTGRES_TABLESPACES:=""}"
    for tablespace in $POSTGRES_TABLESPACES
    do
        log "Creating tablespace ${tablespace}"
        tablespacedir="${PGDATA}/tablespaces/${tablespace}/data"
        psql -d "$URL" --set tablespace="${tablespace}" --set directory="${tablespacedir}" --set ON_ERROR_STOP=1 <<__SQL__
        SET synchronous_commit to 'off';
        CREATE TABLESPACE :"tablespace" LOCATION :'directory';
    __SQL__
    done
    
    # This directory may contain user defined post init steps
    for file in /etc/timescaledb/post_init.d/*
    do
        [ -d "$file" ] && continue
        [ ! -r "$file" ] && continue
    
        case "$file" in
        *.sh)
            if [ -x "$file" ]; then
            log "Call post init script [ $file ]"
            "$file" "$@"
            EXITCODE=$?
            else
            log "Source post init script [ $file ]"
            . "$file"
            EXITCODE=$?
            fi
            ;;
        *.sql)
            log "Apply post init sql [ $file ]"
            # Disable synchronous_commit since we're initializing
            PGOPTIONS="-c synchronous_commit=local" psql -d "$URL" -f "$file"
            EXITCODE=$?
            ;;
        *.sql.gz)
            log "Decompress and apply post init sql [ $file ]"
            gunzip -c "$file" | PGOPTIONS="-c synchronous_commit=local" psql -d "$URL"
            EXITCODE=$?
            ;;
        *)
            log "Ignore unknown post init file type [ $file ]"
            EXITCODE=0
            ;;
        esac
        EXITCODE=$?
        if [ "$EXITCODE" != "0" ]
        then
            log "ERROR: post init script $file exited with exitcode $EXITCODE"
            exit $EXITCODE
        fi
    done
    
    # We exit 0 this script, otherwise the database initialization fails.
    exit 0
    
  patroni_callback.sh: |-
    #!/bin/sh
    set -e
    
    : "${ENV_FILE:=${HOME}/.pod_environment}"
    if [ -f "${ENV_FILE}" ]; then
        echo "Sourcing ${ENV_FILE}"
        . "${ENV_FILE}"
    fi
    
    for suffix in "$1" all
    do
        CALLBACK="/etc/timescaledb/callbacks/${suffix}"
        if [ -f "${CALLBACK}" ]
        then
        "${CALLBACK}" "$@"
        fi
    done
    
  lifecycle_preStop.sql: |-
    -- Doing a checkpoint (at the primary and the current instance) before starting
    -- the shutdown process will speed up the CHECKPOINT that is part of the shutdown
    -- process and the recovery after the pod is rescheduled.
    --
    -- We issue the CHECKPOINT at the primary always because:
    --
    -- > Restartpoints can't be performed more frequently than checkpoints in the
    -- > master because restartpoints can only be performed at checkpoint records.
    -- https://www.postgresql.org/docs/current/wal-configuration.html
    --
    -- While we're doing these preStop CHECKPOINTs we can still serve read/write
    -- queries to clients, whereas as soon as we initiate the shutdown, we terminate
    -- connections.
    --
    -- This therefore reduces downtime for the clients, at the cost of increasing (slightly)
    -- the time to stop the pod, and reducing write performance on the primary.
    --
    -- To further reduce downtime for clients, we will issue a switchover iff we are currently
    -- running as the primary. This again should be relatively fast, as we've just issued and
    -- waited for the CHECKPOINT to complete.
    --
    -- This is quite a lot of logic and work in a preStop command; however, if the preStop command
    -- fails for whatever reason, the normal Pod shutdown will commence, so it is only able to
    -- improve stuff without being able to break stuff.
    -- (The $(hostname) inside the switchover call safeguards that we never accidentally
    -- switchover the wrong primary).
    
    \pset pager off
    \set ON_ERROR_STOP true
    \set hostname `hostname`
    \set dsn_fmt 'user=postgres host=%s application_name=lifecycle:preStop@%s connect_timeout=5 options=''-c log_min_duration_statement=0'''
    
    SELECT
        pg_is_in_recovery() AS in_recovery,
        format(:'dsn_fmt', patroni_scope,                       :'hostname') AS primary_dsn,
        format(:'dsn_fmt', '/var/run/postgresql', :'hostname') AS local_dsn
    FROM
        current_setting('cluster_name') AS cs(patroni_scope)
    \gset
    
    \timing on
    \set ECHO queries
    
    -- There should be a CHECKPOINT at the primary
    \if :in_recovery
        \connect :"primary_dsn"
        CHECKPOINT;
    \endif
    
    -- There should also be a CHECKPOINT locally,
    -- for the primary, this may mean we do a double checkpoint,
    -- but the second one would be cheap anyway, so we leave that as is
    \connect :"local_dsn"
    SELECT 'Issuing checkpoint';
    CHECKPOINT;
    
    \if :in_recovery
        SELECT 'We are a replica: Successfully invoked checkpoints at the primary and locally.';
    \else
        SELECT 'We are a primary: Successfully invoked checkpoints, now issuing a switchover.';
        \! curl -s http://localhost:8008/switchover -XPOST -d '{"leader": "$(hostname)"}'
    \endif
    
...
---
# Source: fairwinds-insights/templates/openapi-nginx-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: openapi-nginx-conf
data:
  # Copied from https://github.com/swagger-api/swagger-ui/blob/master/docker/run.sh
  # and a sed command was replaced, since we can't edit mounted files
  run.sh: |
    #! /bin/sh

    set -e
    BASE_URL=${BASE_URL:-/}
    NGINX_ROOT=/usr/share/nginx/html
    INDEX_FILE=$NGINX_ROOT/index.html
    NGINX_CONF=/etc/nginx/nginx.conf

    node /usr/share/nginx/configurator $INDEX_FILE

    replace_in_index () {
      if [ "$1" != "**None**" ]; then
        sed -i "s|/\*||g" $INDEX_FILE
        sed -i "s|\*/||g" $INDEX_FILE
        sed -i "s|$1|$2|g" $INDEX_FILE
      fi
    }

    replace_or_delete_in_index () {
      if [ -z "$2" ]; then
        sed -i "/$1/d" $INDEX_FILE
      else
        replace_in_index $1 $2
      fi
    }

    replace_in_index myApiKeyXXXX123456789 $API_KEY

    if [ "$SWAGGER_JSON_URL" ]; then
      sed -i "s|https://petstore.swagger.io/v2/swagger.json|$SWAGGER_JSON_URL|g" $INDEX_FILE
      sed -i "s|http://example.com/api|$SWAGGER_JSON_URL|g" $INDEX_FILE
    fi

    if [[ -f "$SWAGGER_JSON" ]]; then
      cp -s "$SWAGGER_JSON" "$NGINX_ROOT"
      REL_PATH="./$(basename $SWAGGER_JSON)"

      if [[ -z "$SWAGGER_ROOT" ]]; then
        SWAGGER_ROOT="$(dirname $SWAGGER_JSON)"
      fi

      sed -i "s|https://petstore.swagger.io/v2/swagger.json|$REL_PATH|g" $INDEX_FILE
      sed -i "s|http://example.com/api|$REL_PATH|g" $INDEX_FILE
    fi

    find $NGINX_ROOT -type f -regex ".*\.\(html\|js\|css\)" -exec sh -c "gzip < {} > {}.gz" \;

    exec nginx -g 'daemon off;'

  # This is copied from https://github.com/swagger-api/swagger-ui/blob/master/docker/nginx.conf
  # A /health path is added and BASE_URL is manually set
  nginx.conf: |
    worker_processes      1;

    events {
      worker_connections  1024;
    }

    http {
      include             mime.types;
      default_type        application/octet-stream;

      sendfile on;

      keepalive_timeout   65;

      gzip on;
      gzip_static on;
      gzip_disable "msie6";

      gzip_vary on;
      gzip_types text/plain text/css application/javascript;

      map $request_method $access_control_max_age {
        OPTIONS 1728000; # 20 days
      }
      server_tokens off; # Hide Nginx version

      server {
        listen            8080;
        server_name       localhost;
        index             index.html index.htm;

        location /swagger {
          absolute_redirect off;
          alias            /usr/share/nginx/html/;
          expires 1d;

          location ~* \.(?:json|yml|yaml)$ {
            #SWAGGER_ROOT
            expires -1;

            include cors.conf;
          }

          include cors.conf;
        }

        location /health {
          return 200 'OK';
        }
        # This is a hack to prevent nginx from running sed on this file, which causes a crash
        # listen  [::]:80;
      }
    }
---
# Source: fairwinds-insights/charts/minio/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-fairwinds-insights-fw-minio
  labels:
    app: fw-minio
    chart: minio-5.0.10
    release: my-fairwinds-insights
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "500Gi"
---
# Source: fairwinds-insights/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-fairwinds-insight-view-kubesystem
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  resourceNames:
  - kube-system
  verbs:
  - get
---
# Source: fairwinds-insights/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-fairwinds-insight-view-kubesystem
subjects:
- kind: ServiceAccount
  name: my-fairwinds-insight-insights
  namespace: default
roleRef:
  kind: ClusterRole
  name: my-fairwinds-insight-view-kubesystem
  apiGroup: rbac.authorization.k8s.io
---
# Source: fairwinds-insights/charts/timescale/templates/role-timescaledb.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: timescale
  labels:
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  # delete is required only for 'patronictl remove'
  - delete
- apiGroups: [""]
  resources:
  - endpoints
  - endpoints/restricted
  verbs:
  - create
  - get
  - patch
  - update
  # the following three privileges are necessary only when using endpoints
  - list
  - watch
  # delete is required only for for 'patronictl remove'
  - delete
- apiGroups: [""]
  resources: ["pods"]
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
# Source: fairwinds-insights/templates/cronjob-executor.rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-fairwinds-insight-cronjob-executor
  labels:
    app: fairwinds-insights
rules:
- apiGroups: [""]
  resources: ["cronjobs"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["cronjobs"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create", "delete"]
---
# Source: fairwinds-insights/templates/rbac-automated-pr-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-fairwinds-insight-automated-pr-job
  labels:
    app: my-fairwinds-insight-automated-pr-job
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "create", "delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "get"]
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["create", "delete"]
---
# Source: fairwinds-insights/charts/timescale/templates/rolebinding-timescaledb.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: timescale
  namespace: default
  labels:
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: rbac
subjects:
  - kind: ServiceAccount
    name: timescale
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: timescale
---
# Source: fairwinds-insights/templates/cronjob-executor.rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-fairwinds-insight-cronjob-executor
  labels:
    app: fairwinds-insights
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-fairwinds-insight-cronjob-executor
subjects:
- kind: ServiceAccount
  name: my-fairwinds-insight-cronjob-executor
  namespace: default
---
# Source: fairwinds-insights/templates/rbac-automated-pr-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-fairwinds-insight-automated-pr-job
  labels:
    app: my-fairwinds-insight-automated-pr-job
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-fairwinds-insight-automated-pr-job
subjects:
- kind: ServiceAccount
  name: my-fairwinds-insight-automated-pr-job
  namespace: default
---
# Source: fairwinds-insights/charts/minio/templates/console-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-fairwinds-insights-fw-minio-console
  labels:
    app: fw-minio
    chart: minio-5.0.10
    release: my-fairwinds-insights
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9001
      protocol: TCP
      targetPort: 9001
  selector:
    app: fw-minio
    release: my-fairwinds-insights
---
# Source: fairwinds-insights/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-fairwinds-insights-fw-minio
  labels:
    app: fw-minio
    chart: minio-5.0.10
    release: my-fairwinds-insights
    heritage: Helm
    monitoring: "true"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: fw-minio
    release: my-fairwinds-insights
---
# Source: fairwinds-insights/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-fairwinds-insights-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.18
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: fairwinds-insights/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-fairwinds-insights-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.18
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: fairwinds-insights/charts/timescale/templates/svc-timescaledb-config.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

apiVersion: v1
kind: Service
metadata:
  name: timescale-config
  namespace: default
  labels:
    component: patroni
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: patroni
spec:
  selector:
    app: timescale
    cluster-name: timescale
  type: ClusterIP
  clusterIP: None
  ports:
  - name: patroni
    port: 8008
    protocol: TCP
---
# Source: fairwinds-insights/charts/timescale/templates/svc-timescaledb-replica.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

apiVersion: v1
kind: Service
metadata:
  name: timescale-replica
  namespace: default
  labels:
    component: postgres
    role: replica
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: postgres
spec:
  selector:
    app: timescale
    cluster-name: timescale
    role: replica
  type: ClusterIP
  ports:
  - name: postgresql
    # This always defaults to 5432
    port: 5432
    targetPort: postgresql
    protocol: TCP
---
# Source: fairwinds-insights/charts/timescale/templates/svc-timescaledb.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

apiVersion: v1
kind: Service
metadata:
  name: timescale
  namespace: default
  labels:
    role: master
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: timescaledb
spec:
  selector:
    app: timescale
    cluster-name: timescale
    role: master
  type: ClusterIP
  ports:
  - name: postgresql
    # This always defaults to 5432
    port: 5433
    targetPort: postgresql
    protocol: TCP
---
# Source: fairwinds-insights/templates/service-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-fairwinds-insight-api
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/component: api
---
# Source: fairwinds-insights/templates/service-dashboard.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-fairwinds-insight-dashboard
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: dashboard
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/component: dashboard
---
# Source: fairwinds-insights/templates/service-open-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-fairwinds-insight-open-api
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: open-api
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/component: open-api
---
# Source: fairwinds-insights/charts/minio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-fairwinds-insights-fw-minio
  labels:
    app: fw-minio
    chart: minio-5.0.10
    release: my-fairwinds-insights
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  replicas: 1
  selector:
    matchLabels:
      app: fw-minio
      release: my-fairwinds-insights
  template:
    metadata:
      name: my-fairwinds-insights-fw-minio
      labels:
        app: fw-minio
        release: my-fairwinds-insights
      annotations:
        checksum/secrets: 93dd340334517c60c28ee25e31cd01e6d8880723ff3c8a122b1b9b45294d94f3
        checksum/config: b4d2808ec81472b5943603d9ae110b975ac7d3ff16546f106b316d737e7f0bc5
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      
      serviceAccountName: minio-sa
      containers:
        - name: minio
          image: "quay.io/minio/minio:RELEASE.2023-05-18T00-05-36Z"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio server /export -S /etc/minio/certs/ --address :9000 --console-address :9001"
          volumeMounts:
            - name: minio-user
              mountPath: "/tmp/credentials"
              readOnly: true
            - name: export
              mountPath: /export            
          ports:
            - name: http
              containerPort: 9000
            - name: http-console
              containerPort: 9001
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: my-fairwinds-insights-fw-minio
                  key: rootUser
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-fairwinds-insights-fw-minio
                  key: rootPassword
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
          resources:
            requests:
              cpu: 50m
              memory: 256Mi      
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: my-fairwinds-insights-fw-minio
        - name: minio-user
          secret:
            secretName: my-fairwinds-insights-fw-minio
---
# Source: fairwinds-insights/templates/deployment-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-fairwinds-insight-api
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: api
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fairwinds-insights
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fairwinds-insights
        app.kubernetes.io/instance: my-fairwinds-insights
        app.kubernetes.io/component: api
    spec:
      serviceAccountName: my-fairwinds-insight-insights
      containers:
        - name: fairwinds-insights
          image: "quay.io/fairwinds/insights-api:16.2"
          imagePullPolicy: Always
          command: ["api"]
          args:
          - "--port=8080"
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP          
          # Required values
          envFrom:
          - secretRef:
              name: fwinsights-secrets
          env:
          - name: FAIRWINDS_HOST
          - name: CACHE_BUST_TOKEN
            value: y0xRV2ydfN
          - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
            value: 4.4.4
          # General Server
          # Database
          - name: POSTGRES_DB
            value: fairwinds_insights
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_SSL_MODE
            value: require
          - name: POSTGRES_HOST
            value: my-fairwinds-insights-postgresql
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-postgresql
                key: postgresql-password
          # Timescale Database
          - name: TIMESCALE_DB
            value: postgres
          - name: TIMESCALE_USER
            value: postgres
          - name: TIMESCALE_PORT
            value: "5433"
          - name: TIMESCALE_SSL_MODE
            value: require
          - name: TIMESCALE_HOST
            value: timescale
          - name: TIMESCALE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-timescale
                key: PATRONI_SUPERUSER_PASSWORD
          - name: INSIGHTS_SAAS_HOST
            value: "https://insights.fairwinds.com"
          
          # Report Storage
          - name: REPORT_STORAGE_STRATEGY
            value: minio
          
          - name: MINIO_HOST
            value: my-fairwinds-insights-fw-minio:9000
          - name: MINIO_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootUser                
          - name: MINIO_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootPassword
          - name: REPORT_STORAGE_REGION
            value: us-east-1
          - name: REPORT_STORAGE_BUCKET
            value: "reports"
          
          # Email
          - name: EMAIL_STRATEGY
            value: memory
          - name: EMAIL_SENDER
            value: 
          - name: EMAIL_RECIPIENT
            value: 
          # Third-party integrations
          # repo-scan-job specific
          - name: K8S_NAMESPACE
            value: default
          - name: INSIGHTS_CI_IMAGE_VERSION
            value: "5.4"
          
          # tag used for the fixer container 
          - name: CRON_JOB_IMAGE_REPOSITORY
            value: "quay.io/fairwinds/insights-cronjob"
          - name: CRON_JOB_IMAGE_TAG
            value: "16.2"
          
          livenessProbe:
            httpGet:
              path: /health
              port: http
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 12
          readinessProbe:
            httpGet:
              path: /health
              port: http
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 6
          volumeMounts:
          - name: tmp
            mountPath: /tmp
          - name: secrets
            mountPath: /var/run/secrets/github
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 10324
            capabilities:
              drop:
                - ALL
      volumes:
      - name: tmp
        emptyDir: {}
      - name: secrets
        secret:
          secretName: github-secrets
          optional: true
---
# Source: fairwinds-insights/templates/deployment-automated-pr-job.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-fairwinds-insight-automated-pr-job
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: automated-pr-job
  annotations:
    polaris.fairwinds.com/livenessProbeMissing-exempt: "true"
    polaris.fairwinds.com/readinessProbeMissing-exempt: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fairwinds-insights
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/component: automated-pr-job
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fairwinds-insights
        app.kubernetes.io/instance: my-fairwinds-insights
        app.kubernetes.io/component: automated-pr-job
    spec:
      serviceAccountName: my-fairwinds-insight-automated-pr-job
      containers:
        - name: fairwinds-insights
          image: "quay.io/fairwinds/insights-api:16.2"
          imagePullPolicy: Always
          command: ["automated_pull_requests_job"]          
          # Required values
          envFrom:
          - secretRef:
              name: fwinsights-secrets
          env:
          - name: FAIRWINDS_HOST
          - name: CACHE_BUST_TOKEN
            value: pHRyiXQ2kx
          - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
            value: 4.4.4
          # General Server
          # Database
          - name: POSTGRES_DB
            value: fairwinds_insights
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_SSL_MODE
            value: require
          - name: POSTGRES_HOST
            value: my-fairwinds-insights-postgresql
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-postgresql
                key: postgresql-password
          # Timescale Database
          - name: TIMESCALE_DB
            value: postgres
          - name: TIMESCALE_USER
            value: postgres
          - name: TIMESCALE_PORT
            value: "5433"
          - name: TIMESCALE_SSL_MODE
            value: require
          - name: TIMESCALE_HOST
            value: timescale
          - name: TIMESCALE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-timescale
                key: PATRONI_SUPERUSER_PASSWORD
          - name: INSIGHTS_SAAS_HOST
            value: "https://insights.fairwinds.com"
          
          # Report Storage
          - name: REPORT_STORAGE_STRATEGY
            value: minio
          
          - name: MINIO_HOST
            value: my-fairwinds-insights-fw-minio:9000
          - name: MINIO_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootUser                
          - name: MINIO_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootPassword
          - name: REPORT_STORAGE_REGION
            value: us-east-1
          - name: REPORT_STORAGE_BUCKET
            value: "reports"
          
          # Email
          - name: EMAIL_STRATEGY
            value: memory
          - name: EMAIL_SENDER
            value: 
          - name: EMAIL_RECIPIENT
            value: 
          # Third-party integrations
          # repo-scan-job specific
          - name: K8S_NAMESPACE
            value: default
          - name: INSIGHTS_CI_IMAGE_VERSION
            value: "5.4"
          
          # tag used for the fixer container 
          - name: CRON_JOB_IMAGE_REPOSITORY
            value: "quay.io/fairwinds/insights-cronjob"
          - name: CRON_JOB_IMAGE_TAG
            value: "16.2"
          
          volumeMounts:
            - name: secrets
              mountPath: /var/run/secrets/github
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 80m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 10324
            capabilities:
              drop:
                - ALL
      volumes:
        - name: secrets
          secret:
            secretName: github-secrets
            optional: true
---
# Source: fairwinds-insights/templates/deployment-dashboard.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-fairwinds-insight-dashboard
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: dashboard
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fairwinds-insights
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/component: dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fairwinds-insights
        app.kubernetes.io/instance: my-fairwinds-insights
        app.kubernetes.io/component: dashboard
    spec:
      containers:
        - name: fw-insights-dashboard
          image: "quay.io/fairwinds/insights-dashboard:16.2"
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args:
          - -c
          - |
            cd /etc/nginx/html
            mv -f config.self.js ./config.js || exit 1
            sed -i 's/SERVICE.NAMESPACE.svc/my-fairwinds-insight-api.default.svc/' /etc/nginx/nginx.conf
            sed -i 's/SERVICE-OPEN-API.NAMESPACE.svc/my-fairwinds-insight-open-api.default.svc/' /etc/nginx/nginx.conf
            nginx -g "daemon off;"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP          
          # Required values
          envFrom:
          - secretRef:
              name: fwinsights-secrets
          env:
          - name: FAIRWINDS_HOST
          - name: CACHE_BUST_TOKEN
            value: NPRDH6JdTj
          - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
            value: 4.4.4
          # General Server
          # Database
          - name: POSTGRES_DB
            value: fairwinds_insights
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_SSL_MODE
            value: require
          - name: POSTGRES_HOST
            value: my-fairwinds-insights-postgresql
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-postgresql
                key: postgresql-password
          # Timescale Database
          - name: TIMESCALE_DB
            value: postgres
          - name: TIMESCALE_USER
            value: postgres
          - name: TIMESCALE_PORT
            value: "5433"
          - name: TIMESCALE_SSL_MODE
            value: require
          - name: TIMESCALE_HOST
            value: timescale
          - name: TIMESCALE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-timescale
                key: PATRONI_SUPERUSER_PASSWORD
          - name: INSIGHTS_SAAS_HOST
            value: "https://insights.fairwinds.com"
          
          # Report Storage
          - name: REPORT_STORAGE_STRATEGY
            value: minio
          
          - name: MINIO_HOST
            value: my-fairwinds-insights-fw-minio:9000
          - name: MINIO_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootUser                
          - name: MINIO_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootPassword
          - name: REPORT_STORAGE_REGION
            value: us-east-1
          - name: REPORT_STORAGE_BUCKET
            value: "reports"
          
          # Email
          - name: EMAIL_STRATEGY
            value: memory
          - name: EMAIL_SENDER
            value: 
          - name: EMAIL_RECIPIENT
            value: 
          # Third-party integrations
          # repo-scan-job specific
          - name: K8S_NAMESPACE
            value: default
          - name: INSIGHTS_CI_IMAGE_VERSION
            value: "5.4"
          
          # tag used for the fixer container 
          - name: CRON_JOB_IMAGE_REPOSITORY
            value: "quay.io/fairwinds/insights-cronjob"
          - name: CRON_JOB_IMAGE_TAG
            value: "16.2"
          
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          volumeMounts:
          - name: tmp
            mountPath: /tmp
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 101
            capabilities:
              drop:
                - ALL
      volumes:
      - name: tmp
        emptyDir: {}
---
# Source: fairwinds-insights/templates/deployment-open-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-fairwinds-insight-open-api
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: open-api
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fairwinds-insights
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/component: open-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fairwinds-insights
        app.kubernetes.io/instance: my-fairwinds-insights
        app.kubernetes.io/component: open-api
    spec:
      serviceAccountName: my-fairwinds-insight-insights
      volumes:
      - name: nginx-conf
        configMap:
          name: openapi-nginx-conf
      containers:
        - name: fairwinds-insights
          image: swaggerapi/swagger-ui:v4.1.3
          imagePullPolicy: Always
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          env:
          - name: SWAGGER_JSON_URL
            value: /v0/swagger.yaml
          volumeMounts:
          - name: nginx-conf
            subPath: nginx.conf
            mountPath: /etc/nginx/nginx.conf
          - name: nginx-conf
            subPath: run.sh
            mountPath: /usr/share/nginx/run.sh
          livenessProbe:
            httpGet:
              path: /swagger
              port: http
          readinessProbe:
            httpGet:
              path: /swagger
              port: http
          resources:
            limits:
              cpu: 256m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 101
            capabilities:
              drop:
                - ALL
---
# Source: fairwinds-insights/templates/deployment-report-job.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-fairwinds-insight-reportjob
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: reportjob
  annotations:
    polaris.fairwinds.com/livenessProbeMissing-exempt: "true"
    polaris.fairwinds.com/readinessProbeMissing-exempt: "true"

spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fairwinds-insights
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/component: reportjob
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fairwinds-insights
        app.kubernetes.io/instance: my-fairwinds-insights
        app.kubernetes.io/component: reportjob
    spec:
      serviceAccountName: my-fairwinds-insight-insights
      terminationGracePeriodSeconds: 600
      containers:
        - name: fairwinds-insights
          image: "quay.io/fairwinds/insights-api:16.2"
          imagePullPolicy: Always
          command: ["report_job"]          
          # Required values
          envFrom:
          - secretRef:
              name: fwinsights-secrets
          env:
          - name: FAIRWINDS_HOST
          - name: CACHE_BUST_TOKEN
            value: BOXxPEYbi3
          - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
            value: 4.4.4
          # General Server
          # Database
          - name: POSTGRES_DB
            value: fairwinds_insights
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_SSL_MODE
            value: require
          - name: POSTGRES_HOST
            value: my-fairwinds-insights-postgresql
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-postgresql
                key: postgresql-password
          # Timescale Database
          - name: TIMESCALE_DB
            value: postgres
          - name: TIMESCALE_USER
            value: postgres
          - name: TIMESCALE_PORT
            value: "5433"
          - name: TIMESCALE_SSL_MODE
            value: require
          - name: TIMESCALE_HOST
            value: timescale
          - name: TIMESCALE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fwinsights-timescale
                key: PATRONI_SUPERUSER_PASSWORD
          - name: INSIGHTS_SAAS_HOST
            value: "https://insights.fairwinds.com"
          
          # Report Storage
          - name: REPORT_STORAGE_STRATEGY
            value: minio
          
          - name: MINIO_HOST
            value: my-fairwinds-insights-fw-minio:9000
          - name: MINIO_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootUser                
          - name: MINIO_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-fairwinds-insights-fw-minio
                key: rootPassword
          - name: REPORT_STORAGE_REGION
            value: us-east-1
          - name: REPORT_STORAGE_BUCKET
            value: "reports"
          
          # Email
          - name: EMAIL_STRATEGY
            value: memory
          - name: EMAIL_SENDER
            value: 
          - name: EMAIL_RECIPIENT
            value: 
          # Third-party integrations
          # repo-scan-job specific
          - name: K8S_NAMESPACE
            value: default
          - name: INSIGHTS_CI_IMAGE_VERSION
            value: "5.4"
          
          # tag used for the fixer container 
          - name: CRON_JOB_IMAGE_REPOSITORY
            value: "quay.io/fairwinds/insights-cronjob"
          - name: CRON_JOB_IMAGE_TAG
            value: "16.2"
          
          volumeMounts:
            - name: secrets
              mountPath: /var/run/secrets/github
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 80m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 10324
            capabilities:
              drop:
                - ALL
      volumes:
        - name: secrets
          secret:
            secretName: github-secrets
            optional: true
---
# Source: fairwinds-insights/templates/hpa-automated-pr-job.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-fairwinds-insight-automated-pr-job-hpa
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: automated-pr-job
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-fairwinds-insight-automated-pr-job
  minReplicas: 2
  maxReplicas: 4
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
---
# Source: fairwinds-insights/templates/hpa-reportjob.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-fairwinds-insight-reportjob-hpa
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: reportjob
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-fairwinds-insight-reportjob
  minReplicas: 2
  maxReplicas: 6
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 75
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 75
          type: Utilization
      type: Resource
---
# Source: fairwinds-insights/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-fairwinds-insights-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.18
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-fairwinds-insights-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-fairwinds-insights
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-fairwinds-insights-postgresql
      labels:
        app.kubernetes.io/instance: my-fairwinds-insights
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.18
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-fairwinds-insights-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-fairwinds-insights
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      initContainers:
        - name: copy-certs
          image: docker.io/bitnami/os-shell:12-debian-12-r25
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 75m
              memory: 256Mi
          # We don't require a privileged container in this case
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -ec
            - |
              cp /tmp/certs/* /opt/bitnami/postgresql/certs/
              chmod 600 /opt/bitnami/postgresql/certs/tls.key
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: raw-certificates
              mountPath: /tmp/certs
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
      containers:
        - name: postgresql
          image: quay.io/fairwinds/postgres-partman:16.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fwinsights-postgresql
                  key: postgresql-password
            - name: POSTGRES_DATABASE
              value: "fairwinds_insights"
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "yes"
            - name: POSTGRESQL_TLS_PREFER_SERVER_CIPHERS
              value: "yes"
            - name: POSTGRESQL_TLS_CERT_FILE
              value: /opt/bitnami/postgresql/certs/tls.crt
            - name: POSTGRESQL_TLS_KEY_FILE
              value: /opt/bitnami/postgresql/certs/tls.key
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=fairwinds_insights" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=fairwinds_insights sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key" -h 127.0.0.1 -p 5432
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 75m
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
              readOnly: true
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: raw-certificates
          secret:
            secretName: fwinsights-postgresql-ca
        - name: postgresql-certificates
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: fairwinds-insights/charts/timescale/templates/statefulset-timescaledb.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescale
  namespace: default
  labels:
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: timescaledb
spec:
  serviceName: timescale
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: timescale
      release: my-fairwinds-insights
  template:
    metadata:
      name: timescale
      labels:
        
        app: timescale
        chart: timescale-0.33.6
        release: my-fairwinds-insights
        heritage: Helm
        cluster-name: timescale
        app.kubernetes.io/name: "timescale"
        app.kubernetes.io/version: 0.33.6
        app.kubernetes.io/component: timescaledb
    spec:
      serviceAccountName: timescale
      securityContext:
        # The postgres user inside the TimescaleDB image has uid=1000.
        # This configuration ensures the permissions of the mounts are suitable
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
      # Issuing the final checkpoints on a busy database may take considerable time.
      # Unfinished checkpoints will require more time during startup, so the tradeoff
      # here is time spent in shutdown/time spent in startup.
      # We choose shutdown here, especially as during the largest part of the shutdown
      # we can still serve clients.
      terminationGracePeriodSeconds: 600
      containers:
      - name: timescaledb
        securityContext:
          allowPrivilegeEscalation: false
        image: "timescale/timescaledb-ha:pg14.11-ts2.14.2-all"
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - psql
              - -X
              - --file
              - "/etc/timescaledb/scripts/lifecycle_preStop.sql"
        # When reusing an already existing volume it sometimes happens that the permissions
        # of the PGDATA and/or wal directory are incorrect. To guard against this, we always correctly
        # set the permissons of these directories before we hand over to Patroni.
        # We also create all the tablespaces that are defined, to ensure a smooth restore/recovery on a
        # pristine set of Volumes.
        # As PostgreSQL requires to have full control over the permissions of the tablespace directories,
        # we create a subdirectory "data" in every tablespace mountpoint. The full path of every tablespace
        # therefore always ends on "/data".
        # By creating a .pgpass file in the $HOME directory, we expose the superuser password
        # to processes that may not have it in their environment (like the preStop lifecycle hook).
        # To ensure Patroni will not mingle with this file, we give Patroni its own pgpass file.
        # As these files are in the $HOME directory, they are only available to *this* container,
        # and they are ephemeral.
        command:
          - /bin/bash
          - "-c"
          - |
            
            install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/data" "/var/lib/postgresql/wal/pg_wal" || exit 1
            TABLESPACES=""
            for tablespace in ; do
              install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/tablespaces/${tablespace}/data"
            done

            # Environment variables can be read by regular users of PostgreSQL. Especially in a Kubernetes
            # context it is likely that some secrets are part of those variables.
            # To ensure we expose as little as possible to the underlying PostgreSQL instance, we have a list
            # of allowed environment variable patterns to retain.
            #
            # We need the KUBERNETES_ environment variables for the native Kubernetes support of Patroni to work.
            #
            # NB: Patroni will remove all PATRONI_.* environment variables before starting PostgreSQL

            # We store the current environment, as initscripts, callbacks, archive_commands etc. may require
            # to have the environment available to them
            set -o posix
            export -p > "${HOME}/.pod_environment"
            export -p | grep PGBACKREST > "${HOME}/.pgbackrest_environment"

            for UNKNOWNVAR in $(env | awk -F '=' '!/^(PATRONI_.*|HOME|PGDATA|PGHOST|LC_.*|LANG|PATH|KUBERNETES_SERVICE_.*|AWS_ROLE_ARN|AWS_WEB_IDENTITY_TOKEN_FILE)=/ {print $1}')
            do
                unset "${UNKNOWNVAR}"
            done

            touch /var/run/postgresql/timescaledb.conf
            touch /var/run/postgresql/wal_status

            echo "*:*:*:postgres:${PATRONI_SUPERUSER_PASSWORD}" >> ${HOME}/.pgpass
            chmod 0600 ${HOME}/.pgpass

            export PATRONI_POSTGRESQL_PGPASS="${HOME}/.pgpass.patroni"

            exec patroni /etc/timescaledb/patroni.yaml
        env:
        # We use mixed case environment variables for Patroni User management,
        # as the variable themselves are documented to be PATRONI_<username>_OPTIONS.
        # Where possible, we want to have lowercase usernames in PostgreSQL as more complex postgres usernames
        # requiring quoting to be done in certain contexts, which many tools do not do correctly, or even at all.
        # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#bootstrap-configuration
        - name: PATRONICTL_CONFIG_FILE
          value: "/etc/timescaledb/patroni.yaml"
        - name: PATRONI_admin_OPTIONS
          value: createrole,createdb
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        # To specify the PostgreSQL and Rest API connect addresses we need
        # the PATRONI_KUBERNETES_POD_IP to be available as a bash variable, so we can compose an
        # IP:PORT address later on
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):5432"
        - name: PATRONI_RESTAPI_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):8008"
        - name: PATRONI_KUBERNETES_PORTS
          value: '[{"name": "postgresql", "port": 5432}]'
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: "/var/lib/postgresql/data"
        - name: PATRONI_KUBERNETES_NAMESPACE
          value: default
        - name: PATRONI_KUBERNETES_LABELS
          value: "{app: timescale, cluster-name: timescale, release: my-fairwinds-insights}"
        - name: PATRONI_SCOPE
          value: timescale
        - name: PGBACKREST_CONFIG
          value: /etc/pgbackrest/pgbackrest.conf
        # PGDATA and PGHOST are not required to let Patroni/PostgreSQL run correctly,
        # but for interactive sessions, callbacks and PostgreSQL tools they should be correct.
        - name: PGDATA
          value: "$(PATRONI_POSTGRESQL_DATA_DIR)"
        - name: PGHOST
          value: "/var/run/postgresql"
        - name: WALDIR
          value: "/var/lib/postgresql/wal/pg_wal"
        - name: BOOTSTRAP_FROM_BACKUP
          value: "0"
        - name: PGBACKREST_BACKUP_ENABLED
          value: "false"
        - name: TSTUNE_FILE
          value: /var/run/postgresql/timescaledb.conf
          # pgBackRest is also called using the archive_command if the backup is enabled.
          # this script will also need access to the environment variables specified for
          # the backup. This can be removed once we do not directly invoke pgBackRest
          # from inside the TimescaleDB container anymore
        envFrom:
        - secretRef:
            name: "fwinsights-timescale"
            optional: false
        - secretRef:
            name: "timescale-pgbackrest"
            optional: true
        ports:
        - containerPort: 8008
          name: patroni
        - containerPort: 5432
          name: postgresql
        readinessProbe:
          exec:
            command:
              - pg_isready
              - -h
              - /var/run/postgresql
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: storage-volume
          mountPath: "/var/lib/postgresql"
          subPath: ""
        - name: wal-volume
          mountPath: "/var/lib/postgresql/wal"
          subPath: ""
        - mountPath: /etc/timescaledb/patroni.yaml
          subPath: patroni.yaml
          name: patroni-config
          readOnly: true
        - mountPath: /etc/timescaledb/scripts
          name: timescaledb-scripts
          readOnly: true
        - mountPath: /etc/pgbackrest_secrets
          name: pgbackrest-secrets
          readOnly: true
        - mountPath: "/etc/timescaledb/post_init.d"
          name: post-init
          readOnly: true
        - mountPath: /etc/certificate
          name: certificate
          readOnly: true
        - name: socket-directory
          mountPath: /var/run/postgresql
        
        - mountPath: /etc/pgbackrest
          name: pgbackrest
          readOnly: true
        - mountPath: /etc/pgbackrest/bootstrap
          name: pgbackrest-bootstrap
          readOnly: true
        resources:
          
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 75m
            memory: 256Mi
      volumes:
      - name: socket-directory
        emptyDir: {}
      - name: patroni-config
        configMap:
          name: timescale-patroni
      - name: timescaledb-scripts
        configMap:
          name: timescale-scripts
          defaultMode: 488 # 0750 permissions
      
      - name: post-init
        projected:
          defaultMode: 0750
          sources:
            
            - configMap:
                name: custom-init-scripts
                optional: true
            - secret:
                name: custom-secret-scripts
                optional: true
      - name: pgbouncer
        configMap:
          name: timescale-pgbouncer
          defaultMode: 416 # 0640 permissions
          optional: true
      - name: pgbackrest
        configMap:
          name: timescale-pgbackrest
          defaultMode: 416 # 0640 permissions
          optional: true
      - name: pgbackrest-secrets
        secret:
          secretName: timescale-pgbackrest-secrets
          defaultMode: 416
          optional: true
      - name: certificate
        secret:
          secretName: "fwinsights-timescale-ca"
          defaultMode: 416 # 0640 permissions
      - name: pgbackrest-bootstrap
        secret:
          secretName: pgbackrest-bootstrap
          optional: True
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        annotations:
        labels:
          app: timescale
          release: my-fairwinds-insights
          heritage: Helm
          cluster-name: timescale
          purpose: data-directory
      spec:
        accessModes:
          
        - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
    - metadata:
        name: wal-volume
        annotations:
        labels:
          app: timescale
          release: my-fairwinds-insights
          heritage: Helm
          cluster-name: timescale
          purpose: wal-directory
      spec:
        accessModes:
          
        - ReadWriteOnce
        resources:
          requests:
            storage: "1Gi"
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-action-item-filters-refresh
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-action-item-filters-refresh
spec:
  schedule: "0/15 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: action-item-filters-refresh
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["action_items_filters_refresher"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: mKQAUpmOyx
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-action-items-statistics
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-action-items-statistics
spec:
  schedule: "15 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: action-items-statistics
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["action_items_statistics"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: 9VlAYoRt2Q
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-alerts-realtime
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-alerts-realtime
spec:
  schedule: "5/10 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: alerts-realtime
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["notifications_digest"]
              args:
                - --interval=10m              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: xNz5cRDkx8
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-costs-update
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-costs-update
spec:
  schedule: "15 */3 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: costs-update
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["cloud_costs_update"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: sJ475ln9aA
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 500m
                  memory: 2Gi
                requests:
                  cpu: 500m
                  memory: 2Gi
              volumeMounts:
              - name: secrets
                mountPath: /var/run/secrets/github
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
          volumes:
            - name: secrets
              secret:
                secretName: github-secrets
                optional: true
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-database-cleanup
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-database-cleanup
spec:
  schedule: "0 0 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: database-cleanup
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["database_cleanup"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: sot5hOCOgK
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-image-vulns-refresh
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-image-vulns-refresh
spec:
  schedule: "*/30 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: image-vulns-refresh
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["image_vulnerabilities_refresher"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: hpTedaQp0V
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-move-health-scores-to-ts
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-move-health-scores-to-ts
spec:
  schedule: "*/30 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: move-health-scores-to-ts
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["move_resource_health_scores_to_ts"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: 1dh6gyjVt4
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-notifications-digest
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-notifications-digest
spec:
  schedule: "0 16 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: notifications-digest
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["notifications_digest"]
              args:
                - --interval=24h              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: F4CRFfudjP
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-resources-recommendations
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-resources-recommendations
spec:
  schedule: "0 2 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: resources-recommendations
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["resources_recommendations"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: q3Qx9V0SWy
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 1
                  memory: 3Gi
                requests:
                  cpu: 1
                  memory: 3Gi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-saml
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-saml
spec:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: saml
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["refresh_saml_metadata"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: JB3KjVBL9z
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-slack-channels
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-slack-channels
spec:
  schedule: "0/15 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: slack-channels
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["slack_channels_local_refresher"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: KmiS1mcEVM
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 250m
                  memory: 512Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
---
# Source: fairwinds-insights/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-fairwinds-insight-cj-update-tickets
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: cronjob-update-tickets
spec:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-fairwinds-insight-cronjob-executor
          containers:
            - name: update-tickets
              image: "quay.io/fairwinds/insights-cronjob:16.2"
              command: ["update_tickets"]
              args:              
              # Required values
              envFrom:
              - secretRef:
                  name: fwinsights-secrets
              env:
              - name: FAIRWINDS_HOST
              - name: CACHE_BUST_TOKEN
                value: vr6jSjaWdP
              - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
                value: 4.4.4
              # General Server
              # Database
              - name: POSTGRES_DB
                value: fairwinds_insights
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PORT
                value: "5432"
              - name: POSTGRES_SSL_MODE
                value: require
              - name: POSTGRES_HOST
                value: my-fairwinds-insights-postgresql
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-postgresql
                    key: postgresql-password
              # Timescale Database
              - name: TIMESCALE_DB
                value: postgres
              - name: TIMESCALE_USER
                value: postgres
              - name: TIMESCALE_PORT
                value: "5433"
              - name: TIMESCALE_SSL_MODE
                value: require
              - name: TIMESCALE_HOST
                value: timescale
              - name: TIMESCALE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: fwinsights-timescale
                    key: PATRONI_SUPERUSER_PASSWORD
              - name: INSIGHTS_SAAS_HOST
                value: "https://insights.fairwinds.com"
              
              # Report Storage
              - name: REPORT_STORAGE_STRATEGY
                value: minio
              
              - name: MINIO_HOST
                value: my-fairwinds-insights-fw-minio:9000
              - name: MINIO_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootUser                
              - name: MINIO_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-fairwinds-insights-fw-minio
                    key: rootPassword
              - name: REPORT_STORAGE_REGION
                value: us-east-1
              - name: REPORT_STORAGE_BUCKET
                value: "reports"
              
              # Email
              - name: EMAIL_STRATEGY
                value: memory
              - name: EMAIL_SENDER
                value: 
              - name: EMAIL_RECIPIENT
                value: 
              # Third-party integrations
              # repo-scan-job specific
              - name: K8S_NAMESPACE
                value: default
              - name: INSIGHTS_CI_IMAGE_VERSION
                value: "5.4"
              
              # tag used for the fixer container 
              - name: CRON_JOB_IMAGE_REPOSITORY
                value: "quay.io/fairwinds/insights-cronjob"
              - name: CRON_JOB_IMAGE_TAG
                value: "16.2"
              
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 500m
                  memory: 2Gi
                requests:
                  cpu: 500m
                  memory: 2Gi
              volumeMounts:
              - name: secrets
                mountPath: /var/run/secrets/github
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 10324
          volumes:
            - name: secrets
              secret:
                secretName: github-secrets
                optional: true
---
# Source: fairwinds-insights/charts/timescale/templates/configmap-pgbackrest.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
---
# Source: fairwinds-insights/charts/timescale/templates/configmap-pgbouncer.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
---
# Source: fairwinds-insights/charts/timescale/templates/pgbackrest.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
---
# Source: fairwinds-insights/charts/timescale/templates/secret-certificate.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
---
# Source: fairwinds-insights/charts/timescale/templates/secret-patroni.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
---
# Source: fairwinds-insights/charts/timescale/templates/svc-prometheus.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
#
# This service is only created if Prometheus is enabled.
---
# Source: fairwinds-insights/charts/timescale/templates/secret-pgbackrest.yaml
# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
apiVersion: v1
kind: Secret
metadata:
  name: "timescale-pgbackrest"
  namespace: default
  labels:
    
    app: timescale
    chart: timescale-0.33.6
    release: my-fairwinds-insights
    heritage: Helm
    cluster-name: timescale
    app.kubernetes.io/name: "timescale"
    app.kubernetes.io/version: 0.33.6
    app.kubernetes.io/component: pgbackrest
  annotations:
    "helm.sh/hook": pre-install,post-delete
    "helm.sh/hook-weight": "0"
    "helm.sh/resource-policy": keep
type: Opaque
stringData:
  {}
...
---
# Source: fairwinds-insights/charts/minio/templates/post-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-fairwinds-insights-fw-minio-post-job
  labels:
    app: fw-minio-post-job
    chart: minio-5.0.10
    release: my-fairwinds-insights
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: fw-minio-job
        release: my-fairwinds-insights
    spec:
      restartPolicy: OnFailure      
      volumes:
        - name: etc-path
          emptyDir: {}
        - name: minio-configuration
          projected:
            sources:
              - configMap:
                  name: my-fairwinds-insights-fw-minio
              - secret:
                  name: my-fairwinds-insights-fw-minio
      serviceAccountName: minio-sa
      containers:
        - name: minio-make-bucket
          image: "quay.io/minio/mc:RELEASE.2023-05-18T16-59-00Z"
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", "/config/initialize" ]
          env:
            - name: MINIO_ENDPOINT
              value: my-fairwinds-insights-fw-minio
            - name: MINIO_PORT
              value: "9000"
          volumeMounts:
            - name: etc-path
              mountPath: /etc/minio
            - name: minio-configuration
              mountPath: /config
          resources:
            requests:
              memory: 128Mi
        - name: minio-make-user
          image: "quay.io/minio/mc:RELEASE.2023-05-18T16-59-00Z"
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", "/config/add-user" ]
          env:
            - name: MINIO_ENDPOINT
              value: my-fairwinds-insights-fw-minio
            - name: MINIO_PORT
              value: "9000"
          volumeMounts:
            - name: etc-path
              mountPath: /etc/minio
            - name: minio-configuration
              mountPath: /config
          resources:
            requests:
              memory: 128Mi
---
# Source: fairwinds-insights/templates/migrate-db-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: migrate-database
  annotations:
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook": "post-install,post-upgrade"
  labels:
    helm.sh/chart: fairwinds-insights-2.3.0
    app.kubernetes.io/name: fairwinds-insights
    app.kubernetes.io/instance: my-fairwinds-insights
    app.kubernetes.io/managed-by: Helm
    
    app.kubernetes.io/version: "16.2"
    app.kubernetes.io/component: migrate-db
spec:
  backoffLimit: 5
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: fwinsights-db-migration
        image: "quay.io/fairwinds/insights-db-migration:16.2"
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 1
            memory: 1024Mi
          requests:
            cpu: 80m
            memory: 128Mi        
        # Required values
        envFrom:
        - secretRef:
            name: fwinsights-secrets
        env:
        - name: FAIRWINDS_HOST
        - name: CACHE_BUST_TOKEN
          value: 4SOamEDf7D
        - name: FAIRWINDS_AGENT_CHART_TARGET_VERSION
          value: 4.4.4
        # General Server
        # Database
        - name: POSTGRES_DB
          value: fairwinds_insights
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_SSL_MODE
          value: require
        - name: POSTGRES_HOST
          value: my-fairwinds-insights-postgresql
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fwinsights-postgresql
              key: postgresql-password
        # Timescale Database
        - name: TIMESCALE_DB
          value: postgres
        - name: TIMESCALE_USER
          value: postgres
        - name: TIMESCALE_PORT
          value: "5433"
        - name: TIMESCALE_SSL_MODE
          value: require
        - name: TIMESCALE_HOST
          value: timescale
        - name: TIMESCALE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fwinsights-timescale
              key: PATRONI_SUPERUSER_PASSWORD
        - name: INSIGHTS_SAAS_HOST
          value: "https://insights.fairwinds.com"
        
        # Report Storage
        - name: REPORT_STORAGE_STRATEGY
          value: minio
        
        - name: MINIO_HOST
          value: my-fairwinds-insights-fw-minio:9000
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: my-fairwinds-insights-fw-minio
              key: rootUser                
        - name: MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: my-fairwinds-insights-fw-minio
              key: rootPassword
        - name: REPORT_STORAGE_REGION
          value: us-east-1
        - name: REPORT_STORAGE_BUCKET
          value: "reports"
        
        # Email
        - name: EMAIL_STRATEGY
          value: memory
        - name: EMAIL_SENDER
          value: 
        - name: EMAIL_RECIPIENT
          value: 
        # Third-party integrations
        # repo-scan-job specific
        - name: K8S_NAMESPACE
          value: default
        - name: INSIGHTS_CI_IMAGE_VERSION
          value: "5.4"
        
        # tag used for the fixer container 
        - name: CRON_JOB_IMAGE_REPOSITORY
          value: "quay.io/fairwinds/insights-cronjob"
        - name: CRON_JOB_IMAGE_TAG
          value: "16.2"
        
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: false
          runAsUser: 10324
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: polaris-config
          mountPath: /tmp/
      volumes:
      - name: polaris-config
        configMap:
          name: polaris-config
          optional: true
          items:
          - key: polaris-config.json
            path: polaris-config.json
