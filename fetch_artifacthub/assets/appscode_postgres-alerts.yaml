---
# Source: postgres-alerts/templates/alert.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: my-postgres-alerts
  namespace: default
  labels:
    helm.sh/chart: postgres-alerts-v2023.05.09
    app.kubernetes.io/name: postgres-alerts
    app.kubernetes.io/instance: my-postgres-alerts
    app.kubernetes.io/version: "v0.2.0"
    app.kubernetes.io/managed-by: Helm
    release: kube-prometheus-stack
spec:
  groups:
  - name: postgres.database.default.my-postgres-alerts.rules
    rules:
    - alert: PostgresqlDown
      expr: pg_up{job="my-postgres-alerts-stats",namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: Postgres instance down (instance {{ $labels.pod }})
        description: "Postgres instance is down on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgresqlSplitBrain
      expr: count(pg_replication_is_replica{job="my-postgres-alerts-stats",namespace="default"} == 0) != 1
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: Postgresql split brain (instance {{ $labels.pod }})
        description: "Split Brain, too many primary Postgresql databases in read-write mode\n  {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgresqlTooManyLocksAcquired
      expr: ((sum by (pod) (pg_locks_count{job="my-postgres-alerts-stats",namespace="default"}) ) / ( sum by (pod) (pg_settings_max_locks_per_transaction{job="my-postgres-alerts-stats",namespace="default"}) * sum by (pod) (pg_settings_max_connections{job="my-postgres-alerts-stats",namespace="default"}))) > 0.2
      for: 2m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: Postgresql too many locks acquired (instance {{ $labels.pod }})
        description: "Too many locks acquired on the database. \n  If this alert happens frequently, we may need to increase the postgres setting max_locks_per_transaction.\n  {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgresqlRestarted
      expr: time() - pg_postmaster_start_time_seconds{job="my-postgres-alerts-stats",namespace="default"} < 60
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: Postgresql restarted (instance {{ $labels.pod }})
        description: "Postgresql restarted\n  {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgresqlExporterError
      expr: pg_exporter_last_scrape_error{job="my-postgres-alerts-stats",namespace="default"} > 0
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: Postgresql exporter error (instance {{ $labels.pod }})
        description: "Postgresql exporter is showing errors. A query may be buggy in query.yaml\n  {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgresqlHighRollbackRate
      expr: rate(pg_stat_database_xact_rollback{job="my-postgres-alerts-stats",namespace="default"}[3m]) / rate(pg_stat_database_xact_commit{job="my-postgres-alerts-stats",namespace="default"}[3m]) > 0.02
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: Postgresql high rollback rate (instance {{ $labels.pod }})
        description: "Ratio of transactions being aborted compared to committed is hign. {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgresTooManyConnections
      expr: sum by (pod) (pg_stat_activity_count{job="my-postgres-alerts-stats",namespace="default"}) >= sum by (pod) (pg_settings_max_connections{job="my-postgres-alerts-stats",namespace="default"} * 80) / 100
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: Postgresql too many connections (instance {{ $labels.pod }})
        description: "PostgreSQL instance has too many connections . 80% of Postgres connections are in use on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: postgres.provisioner.default.my-postgres-alerts.rules
    rules:
    - alert: KubeDBPostgreSQLPhaseNotReady
      expr: kubedb_com_postgres_status_phase{phase="NotReady",app="my-postgres-alerts",namespace="default"} == 1
      for: 1m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: KubeDB PostgreSQL Phase NotReady (postgres {{ $labels.postgres }})
        description: "KubeDB PostgreSQL Phase not ready on {{ $labels.postgres }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBPostgreSQLPhaseCritical
      expr: kubedb_com_postgres_status_phase{phase="Critical",app="my-postgres-alerts",namespace="default"} == 1
      for: 15m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: KubeDB PostgreSQL Phase Critical (postgres {{ $labels.postgres }})
        description: "KubeDB PostgreSQL Phase Critical {{ $labels.postgres }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: postgres.opsManager.default.my-postgres-alerts.rules
    rules:
    - alert: KubeDBPostgreSQLOpsRequestStatusProgressingToLong
      expr: ops_kubedb_com_postgresopsrequest_status_phase{phase="Progressing",app="my-postgres-alerts",namespace="default"} == 1
      for: 30m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: PostgreSQLOpsRequest is in progressing status for too long (postgresopsrequest {{ $labels.postgresopsrequest }})
        description: "PostgresOpsRequest {{ $labels.postgresopsrequest }} is in progressing status for too long\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBPostgreSQLOpsRequestFailed
      expr: ops_kubedb_com_postgresopsrequest_status_phase{phase="Failed",app="my-postgres-alerts",namespace="default"} == 1
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: PostgreSQLOpsRequest failed (postgresopsrequest {{ $labels.postgresopsrequest }})
        description: "PostgresOpsRequest {{ $labels.postgresopsrequest }} failed \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: postgres.stash.default.my-postgres-alerts.rules
    rules:
    - alert: PostgreSQLStashBackupSessionFailed
      expr: stash_backup_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-postgres-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: PostgreSQL Stash backup session failed (invoker_name {{ $labels.invoker_name }})
        description: "PostgreSQL Stash backupsession failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgreSQLStashRestoreSessionFailed
      expr: stash_restore_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_restoresession_info{target_name="my-postgres-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: PostgreSQL Stash restore session failed (invoker_name {{ $labels.invoker_name }})
        description: "PostgreSQL Stash restore session failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgreSQLStashNoBackupSessionForTooLong
      expr: time() - stash_backup_last_success_time_seconds + on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-postgres-alerts", target_kind="AppBinding", namespace="default"} - 1 > 18000
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: PostgreSQL Stash no backup for last 18000 second (invoker_name {{ $labels.invoker_name }})
        description: "PostgreSQL Stash no backup for too long {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgreSQLStashRepositoryCorrupted
      expr: stash_repository_integrity * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-postgres-alerts", target_kind="AppBinding", namespace="default"}
      for: 5m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: PostgreSQL Stash repository corrupted (invoker_name {{ $labels.invoker_name }})
        description: "PostgreSQL Stash repository corrupted {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgreSQLStashRepositoryStorageRunningLow
      expr: stash_repository_size_bytes * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-postgres-alerts", target_kind="AppBinding", namespace="default"} > 1.073741824e+10
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: PostgreSQL Stash Repository storage more than 1.073741824e+10 byte. (invoker_name {{ $labels.invoker_name }})
        description: "PostgreSQL Stash Repository storage running low {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgreSQLStashBackupSessionPeriodTooLong
      expr: stash_backup_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-postgres-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary:  PostgreSQL Stash backup session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "PostgreSQL Stash backup session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: PostgreSQLStashRestoreSessionPeriodTooLong
      expr: stash_restore_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_restoresession_info{target_name="my-postgres-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary:  PostgreSQL Stash restore session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "PostgreSQL Stash restore session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: postgres.schemaManager.default.my-postgres-alerts.rules
    rules:
    - alert: KubeDBPostgreSQLSchemaPendingForTooLong
      expr: schema_kubedb_com_postgresdatabase_status_phase{phase="Pending",app="my-postgres-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema pending for too long for (postgresdatabase {{ $labels.postgresdatabase }})
        description: "KubeDB schema pending for too long.\n {{ $labels.postgresdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBPostgreSQLSchemaInProgressForTooLong
      expr: schema_kubedb_com_postgresdatabase_status_phase{phase="InProgress",app="my-postgres-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema is in progress for too long for (postgresdatabase {{ $labels.postgresdatabase }})
        description: "KubeDB schema is in progress for too long.\n {{ $labels.postgresdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBPostgreSQLSchemaTerminatingForTooLong
      expr: schema_kubedb_com_postgresdatabase_status_phase{phase="Terminating",app="my-postgres-alerts",app_namespace="default"} == 1
      for: 30m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema terminating for too long for (postgresdatabase {{ $labels.postgresdatabase }})
        description: "KubeDB schema terminating for too long.\n {{ $labels.postgresdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBPostgreSQLSchemaFailed
      expr: schema_kubedb_com_postgresdatabase_status_phase{phase="Failed",app="my-postgres-alerts",app_namespace="default"} == 1
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema failed for (postgresdatabase {{ $labels.postgresdatabase }})
        description: "KubeDB schema failed.\n {{ $labels.postgresdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBPostgreSQLSchemaExpired
      expr: schema_kubedb_com_postgresdatabase_status_phase{phase="Expired",app="my-postgres-alerts",app_namespace="default"} == 1
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Postgres
        k8s_resource: postgreses
        app: my-postgres-alerts
        app_namespace: default
      annotations:
        summary: KubeDB schema expired for (postgresdatabase {{ $labels.postgresdatabase }})
        description: "KubeDB schema expired.\n {{ $labels.postgresdatabase }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
