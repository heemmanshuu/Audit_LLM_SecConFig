---
# Source: chart-repo/charts/gateway/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chart-repo-gateway
  labels:
    app: gateway
    chart: gateway-2.14.2
    heritage: "Helm"
    release: "my-chart-repo"
type: Opaque
data:
---
# Source: chart-repo/charts/server/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-chart-repo-server
  labels:
    app: server
    chart: server-2.14.2
    heritage: "Helm"
    release: "my-chart-repo"
type: Opaque
data:
---
# Source: chart-repo/charts/gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chart-repo-gateway
  labels:
    app: gateway
    chart: gateway-2.14.2
    heritage: "Helm"
    release: "my-chart-repo"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: gateway
    release: "my-chart-repo"
---
# Source: chart-repo/charts/server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-chart-repo-server
  labels:
    app: server
    chart: server-2.14.2
    heritage: "Helm"
    release: "my-chart-repo"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: server
    release: "my-chart-repo"
---
# Source: chart-repo/charts/gateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-chart-repo-gateway
  annotations:
    {}
  labels:
    app: gateway
    chart: gateway-2.14.2
    heritage: "Helm"
    release: "my-chart-repo"
spec:
  selector:
    matchLabels:
      app: gateway
      release: "my-chart-repo"
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 0
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      name: my-chart-repo-gateway
      annotations:
        iam.amazonaws.com/role: ""
      labels:
        app: gateway
        release: "my-chart-repo"
    spec:
      securityContext:
        fsGroup: 1000      
      containers:
      - name: gateway
        image: chartmuseum/chartmuseum:v0.5.0
        imagePullPolicy: IfNotPresent
        securityContext:
          {}
        env:
        - name: "CHART_POST_FORM_FIELD_NAME"
          value: "chart"
        - name: "DEBUG"
          value: "false"
        - name: "DISABLE_METRICS"
          value: "true"
        - name: "LOG_JSON"
          value: "true"
        - name: "PROV_POST_FORM_FIELD_NAME"
          value: "prov"
        - name: "STORAGE"
          value: "amazon"
        args:
        - --port=8080
        ports:
        - name: http
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: http
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
      volumes:
      - name: storage-volume
        emptyDir: {}
---
# Source: chart-repo/charts/server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-chart-repo-server
  annotations:
    {}
  labels:
    app: server
    chart: server-2.14.2
    heritage: "Helm"
    release: "my-chart-repo"
spec:
  selector:
    matchLabels:
      app: server
      release: "my-chart-repo"
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 0
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      name: my-chart-repo-server
      annotations:
        iam.amazonaws.com/role: ""
      labels:
        app: server
        release: "my-chart-repo"
    spec:
      securityContext:
        fsGroup: 1000      
      containers:
      - name: server
        image: chartmuseum/chartmuseum:v0.5.0
        imagePullPolicy: IfNotPresent
        securityContext:
          {}
        env:
        - name: "CHART_POST_FORM_FIELD_NAME"
          value: "chart"
        - name: "DEBUG"
          value: "false"
        - name: "DISABLE_API"
          value: "true"
        - name: "DISABLE_METRICS"
          value: "true"
        - name: "LOG_JSON"
          value: "true"
        - name: "PROV_POST_FORM_FIELD_NAME"
          value: "prov"
        - name: "STORAGE"
          value: "amazon"
        args:
        - --port=8080
        ports:
        - name: http
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: http
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
      volumes:
      - name: storage-volume
        emptyDir: {}
