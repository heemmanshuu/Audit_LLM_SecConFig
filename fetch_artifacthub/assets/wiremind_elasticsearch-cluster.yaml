---
# Source: elasticsearch-cluster/charts/es-data-hot/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "my-elasticsearch-cluster-data-hot-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "my-elasticsearch-cluster-data-hot"
---
# Source: elasticsearch-cluster/charts/es-master/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "my-elasticsearch-cluster-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "my-elasticsearch-cluster-master"
---
# Source: elasticsearch-cluster/charts/es-data-hot/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: my-elasticsearch-cluster-data-hot-certs
  labels:
    app: my-elasticsearch-cluster-data-hot
    chart: "es-data-hot"
    heritage: Helm
    release: my-elasticsearch-cluster
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0RENDQXB5Z0F3SUJBZ0lRWEh0L1lLOTE0amk4cW1oRE5WOVk3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSTBNRGt4TmpBNE1URTBNbG9YRFRJMQpNRGt4TmpBNE1URTBNbG93S2pFb01DWUdBMVVFQXhNZmJYa3RaV3hoYzNScFkzTmxZWEpqYUMxamJIVnpkR1Z5CkxXMWhjM1JsY2pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS0MxaEQydFBHd2UKUEhKNndNS0FWSWhwTk1GaDV6QlZFWlYyWEJqaXBXZ1V6OUlzNDdxRElPdDFuRVhEN2JkU2Z6UGlpd0hMemVnbApIanZzd1YySiszemN2QnB1U0hwR2NUdGovR04zQTNwUUg2My9ienJRUW94dGRYeXJOVyt6aURrdUl6Q1FFMmlCCmMxNU5OTlU5MW94SGlKajk5TUdkelRLMXVrcm5RMVNaNGorNDBxVUR3N1B1MWVWNDIzV1RvRXF3bmRlTVpCZDcKZWtneWdlVGV1SWRVRENMLzF5SXh2ZktudldFaXJjUkZ3dURMMk5UZXBnNlhrbDZGT1R6U0ZpVTF6Vjl0alJNSQorMk42c3BtQWN5MUVYWGt6TG1MbkdpQXBtTnFBM0pjYVZiNS9NMzh3WG9maHk0RGxKWjNWOU5GSEhNWVhWSjg4CmZCTkJFc1FHYllVQ0F3RUFBYU9CNURDQjRUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVM1NnNAovTSs3WlovWFUySW5sc0tVWWFhaVJqMHdnWUFHQTFVZEVRUjVNSGVDSDIxNUxXVnNZWE4wYVdOelpXRnlZMmd0ClkyeDFjM1JsY2kxdFlYTjBaWEtDSjIxNUxXVnNZWE4wYVdOelpXRnlZMmd0WTJ4MWMzUmxjaTF0WVhOMFpYSXUKWkdWbVlYVnNkSUlyYlhrdFpXeGhjM1JwWTNObFlYSmphQzFqYkhWemRHVnlMVzFoYzNSbGNpNWtaV1poZFd4MApMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWhOUld2ZjJDd3VZdTliRUYwNVI0OHAwZ0xKYVVtTDYzClhYVkF1Q0tjVUtPNVVrSHZMYjhhbXN0QkZJbER3WUl5ZkZBTVNRMkVEVkRrbnZaNTF4dEZNVE5LUHMwN2RucGcKU0phR2xnYnhrMDRpcm1yY3NMaVFNcUN5aVI5d0M0cktNTDFIcFBZbWNiZjl0R0FaMTVYUkkvejczK3U5VER6Vwp4dFZ2clFZZjB3NG05Y3AxTWVBbWk3NkdtVTZnczM1MURuMlRNOGRTcTJEcHZsaGFaSW1CdzNBa0lma2JRZGF5CndIaXF0aUh6UHRoVnNGSmVkZDRtR2R5TmhVRDVrbFVxOStRVyt6U2pJMXpQdEZJUUxGS1hGcEV5Rk9zWC9HMFkKb1N2Uk82VEZuZ1lmRTdLY0V2a2tWd3lSUGJYTXNMNlRET3dpRjl0Ly9XRFlTSjAwdjJqbXpRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb0xXRVBhMDhiQjQ4Y25yQXdvQlVpR2swd1dIbk1GVVJsWFpjR09LbGFCVFAwaXpqCnVvTWc2M1djUmNQdHQxSi9NK0tMQWN2TjZDVWVPK3pCWFluN2ZOeThHbTVJZWtaeE8yUDhZM2NEZWxBZnJmOXYKT3RCQ2pHMTFmS3MxYjdPSU9TNGpNSkFUYUlGelhrMDAxVDNXakVlSW1QMzB3WjNOTXJXNlN1ZERWSm5pUDdqUwpwUVBEcys3VjVYamJkWk9nU3JDZDE0eGtGM3Q2U0RLQjVONjRoMVFNSXYvWElqRzk4cWU5WVNLdHhFWEM0TXZZCjFONm1EcGVTWG9VNVBOSVdKVFhOWDIyTkV3ajdZM3F5bVlCekxVUmRlVE11WXVjYUlDbVkyb0RjbHhwVnZuOHoKZnpCZWgrSExnT1VsbmRYMDBVY2N4aGRVbnp4OEUwRVN4QVp0aFFJREFRQUJBb0lCQUdYNHh5QWJlK3RlaEJ4ZgpwMC9DL2VCUVlSa1RkZzVFN0JOYU5yWFRtZ0Nncy8wNFhvZEtET2xhaHYzOWhDaCtRQmc3OXRmODZYb1RrMHVTCnZsOEwzbmNyMkc4czZ2QXJJazM4ODNocFc5dVFXNG1jT29lbS9aTDlJVDhwbzQ1czdGTGI0NWc4MHhQTWo5ZVcKUlovSXpRblZtZWI1dlFQZGpRWlFLUlMrQ1FyMFYrdDRaRWUzUlN3VzhMOHVFTWRtcDlMaHNMcmJEU0hJbG04RQo4ZjBEMUZZUzhXVUZRYzhiaDRSRktpb0F6amxKU3RjVEUwSk45a2ZaZWh6dzRpcGxZcHEyK2FaelJpSUtzalZoCmdtSlluVUpLSXpBSVVFVkl1UzQ2K1pTa2U5cDV3Tk9ZYXNmc2NodW4rdjFYVExBTHlya2xMQkoyZWhFT1c5emIKcVJ2R0QwRUNnWUVBMDF5UEd3NGFNdGNyUFdMRGJzQlRiZWErZ3Y4MklUa1F1dTQwQ2ZGYmFoVGN0WnkyaUU5NApyRFllYXV5R09ibmVtK3BCZnBPTHY1cDNVNzVsRWJqZFRrS0o3elU5VFpKT0FXeFNrTkdmS1ZkRVpiU0RGNWJICld6Z2xVYkc5SmhLenFGSUlKMzNUVUpjVmNZTHlWS0FFQnZvMm1ibjN3UlVzMGZ5SXU3QmJRYk1DZ1lFQXdxWmoKQzV2ZFh3QS9iZEtaV2tGRmJBMW5sNnBENUNIQllGbnNpUlA3WG5FSzJCbk1LKzF1d290T29FWnlKWGwyeWNmRQpHNnpIZUg0VGJYakJzdXZUbXQ3ZWtYTVkwNFBIWEhiak82bVNzRFZOUVpTTW9KempMWk9zOVpxa1NlRDB2aFlmClpIU3BiYUhXamZlSUxhSmNRU1BsQ3FKUnUrQ3dWZi9ybnlIMHgrY0NnWUVBdDYvdFB0b1dzckNGQjZoWnFGckYKSnZJdUI3SzgzRXEzMjMxQkJKTVpteXZlVkllSnF4VkdEb1JLRXlyVHpEOVkwNi9XazZhdkFTbkJJcXFKTThteApxMTN3ZWsrT28yZlBHeldFM0E4UmYrQXp0U0FYL2R3d0RYclNGQm1nQlFLajJGalNkVi9JMG5VN1VaYzMrNHZGCmREcm9VTmxxRkFmUEYvK2M1V0R6TGprQ2dZRUFsTHJHRzJ5eExaSG01V2R4dmNENTVxSW5jWCtyK0hqQ1pYalEKZjcxQTZOeS9TSGdOeGRMYU90UnU4NUJnVDdvTHhncGFFanRtL3U1MnNjTC9YbE5Ma0o2U3VkaVVNNm9SZnRsbwpyNEhXajhWcWpwMlBCbnBhSzgwVzcyT0YvTjFpcEl3SzJKczdpb1dLaDFlSU9qWkEvNVVKd2FKZGlZMFpyOXlvCmtTTkZBaWtDZ1lCS0VmcS9KamVEUStvL3FpUnNlVTlYQ3lsREZuZlVXR2RIVkhkY0VNU2lvZWdRSTNBMG03RGgKM3J0UDBLUksvaTFRalNqMlRTdkg2YW5hQVFnd0Ftd1JBTk5oUW9yYkFIUDVGYXFkdFNjK1pkZ0dudkJXclhoRQpXYXdDVEdsMlJWWUswZWRCaG9qbXhXaVQvT2kxQ2xqVmR4REg3ZkE2Z1E1ZEFITVB5TXlpbGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQU5HSGVRUlNUT3BvemtmYmFCWmhnWHd3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREE1TVRZd09ERXhOREZhRncweQpOVEE1TVRZd09ERXhOREZhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEUUdYZTAwcGRzbXgyQktnS3o1MFMrRjQweTUzbEcKOWQyZlRaOC9rLzBldzFVVW5ET0F1UVdMVHJybVFtV2tYaUtGSDVDSkRQVVZPd3hMMU55cWw0VER6M0Jja09aeApRNDdSczUzYVF3UVp3MW1JTS9iY3JZcGJGREN5Mk1KMzZYMTduR2ZDS2ZBU1ZzUWdFUmR4WTh5WEdMdllhQ0lLCnF3am54YVpuNE93ZWRETWg3NVV2V1IwaFgxZFJ3VzdRUGNkMy9SdEpRQnZpckcwMjh1cVhzaW9ycEQ0dE5QQlUKWXBCVHpESDhVU2lsUnBobHM2ZFRzZXhVZ2Q2UXZjbmwzdDYyRWwwMnAvRUFXZGtqTGovOUxGRGgvRVRUSjJtUgpIM0NXdVRNK3FKTytDRHhEOTRPc01CK2lORkErb3F0UUlieFRiSEE1cElMNVNwL3dWYTBEN2hPOUFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVTNTZzQvTSs3WlovWFUySW5sc0tVWWFhaQpSajB3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUFjVDNxLzBwM2pvQWwwaU41WTV4YTFseFJFanZZSHZjN0l3CmU3NXNqd2NYOE9xNG8zUTZ3MWZyNnNNc1BlK1p1cUtOUzVEeC9ET1ptUUxNcUEwVHFVSE41TEVhRlRPVTlUZE0KdVJLY1FUZGtmOTBNVituT1RwSllqN050TDA2YVlVdEdrelFqT3N6LzE2SjRqdlcvcmFpWkc4N0UxK1lhUFpYcwo4Z2RENGxvdS9tc0czcWVNYllhb1hycGZRTTE5M2h6dkhmZFpxUTBnMmJDOGJpOG82MW5HOXRMZ0ZQZStlWUVMCnBGUkhoSTgwNC9aa1hvbTg0aSsxWVBybHc4dERJc1FrZGJKd2ZOYi9IZHcvWkNqZFY1YlNYaExBem4rcTBFMDMKRUx1OXlXRnhxd2hXWjAzRkdsZFVrZms3emVDNis3RGx6dEgxVVVtTnhDTExFb3pBWTlrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch-cluster/charts/es-data-hot/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-elasticsearch-cluster-data-hot-credentials
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-data-hot"
    app: "my-elasticsearch-cluster-data-hot"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "WngwYXVGTmNrREZ5YWIxbg=="
---
# Source: elasticsearch-cluster/charts/es-master/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: my-elasticsearch-cluster-master-certs
  labels:
    app: my-elasticsearch-cluster-master
    chart: "es-master"
    heritage: Helm
    release: my-elasticsearch-cluster
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0RENDQXB5Z0F3SUJBZ0lRVjlRSUxlTDl4UHFvL3BYUmFuRlpaekFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSTBNRGt4TmpBNE1URTBNVm9YRFRJMQpNRGt4TmpBNE1URTBNVm93S2pFb01DWUdBMVVFQXhNZmJYa3RaV3hoYzNScFkzTmxZWEpqYUMxamJIVnpkR1Z5CkxXMWhjM1JsY2pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTU9xNnpxem16ekEKc29WQ25Idk1ZS2tEVjlhTVBHMUdZNzA5WXBTRlp4SXRvWGNUN2kwMTgzVWNhNXJuUWw4TWdkTUdER25aRU8wZgpOOE9lbWwvbXBPeFV4alpqY29YTVdPQzVLbzFOTS9Xb3BkQmo1eGErRm1JaDdWU0c1SFlTcWdnZCttL3E5d3puCmVBZFBKdXlUNVlZSTQ4bVorSi9wMHZiUkJOVUErUXgydy9RNTFPbnlWZFlubWhFeHVlZ3BiaE44c052U1p0S0sKUXczSDk3TU1waGxqbkxTcVpZK08yaVQzQlNwdnUrK2M5T0J5U1BMRFdLYnNVMENwSmI2RmVWeHlnckNxamtjRQpVamdraWd4L2pWWjFzSVVyb25peUIxRVJ0YkQ2Wk5DTzdwbXRwd1pUUjdVWENZUjRNcGplaVdpbVBYTUErZkN1CkN3Q3dCRytjVFVrQ0F3RUFBYU9CNURDQjRUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVdGxSNwpSSmdRZm8vYy9ieEtqbGxwZVVob0Nmd3dnWUFHQTFVZEVRUjVNSGVDSDIxNUxXVnNZWE4wYVdOelpXRnlZMmd0ClkyeDFjM1JsY2kxdFlYTjBaWEtDSjIxNUxXVnNZWE4wYVdOelpXRnlZMmd0WTJ4MWMzUmxjaTF0WVhOMFpYSXUKWkdWbVlYVnNkSUlyYlhrdFpXeGhjM1JwWTNObFlYSmphQzFqYkhWemRHVnlMVzFoYzNSbGNpNWtaV1poZFd4MApMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVlLeC9tTzhKL0c3UDlFR1FWcjF3Yk5TS2o2cUF0UWtRCkFuV3YyQzdCNVZZdFdKRHJEa0JKWEFsYnVtdTE3QzJHUkg1M0hiMmhlanNhZnBnOWpBZ3Rkd1FOa0xkY2Y0VWsKSzgzeGp4MDJoT05XVi9XdC8zT3NhbFJiNzNOaXNGaVA4ckRzNE5NOE5ZZTJLM3BhMEVmd0F5cW4ydkNEalNZVAprTXJZd0tzRytaN0c3M1NoRUxZNFdHY05PM1psZXQzZTJwSFBUeER6bCt1WllCeHEyUzA0UUpmcWFNSmgxb0tHCkpmVVFmcVQ4R3FMY0RQdVhRbHQ5czk0QUlPSllYSkd6T0FhQ281eGRabWsxZ0ZJZ0tOSWphTEZXWVJmNnUvcDAKd09JNXhuSDFCVlh2VWZLdWljUVNaN1hOWGVKU0V2N0JPZzhkb0tHdFc0YW1ncDRkMUxlNmVBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdzZyck9yT2JQTUN5aFVLY2U4eGdxUU5YMW93OGJVWmp2VDFpbElWbkVpMmhkeFB1CkxUWHpkUnhybXVkQ1h3eUIwd1lNYWRrUTdSODN3NTZhWCthazdGVEdObU55aGN4WTRMa3FqVTB6OWFpbDBHUG4KRnI0V1lpSHRWSWJrZGhLcUNCMzZiK3IzRE9kNEIwOG03SlBsaGdqanlabjRuK25TOXRFRTFRRDVESGJEOURuVQo2ZkpWMWllYUVURzU2Q2x1RTN5dzI5Sm0wb3BERGNmM3N3eW1HV09jdEtwbGo0N2FKUGNGS20rNzc1ejA0SEpJCjhzTllwdXhUUUtrbHZvVjVYSEtDc0txT1J3UlNPQ1NLREgrTlZuV3doU3VpZUxJSFVSRzFzUHBrMEk3dW1hMm4KQmxOSHRSY0poSGd5bU42SmFLWTljd0Q1OEs0TEFMQUViNXhOU1FJREFRQUJBb0lCQVFDY0VFZHVtckxHMGl1Ugpmbit4Zm1IYWJJQXk3OGVDb1JJTWJsbWlmSVNwU3h2dURrZDZaLzIyK3VRWXVUdUc5RUxZUFlySklna09HRWd5CkR0NnlmeFFzSzdHc3o4VVlVdFRRNk4rM3RFd3RORWFNNENJQlVid29xVWJTbElURWFENldHdE1WVVNPYmQwT1YKRU56SzlXdXNiSXJDMGJ3c1VDT2tHVEx4Y2NVeTJtSkMvczArTVRGTFVzckQzVmhudmxXVWg1SFhpVS9rTndJQQo1SkZwOUxLOUdQNEl0d2xZQWJIV29hWUhzQVNSRzNvTjU0OXhSTzdBQmkvNVhSS0FvSXhhRk82Q0xENkl5QVNVCk80U3FTbklIRzE3clZoVDZHNncwR1Nqb2hXMkVlNjFOSm1KdXgrcmJ5TU54RDRUa2dXWmZOZlZWTUpOcE11QUwKQzJDdUhNUEJBb0dCQU9qWUR3WTVQSzhJdHB4L0ZjK0hhZGN6bG52cGYrR0FiTUtacnZYSU1sSWpaOVZMVFFNeAo1OGllQUhQRDBmTXY4K1dIY1BqeWtQcmtkem84TEJNdi8vTGxvd3IzZkRhc2FrSXBJYjBJZHRTVGJRZlR2VE04CnVjY05oY25Ya012dzJGUE5Rd1JWTmJJbXgzbmY0NXRXVVM5aTFiR1VGVGJsc1MrL2MwVzBNMUpIQW9HQkFOY2cKWkxhNkhzLzFUbWQ2My8wb3hFM1VaUFlIUkoxam9rcFl5K1A5eVM3M2FqWUw3NE9zV1lYWm5YMWZuTnk1akZObApZTVJtUncyUzNuMjJKTWdnYVdpMnZ0QThFUnhXOGhLOXdIY2EvMm84K1VWaEFweEtPbHI4U3FtZ25EQVBFMStZCkRmQStDSWxrWHV4ZlM5Z2ZMbWU3akVYcmJmUDRPcU1BeFJ4N1V4dnZBb0dBSWJFWnczSEd5U0QrbzNoMEpIcFkKbzA0UXFVOXBOSzBMajhFREl3ZGIyS3pNMm4weDRKTjVFWHRqWDF6blpVUDhDNnRrZW5GRzd6YmQxYXhkU0UxNgp3Si9menJkdTNzNWw5YnJUNmZGdW1HWFlzZmcrZVVxQkt6OVdxNVVvbTRuM0UzRXhFRkJ3RzU0bTRRaTNlNE9xCjdhdGtkblNSK1VhVk0rNkU5SUlWcHdNQ2dZRUFzd25icUJQb2R1elNydDZkc2lVT2t6TzBQdW8zbWNHRkhOa2YKLzRTRXZsamRoVk9UcUFOMWtpZFZvalZENkpOb0RUUXZQK1ZiTnhuSG45cEtiR0JGT2dmMWNIcTlSdGU1cWcxUQpOQkE5Q0I3czJtZnRjME4zbzZlYlArZFNkZERtTDhYdHU4YjA5ZHVhQUtFakR5Q01UM3JRT0pUQ3Nxd2hxTzJJCkhyY29xUE1DZ1lBaTkxQkZQNVludWUyTmZVcU0xbE4wc0tDaW15cjFJSUJxWlBMOUtlRWFieTVMVEVFb0FQOFQKNkZJTTlkNVFjcEZ2dlI4ZWVML1lqK082Z1dVekljR3BweW9CMzVPZXpmQ0pCWGlwNXY1MGU0MmFaN1lGamRKOApBLzdTbmt4b2tObmgwUDgwMlBEQkVSY3NFaGNhMXMxQ1pzNjk1Tk9uU2dCMzhZdm93dDIxanc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQUxsZCt6OVhPaTR5Rm94U3JvZDAzeEF3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREE1TVRZd09ERXhOREZhRncweQpOVEE1TVRZd09ERXhOREZhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNTh0U0RKTUVWR3VFNmNjcGJVYjY5VHN0bVAydVkKS0xVaGNOeGF3TEtnamhxZDBQSGZVblhGckJ6ZVBnSlhrU2JaRHhqNytFT0d2N3ROa09xOWxWQzlLejRORFRFQQpXSmluUzhkNnBsR1E0bWc0T1djbFVuMlVnc2xKNWdRL3VJS1hRbkNWSERnMHRsS2ZZK2c4Y0x5MldRTHVvS2FMCmE1VXphR0kyc21VVWxCSys4cFBZOWFOdEVZdDZjcWxrWWdCcUxscjRMcW1aU3BsUzJRWUxyMVBHY0dQSEJwT3IKNVB5MEFtV2MvcmxnUGFaWDFaWmREbWRWc2NrVE5lemJ1VVhnY2t1TkxYNk5rMml2YmxZU051eXkwdWg4VXY3Vgo4TjBBMXRzSHFEc2tuc25NMlBlem9aQnBPYnpXSVZyVTAyYjFhaGFwQkRRMmtRY3hXMEF4Ym9vN0FnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXRsUjdSSmdRZm8vYy9ieEtqbGxwZVVobwpDZnd3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUE5dTdLc2RxY2pDWW9zRVZXdDJzQWlHY3A3VktqTWE5Zk92ClJ5N0JIcWh5WlhrbFVWb0VnZjFrb3FGUWd6b0tVUHFFQi9ObnJ6VXc0blpnVkc5eGhTWWxabGYvMjVMczFYMXAKZW5lbUVsbERaK3VlVnUzeGlCLzUwM0xHSHNBNHpJM2J5azNBbzlmM1F4QS9HQWtPbC9mUmI5MFphK0R2L2lmNApuQ3FFV05PUVVOUHpqR1F3WUtzZ1YrRUtkNk52VnpzVnBGbzJBNGxza2g0R1BLb0ZSUUFMbVNhNDkwVlJuNXpxCi9WcjFQRXFOVzNMdjRkWFI3VG4rVHlLMUFrWnlYMHc0eEpwMmh2TUVZMEVpUlZiTXZqV3RnQ1pxTk41OHYwdXMKWmV2ZFp1S05ySU1VU1AvL1B2b3NIUTMrZDBrYzZTdWdnOVVYSjM1MUVOdnZScll3djMwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch-cluster/charts/es-master/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-elasticsearch-cluster-master-credentials
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-master"
    app: "my-elasticsearch-cluster-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "VnA3amM5b3JqZVVJSm1WOA=="
---
# Source: elasticsearch-cluster/charts/es-data-hot/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-elasticsearch-cluster-data-hot
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-data-hot"
    app: "my-elasticsearch-cluster-data-hot"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "my-elasticsearch-cluster"
    chart: "es-data-hot"
    app: "my-elasticsearch-cluster-data-hot"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch-cluster/charts/es-data-hot/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-elasticsearch-cluster-data-hot-headless
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-data-hot"
    app: "my-elasticsearch-cluster-data-hot"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "my-elasticsearch-cluster-data-hot"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch-cluster/charts/es-master/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-elasticsearch-cluster-master
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-master"
    app: "my-elasticsearch-cluster-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "my-elasticsearch-cluster"
    chart: "es-master"
    app: "my-elasticsearch-cluster-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch-cluster/charts/es-master/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-elasticsearch-cluster-master-headless
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-master"
    app: "my-elasticsearch-cluster-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "my-elasticsearch-cluster-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch-cluster/charts/prometheus-elasticsearch-exporter/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-elasticsearch-cluster-prometheus-elasticsearch-exporter
  labels:
    helm.sh/chart: prometheus-elasticsearch-exporter-6.3.0
    app.kubernetes.io/name: prometheus-elasticsearch-exporter
    app.kubernetes.io/instance: my-elasticsearch-cluster
    app.kubernetes.io/version: "v1.7.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9108
      protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus-elasticsearch-exporter
    app.kubernetes.io/instance: my-elasticsearch-cluster
---
# Source: elasticsearch-cluster/charts/prometheus-elasticsearch-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-elasticsearch-cluster-prometheus-elasticsearch-exporter
  labels:
    helm.sh/chart: prometheus-elasticsearch-exporter-6.3.0
    app.kubernetes.io/name: prometheus-elasticsearch-exporter
    app.kubernetes.io/instance: my-elasticsearch-cluster
    app.kubernetes.io/version: "v1.7.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-elasticsearch-exporter
      app.kubernetes.io/instance: my-elasticsearch-cluster
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-elasticsearch-exporter
        app.kubernetes.io/instance: my-elasticsearch-cluster
    spec:
      serviceAccountName: default
      restartPolicy: Always
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: exporter
          env:
          image: "quay.io/prometheuscommunity/elasticsearch-exporter:v1.7.0"
          imagePullPolicy: IfNotPresent
          command: ["elasticsearch_exporter",
                    "--log.format=logfmt",
                    "--log.level=info",
                    "--es.uri=http://my-elasticsearch-master-url:9200",
                    "--es.all",
                    "--es.indices",
                    "--es.indices_settings",
                    "--es.indices_mappings",
                    "--es.shards",
                    "--collector.snapshots",
                    "--es.timeout=30s",
                    "--web.listen-address=:9108",
                    "--web.telemetry-path=/metrics"]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 9108
              name: http
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sleep", "20"]
          volumeMounts:
      volumes:
---
# Source: elasticsearch-cluster/charts/es-data-hot/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-elasticsearch-cluster-data-hot
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-data-hot"
    app: "my-elasticsearch-cluster-data-hot"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: my-elasticsearch-cluster-data-hot-headless
  selector:
    matchLabels:
      app: "my-elasticsearch-cluster-data-hot"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: my-elasticsearch-cluster-data-hot
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  template:
    metadata:
      name: "my-elasticsearch-cluster-data-hot"
      labels:
        release: "my-elasticsearch-cluster"
        chart: "es-data-hot"
        app: "my-elasticsearch-cluster-data-hot"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "my-elasticsearch-cluster-data-hot"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: my-elasticsearch-cluster-data-hot-certs
      # Currently some extra blocks accept strings
      # to continue with backwards compatibility this is being kept
      # whilst also allowing for yaml to be specified too.
        - name: plugindir
          emptyDir: {}
        
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.15.0"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}
      
      # Currently some extra blocks accept strings
      # to continue with backwards compatibility this is being kept
      # whilst also allowing for yaml to be specified too.
      
      - name: elasticsearch-install-plugins
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
        command:
          - sh
        args:
          - -c
          - |
            set -e; set -x;
            for PLUGIN_NAME in "repository-s3 mapper-size"; do
              echo "Installing $PLUGIN_NAME..."
              PLUGIN_LIST=$(bin/elasticsearch-plugin list)
              echo $PLUGIN_LIST
              if echo $PLUGIN_LIST | grep "$PLUGIN_NAME"; then
                echo "Plugin $PLUGIN_NAME already exists, skipping."
              else
                echo "$PLUGIN_NAME does not exist yet, installing..."
                bin/elasticsearch-plugin install --batch $PLUGIN_NAME
              fi
            done
        volumeMounts:
          - mountPath: /usr/share/elasticsearch/plugins/
            name: plugindir
      
      containers:
      - name: "es-data-hot"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.15.0"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: node.roles
            value: "ingest,data_hot,data_content,"
          - name: discovery.seed_hosts
            value: "my-elasticsearch-cluster-master-headless"
          - name: cluster.name
            value: "my-elasticsearch-cluster"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-elasticsearch-cluster-data-hot-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.transport.ssl.verification_mode
            value: "none"
        volumeMounts:
          - name: "my-elasticsearch-cluster-data-hot"
            mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
          
        # Currently some extra blocks accept strings
        # to continue with backwards compatibility this is being kept
        # whilst also allowing for yaml to be specified too.
          - mountPath: /usr/share/elasticsearch/plugins/
            name: plugindir
---
# Source: elasticsearch-cluster/charts/es-master/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-elasticsearch-cluster-master
  labels:
    heritage: "Helm"
    release: "my-elasticsearch-cluster"
    chart: "es-master"
    app: "my-elasticsearch-cluster-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: my-elasticsearch-cluster-master-headless
  selector:
    matchLabels:
      app: "my-elasticsearch-cluster-master"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: my-elasticsearch-cluster-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  template:
    metadata:
      name: "my-elasticsearch-cluster-master"
      labels:
        release: "my-elasticsearch-cluster"
        chart: "es-master"
        app: "my-elasticsearch-cluster-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "my-elasticsearch-cluster-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: my-elasticsearch-cluster-master-certs
      # Currently some extra blocks accept strings
      # to continue with backwards compatibility this is being kept
      # whilst also allowing for yaml to be specified too.
        - name: plugindir
          emptyDir: {}
        
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.15.0"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}
      
      # Currently some extra blocks accept strings
      # to continue with backwards compatibility this is being kept
      # whilst also allowing for yaml to be specified too.
      
      - name: elasticsearch-install-plugins
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
        command:
          - sh
        args:
          - -c
          - |
            set -e; set -x;
            for PLUGIN_NAME in "repository-s3 mapper-size"; do
              echo "Installing $PLUGIN_NAME..."
              PLUGIN_LIST=$(bin/elasticsearch-plugin list)
              echo $PLUGIN_LIST
              if echo $PLUGIN_LIST | grep "$PLUGIN_NAME"; then
                echo "Plugin $PLUGIN_NAME already exists, skipping."
              else
                echo "$PLUGIN_NAME does not exist yet, installing..."
                bin/elasticsearch-plugin install --batch $PLUGIN_NAME
              fi
            done
        volumeMounts:
          - mountPath: /usr/share/elasticsearch/plugins/
            name: plugindir
      
      containers:
      - name: "es-master"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.15.0"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "my-elasticsearch-cluster-master-0,"
          - name: node.roles
            value: "master,"
          - name: discovery.seed_hosts
            value: "my-elasticsearch-cluster-master-headless"
          - name: cluster.name
            value: "my-elasticsearch-cluster"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-elasticsearch-cluster-master-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.transport.ssl.verification_mode
            value: "none"
        volumeMounts:
          - name: "my-elasticsearch-cluster-master"
            mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
          
        # Currently some extra blocks accept strings
        # to continue with backwards compatibility this is being kept
        # whilst also allowing for yaml to be specified too.
          - mountPath: /usr/share/elasticsearch/plugins/
            name: plugindir
