---
# Source: elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    chart: "elasticsearch"
    heritage: Helm
    release: my-elasticsearch
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpRENDQW5DZ0F3SUJBZ0lSQU5WK1lWcFQraHdNZVp6Y0NLZHVmNGd3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREE1TVRZd09ERXdOVGxhRncweQpOVEE1TVRZd09ERXdOVGxhTUI4eEhUQWJCZ05WQkFNVEZHVnNZWE4wYVdOelpXRnlZMmd0YldGemRHVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFvK2lVWVp6K04vNmlvZ1BNeTdKT3c1N1AKdzFIZDlFSTBBSWgwdC85TnVzbWlqVFlLQU8wdTZCMG9NSWNEZlFvbmp5NHpOM09yMkd4S0tBMVpwU3pvVHRZagpqbklCY0xnb096Y25QTkljbGI0NjZiVXhKbmJKUzBFWmt2Z1R1cW1CS21MTTZHT3ZBNldFZmt1d3daNzZBZjZkCllaQVJZTFhNTXhvM1oxYWExck96aDMzdmFEYUJoeUY5cERUS3pjdVV3NURET0ZjUmRWQlB4amdMTTdpZ0dGb3AKa1FxbTRIbWJwUlpOS3pKQzV4M1MrcTVmSjVHaXlaZ1NraWtIaXI5REdvcHVNVmpGbGQycHVqeWhWMjRMUkI4bApXYUcrWDV1enVXVlJuSnVnd3R3OVo2MVkyMDE0ZU04SjRCNlRQSlVTbXFTYjFlR0xRdWhBWUdsMWlLalFlUUlECkFRQUJvNEhDTUlHL01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlE1dmpuNml5QkxTSGszUnE3WQpHam5KcDN0UVNqQmZCZ05WSFJFRVdEQldnaFJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY29JY1pXeGhjM1JwClkzTmxZWEpqYUMxdFlYTjBaWEl1WkdWbVlYVnNkSUlnWld4aGMzUnBZM05sWVhKamFDMXRZWE4wWlhJdVpHVm0KWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUdoTGNsSThjMHdIZGtUa01iazd3NytsbkNpUgpuaGV4SG9uMUxjbWQ4OHVZSmtLQ3pCTkxTcEE2WkUyUWpJL1V1bUVIdGtEN1VNSUtyOWdDNEVHb0I3QzNyM252CmNYS2RONVJyQkRCVDJUdkV4U0hOaEpESW5RY0hNVXBDeGZTQnJiWVR0dFYzRm50UXY5NDdDTDREaGF0K0w5RTIKYllabmkyMGk2OXlDSWdXdEh3S3JCLytTT3NEU2t0ZWtFMVI2ZmlDYVRNZXlLV0NEUlF3VnFLL3NiY09HZWZ3ZAp3OCszOEE2YkphdjM5b05jRDAvSklXc2UwK3UxRGJ5WGJwckM1Q3lCSGlyUG9kaitIa1NUb2Uvell6NkJFRzF0CnZOV3dJZUtuaVR1TjBJbGhYM2ZzMnY1SmdkYldoUElINVZqK1V0aVN4em1FWXNBOExsTXFxSHovdXU0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbytpVVlaeitOLzZpb2dQTXk3Sk93NTdQdzFIZDlFSTBBSWgwdC85TnVzbWlqVFlLCkFPMHU2QjBvTUljRGZRb25qeTR6TjNPcjJHeEtLQTFacFN6b1R0WWpqbklCY0xnb096Y25QTkljbGI0NjZiVXgKSm5iSlMwRVprdmdUdXFtQkttTE02R092QTZXRWZrdXd3Wjc2QWY2ZFlaQVJZTFhNTXhvM1oxYWExck96aDMzdgphRGFCaHlGOXBEVEt6Y3VVdzVERE9GY1JkVkJQeGpnTE03aWdHRm9wa1FxbTRIbWJwUlpOS3pKQzV4M1MrcTVmCko1R2l5WmdTa2lrSGlyOURHb3B1TVZqRmxkMnB1anloVjI0TFJCOGxXYUcrWDV1enVXVlJuSnVnd3R3OVo2MVkKMjAxNGVNOEo0QjZUUEpVU21xU2IxZUdMUXVoQVlHbDFpS2pRZVFJREFRQUJBb0lCQVFDRVM3aGdKVmdubC9acQpzSWgvTFJkWDIzbzBXNEs3b1NmWitrbkRMV1R1eThyUkVYbjNqM2xaemhiZlBFcDdoVk95eElhQVRuTzR4b2NBClZ1NHhYTkxRdHhTUjU4RHoyeUJWMDBsdlZPUFBsWEIxckZMVWlmSWxOSkZReDcwYzM2MnFxWDVjWUFFbC8xVzIKbnA4M1dIclFXMU5xS045dDRLN0YzSFkxaVhpR3E4OTBlRGpTbEhwbDVGWUNzWWxteHVOd3Z3dUFXM0xvQzVmQgpFaHp6ZmlmZnlNMTVBcmRUS2dkSFJKWmJBbDkxU0RSNEEzNmYzOEJYenFDVjZGRkVHUThVYmxwbVN6WjdTaGxUCnRCMjI3UXJoc1ZsMUlpTmt0N0R6WTU1dmhrQkczNzR6NEhVVXV4ZzJXeGdUVzF6czlhcGVQdUFiM1lpL052OFcKdTg5OHJTSWxBb0dCQU5wbEVFRDM4UXlab1dGU0tTNmdFelJoQjlCc1FPZytxQ0x5UVlBV0pYalJKZ2IxWnJsaQpZUE51b3p1QVpqcC9MWkdjbkxIRG01RGkwTER2U2JSWTd4SzVzVXMwVW1PVkZ6a29peG5ZSlpNL201emR2SXVNCk9tTmZNTVhqUU5PSnB2QXRKOWY5S0FacWMwRkluRUR2Y0xnN2p0MEVBd3R4b3l0UitscHpvYlp6QW9HQkFNQWgKdk9udi94V1dBSG43STF1RkpXV2d3VmtORVdxNndzczVoSXExL2hLak56QU8zLy85ZFV5ZCtvNGwrSWZZQjZ1bQpFcHowRStGNmlDSzd3ZzNrK1RMbTl6d2tOb2Mza2pGOXBVNnFaN0NoNm1jZlQ1MGpSRk9KVTF3L051di9jcE5OCmpDNm0zaG03TjdpK3JIek5GQ0pLWjNoTExOK2d6RGQ5ekdOTkVUWmpBb0dBZnlDWFRvcEZtY1VRS0x1UDEyRTgKN0orUzBlTkNBUzcvNXAvSU93d3BNZVBsVStXanIwUXlGV0lReU1FY1FPN3BFcnJzaDVuS3c1TVVVZnBvbC8rdwo0dUNPOEt6N1RKWnIxMHpmYytMYk5KU3hPNlhqYkFQcnRRNmpNSDN4clhHU2FIcVFsK3o0VUl2RW5YcnI0ZXkvClc2N25vWVlGVTdNSmZWMFI4M2NkNmpzQ2dZQStFYWdxR3pKWkV1Q01oNmxnZzU4Vk9kMjhteEFwWHJSWFd2bUsKcGtpeVZMQWJnbkt6REhxOGliekw5MUJXOGw5b0FIcTY0YzhhWks5ZUtUSURzeGtlYktjcWNyaDY3bVQ0UUJNTApXdG1zb21KTGRqNE9FYnFkRWh3d0RPdjlTY1VGK1dOMEhzeFptN1hncFJpc0tNUjhYM1VWMDVObm0xYmVCbkhsCkVweWc2UUtCZ1FEREsxUkhjR1VXTnU3K1g0NU5TTlF0OWtSbWFETkhRT3o3MFVILzgzRXZEcmU3M244Y0V1bWIKRkhpcDArWHd1aEZpY1FLMnNtalVrWFU5RTNoM0VpQWQ2alJIMXc2K2VwcmRWUkQwVklrVllIaGZMSmZDR1p2MgpjdkRkQVAvMytORlphcStudjU1QVdXS3lKVHFKUUVXMzdKNGdGWFBJSEs0L0lKY2JaamlTSFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRSlRDaFVCbWZlR0oyL1lxYys4Q0hoREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSTBNRGt4TmpBNE1UQTFPVm9YRFRJMQpNRGt4TmpBNE1UQTFPVm93R3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1IT3Bpc0JDYUQ2ZG5qclpFMU9FNW5uNGg1VmJ5K2sKS0N4MnhHYjlYVno3Qk43UEJSblE5Sk8rN212c2oyUFI5Rmg5MURPZk15Sm0wMzBxMGNJYURNclptM1Rrc1poLwpFQ21KS3pNVmd0aUJtZ2VvampKRE9LaFhuYkJYalB1cmJHanlobzd3YkVwTnFHL281eGEwRUo5REdaa3RRckN2Ck1JcVhiNk0vMlNFRkYzQ1AyUXMxSmlYMERobjJtZXljV2svS3BVQ2JyWHgwY3ZMM1lSYW5rOHZNQ2VCVE0raDEKb1luNERwSVBNU0w4amxmVFE0MnZUVmNIbEFVTTliWXR6d0JGbWNQeXZyTS9RdWNPQ0E5bmRDd1p4Z3psOWlsNgpKSEVHZC9wSHZNdUxWVnBqVFY0ZWI5WHJHUEhlTDZ3ZzJPY3lFdXo3c0xFdk1JTVkrNmJBUHFNQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJRNXZqbjZpeUJMU0hrM1JxN1lHam5KcDN0UQpTakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBTUxxVnp2TkdMYWRBVUloNFEzOE0wcGMvMUZCenJmb1hGWjdjCmU1OVFVaHZjLytZUUNBOFRkbHltaW4yblcxZEV4T0Nra0xISThudlRRRXRIVVAxbXB4RTc0aE12dzR4K1R0dmcKeTlxZXJVV0F1WDRHcUJjUGpOMjFGTWFxRkJqNnpuZ1I0eUh3V2VEMVZrZlMxR3lEYmkrVmhwaEQ0alA5VDQySAo2WHoyeFQ3NzYya0lScmFqdkZOSWNUelBVOXRxM2dRYmREMHJSRFFuMmkxam52bjVSeDR3OGk4Z2I2M3NkaHVoCmZ0TnZ3QTZoVEt0Q2FUWVY3L0lUcWd0cDBPSlJvbFNwUzZHaE82K2ZMb1ZlTWM4c3QzR3E3ZlV4VDFPQWhOWjAKd3B3Vk1ZVzN6WUxRWGI2ektPZXJjQnZVOVRBSVprQmVFYmhWV1FFVDhILzdLc2NqOHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "aHNZeDNlU2FGY0Z4ZjV3WA=="
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "my-elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "my-elasticsearch"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: elasticsearch-master-certs
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}

      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
          - name: node.roles
            value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-master-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: "certificate"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.http.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.http.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.http.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
---
# Source: elasticsearch/templates/test/test-elasticsearch-health.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-elasticsearch-xqrdu-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
  - name: "my-elasticsearch-ndfje-test"
    env:
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            name: elasticsearch-master-credentials
            key: password
    image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
    imagePullPolicy: "IfNotPresent"
    command:
      - "sh"
      - "-c"
      - |
        #!/usr/bin/env bash -e
        curl -XGET --fail --cacert /usr/share/elasticsearch/config/certs/tls.crt -u "elastic:${ELASTIC_PASSWORD}" https://'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
    volumeMounts:
      - name: elasticsearch-certs
        mountPath: /usr/share/elasticsearch/config/certs
        readOnly: true
  restartPolicy: Never
  volumes:
    - name: elasticsearch-certs
      secret:
        secretName: elasticsearch-master-certs
