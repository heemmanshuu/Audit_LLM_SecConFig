---
# Source: mediawiki-backup/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-mediawiki-backup
  labels:
    helm.sh/chart: mediawiki-backup-0.2.1
    app.kubernetes.io/name: mediawiki-backup
    app.kubernetes.io/instance: my-mediawiki-backup
    app.kubernetes.io/version: "v0.2.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: mediawiki-backup/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-mediawiki-backup
  labels:
    helm.sh/chart: mediawiki-backup-0.2.1
    app.kubernetes.io/name: mediawiki-backup
    app.kubernetes.io/instance: my-mediawiki-backup
    app.kubernetes.io/version: "v0.2.2"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
---
# Source: mediawiki-backup/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: 'my-mediawiki-backup'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'my-mediawiki-backup'
subjects:
  - kind: ServiceAccount
    name: 'my-mediawiki-backup'
    namespace: 'default'
---
# Source: mediawiki-backup/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-mediawiki-backup
  labels:
    helm.sh/chart: mediawiki-backup-0.2.1
    app.kubernetes.io/name: mediawiki-backup
    app.kubernetes.io/instance: my-mediawiki-backup
    app.kubernetes.io/version: "v0.2.2"
    app.kubernetes.io/managed-by: Helm
spec:
  suspend: false
  schedule: "0 1 * * *"
  concurrencyPolicy: "Forbid"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      name: my-mediawiki-backup
      labels:
        app.kubernetes.io/name: mediawiki-backup
        app.kubernetes.io/instance: my-mediawiki-backup
    spec:
      backoffLimit: 6
      template:
        metadata:
          labels:
            app.kubernetes.io/name: mediawiki-backup
            app.kubernetes.io/instance: my-mediawiki-backup
        spec:
          restartPolicy: "Never"
          serviceAccountName: my-mediawiki-backup
          enableServiceLinks: False
          containers:
            - name: mediawiki-backup
              image: "ghcr.io/fernferret/mediawiki-backup:v0.2.2"
              imagePullPolicy: IfNotPresent
              command:
                - bash
              args:
                - -c
                - |
                  # Print all commands as they're run
                  # NOTE: The { ... } 2> /dev/null is a neat trick to avoid
                  # seeing the echo commands from
                  # https://superuser.com/a/1141026 
                  set -x

                  # ------------------------------------------------------------

                  # Cleanup any old "wip_*" folders
                  {
                    echo ""
                    echo "$(date) Finding and removing any old and incomplete backups..."
                  } 2> /dev/null
                  find /backup -name 'wip_*' -type d | xargs -I WIP rm -rf WIP

                  # ------------------------------------------------------------

                  {
                    echo ""
                    echo "$(date) Making backup dir and setting up the working dir"
                  } 2> /dev/null
                  backupname="backup_$(date +%Y%m%d_%H%M%S)"
                  workdir="/backup/wip_${backupname}"
                  backupdir="${workdir}/backup"
                  mkdir -p $backupdir || exit 1
                  cd $backupdir || exit 1

                  # ------------------------------------------------------------

                  {
                    echo ""
                    echo "$(date) Performing mysqldump:"
                  } 2> /dev/null
                  mysqldump -h $MYSQL_HOST -P $MYSQL_TCP_PORT -u $MARIADB_USERNAME mediawiki-database | gzip -c > backup.sql
                  mysqldump_result="$?"

                  {
                    echo ""
                    echo "$(date) Check for failure in mysql dump command"
                  } 2> /dev/null

                  if [ "$mysqldump_result" != "0" ]; then
                    echo "$(date) Failed to perform mysqldump"
                    exit 1
                  fi

                  # ------------------------------------------------------------

                  {
                    echo ""
                    echo "$(date) Performing backup of mediwiki assets from pod '${pod}'"
                  } 2> /dev/null

                  # Find out the pod name of the mediawiki install
                  pod=$(kubectl get pods -l app.kubernetes.io/name=mediawiki -o jsonpath='{$.items[0].metadata.name}')

                  # retries can be used for large files and is cumulative 
                  kubectl cp --retries 1000 $pod:/bitnami/ . || exit 1

                  # ------------------------------------------------------------

                  {
                    echo ""
                    echo "$(date) tar & compress backup as /backup/${backupname}.tar.gz"
                  } 2> /dev/null

                  cd "${workdir}"
                  tar czf "../${backupname}.tar.gz" "backup" || exit 1

                  # ------------------------------------------------------------

                  {
                    echo ""
                    echo "$(date) Done with backup, removing temp files in ${workdir}"
                  } 2> /dev/null

                  rm -rf "${workdir}"
              volumeMounts:
                - name: backup-data
                  mountPath: /backup
              env:
                # This is set intentionally as MYSQL_HOST, see:
                # https://mariadb.com/kb/en/mariadb-environment-variables/ 
                - name: MYSQL_HOST
                  value: "my-mediawiki"
                # This is set intentionally as MYSQL_TCP_PORT, see:
                # https://mariadb.com/kb/en/mariadb-environment-variables/ 
                - name: MYSQL_TCP_PORT
                  value: "3306"
                - name: MARIADB_USERNAME
                  value: "mediawiki-user"
                # This is set intentionally as MYSQL_PWD, see:
                # https://mariadb.com/kb/en/mariadb-environment-variables/ 
                - name: MYSQL_PWD
                  valueFrom: 
                    secretKeyRef:
                      name: "mediawiki-credentials"
                      key: "mariadb-password"
          volumes:
            - name: backup-data
              emptyDir: {}
