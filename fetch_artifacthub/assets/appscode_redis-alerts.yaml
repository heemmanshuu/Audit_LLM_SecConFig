---
# Source: redis-alerts/templates/alert.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: my-redis-alerts
  namespace: default
  labels:
    helm.sh/chart: redis-alerts-v2023.05.09
    app.kubernetes.io/name: redis-alerts
    app.kubernetes.io/instance: my-redis-alerts
    app.kubernetes.io/version: "v0.2.0"
    app.kubernetes.io/managed-by: Helm
    release: prometheus
spec:
  groups:
  - name: redis.database.default.my-redis-alerts.rules
    rules:
    - alert: RedisDown
      expr: redis_up{job="my-redis-alerts-stats",namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis instance down (instance {{ $labels.pod }})
        description: "Redis instance is down on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisMissingMaster
      expr: (count(redis_instance_info{job="my-redis-alerts-stats",namespace="default"}) or vector(0)) < 1
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis missing master (instance {{ $labels.pod }})
        description: "Redis cluster has less than expected amount of node marked as master\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisTooManyConnections
      expr: redis_connected_clients{job="my-redis-alerts-stats",namespace="default"} > 100
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis too many connections (instance {{ $labels.pod }})
        description: "Redis instance has too many connections . More than 100 of Redis connections are in use on {{ $labels.pod }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisTooManyMasters
      expr: (count(redis_instance_info{job="my-redis-alerts-stats",namespace="default"})) > 1
      for: 2m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis too many master nodes (instance {{ $labels.pod }})
        description: "Redis cluster has too many nodes marked as master. \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisDisconnectedSlaves
      expr: count without (instance) (redis_connected_slaves{job="my-redis-alerts-stats",namespace="default"}) - sum without (instance) (redis_connected_slaves{job="my-redis-alerts-stats",namespace="default"}) - 1 > 1
      for: 2m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis disconnected slaves (instance {{ $labels.pod }})
        description: "Redis not replicating for all slaves. Consider reviewing the redis replication status.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: redis.provisioner.default.my-redis-alerts.rules
    rules:
    - alert: KubeDBRedisPhaseNotReady
      expr: kubedb_com_redis_status_phase{phase="NotReady",app="my-redis-alerts",namespace="default"} == 1
      for: 1m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: KubeDB Redis Phase NotReady (redis {{ $labels.redis }})
        description: "KubeDB Redis Phase not ready on {{ $labels.redis }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBRedisPhaseCritical
      expr: kubedb_com_redis_status_phase{phase="Critical",app="my-redis-alerts",namespace="default"} == 1
      for: 15m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: KubeDB Redis Phase Critical (redis {{ $labels.redis }})
        description: "KubeDB Redis Phase Critical {{ $labels.redis }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: redis.opsManager.default.my-redis-alerts.rules
    rules:
    - alert: KubeDBRedisOpsRequestStatusProgressingToLong
      expr: ops_kubedb_com_redisopsrequest_status_phase{phase="Progressing",app="my-redis-alerts",namespace="default"} == 1
      for: 30m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: RedisOpsRequest is in progressing status for too long (redisopsrequest {{ $labels.redisopsrequest }})
        description: "RedisOpsRequest {{ $labels.redisopsrequest }} is in progressing status for too long\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: KubeDBRedisOpsRequestFailed
      expr: ops_kubedb_com_redisopsrequest_status_phase{phase="Failed",app="my-redis-alerts",namespace="default"} == 1
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: RedisOpsRequest failed (redisopsrequest {{ $labels.redisopsrequest }})
        description: "RedisOpsRequest {{ $labels.redisopsrequest }} failed \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  - name: redis.stash.default.my-redis-alerts.rules
    rules:
    - alert: RedisStashBackupSessionFailed
      expr: stash_backup_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-redis-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis Stash backup session failed (invoker_name {{ $labels.invoker_name }})
        description: "Redis Stash backupsession failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisStashRestoreSessionFailed
      expr: stash_restore_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_restoresession_info{target_name="my-redis-alerts", target_kind="AppBinding", namespace="default"} == 0
      for: 0m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis Stash restore session failed (invoker_name {{ $labels.invoker_name }})
        description: "Redis Stash restore session failed {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisStashNoBackupSessionForTooLong
      expr: time() - stash_backup_last_success_time_seconds + on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="my-redis-alerts", target_kind="AppBinding", namespace="default"} - 1 > 18000
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis Stash no backup for last 18000 second (invoker_name {{ $labels.invoker_name }})
        description: "Redis Stash no backup for too long {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisStashRepositoryCorrupted
      expr: stash_repository_integrity * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-redis-alerts", target_kind="AppBinding", namespace="default"}
      for: 5m
      labels:
        severity: critical
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis Stash repository corrupted (invoker_name {{ $labels.invoker_name }})
        description: "Redis Stash repository corrupted {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisStashRepositoryStorageRunningLow
      expr: stash_repository_size_bytes * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-redis-alerts", target_kind="AppBinding", namespace="default"} > 1.073741824e+10
      for: 5m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary: Redis Stash Repository storage more than 1.073741824e+10 byte. (invoker_name {{ $labels.invoker_name }})
        description: "Redis Stash Repository storage running low {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisStashBackupSessionPeriodTooLong
      expr: stash_backup_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="my-redis-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary:  Redis Stash backup session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "Redis Stash backup session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    - alert: RedisStashRestoreSessionPeriodTooLong
      expr: stash_restore_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_restoresession_info{target_name="my-redis-alerts", target_kind="AppBinding", namespace="default"} > 1800
      for: 0m
      labels:
        severity: warning
        k8s_group: kubedb.com
        k8s_kind: Redis
        k8s_resource: redises
        app: my-redis-alerts
        app_namespace: default
      annotations:
        summary:  Redis Stash restore session took more than 1800 second to complete. (invoker_name {{ $labels.invoker_name }})
        description: "Redis Stash restore session taking to long to complete {{ $labels.invoker_name }} \n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
