---
# Source: garage/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-garage
  labels:
    helm.sh/chart: garage-0.5.1
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: garage/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-garage-rpc-secret
  labels:
    helm.sh/chart: garage-0.5.1
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
  
  rpcSecret: "ZDY3N2QwOTBmMGZiNzI5ZTYyMjU4ZjMzNjE1ZDYzMjZiNGFmOWZhNzlkZTliOGQ5YTY3OGRjYjk4OTgzMGYxMg=="
---
# Source: garage/templates/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-garage-env
data:
  RUST_LOG: garage=info
---
# Source: garage/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-garage-config
data:
  garage.toml: |-
    metadata_dir = "/mnt/meta"
    data_dir = "/mnt/data"
    
    db_engine = "sled"
    
    block_size = 1048576
    sled_cache_capacity = 134217728
    sled_flush_every_ms = 2000
    
    replication_mode = "3"
    
    compression_level = 1
    
    rpc_bind_addr = "[::]:3901"
    # rpc_secret will be populated by the init container from a k8s secret object
    rpc_secret = "__RPC_SECRET_REPLACE__"
    
    bootstrap_peers = []
    
    [kubernetes_discovery]
    namespace = "default"
    service_name = "my-garage"
    skip_crd = false
    
    [s3_api]
    s3_region = "garage"
    api_bind_addr = "[::]:3900"
    root_domain = ".s3.garage.tld"
    
    [s3_web]
    bind_addr = "[::]:3902"
    root_domain = ".web.garage.tld"
    index = "index.html"
    
    [admin]
    api_bind_addr = "[::]:3903"
---
# Source: garage/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: manage-crds-default-my-garage
  labels:
    helm.sh/chart: garage-0.5.1
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch", "create", "patch"]
- apiGroups: ["deuxfleurs.fr"]
  resources: ["garagenodes"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# Source: garage/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: allow-crds-for-default-my-garage
  labels:
    helm.sh/chart: garage-0.5.1
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: my-garage
  namespace: default
roleRef:
  kind: ClusterRole
  name: manage-crds-default-my-garage
  apiGroup: rbac.authorization.k8s.io
---
# Source: garage/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-garage-headless
  labels:
    helm.sh/chart: garage-0.5.1
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: cluster
      port: 3901
      targetPort: cluster
      protocol: TCP
      appProtocol: tcp
  selector:
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
---
# Source: garage/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-garage
  labels:
    helm.sh/chart: garage-0.5.1
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3900
      targetPort: 3900
      protocol: TCP
      name: s3-api
    - port: 3902
      targetPort: 3902
      protocol: TCP
      name: s3-web
  selector:
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
---
# Source: garage/templates/workload.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-garage
  labels:
    helm.sh/chart: garage-0.5.1
    app.kubernetes.io/name: garage
    app.kubernetes.io/instance: my-garage
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: garage
      app.kubernetes.io/instance: my-garage
  replicas: 3
  serviceName: my-garage
  template:
    metadata:

      annotations:
        checksum/config: d16ed4f65eb6e708b924441c2563d9d6582835577f62f6f1cd5b98630b2dbc34
      labels:
        app.kubernetes.io/name: garage
        app.kubernetes.io/instance: my-garage
    spec:
      serviceAccountName: my-garage
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
        # Copies garage.toml from configmap to temporary etc volume and replaces RPC secret placeholder
        - name: garage-init
          image: "busybox:stable"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "sed \"s/__RPC_SECRET_REPLACE__/$RPC_SECRET/\" /mnt/garage.toml > /mnt/etc/garage.toml"]
          env:
            - name: RPC_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-garage-rpc-secret
                  key: rpcSecret
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: configmap
              mountPath: /mnt/garage.toml
              subPath: garage.toml
            - name: etc
              mountPath: /mnt/etc
      containers:
        - name: garage
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          image: "dxflrs/amd64_garage:v1.0.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: my-garage-env
          ports:
            - containerPort: 3900
              name: s3-api
            - containerPort: 3901
              name: cluster
            - containerPort: 3902
              name: web-api
            - containerPort: 3903
              name: admin
          volumeMounts:
            - name: meta
              mountPath: /mnt/meta
            - name: data
              mountPath: /mnt/data
            - name: etc
              mountPath: /etc/garage.toml
              subPath: garage.toml
          # TODO
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: 3900
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: 3900
          resources:
            {}
      volumes:
        - name: configmap
          configMap:
            name: my-garage-config
        - name: etc
          emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: meta
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "100Mi"
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "100Mi"
