---
# Source: zammad/charts/elasticsearch/templates/master/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-zammad-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.21.2
    app.kubernetes.io/component: master
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-zammad
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9200
        - port: 9300
---
# Source: zammad/charts/memcached/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-zammad-memcached
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-zammad
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcached
      app.kubernetes.io/version: 1.6.24
      helm.sh/chart: memcached-6.14.0
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 11211
---
# Source: zammad/charts/elasticsearch/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-zammad-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.21.2
    app.kubernetes.io/component: master
automountServiceAccountToken: false
---
# Source: zammad/charts/memcached/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-zammad-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
---
# Source: zammad/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-zammad-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
---
# Source: zammad/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-zammad-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  postgres-password: "emFtbWFk"
  password: "emFtbWFk"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: zammad/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-zammad-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
type: Opaque
data:
  redis-password: "emFtbWFk"
---
# Source: zammad/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-zammad-postgresql-pass
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
type: Opaque
data:
  postgresql-pass: "emFtbWFk"
---
# Source: zammad/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-zammad-redis-pass
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
type: Opaque
data:
  redis-password: "emFtbWFk"
---
# Source: zammad/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-zammad-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: zammad/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-zammad-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: zammad/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-zammad-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: zammad/templates/configmap-init.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-zammad-init
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
data:
  postgresql-init: |-
    #!/bin/bash
    set -e
    if ! (bundle exec rails r 'puts User.any?' 2> /dev/null | grep -q true); then
        bundle exec rake db:migrate
        bundle exec rake db:seed
    else
        echo Executing migrations...
        bundle exec rake db:migrate

        echo Synchronizing locales...
        bundle exec rails r "Locale.sync"

        echo Synchronizing translations...
        bundle exec rails r "Translation.sync"
    fi
    echo "postgresql init complete :)"
  zammad-init: |-
    #!/bin/bash
    set -e
    echo "zammad init complete :)"

  elasticsearch-init: |-
    #!/bin/bash
    set -e
    bundle exec rails r 'Setting.set("es_url", "http://my-zammad-elasticsearch:9200")'
    ELASTICSEARCH_USER=${ELASTICSEARCH_USER:-}
    if [ -n "${ELASTICSEARCH_USER}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
        bundle exec rails r "Setting.set(\"es_user\", \"${ELASTICSEARCH_USER}\")"
        bundle exec rails r "Setting.set(\"es_password\", \"${ELASTICSEARCH_PASSWORD}\")"
    fi
    bundle exec rake zammad:searchindex:rebuild
    
    echo "elasticsearch init complete :)"
---
# Source: zammad/templates/configmap-nginx.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-zammad-nginx
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
data:
  default: |-
    #
    # kubernetes nginx config for zammad
    #

    server_tokens off;

    upstream zammad-railsserver {
        server my-zammad-railsserver:3000;
    }

    upstream zammad-websocket {
        server my-zammad-websocket:6042;
    }

    server {
        listen 8080;

        server_name _;

        root /opt/zammad/public;

        client_body_temp_path /tmp 1 2;
        fastcgi_temp_path /tmp 1 2;
        proxy_temp_path /tmp 1 2;
        scgi_temp_path /tmp 1 2;
        uwsgi_temp_path /tmp 1 2;

        access_log /dev/stdout;
        error_log  /dev/stderr;

        client_max_body_size 50M;
        

        location ~ ^/(assets/|robots.txt|humans.txt|favicon.ico) {
            expires max;
        }

        location /ws {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header CLIENT_IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
            proxy_pass http://zammad-websocket;
        }

        location /cable {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header CLIENT_IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
            proxy_pass http://zammad-railsserver;
        }

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header CLIENT_IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 180;
            proxy_pass http://zammad-railsserver;

            gzip on;
            gzip_types text/plain text/xml text/css image/svg+xml application/javascript application/x-javascript application/json application/xml;
            gzip_proxied any;
        }
    }
  nginx.conf: |-
    worker_processes auto;

    pid /tmp/nginx.pid;

    include /etc/nginx/modules-enabled/*.conf;

    events {
        worker_connections 768;
    }

    http {
        sendfile on;
        tcp_nopush on;
        types_hash_max_size 2048;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        access_log /dev/stdout;
        error_log /dev/stdout;

        gzip on;

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
    }
---
# Source: zammad/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-elasticsearch-master-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.21.2
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: zammad/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-elasticsearch
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.21.2
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: zammad/charts/memcached/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/name: memcached
---
# Source: zammad/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: zammad/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: zammad/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/name: redis
---
# Source: zammad/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: zammad/templates/service-nginx.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-nginx
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/component: zammad-nginx
---
# Source: zammad/templates/service-railsserver.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-railsserver
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/component: zammad-railsserver
---
# Source: zammad/templates/service-websocket.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-zammad-websocket
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  ports:
    - port: 6042
      targetPort: 6042
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/component: zammad-websocket
---
# Source: zammad/charts/memcached/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-zammad-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-zammad
      app.kubernetes.io/name: memcached
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcached
        app.kubernetes.io/version: 1.6.24
        helm.sh/chart: memcached-6.14.0
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-zammad
                    app.kubernetes.io/name: memcached
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-zammad-memcached
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.24-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: zammad/templates/deployment-nginx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-zammad-nginx
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zammad-nginx
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zammad
      app.kubernetes.io/instance: my-zammad
  template:
    metadata:
      annotations:
        
      labels:
        helm.sh/chart: zammad-12.4.0
        app.kubernetes.io/name: zammad
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/version: "6.3.1-156"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zammad-nginx
    spec:
      
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: zammad-volume-permissions
          image: "alpine:3.20.2"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -cx
            - |
              chmod 770 /opt/zammad/tmp
          securityContext:
            capabilities:
              drop:
              - ALL
            privileged: true
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
      containers:
        - name: zammad-nginx
          image: "ghcr.io/zammad/zammad:6.3.1-156"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          command:
            - /usr/sbin/nginx
            - -g
            - 'daemon off;'
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis-pass
                  key: redis-password
            - name: MEMCACHE_SERVERS
              value: "my-zammad-memcached:11211"
            - name: RAILS_TRUSTED_PROXIES
              value: "['127.0.0.1', '::1']"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@my-zammad-redis-master:6379"
            - name: POSTGRESQL_PASS
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql-pass
                  key: postgresql-pass
            - name: DATABASE_URL
              value: "postgres://zammad:$(POSTGRESQL_PASS)@my-zammad-postgresql:5432/zammad_production?pool=50"
            
            - name: TMP # All zammad containers need the possibility to create temporary files, e.g. for file uploads or image resizing.
              value: /opt/zammad/tmp
            # Let containers fail if migrations are pending.
            - name: RAILS_CHECK_PENDING_MIGRATIONS
              value: 'true'
          ports:
            - name: http
              containerPort: 8080
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
            - name: my-zammad-nginx
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: my-zammad-nginx
              mountPath: /etc/nginx/sites-enabled/default
              subPath: default
              readOnly: true
            - name: my-zammad-tmp
              mountPath: /var/log/nginx
      volumes:
        - name: my-zammad-tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: my-zammad-init
          configMap:
            name: my-zammad-init
            defaultMode: 0755
        - name: my-zammad-nginx
          configMap:
            name: my-zammad-nginx
---
# Source: zammad/templates/deployment-railsserver.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-zammad-railsserver
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zammad-railsserver
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zammad
      app.kubernetes.io/instance: my-zammad
  template:
    metadata:
      annotations:
        
      labels:
        helm.sh/chart: zammad-12.4.0
        app.kubernetes.io/name: zammad
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/version: "6.3.1-156"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zammad-railsserver
    spec:
      
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: zammad-volume-permissions
          image: "alpine:3.20.2"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -cx
            - |
              chmod 770 /opt/zammad/tmp
          securityContext:
            capabilities:
              drop:
              - ALL
            privileged: true
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
      containers:
        - name: zammad-railsserver
          image: "ghcr.io/zammad/zammad:6.3.1-156"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          command:
            - "bundle"
            - "exec"
            - "puma"
            - "-b"
            - "tcp://[::]:3000"
            - "-w"
            - "0"
            - "-e"
            - "production"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis-pass
                  key: redis-password
            - name: MEMCACHE_SERVERS
              value: "my-zammad-memcached:11211"
            - name: RAILS_TRUSTED_PROXIES
              value: "['127.0.0.1', '::1']"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@my-zammad-redis-master:6379"
            - name: POSTGRESQL_PASS
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql-pass
                  key: postgresql-pass
            - name: DATABASE_URL
              value: "postgres://zammad:$(POSTGRESQL_PASS)@my-zammad-postgresql:5432/zammad_production?pool=50"
            
            - name: TMP # All zammad containers need the possibility to create temporary files, e.g. for file uploads or image resizing.
              value: /opt/zammad/tmp
            # Let containers fail if migrations are pending.
            - name: RAILS_CHECK_PENDING_MIGRATIONS
              value: 'true'
          ports:
            - name: railsserver
              containerPort: 3000
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
      volumes:
        - name: my-zammad-tmp
          emptyDir:
            sizeLimit: 100Mi
---
# Source: zammad/templates/deployment-scheduler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-zammad-scheduler
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zammad-scheduler
  annotations:
    
    checkov.io/skip1: CKV_K8S_8=Liveness Probe Should be Configured - not possible with scheduler
    checkov.io/skip2: CKV_K8S_9=Readiness Probe Should be Configured - not possible with scheduler
spec:
  replicas: 1 # Not scalable, may only run once per cluster.
  selector:
    matchLabels:
      app.kubernetes.io/name: zammad
      app.kubernetes.io/instance: my-zammad
  template:
    metadata:
      annotations:
        
      labels:
        helm.sh/chart: zammad-12.4.0
        app.kubernetes.io/name: zammad
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/version: "6.3.1-156"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zammad-scheduler
    spec:
      
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: zammad-volume-permissions
          image: "alpine:3.20.2"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -cx
            - |
              chmod 770 /opt/zammad/tmp
          securityContext:
            capabilities:
              drop:
              - ALL
            privileged: true
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
      containers:
        - name: zammad-scheduler
          image: "ghcr.io/zammad/zammad:6.3.1-156"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          command:
            - "bundle"
            - "exec"
            - "script/background-worker.rb"
            - "start"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis-pass
                  key: redis-password
            - name: MEMCACHE_SERVERS
              value: "my-zammad-memcached:11211"
            - name: RAILS_TRUSTED_PROXIES
              value: "['127.0.0.1', '::1']"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@my-zammad-redis-master:6379"
            - name: POSTGRESQL_PASS
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql-pass
                  key: postgresql-pass
            - name: DATABASE_URL
              value: "postgres://zammad:$(POSTGRESQL_PASS)@my-zammad-postgresql:5432/zammad_production?pool=50"
            
            - name: TMP # All zammad containers need the possibility to create temporary files, e.g. for file uploads or image resizing.
              value: /opt/zammad/tmp
            # Let containers fail if migrations are pending.
            - name: RAILS_CHECK_PENDING_MIGRATIONS
              value: 'true'
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
      volumes:
        - name: my-zammad-tmp
          emptyDir:
            sizeLimit: 100Mi
---
# Source: zammad/templates/deployment-websocket.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-zammad-websocket
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zammad-websocket
  annotations:
    
spec:
  replicas: 1 # Not scalable, may only run once per cluster.
  selector:
    matchLabels:
      app.kubernetes.io/name: zammad
      app.kubernetes.io/instance: my-zammad
  template:
    metadata:
      annotations:
        
      labels:
        helm.sh/chart: zammad-12.4.0
        app.kubernetes.io/name: zammad
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/version: "6.3.1-156"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zammad-websocket
    spec:
      
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: zammad-volume-permissions
          image: "alpine:3.20.2"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -cx
            - |
              chmod 770 /opt/zammad/tmp
          securityContext:
            capabilities:
              drop:
              - ALL
            privileged: true
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
      containers:
        - name: zammad-websocket
          image: "ghcr.io/zammad/zammad:6.3.1-156"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6042
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6042
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          command:
            - "bundle"
            - "exec"
            - "script/websocket-server.rb"
            - "-b"
            - "0.0.0.0"
            - "-p"
            - "6042"
            - "start"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis-pass
                  key: redis-password
            - name: MEMCACHE_SERVERS
              value: "my-zammad-memcached:11211"
            - name: RAILS_TRUSTED_PROXIES
              value: "['127.0.0.1', '::1']"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@my-zammad-redis-master:6379"
            - name: POSTGRESQL_PASS
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql-pass
                  key: postgresql-pass
            - name: DATABASE_URL
              value: "postgres://zammad:$(POSTGRESQL_PASS)@my-zammad-postgresql:5432/zammad_production?pool=50"
            
            - name: TMP # All zammad containers need the possibility to create temporary files, e.g. for file uploads or image resizing.
              value: /opt/zammad/tmp
            # Let containers fail if migrations are pending.
            - name: RAILS_CHECK_PENDING_MIGRATIONS
              value: 'true'
          ports:
            - name: websocket
              containerPort: 6042
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
      volumes:
        - name: my-zammad-tmp
          emptyDir:
            sizeLimit: 100Mi
---
# Source: zammad/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-zammad-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.2
    helm.sh/chart: elasticsearch-19.21.2
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-zammad
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: my-zammad-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.2
        helm.sh/chart: elasticsearch-19.21.2
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: my-zammad-elasticsearch-master
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:12-debian-12-r16
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
        - name: copy-default-plugins
          image: docker.io/bitnami/elasticsearch:8.12.2-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              . /opt/bitnami/scripts/elasticsearch-env.sh

              if ! is_dir_empty "$DB_DEFAULT_PLUGINS_DIR"; then
                  cp -nr / "$DB_DEFAULT_PLUGINS_DIR"/* /plugins
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /plugins
              subPath: app-plugins-dir
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.2-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "zammad"
            
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "512m"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/config
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/plugins
              subPath: app-plugins-dir
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: zammad/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-zammad-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-zammad-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-zammad
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-zammad-postgresql
      labels:
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-zammad
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "zammad"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "zammad_production"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "zammad" -d "dbname=zammad_production" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "zammad" -d "dbname=zammad_production" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: zammad/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-zammad-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-zammad
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: my-zammad-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.0.12
        helm.sh/chart: redis-17.17.1
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: ef92bff2cf1b4074dfd7636f22655a1c5eceb22265d3927927c4826989ea1523
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-zammad-redis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-zammad
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.12-debian-11-r34
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-zammad-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-zammad-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-zammad-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: my-zammad
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: zammad/templates/job-init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  # Use a different job name on each run to ensure a new job always runs once.
  name: my-zammad-init-14c4ad06-2fb1-4665-af44-afab0cb319c1
  # Helm post-install/post-upgrade hooks cannot be used here, because
  #   helm's --wait flag causes a deadlock: the job waits for all resources to be ready,
  #   but the pods need the job to work properly.
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zammad-init
  annotations:
    
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      annotations:
        
      labels:
        helm.sh/chart: zammad-12.4.0
        app.kubernetes.io/name: zammad
        app.kubernetes.io/instance: my-zammad
        app.kubernetes.io/version: "6.3.1-156"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zammad-init
    spec:
      
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: OnFailure
      containers:
        - name: zammad-volume-permissions
          image: "alpine:3.20.2"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -cx
            - |
              chmod 770 /opt/zammad/tmp
          securityContext:
            capabilities:
              drop:
              - ALL
            privileged: true
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
        - name: postgresql-init
          image: "ghcr.io/zammad/zammad:6.3.1-156"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis-pass
                  key: redis-password
            - name: MEMCACHE_SERVERS
              value: "my-zammad-memcached:11211"
            - name: RAILS_TRUSTED_PROXIES
              value: "['127.0.0.1', '::1']"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@my-zammad-redis-master:6379"
            - name: POSTGRESQL_PASS
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql-pass
                  key: postgresql-pass
            - name: DATABASE_URL
              value: "postgres://zammad:$(POSTGRESQL_PASS)@my-zammad-postgresql:5432/zammad_production?pool=50"
            
            - name: TMP # All zammad containers need the possibility to create temporary files, e.g. for file uploads or image resizing.
              value: /opt/zammad/tmp
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
            - name: my-zammad-init
              mountPath: /docker-entrypoint.sh
              readOnly: true
              subPath: postgresql-init
        - name: elasticsearch-init
          image: "ghcr.io/zammad/zammad:6.3.1-156"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis-pass
                  key: redis-password
            - name: MEMCACHE_SERVERS
              value: "my-zammad-memcached:11211"
            - name: RAILS_TRUSTED_PROXIES
              value: "['127.0.0.1', '::1']"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@my-zammad-redis-master:6379"
            - name: POSTGRESQL_PASS
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql-pass
                  key: postgresql-pass
            - name: DATABASE_URL
              value: "postgres://zammad:$(POSTGRESQL_PASS)@my-zammad-postgresql:5432/zammad_production?pool=50"
            
            - name: TMP # All zammad containers need the possibility to create temporary files, e.g. for file uploads or image resizing.
              value: /opt/zammad/tmp
            # Let containers fail if migrations are pending.
            - name: RAILS_CHECK_PENDING_MIGRATIONS
              value: 'true'
          volumeMounts:
            - name: my-zammad-tmp
              mountPath: /tmp
            - name: my-zammad-tmp
              mountPath: /opt/zammad/tmp
            - name: my-zammad-init
              mountPath: /docker-entrypoint.sh
              readOnly: true
              subPath: elasticsearch-init
      volumes:
        - name: my-zammad-tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: my-zammad-init
          configMap:
            name: my-zammad-init
            defaultMode: 0755
---
# Source: zammad/templates/tests/run-tests.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-zammad-helm-test-rake-task"
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
data:
  helm-test.rake: |-
    namespace :zammad do
      namespace :helm do
        desc 'Runs a set of Helm tests'
        task test: :environment do |_task, args|
          puts 'Checking if temporary file can be created...'
          Tempfile.create do |f|
            puts '  Temporary file was created successfully.'
          end
        end
      end
    end
---
# Source: zammad/templates/tests/run-tests.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-zammad-run-helm-test-rake-task"
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
    
    securityContext:
      fsGroup: 1000
      fsGroupChangePolicy: Always
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    initContainers:
      - name: zammad-volume-permissions
        image: "alpine:3.20.2"
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -cx
          - |
            chmod 770 /opt/zammad/tmp
        securityContext:
          capabilities:
            drop:
            - ALL
          privileged: true
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
          - name: my-zammad-tmp
            mountPath: /tmp
          - name: my-zammad-tmp
            mountPath: /opt/zammad/tmp
    containers:
      - name: zammad-run-tests
        image: "ghcr.io/zammad/zammad:6.3.1-156"
        imagePullPolicy: IfNotPresent
        command: ['bundle']
        args: ['exec', 'rake', 'zammad:helm:test']
        env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-zammad-redis-pass
                  key: redis-password
            - name: MEMCACHE_SERVERS
              value: "my-zammad-memcached:11211"
            - name: RAILS_TRUSTED_PROXIES
              value: "['127.0.0.1', '::1']"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@my-zammad-redis-master:6379"
            - name: POSTGRESQL_PASS
              valueFrom:
                secretKeyRef:
                  name: my-zammad-postgresql-pass
                  key: postgresql-pass
            - name: DATABASE_URL
              value: "postgres://zammad:$(POSTGRESQL_PASS)@my-zammad-postgresql:5432/zammad_production?pool=50"
            
            - name: TMP # All zammad containers need the possibility to create temporary files, e.g. for file uploads or image resizing.
              value: /opt/zammad/tmp
            # Let containers fail if migrations are pending.
            - name: RAILS_CHECK_PENDING_MIGRATIONS
              value: 'true'
        volumeMounts:
          - name: my-zammad-tmp
            mountPath: /tmp
          - name: my-zammad-tmp
            mountPath: /opt/zammad/tmp
          - name: helm-rake-test-volume
            mountPath: /opt/zammad/lib/tasks/helm
            readOnly: true
    volumes:
      - name: my-zammad-tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: helm-rake-test-volume
        configMap:
          name: "my-zammad-helm-test-rake-task"
    restartPolicy: Never
---
# Source: zammad/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-zammad-test-connection"
  labels:
    helm.sh/chart: zammad-12.4.0
    app.kubernetes.io/name: zammad
    app.kubernetes.io/instance: my-zammad
    app.kubernetes.io/version: "6.3.1-156"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-zammad-nginx:8080']
  restartPolicy: Never
