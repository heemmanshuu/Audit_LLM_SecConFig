---
# Source: kubevault-metrics/templates/vaultserver/catalog-kubevault-com-vaultserverversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubevault-com-vaultserverversion
spec:
  targetRef:
    apiVersion: catalog.kubevault.com/v1alpha1
    kind: VaultServerVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "VaultServer versions info"
      type: gauge
      labels:
        - key: deprecated
          valuePath: .spec.deprecated
        - key: vault_image
          valuePath: .spec.vault.image
        - key: unsealer_image
          valuePath: .spec.unsealer.image
      metricValue:
        value: 1
---
# Source: kubevault-metrics/templates/vaultserver/kubevault-com-vaultserver.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubevault-com-vaultserver
spec:
  targetRef:
    apiVersion: kubevault.com/v1alpha2
    kind: VaultServer
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of VaultServer replicas"
      type: gauge
      field:
        path: .spec.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.replicas

    - name: status_phase
      help: "VaultServer instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Initializing
            metricValue:
              valueFromExpression: "int(phase == 'Initializing')"
          - labelValue: Unsealing
            metricValue:
              valueFromExpression: "int(phase == 'Unsealing')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: Sealed
            metricValue:
              valueFromExpression: "int(phase == 'Sealed')"

    - name: info
      help: "VaultServer instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
      metricValue:
        value: 1

    - name: status_conditions
      help: "VaultServer instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by Vault in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Vault in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Vault in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Vault in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Vault in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Vault in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubevault-metrics/templates/vaultserver/ops-kubevault-com-vaultopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubevault-com-vaultopsrequest
spec:
  targetRef:
    apiVersion: ops.kubevault.com/v1alpha1
    kind: VaultOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.vaultRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
  
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "VaultServer instance information"
      type: gauge
      labels:
        - key: vaultReference
          valuePath: .spec.vaultRef.name
      metricValue:
        value: 1

    - name: status_phase
      help: "The current phase of Vault OpsRequest."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubevault-metrics/templates/metrics-user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:metrics:edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - metrics.appscode.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: kubevault-metrics/templates/metrics-user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appscode:metrics:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - metrics.appscode.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
