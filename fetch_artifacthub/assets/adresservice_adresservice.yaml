---
# Source: adresservice/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-adresservice-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.3.2
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
---
# Source: adresservice/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-adresservice
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: adresservice/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-adresservice-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "U2tRdTF0NTRPYQ=="
  postgresql-password: "IUNoYW5nZU1lIQ=="
---
# Source: adresservice/templates/dependencies-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: adresservice-dependencies
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
stringData:
    dependencies.yaml: |
        parameters:
            components:
                bag:
                  apikey: ""
                  auth: apikey
                  location: ""
---
# Source: adresservice/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: adresservice
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
  database-url: "cGdzcWw6Ly93ZWJyZXNvdXJjZWNhdGFsb2d1czohQ2hhbmdlTWUhQG15LWFkcmVzc2VydmljZS1wb3N0Z3Jlc3FsL3dlYnJlc291cmNlY2F0YWxvZ3VzP3NlcnZlclZlcnNpb249MTAmc3NsbW9kZT1kaXNhYmxl"
  
  app_application_key: "NDVjMWE0YjYtNTlkMy00YTZlLTg2YmYtODhhODcyZjM1ODQ1"
---
# Source: adresservice/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-adresservice-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.3.2
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: adresservice/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-adresservice-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.3.2
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: adresservice/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-adresservice-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.3.2
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: adresservice/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: adresservice
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
data:
  app-version: "V1.0"
  app-corsAllowOrigin: "[*]"
  cache: "true"
  debug: "0"
  trusted-proxies: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
  trusted-hosts: "^.+$"
  php-service: my-adresservice-php  
  url: "https://adresservice.local/"
  redis-host: "my-adresservice-redis-headless"
  redis-port: "6379"
---
# Source: adresservice/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-adresservice-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-adresservice
---
# Source: adresservice/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-adresservice-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-adresservice
    role: primary
---
# Source: adresservice/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-adresservice-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.3.2
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-adresservice
---
# Source: adresservice/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-adresservice-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.3.2
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/component: master
---
# Source: adresservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-adresservice
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 80
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
---
# Source: adresservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-adresservice
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: adresservice
      app.kubernetes.io/instance: my-adresservice
  template:
    metadata:
      labels:
        app.kubernetes.io/name: adresservice
        app.kubernetes.io/instance: my-adresservice
    spec:
      serviceAccountName: my-adresservice
      securityContext:
        {}
      volumes:
        - name: dependencies
          secret:
            secretName: my-adresservice-dependencies
            defaultMode: 420
      containers:
        - name: my-adresservice-php
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          image: "ghcr.io/conductionnl/adresservice-php:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /srv/api/config/packages/dependencies.yaml
              subPath: dependencies.yaml
              name: dependencies
              readOnly: true
          env:
            - name: JWT_SECRET_KEY
              value: '%kernel.project_dir%/config/jwt/private.pem'
            - name: JWT_PUBLIC_KEY
              value: '%kernel.project_dir%/config/jwt/public.pem'
            - name: JWT_PASSPHRASE
              value: 'bafe1dc254b45471754c221081f874aa'
            - name: APP_ENV
              value: prod
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  key: trusted-hosts
                  name: my-adresservice
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  key: trusted-proxies
                  name: my-adresservice
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  key: app-version
                  name: my-adresservice
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  key: debug
                  name: my-adresservice
            - name: APP_CACHE
              valueFrom:
                configMapKeyRef:
                  key: cache
                  name: my-adresservice
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database-url
                  name: my-adresservice
            - name: CORS_ALLOW_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: app-corsAllowOrigin
                  name: my-adresservice
            - name: APP_APPLICATION_KEY
              valueFrom:
                secretKeyRef:
                  key: app_application_key
                  name: my-adresservice
            
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: redis-host
                  name: my-adresservice
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: redis-port
                  name: my-adresservice
            - name: APP_URL
              valueFrom:
                configMapKeyRef:
                  key: url
                  name: my-adresservice
          resources:
            {}
        - name: my-adresservice-nginx
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          image: "ghcr.io/conductionnl/adresservice-nginx:latest"
          imagePullPolicy: Always
          env:
            - name: PHP_SERVICE
              value: localhost
            - name: NGINX_HOST
              value: localhost
            - name: BACKENDS
              value: localhost
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          resources:
            {}
---
# Source: adresservice/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-adresservice-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: my-adresservice-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-adresservice
      role: primary
  template:
    metadata:
      name: my-adresservice-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.10.3
        app.kubernetes.io/instance: my-adresservice
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-adresservice
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r200
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - /bin/sh
            - -cx
            - |
              chown 1001:1001 /bitnami/postgresql
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name "conf" -not -name ".snapshot" -not -name "lost+found" | \
                xargs chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: my-adresservice-postgresql
          image: docker.io/bitnami/postgresql:11
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-adresservice-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "webresourcecatalogus"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-adresservice-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "webresourcecatalogus"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "webresourcecatalogus" -d "dbname=webresourcecatalogus" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "webresourcecatalogus" -d "dbname=webresourcecatalogus" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: adresservice/charts/redis/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-adresservice-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.3.2
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-adresservice
      app.kubernetes.io/component: master
  serviceName: my-adresservice-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-15.3.2
        app.kubernetes.io/instance: my-adresservice
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 3590c9c543d3486dcf883a978d647c86e118f342a1887d9bb04b71769b2b6d57
        checksum/health: f568bd729896c384c99f77710116394fdfd6834e335778eafe406bc25563f6e6
        checksum/scripts: 241b525c6c90ee2a8152bc18af631871acce898420150b4b23eb9d94caad584f
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-adresservice-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-adresservice
                    app.kubernetes.io/component: master
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.5-debian-10-r34
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-adresservice-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-adresservice-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-adresservice-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-adresservice
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: adresservice/templates/cron-cache-warmup.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: adresservice-warmup
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  # this cronjob runs every 10 minutes https://crontab.guru/#*_*_*_*_*
  schedule: "0 5 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
          - name: dependencies
            secret:
              secretName: adresservice-dependencies
              defaultMode: 420
          containers:
          - name: adresservice-php
            image: "ghcr.io/conductionnl/adresservice-php:latest"
            imagePullPolicy: Always
            args:
            - bin/console 
            - app:cache:warmup
            volumeMounts:
              - mountPath: /srv/api/config/packages/dependencies.yaml
                subPath: dependencies.yaml
                name: dependencies
                readOnly: true
            env:
              - name: JWT_SECRET_KEY
                value: '%kernel.project_dir%/config/jwt/private.pem'
              - name: JWT_PUBLIC_KEY
                value: '%kernel.project_dir%/config/jwt/public.pem'
              - name: JWT_PASSPHRASE
                value: 'bafe1dc254b45471754c221081f874aa'
              - name: APP_ENV
                value: 'prod'
              - name: TRUSTED_HOSTS
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: trusted-hosts
              - name: TRUSTED_PROXIES
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: trusted-proxies
              - name: APP_VERSION
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: app-version
              - name: APP_DEBUG
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: debug
              - name: APP_CACHE
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: cache
              - name: DATABASE_URL
                valueFrom:
                  secretKeyRef:
                    name: adresservice
                    key: database-url
              - name: CORS_ALLOW_ORIGIN
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: app-corsAllowOrigin
              - name: APP_APPLICATION_KEY
                valueFrom:
                  secretKeyRef:
                    name: adresservice
                    key: app_application_key
              
              - name: REDIS_HOST
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: redis-host
              - name: REDIS_PORT
                valueFrom:
                  configMapKeyRef:
                    name: adresservice
                    key: redis-port
              - name: APP_URL
                valueFrom:
                  configMapKeyRef:
                    key: url
                    name: adresservice
          restartPolicy: OnFailure
---
# Source: adresservice/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-adresservice-test-connection"
  labels:
    helm.sh/chart: adresservice-1.1.0
    app.kubernetes.io/name: adresservice
    app.kubernetes.io/instance: my-adresservice
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-adresservice:80']
  restartPolicy: Never
