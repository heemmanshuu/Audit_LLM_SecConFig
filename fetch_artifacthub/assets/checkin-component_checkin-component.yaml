---
# Source: checkin-component/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-checkin-component-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-postgres-password: "NTNnU0wzQjQ3Tg=="
  postgresql-password: "IUNoYW5nZU1lIQ=="
---
# Source: checkin-component/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-checkin-component-checkin-component
  labels:
    app.kubernetes.io/name: checkin-component
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
  database-url: "cGdzcWw6Ly9leGFtcGxlOiFDaGFuZ2VNZSFAbXktY2hlY2tpbi1jb21wb25lbnQtcG9zdGdyZXNxbC9hcGk/c2VydmVyVmVyc2lvbj0xMA=="
  
  app_application_key: "NDVjMWE0YjYtNTlkMy00YTZlLTg2YmYtODhhODcyZjM1ODQ1"
---
# Source: checkin-component/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-checkin-component-checkin-component
  #namespace: dev
  labels:
    app.kubernetes.io/name: checkin-component
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
data:
  project_name: "checkin-component"
  app-name: "checkin-component"
  app-version: "V.0.1"
  
  app-repro: "https://github.com/ConductionNL/checkin-component"
  app-demo: "chin.zuid-drecht.nl"
  app-domain: "zuid-drecht.nl" 
  app-description: "Naast deze JSON rest API is er ook een [graphql](/graphql) interface beschikbaar."
  app-type: "component"
  app-web: "false"
  app-subpath-routing: "true"
  app-subpath: "checkin-component"
  
  app-auth: "false"
  app-audittrail: "false"
  app-notification: "false"
  
  cache: "false"
  env: "dev"
  debug: "1"
  trusted-proxies: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
  trusted-hosts: "^.+$"
  php-service: checkin-component-dev-php
---
# Source: checkin-component/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-checkin-component-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-checkin-component
---
# Source: checkin-component/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-checkin-component-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-checkin-component
    role: primary
---
# Source: checkin-component/templates/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: checkin-component
  labels:
    app.kubernetes.io/name: checkin-component
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 80
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: checkin-component-nginx
    app.kubernetes.io/instance: my-checkin-component
---
# Source: checkin-component/templates/php-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: checkin-component-php
  labels:
    app.kubernetes.io/name: checkin-component-php
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
  selector:
    app.kubernetes.io/name: checkin-component-php
    app.kubernetes.io/instance: my-checkin-component
---
# Source: checkin-component/templates/varnish-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: checkin-component-varnish
  labels:
    app.kubernetes.io/name: checkin-component-varnish
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app.kubernetes.io/name: checkin-component-varnish
    app.kubernetes.io/instance: my-checkin-component
---
# Source: checkin-component/templates/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkin-component-nginx
  labels:
    app.kubernetes.io/name: checkin-component-nginx
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
      matchLabels:
          app.kubernetes.io/name: checkin-component-nginx
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: checkin-component-nginx
        app.kubernetes.io/part-of: checkin-component
        helm.sh/chart: checkin-component-0.1.0
        app.kubernetes.io/instance: my-checkin-component
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: checkin-component-nginx
        
          image: "docker.io/conduction/checkin-component-nginx:dev"
        
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: PHP_SERVICE
              value: checkin-component-php
            - name: NGINX_HOST
              value: checkin-component-php
            - name: BACKENDS
              value: checkin-component-php
          resources:
            {}
---
# Source: checkin-component/templates/php-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkin-component-php
  labels:
    app.kubernetes.io/name: checkin-component-php
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: checkin-component-php
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: checkin-component-php
        app.kubernetes.io/part-of: checkin-component
        helm.sh/chart: checkin-component-0.1.0
        app.kubernetes.io/instance: my-checkin-component
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: checkin-component-php
        
          image: "docker.io/conduction/checkin-component-php:dev"
        
          imagePullPolicy: Always
          ports:
            - containerPort: 9000
          env:
            - name: JWT_SECRET_KEY
              value: '%kernel.project_dir%/config/jwt/private.pem'
            - name: JWT_PUBLIC_KEY
              value: '%kernel.project_dir%/config/jwt/public.pem'
            - name: JWT_PASSPHRASE
              value: 'bafe1dc254b45471754c221081f874aa' #@todo this should be a variable
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: trusted-hosts
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: trusted-proxies
            - name: APP_NAME
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-name
            - name: APP_DESCRIPTION
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-description
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-version
            - name: APP_ENV
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: env
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: debug
            - name: APP_TYPE
              valueFrom:
                  configMapKeyRef:
                      name: my-checkin-component-checkin-component
                      key: app-type
            
            - name: APP_DEMO
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-demo

            - name: APP_REPRO
              valueFrom:
                  configMapKeyRef:
                      name: my-checkin-component-checkin-component
                      key: app-repro
            - name: APP_DOMAIN
              valueFrom:
                  configMapKeyRef:
                      name: my-checkin-component-checkin-component
                      key: app-domain
            - name: APP_CACHE
              valueFrom:
                  configMapKeyRef:
                      name: my-checkin-component-checkin-component
                      key: cache      
            # config
            - name: AUTH_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-auth
            - name: AUDITTRAIL_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-audittrail
            - name: NOTIFICATION_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-notification
            - name: APP_WEB
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-web
            - name: APP_SUBPATH_ROUTING
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-subpath-routing
            - name: APP_SUBPATH
              valueFrom:
                configMapKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app-subpath
            
            # bla bla      
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: my-checkin-component-checkin-component
                  key: database-url
            - name: APP_APPLICATION_KEY
              valueFrom:
                secretKeyRef:
                  name: my-checkin-component-checkin-component
                  key: app_application_key
            - name: APP_URL
              value: https://dev.zuid-drecht.nl/api/v1/checkin-component
          resources:
            {}
---
# Source: checkin-component/templates/varnish-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkin-component-varnish
  labels:
    app.kubernetes.io/name: checkin-component-varnish
    app.kubernetes.io/part-of: checkin-component
    helm.sh/chart: checkin-component-0.1.0
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: checkin-component-varnish
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: checkin-component-varnish
        helm.sh/chart: checkin-component-0.1.0
        app.kubernetes.io/instance: my-checkin-component
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: checkin-component-varnish
        
          image: "docker.io/conduction/checkin-component-varnish:dev"
        
          imagePullPolicy: Always
          env:
            - name: BACKENDS
              value: checkin-component-php
          #command: ["varnishd"]
          #args: ["-F", "-f", "/usr/local/etc/varnish/default.vcl", "-p", "http_resp_hdr_len=65536", "-p", "http_resp_size=98304"]
          ports:
            - containerPort: 80
          resources:
            {}
---
# Source: checkin-component/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-checkin-component-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: my-checkin-component
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: my-checkin-component-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-checkin-component
      role: primary
  template:
    metadata:
      name: my-checkin-component-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.1.1
        app.kubernetes.io/instance: my-checkin-component
        app.kubernetes.io/managed-by: Helm
        role: primary
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: my-checkin-component-postgresql
          image: docker.io/bitnami/postgresql:11.10.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-checkin-component-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "example"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-checkin-component-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "api"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
        - name: data
          emptyDir: {}
