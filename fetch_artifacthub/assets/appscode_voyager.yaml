---
# Source: voyager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-voyager
  namespace: default
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: voyager/templates/apiregistration.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-voyager-apiserver-cert
  namespace: default
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURjekNDQWx1Z0F3SUJBZ0lSQVBuU0NlK2tCR1BSVlRmQXJTSnAxUE13RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTWpRd09URTJNRGt5TkRRNVdoY05NelF3T1RFME1Ea3lORFE1V2pBawpNU0l3SUFZRFZRUURFeGx0ZVMxMmIzbGhaMlZ5TFhkbFltaHZiMnN0YzJWeWRtVnlNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUErdVE2cktjeDc2alpjWVdqZ20xRWRydGNLSmJkcjV5U1JOUnkKdmFBOGtvNXZXMkk1VUhZVDdPR3FIODBvZVhyRHBqT0tsR1ZUa2swQUNGR2xIRHdMaVFwR1ZOcittb0tYcW1qRQpZQ0dNUGRXVG4vdytpYXlwYkl4RnBFc1dqRnVZZ2greHdaY0JFM0t1bjF5NEgyQkxqcWx3MTBnR0VKc3RyRVN1Cnl2NGd3ZlBNNjVTb2x5WFd4eVNJSE0vNzBrdERLNnhHOWxvY1IwRlRtTTNvTG96aGhlMXREQmI4RkM3bmdlMXkKVDBZNk1QSDVqN1BPRy9MWjRMTG1ZNUJkaGFuN25IU1B5ZkFpalJtdFNBTVpKYm5ua2ZVN1hBVTg3cnQ1NldDMQpIaGRVRUdoVFNYUTAzZWVOcm1UMjhlelBhSmhYVDhUVjZBOHFrS2tlbmlva0hrMWxYd0lEQVFBQm80RzJNSUd6Ck1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlMxeDVjZ2N4MDFRdHEzS01WTkd6RHh2MXc2dVRCVApCZ05WSFJFRVREQktnaUZ0ZVMxMmIzbGhaMlZ5TFhkbFltaHZiMnN0YzJWeWRtVnlMbVJsWm1GMWJIU0NKVzE1CkxYWnZlV0ZuWlhJdGQyVmlhRzl2YXkxelpYSjJaWEl1WkdWbVlYVnNkQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUwKQlFBRGdnRUJBRC9Ka0xDVjNEa25wZUt6NDdRVHBNaTVGTmRkSVdnODE4b21yc1U2VDRiYUI1dnVSYUxDZFpNVgpCU1FzWFVJUWl1KzRjd3d3aW9ieUxJayt6TUhOZ0swR0ZrRHVqekR6ZXN0Rnk0aHRsSWx3V0JzTmE1UFB6OVlZCk5Kb01sQVp0Nm9iT1Y1VExzT1R6NUtBMVJRb1hCQUMxd05wYVNVSmswbVpVbGI4K3d4dWZMWXhJcVJDOW1nZUIKRGI0bWJQTm5ESjFnWkhXVlo1dFEzZXhNWVBRc1R3ME00TXd3eW14MWx3VTI0OVBmYWhPUFpheUljVnhsZFR1bwpGdXB2V1ppYlZ3QzcwR3lEQzJrRDNVeWJvR2xHemVmSjl4UU5ScDhnUVRmM29RZVdoVEh1bTVpMW1HNS9oQkVZCnBmOCtzeUxrQVRqK21Sa041cEFiZ0pLRHJZQUZYMFU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBK3VRNnJLY3g3NmpaY1lXamdtMUVkcnRjS0piZHI1eVNSTlJ5dmFBOGtvNXZXMkk1ClVIWVQ3T0dxSDgwb2VYckRwak9LbEdWVGtrMEFDRkdsSER3TGlRcEdWTnIrbW9LWHFtakVZQ0dNUGRXVG4vdysKaWF5cGJJeEZwRXNXakZ1WWdoK3h3WmNCRTNLdW4xeTRIMkJManFsdzEwZ0dFSnN0ckVTdXl2NGd3ZlBNNjVTbwpseVhXeHlTSUhNLzcwa3RESzZ4Rzlsb2NSMEZUbU0zb0xvemhoZTF0REJiOEZDN25nZTF5VDBZNk1QSDVqN1BPCkcvTFo0TExtWTVCZGhhbjduSFNQeWZBaWpSbXRTQU1aSmJubmtmVTdYQVU4N3J0NTZXQzFIaGRVRUdoVFNYUTAKM2VlTnJtVDI4ZXpQYUpoWFQ4VFY2QThxa0trZW5pb2tIazFsWHdJREFRQUJBb0lCQVFDekY4UUNodjhRY3RsMQpQYzR3Umt0KzdkT2xiYndscFlDTC9aTkNaV1dYd0hFaExJWjVOekNXQWFodE53ZlRYNXpWd1NrRk1TZHM0ZVpLCkNlM3dyN1FVU085WGwxUHplNUZFSmJFNFpmbzBFWWRseHF2bG53ajU0VSs5TFpTVThMVjIvYVRuNmlEc2Z3ckQKMjIzYmgrT25uTEJlSEoybnNQM3pZTHZkVDNhV3UwWVRNck5FWDdaMkdpUGJHSE5BM1NRWldONUp1MThVb0hvSgo3c2g4TDAyZVo2cy9Id0ZEUWtiR2Z1WTMxZnV4WFM1eDBVdDVyaVJsOEVJdXdmWkNCcVZlRnRxUW5ZT3locmI4ClVWZjZuc3ROU25nS2xzZWlqWTJkV1dhZmd4cEhzcXBETGFsa01GTkRNNk9uazZXL25tUmxaRXFSL0JLd0xKTlkKdlB1Vks1MlJBb0dCQVA3TXNIWEkvbk5aRCszdEN5c0hvUUY5SmxKSkhNeHlEYmpYZFJiS0RRRE1mMTMzb2VVNgo4cjk4M1FQL3BnODIvL0JQMFhXN2k3T1MwSXM1ZlplaXppZTQ3ZFVvc2xRbDJkWW5COEROanFoKy9tdGFQeVNaCktPMWpyRWlpUzVLUHhsK1F3TFQ1czNiTGVEK0QzL1VWT2FVZlIrUGlDWXBMSml5YU9XcjVQSWViQW9HQkFQd1MKMDVKSE54bVcyeDlsRThRMW1iYmZHWjZOVnFlUzdNSUZmandIZ1p1dGhyMktPbjJ1TnhQMFdwalpDczB5a1Ivcgp1L2VYRDY2RWZqbXVEOC84NXNEbGNMb3NUNjA5MndCaUxQbnFuMVYzUDZ4RWluMmd6djVxWHdER1lpVEw1RmRDCjhLZFY5ZjUyRGxVOXZ0c2VIKzRST2lidFdZNEpiazZRbUgreVorK05Bb0dBTk1rZzhYWFBTUVExYVp3SENVWU8KVSttaWE3K2J5THNFSHJ2OEZObU04aEpyZklNVnRoQ05RNkJSaFVlTUZuRFZldXArUVQ2MlJXQnY5YmZXVGZpNwpicjFBQUQzckc4V3ZxRTd6cXp5cWhqdXc1M3FOeEQ0Nm5WdGQwTHBXbjZsTGRuYmRoV0NKamwyK3JxSGFYc0tqCjY1SmNhVmhsazVIWCtidUZrNlRJcG1zQ2dZRUFnbUNXYjUxSUFZTkdXTW1sM0tGQW5SWnRvTlZIMGFxcnJIcTgKM1AyZzZzMW8ySllyUktBY09zVHpLd1Z2a2N5cXhWRGZTdU1tS0VTOUtNWS94WHJ3T3lzeEVBb2xOOXk3YmtwWgpLdlpRYlJzZG90TmNzamUvZUZXNlI2TlVWZVhqZDhMV3lDWXM4dTFLNG9ucU1sazFlS1FPYU4zd3FRZDF0MHNRCnBWTzRjRzBDZ1lCRGtsMzMyRlNNaDJTRExCMU00Sjd6cXN2UGJFaWRqZVl5ZWJBWlloNmpkTm02WGY1d0l4cnYKaFl2WFo1aXE4TE10d1ZRLzg3OHQzd29MWWtLbFN1ZFJ3MXJNNTlyRGhDYmpqOWdERlcwdWJpVmVvRTBqV09xNwpwdGlGMXAzMTRuQXlGd2YzQzBSMVBpN0V5OEhsSWpkOWg5ZlhBMTlDSUUvU2dJazFyckY2N0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: voyager/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-voyager
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs: ["*"]
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get", "patch", "delete"]
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs: ["delete", "get", "list", "watch", "patch"]
- apiGroups:
  - voyager.appscode.com
  resources: ["*"]
  verbs: ["*"]
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs: ["*"]
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs: ["*"]
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  verbs: ["*"]
- apiGroups:
  - extensions
  - networking.k8s.io
  - voyager.appscode.com
  resources:
  - ingresses/finalizers
  verbs: ["update"]
- apiGroups: [""]
  resources:
  - replicationcontrollers
  - services
  - endpoints
  - configmaps
  verbs: ["*"]
- apiGroups:
  - ""
  resources:
  - services/finalizers
  verbs: ["update"]
- apiGroups: [""]
  resources:
  - secrets
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - events
  verbs: ["create"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["get", "list", "watch", "delete", "deletecollection"]
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs: ["create"]
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch", "get"]
- apiGroups: [""]
  resources:
  - serviceaccounts
  verbs: ["get", "create", "delete", "patch"]
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs: ["get", "create", "delete", "patch"]
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs: ["get", "list"]
---
# Source: voyager/templates/apiregistration.yaml
# to delegate authentication and authorization
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-voyager-apiserver-auth-delegator
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: my-voyager
  namespace: default
---
# Source: voyager/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-voyager
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-voyager
subjects:
- kind: ServiceAccount
  name: my-voyager
  namespace: default
---
# Source: voyager/templates/license-checker-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-voyager-license-checker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-checker
subjects:
- kind: ServiceAccount
  name: my-voyager
  namespace: default
---
# Source: voyager/templates/license-reader-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-voyager-license-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-reader
subjects:
- kind: ServiceAccount
  name: my-voyager
  namespace: default
---
# Source: voyager/templates/apiregistration.yaml
# to read the config for terminating authentication
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-voyager-apiserver-extension-server-authentication-reader
  namespace: kube-system
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: my-voyager
  namespace: default
---
# Source: voyager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-voyager-webhook-server
  namespace: default
  labels:
    voyager.appscode.com/component: webhook-server
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  # Port used to expose admission webhook apiserver
  - name: admission
    port: 443
    targetPort: 8443
  # Port used to respond to Let's Encrypt HTTP challenges
  - name: acme
    port: 56791
    targetPort: 56791
  selector:
    voyager.appscode.com/component: webhook-server
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
---
# Source: voyager/templates/deployment-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-voyager-operator
  namespace: default
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      voyager.appscode.com/component: operator
      app.kubernetes.io/name: voyager
      app.kubernetes.io/instance: my-voyager
  template:
    metadata:
      labels:
        voyager.appscode.com/component: operator
        app.kubernetes.io/name: voyager
        app.kubernetes.io/instance: my-voyager
      annotations:
        checksum/apiregistration.yaml: b34d80c66ee0c6e177168bc7b29de32b4d796a406c2701cae9ddaba521062556
    spec:
      
      serviceAccountName: my-voyager
      containers:
      - name: operator
        securityContext:
          {}
        image: ghcr.io/voyagermesh/voyager:v17.2.0
        imagePullPolicy: IfNotPresent
        args:
        - operator
        - --cloud-provider=
        - --cloud-config=
        - --v=3
        - --ingress-class=
        - --haproxy-image=ghcr.io/voyagermesh/haproxy:2.9-alpine
        - --coordinator-image=ghcr.io/voyagermesh/voyager:v17.2.0
        - --bypass-validating-webhook-xray=false
        - --use-kubeapiserver-fqdn-for-aks=true
        ports:
        - containerPort: 8443
        - containerPort: 56791
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          {}
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        - mountPath: /tmp
          name: tmp-dir
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-voyager-apiserver-cert
      - name: tmp-dir
        emptyDir: {}
      securityContext:
        fsGroup: 65535
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: voyager/templates/deployment-webhook-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-voyager-webhook-server
  namespace: default
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      voyager.appscode.com/component: webhook-server
      app.kubernetes.io/name: voyager
      app.kubernetes.io/instance: my-voyager
  template:
    metadata:
      labels:
        voyager.appscode.com/component: webhook-server
        app.kubernetes.io/name: voyager
        app.kubernetes.io/instance: my-voyager
      annotations:
        checksum/apiregistration.yaml: 4fbd8e66aff31c56e8948ba4d13ce444b241d2175b3d8fadd93974dafcde56b5
    spec:
      
      serviceAccountName: my-voyager
      containers:
      - name: operator
        securityContext:
          {}
        image: ghcr.io/voyagermesh/voyager:v17.2.0
        imagePullPolicy: IfNotPresent
        args:
        - run
        - --cloud-provider=
        - --v=3
        - --secure-port=8443
        - --audit-log-path=-
        - --authorization-always-allow-paths=/healthz,/readyz,/livez,/convert
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --bypass-validating-webhook-xray=false
        - --use-kubeapiserver-fqdn-for-aks=true
        ports:
        - containerPort: 8443
        - containerPort: 56791
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          {}
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-voyager-apiserver-cert
      securityContext:
        fsGroup: 65535
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: voyager/templates/apiregistration.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1.admission.voyager.appscode.com
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  group: admission.voyager.appscode.com
  version: v1
  service:
    namespace: default
    name: my-voyager-webhook-server
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRWHJOazk5VzdvUjI4OTd3YlBvbjJKVEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBNU1UWXdPVEkwTkRsYUZ3MHpOREE1TVRRd09USTBORGxhTUEweApDekFKQmdOVkJBTVRBbU5oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFyMjNxCllhY3ZubWxsK2ZpZDg3Rkptd0RnTWNld0RjRUI0czB0NlkzK21ZdzdKQ3BDOHozY3FwR3pzd3llZjg4YkYxNDEKZnd3bGhqVTRHci9VU2FqaG5MRG45ZTB2VEt0ZVpOM3VXUDZldVIvVnJGWkVzc2VGRUxjeEUyZEx4b2xuazVqdApYMzMxUGovVGpYQVdBaFU4S1RzUXEwb3p4dWNoYndBUTNPdWRlTjMrSHROZGJTbW9POVpsckJXM0RYSEJzS3RnCnZ0MzhKRXRCbFp3TjlXcFNJVW5WSXpORTVmSW91ZkZlK25UMU5pR2VsODJFSXVtY0NLY2dPd1Q5QXFhN1NIdFkKMGJoaTkvUjF6dklFYnQxZHBQOUMxNlhlR051Qi9UTktPMHFQcmlFUnBsbE1VdlNIZzRWa0IyNklaSUtOU3lkZgpuZkQ5VHZxam9ONXJZNFlMNHdJREFRQUJvMkV3WHpBT0JnTlZIUThCQWY4RUJBTUNBcVF3SFFZRFZSMGxCQll3CkZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUUKRkxYSGx5QnpIVFZDMnJjb3hVMGJNUEcvWERxNU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQWk0K3hZd1dZbAprWnZ5Ymd4ZFEvaXZkYTZzM3JVcDdNZ0tJVUNJZGV2ZTluVEp6cmRURmg4cXZmUDFvM2dtRGduNFBocGU5bElhCnp2bHY4cG55TmtmYkVUMjgzZEhyN2VjVklDeDBXalE0VXh3OGRQSG5mYmFRYTI4MXJ0c1JMbVlWekpvbXkyUjIKbXI3QU1FQnZFME9VYkpvMDdoKytmQlBxQm11TXJkSEJxVEIzeTNqY2NrZTJuYkdSeHNIK1ZJVGxCeGtwNGZBRgp3QjBYT05xTkpjWWdyS1gwWEZ6M2srbkRqRm9IZVpHN3JrYy8rZmFUWW1YM1gzVWpNREhBcVBYNWh1Z3pIRDBSCnhXU3J6UTRGOUcyRVIycnpLKzl1Z295YktBL3kvVy9Eek5xUnRyd0MxcVpETkoyU0VYUThHcnpuS2VsaTFpZlMKN08zSzVOWnZ3aWtUCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  groupPriorityMinimum: 10000
  versionPriority: 15
---
# Source: voyager/templates/license.yaml
# if license file is provided, then create a secret for license
---
# Source: voyager/templates/license-checker-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-checker
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Get cluster id
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs: ["get"]
# Issue license
- apiGroups:
  - proxyserver.licenses.appscode.com
  resources:
  - licenserequests
  verbs: ["create"]
# Detect workload/owner of operator pod
- apiGroups:
  - ""
  resources:
  - pods
  verbs: ["get"]
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs: ["get"]
# Write events in case of license verification failure
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["get", "list", "create", "patch"]
---
# Source: voyager/templates/license-reader-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-reader
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Detect license server endpoint for kubedb addons
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get"]
- nonResourceURLs:
  - /appscode/license
  verbs: ["get"]
---
# Source: voyager/templates/user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:voyager:edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - voyager.appscode.com
  resources:
  - certificates
  - ingresses
  verbs: ["*"]
---
# Source: voyager/templates/user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appscode:voyager:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - voyager.appscode.com
  resources:
  - certificates
  - ingresses
  verbs: ["get", "list", "watch"]
---
# Source: voyager/templates/cleaner.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-voyager-cleaner
  namespace: default
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 120
  template:
    spec:
      
      serviceAccountName: my-voyager
      containers:
      - name: kubectl
        image: ghcr.io/appscode/kubectl:v1.24
        command:
          - sh
          - -c
          - "sleep 2; \
          kubectl delete validatingwebhookconfigurations admission.voyager.appscode.com || true; \
          kubectl delete apiservice v1alpha1.admission.voyager.appscode.com || true"
        imagePullPolicy: IfNotPresent
      restartPolicy: Never
---
# Source: voyager/templates/validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: admission.voyager.appscode.com
  labels:
    helm.sh/chart: voyager-v2024.8.30
    app.kubernetes.io/name: voyager
    app.kubernetes.io/instance: my-voyager
    app.kubernetes.io/version: "v17.2.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
webhooks:
- name: admission.voyager.appscode.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.voyager.appscode.com/v1/admissionreviews
    caBundle: bm90LWNhLWNlcnQ=
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - voyager.appscode.com
    apiVersions:
    - "*"
    resources:
    - "*"
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - networking.k8s.io
    apiVersions:
    - "*"
    resources:
    - ingresses
  admissionReviewVersions: ["v1beta1"]
  failurePolicy: Fail
  sideEffects: None
