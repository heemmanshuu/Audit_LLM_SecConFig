---
# Source: service-provider/templates/rbac/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-service-provider
  namespace: default
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: service-provider/templates/webhook-server/cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-service-provider-webhook-cert
  namespace: default
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRSVhrWTg1R2p5STRuZFJYRk5UV1RUakFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBNU1UWXdPRFV4TURkYUZ3MHpOREE1TVRRd09EVXhNRGRhTUEweApDekFKQmdOVkJBTVRBbU5oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6eVU4Ckoxa2t5aDQ5a0JGMHZnMnNpQTcycDBQaHpxSXJoejdtSElnVVdWSFl5eGMvK1BjMEJYT2ZEbC9Ea3lNcktRdm8KYWN2cjZJTkNpbmRXSm5sY01PQnVheGxmTGtVZkFDUm1qOEovaFlsK2VtMm1HbG1SUUNvdHczMDEzUDBTRVZFNwp3TmlHQUVmYjNrVSswUklhMXl6Lzk5alRBaEFkRnlyOTZ3WkJTL0V2WUthZUxoWk0ySm5OUk9sa1BxMDluYWVhCndidlA0RTlxbDM4NTU1QlFxS1Z2S0lDdVBqNHRwNHZGS3N5clpaNS9qVEtPMXFiNlN4Q2V5Vm9DVUdHdWtqeTUKYkN5eFdxeFJsb3krYzR4UmFvUXQzWVByZkFYd3k5NmhmbkJFSVRVSnl5L0hpS3NUTnY1WnE2YzJiVjNFRWJoLwpMS0Vyd2swTUZLeFBZdW1wdHdJREFRQUJvMkV3WHpBT0JnTlZIUThCQWY4RUJBTUNBcVF3SFFZRFZSMGxCQll3CkZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUUKRkZ1Nit1bWJBeG9vNGRMN09nZU9QaHkreHpRNE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0xUL2hWYUFxYgpMcVAzbk9FanZTbElYeDcrYWM0REJ6QWtYOHBzd0EvY0hnbTNZL21KcWphamFFaklpVWdBaXQ4SncraXdxK1ZsCkoxaWhaUVYwOUNzRkZ6RXgzcEJlU0J6UUt3anBnL2JJblNPcS9kQ1gzdVdvU01rZm5Xc1VFRUZKNGorTEdnVW8KUXQ0VEVGc0RnMmhpcVF2SzZYS0ZURE9QZ0pZRG9CcXNBVVJ3cTFHOVc5bjFZMEU3ZWhGOEZyWXIyR0RCWTJjVwovMTB4RzZlR3p5L2tScVNuWFh1L0RXTHdtWDkwMndqZ2dHY0VZOTdxbDNjRzBtVHU5MmpnWmE1ZmQrUEJJMW0xCkRwR1dkK2JXUGFVYXUwWkluYUdNU1AwUFZkUkwzbWZ0OUxYOGlNVzFXczY1UlJQeDRJUkF6TTNCdDlIdVNuckEKeEJaWHZTZXVNekI4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURqVENDQW5XZ0F3SUJBZ0lRVlp5MkFXT3cvSUY0Z09zWXlvVnhVekFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBNU1UWXdPRFV4TURkYUZ3MHpOREE1TVRRd09EVXhNRGRhTUMweApLekFwQmdOVkJBTVRJbTE1TFhObGNuWnBZMlV0Y0hKdmRtbGtaWEl0ZDJWaWFHOXZheTF6WlhKMlpYSXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREhVaXEraEs2b2thOVVHQ2tRK1JjQnhwRzkKWlFhOG5GUHh3bDRaTDNZN1JlV3NFSlZlQXZaVzNSb1RmWDJ2dERCVTRMWHRlSUFkN3orUmF0VjloblIzVStBTgpDVVArOGRBYkM1WUwyejVKK3VmVnN0Tkw4T1doRUo1SzBuNFhUcitRcEJhQmxCemNoc3NkSWtObzg3ZnRDbzMvCkdaeUhWeVFQdU9CdXZPOE1idm5ocUJzektGWFBwVDYxcjlKMGRaRDFEd1lsVFovQVZubDNMUkRZRXp3TVVLcHAKVGliRWNSaTlyMk1LVk9sWkZZVDR2Z1ZIckxBdklyQTIwWTFyY2t2c0U5VFFobHpsa2I1RE5qdkFEVlM4Rm9ENQpIK3oxa0VOLzZhazljQnNpWEdyWTVMWVZvYXN6ckpRejU4eFY1cGJ0ZmtvRmRUZ1VEQVlXVUxlYkkwTlpBZ01CCkFBR2pnY2d3Z2NVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRnU2K3VtYkF4b280ZEw3T2dlTwpQaHkreHpRNE1HVUdBMVVkRVFSZU1GeUNLbTE1TFhObGNuWnBZMlV0Y0hKdmRtbGtaWEl0ZDJWaWFHOXZheTF6ClpYSjJaWEl1WkdWbVlYVnNkSUl1YlhrdGMyVnlkbWxqWlMxd2NtOTJhV1JsY2kxM1pXSm9iMjlyTFhObGNuWmwKY2k1a1pXWmhkV3gwTG5OMll6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFPNkp5U2NYaVRqdHp0VS9tV3MzaApjcmlvUml1cXVqcEdtSk01cmZ3elFIakNaV3NXazdIU3B2V29lTUthZ1g2QXpBOGhwNDdIdDJkYVYxRnY4YkQzCjB1S0RhcVR0VTZhVmZwZDRwT1J1WStoZ2lVK1Z2OENHZjFTM2J1MnZKOE92Y09YUUxyQzgxdG9xYVYwaTBBY1YKZitTQVhuZGtmdjlUbHQ2YUYvT0grc3lzbitSNmJLTDdiM2pudEQxTHNodTZrbXEwTExZdG1TLzhEclpINkhBdwp6c1hzMmtCK1k2T1Uwd05acW43TGxrQm1RS3Naa2dPOEE4d2E0eWVmZUUrSnExY0kwbmd1akhnNGRlNW8rWWF2CkxlNlpSeWR2c3ljQWpET29LNGJhWkVMVC9ZYXkzcEludmdWSXRwMW5OTHN3Qnk1Tzdrc0FML2dzRHNnVERQT3IKbmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeDFJcXZvU3VxSkd2VkJncEVQa1hBY2FSdldVR3ZKeFQ4Y0plR1M5Mk8wWGxyQkNWClhnTDJWdDBhRTMxOXI3UXdWT0MxN1hpQUhlOC9rV3JWZllaMGQxUGdEUWxEL3ZIUUd3dVdDOXMrU2ZybjFiTFQKUy9EbG9SQ2VTdEorRjA2L2tLUVdnWlFjM0liTEhTSkRhUE8zN1FxTi94bWNoMWNrRDdqZ2JyenZERzc1NGFnYgpNeWhWejZVK3RhL1NkSFdROVE4R0pVMmZ3Rlo1ZHkwUTJCTThERkNxYVU0bXhIRVl2YTlqQ2xUcFdSV0UrTDRGClI2eXdMeUt3TnRHTmEzSkw3QlBVMElaYzVaRytRelk3d0ExVXZCYUErUi9zOVpCRGYrbXBQWEFiSWx4cTJPUzIKRmFHck02eVVNK2ZNVmVhVzdYNUtCWFU0RkF3R0ZsQzNteU5EV1FJREFRQUJBb0lCQVFDUHc3NDg2S3FwdjFxOAp4eWhucTZKaWozenpKSGsxZFhRK3ZqanM1WVRidjlDbXlOZFRsY05rWjltMUVTQ2txTXpyaTZEdEJhc3k3Q3ZuCmtTMG5ldUZxYUQ4RWFCaDVQS1VqdkxtZkY2WFg2bmRwZGJCZDZBVllwUW5uWWVlOG0vb2tNNVpnSkJxbEhUeEgKYVQxQjUvaFRxdmM4ZHBhbUw3NDg4TlpBU1ZvS2xvS0NFUlZMZU5uOXl3TDVLUmlDWS9tb3B2ZHlOWlpQV0xzVApPS0svbGJOdnFKSWdlYlFSSk1vVjlOeGdJMkwwa0lYQU1YMmZzUGJsYlJGMzA2a0N6SUhSWUd0OWk2QXkrdzdTCmhMb3lsWUdIMkVaVWF6cC8zQnFtYURWZWNPQWdEYVdJbGtBSTJxMHQxK1NMSzh2MzQ0MHlTcXRQOG5WRmtvdHEKcXIzYlpWcGhBb0dCQU5TRmJlcFlacHgyVjQxOE5QZml4cjNSNHBOS1U2Mmc3WmRXZGlJT2g0TWpKMTlodzFYRQp4aWljUVJ1Wno5UnFyaTVoUExaaUkwV0EyeDgwKzcza1hIUm9ISVpENjBNOERwSzBIZUozcGlHVDl3YzhsT2NXCkZqUThRY25XdjVPeGZ3ekJTbHZnSDNYZjdpUnhnSi9UYzdCT1lZMk9Gd3JKRXNEUGRSdzJiL1AxQW9HQkFQQVoKWTVTLzNKRXV1dzEvQ2Vxb0R0Vit5RHh1blEyTnRnTHFLSTNqY1BQUXZJbEZsZHlLVm1HcFJlTVNCeTY3WG5SdApyYW5xMGI3ZS85WUtxQnZFY3FHTjJwUElvSjFqNmZOSUJaNE9HVzRIWkR0MmlzcGV4bC8zV3RIQUE4YXVLL0RTCjVveEJRY0FnN1pLYjZzLzlUOXI5VFlNWmticE9mcko3c1VreGMxZFZBb0dCQUsvTC8vUk9VL014WVpORUgzeSsKTnJCbW9nbzgvYU11NzlxMFJ0dzlNSk9sekxmMTR1TmI5cDg1UWhKVzFiaGMxdUMreHI0SHlDMkNQY0Erejg5dwp5NW52VlVrcmZiME1QUEhWMUxLMVR0T1AxbFJDSk5wVFJ1TEd4WlQwODF4MUF5ZkY3SUM3a01xdEJnMVhacExQCkUyL1FKcG8xNDVHa2FzTGIyWUFROStMUkFvR0FOM1NWeElpZ0NFUnozY1VtNURVVzRBYmRkdC9SbEl6VHFrNnQKT1VCOEdVUndGNENrQVlGT1BGWmRsdm5XQU53MEQ4NDVXMUtxU1Z5MldKaXpoVjVWWDYway9CZE55YXlISDdMVgo0VkMrWE9TR0tSblRLclRET3UwbDQrWm11T0FIdENMeUx4anZkOUhqTFlhbnNJeUFna01aUVJ1SnhpOVZJaUpoCnExY3BuZFVDZ1lFQXFMZU5LZkJ2eEFrWTFWRng5WDVIdVNiNEdwN2MwRWd0cVRzL1JPMElWL3VRNitzY2Y0cEQKS05Ib1orSjhTb2JmMWJXbldiNHh6UXlqbUxsNlV2MjFZa1E3TVZyVHZhd2RGNGJRK0lJTFE1WnBhT2kyRklHTgpJQVRXOXFxMGZqMisvTnoyaGxIeVNHLzBtbFMrbFYwcHFiNjQrNHpoeXpzcUdmbU5LQ0RYTmJZPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: service-provider/templates/rbac/auth_proxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-service-provider-auth-proxy
rules:
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
---
# Source: service-provider/templates/rbac/cluster_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-service-provider
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs: ["get", "list", "watch"]
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - "clusterroles"
  - "clusterrolebindings"
  - "roles"
  - "rolebindings"
  verbs: ["*"]
- apiGroups:
  - ""
  resources:
  - "namespaces"
  - "serviceaccounts"
  verbs: ["get", "list", "watch", "create"]
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - "customresourcedefinitions"
  verbs: ["get", "list", "watch"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "apiserviceexportrequests"
  verbs: ["*"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "apiserviceexportrequests/status"
  verbs: ["patch","update","get"]
- apiGroups:
  - ""
  resources:
  - "secrets"
  verbs: ["*"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "clusterbindings"
  verbs: ["get", "watch", "list", "create"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "clusterbindings/status"
  verbs: ["get","patch","update"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "apiserviceexports"
  verbs: ["get", "watch", "list", "create"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "apiserviceexports/status"
  verbs: ["get","patch","update"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "apiservicenamespaces"
  verbs: ["*"]
- apiGroups:
  - "kube-bind.appscode.com"
  resources:
  - "apiservicenamespaces/status"
  verbs: ["patch", "update", "get"]
- apiGroups:
  - "admissionregistration.k8s.io"
  resources:
  - "mutatingwebhookconfigurations"
  - "validatingwebhookconfigurations"
  verbs: ["get", "list", "watch", "update"]
---
# Source: service-provider/templates/rbac/auth_proxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-service-provider-auth-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-service-provider-auth-proxy
subjects:
  - kind: ServiceAccount
    name: my-service-provider
    namespace: default
---
# Source: service-provider/templates/rbac/cluster_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-service-provider
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-service-provider
subjects:
- kind: ServiceAccount
  name: my-service-provider
  namespace: default
---
# Source: service-provider/templates/webhook-server/monitoring/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-service-provider
  namespace: default
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/component: webhook-server
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
---
# Source: service-provider/templates/webhook-server/webhook_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-service-provider-webhook-server
  namespace: default
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/component: webhook-server
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
---
# Source: service-provider/templates/provider/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-service-provider-operator
  namespace: default
  labels:
    app.kubernetes.io/component: operator
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/name: service-provider
      app.kubernetes.io/instance: my-service-provider
  template:
    metadata:
      labels:
        app.kubernetes.io/component: operator
        app.kubernetes.io/name: service-provider
        app.kubernetes.io/instance: my-service-provider
      annotations:
    spec:
      
      serviceAccountName: my-service-provider
      containers:
      - name: operator
        image: "ghcr.io/appscode/service-provider:v0.0.1"
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        args:
          - provider
          - --namespace-prefix=ace-
          - --provider-cluster-name=Appscode
          - --consumer-scope=Namespaced
          - --external-address=
          - --external-ca-file=
          - --external-server-name=






        resources:
          requests:
            cpu: 100m
      securityContext:
        fsGroup: 65535
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: service-provider/templates/webhook-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-service-provider-webhook-server
  namespace: default
  labels:
    app.kubernetes.io/component: webhook-server
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: webhook-server
      app.kubernetes.io/name: service-provider
      app.kubernetes.io/instance: my-service-provider
  template:
    metadata:
      labels:
        app.kubernetes.io/component: webhook-server
        app.kubernetes.io/name: service-provider
        app.kubernetes.io/instance: my-service-provider
      annotations:
        checksum/apiregistration.yaml: bd336b572de6009218a6469d5030ac8b2a6b8bba48972b6311726cb17c35737b
    spec:
      
      serviceAccountName: my-service-provider
      containers:
      - name: webhook-server
        image: "ghcr.io/appscode/service-provider:v0.0.1"
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        args:
          - webhook
          - --webhook-name=my-service-provider
        ports:
        - name: webhook-server
          containerPort: 9443
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            cpu: 100m
        volumeMounts:
        - name: serving-cert
          mountPath: /var/serving-cert
          readOnly: true
      - name: kube-rbac-proxy
        image: "ghcr.io/appscode/kube-rbac-proxy:v0.15.0"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          requests:
            cpu: 100m
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-service-provider-webhook-cert
      securityContext:
        fsGroup: 65535
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: service-provider/templates/webhook-server/mutating_webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: my-service-provider
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: my-service-provider-webhook-server
        namespace: default
        path: /mutate-kube-bind-appscode-com-v1alpha1-clusterbinding
      caBundle: bm90LWNhLWNlcnQ=
    failurePolicy: Fail
    name: clusterbindings.kube-bind.appscode.com
    rules:
      - apiGroups:
          - kube-bind.appscode.com
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterbindings
    sideEffects: None
---
# Source: service-provider/templates/webhook-server/validating_webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: my-service-provider
  labels:
    helm.sh/chart: service-provider-v2024.2.11
    app.kubernetes.io/name: service-provider
    app.kubernetes.io/instance: my-service-provider
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: my-service-provider-webhook-server
        namespace: default
        path: /validate-kube-bind-appscode-com-v1alpha1-clusterbinding
      caBundle: bm90LWNhLWNlcnQ=
    failurePolicy: Fail
    name: clusterbindings.kube-bind.appscode.com
    rules:
      - apiGroups:
          - kube-bind.appscode.com
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterbindings
    sideEffects: None
---
# Source: service-provider/templates/rbac/user_roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:kube-bind:edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - kube-bind.appscode.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: service-provider/templates/rbac/user_roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:kube-bind:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - kube-bind.appscode.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
