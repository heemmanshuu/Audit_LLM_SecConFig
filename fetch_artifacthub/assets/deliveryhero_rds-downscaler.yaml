---
# Source: rds-downscaler/templates/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: my-rds-downscaler
  namespace: default
  annotations:
    {}
  labels:
      app.kubernetes.io/name: rds-downscaler
      helm.sh/chart: rds-downscaler-1.0.4
      app.kubernetes.io/instance: my-rds-downscaler
      app.kubernetes.io/version: "1.0"
      app.kubernetes.io/managed-by: Helm
---
# Source: rds-downscaler/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-rds-downscaler
  labels:
    app.kubernetes.io/name: rds-downscaler
    helm.sh/chart: rds-downscaler-1.0.4
    app.kubernetes.io/instance: my-rds-downscaler
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
data:
  docker-entrypoint.sh: |
    #!/bin/sh
  
    set -eu
  
    pip3 install --user boto3
  
    exec "$@"
  run.py: |
    import boto3
    import time
    import os
  
  
    client = boto3.client('rds')
  
    try:
        tag_key = os.environ['TAG_KEY']
        tag_values = os.environ['TAG_VALUES'].split(',')
    except KeyError:
        print('Environment variable TAG_KEY or TAG_VALUE not set')
    else:
        for instance in client.describe_db_instances()['DBInstances']:
            instance_tags = client.list_tags_for_resource(ResourceName=instance['DBInstanceArn'])['TagList']
  
            if instance['DBInstanceStatus'] != 'available':
                print('Skipping instance, not available: {0}'.format(instance['DBInstanceIdentifier']))
                continue
  
            if not [tag for tag in instance_tags if tag['Key'] == tag_key and tag['Value'] in tag_values]:
                print('Skipping instance, tags do not match: {0}'.format(instance['DBInstanceIdentifier']))
                continue
  
            print('Stopping instance {0}'.format(instance['DBInstanceIdentifier']))
  
            try:
                if instance['StorageType'] == 'aurora':
                    client.stop_db_cluster(DBClusterIdentifier=instance['DBClusterIdentifier'])
                else:
                    client.stop_db_instance(DBInstanceIdentifier=instance['DBInstanceIdentifier'])
            except Exception as e:
                print('Failed to stop instance {0}: {1}'.format(instance['DBInstanceIdentifier'], e))
  
    try:
        cluster_identifiers = os.environ['CLUSTER_IDENTIFIERS']
    except KeyError:
        print('Environment variable CLUSTER_IDENTIFIERS not set')
    else:
        clusters = cluster_identifiers.split(',')
        for cluster in client.describe_db_clusters()['DBClusters']:
            if cluster['DBClusterIdentifier'] in clusters:
                if cluster['Status'] != 'available':
                    print('Skipping instance, not available: {0}'.format(cluster['DBClusterIdentifier']))
                    continue
  
                print('Stopping instance {0}'.format(cluster['DBClusterIdentifier']))
                try:
                    client.stop_db_cluster(DBClusterIdentifier=cluster['DBClusterIdentifier'])
                except Exception as e:
                    print('Failed to stop cluster {0}: {1}'.format(cluster['DBClusterIdentifier'], e))
---
# Source: rds-downscaler/templates/cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: my-rds-downscaler
  labels:
    app.kubernetes.io/name: rds-downscaler
    helm.sh/chart: rds-downscaler-1.0.4
    app.kubernetes.io/instance: my-rds-downscaler
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "00 20 * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 10
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          annotations:
            checksum/config1: 096c7c1e8894b2337bd3e74fa19aff5c3337308161401e6bfdf70c67be249e8f
          labels:
            app.kubernetes.io/name: rds-downscaler
            app.kubernetes.io/instance: my-rds-downscaler
        spec:
          serviceAccount: 
          serviceAccountName: 
          restartPolicy: Never
          containers:
            - name: app
              image: "python:3.7.0-alpine3.8"
              command: ["sh", "/config/docker-entrypoint.sh"]
              args: ["/usr/local/bin/python", "-u", "/config/run.py"]
              imagePullPolicy: IfNotPresent
              env:
              resources:
                limits:
                  cpu: 500m
                  memory: 128Mi
                requests:
                  cpu: 10m
                  memory: 128Mi
              volumeMounts:
              - mountPath: /config
                name: config
          volumes:
          - name: config
            configMap:
              name: my-rds-downscaler
